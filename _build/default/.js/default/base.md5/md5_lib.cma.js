// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Md5_lib
//# unitInfo: Requires: Stdlib__Digest
//# shape: Md5_lib:[F(2)*,N,F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),F(1),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Digest = global_data.Stdlib__Digest,
    Assert_failure = global_data.Assert_failure,
    empty = Stdlib_Digest[3].call(null, cst);
   function make(s){return s === empty ? empty : s;}
   var compare = runtime.caml_compare, a = [0, "md5/src/md5_lib.ml", 12, 2];
   function to_binary(s){return s;}
   function to_binary_local(s){return s;}
   function of_binary_exn(s){
    if(runtime.caml_ml_string_length(s) === 16) return make(s);
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   var to_hex = Stdlib_Digest[11];
   function of_hex_exn(s){return make(Stdlib_Digest[13].call(null, s));}
   function string(s){return make(Stdlib_Digest[3].call(null, s));}
   function bytes(s){return make(Stdlib_Digest[4].call(null, s));}
   function subbytes(bytes, pos, len){
    return make(Stdlib_Digest[6].call(null, bytes, pos, len));
   }
   var
    Md5_lib =
      [0,
       compare,
       16,
       to_binary,
       to_binary_local,
       of_binary_exn,
       make,
       to_hex,
       of_hex_exn,
       string,
       bytes,
       subbytes];
   runtime.caml_register_global(4, Md5_lib, "Md5_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWQ1X2xpYi5jbWEuanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjEwLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6Im1kNV9saWIuY21hLmpzIiwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9Vc2Vycy9kcy9Eb2N1bWVudHMvcGF0Y2h3b3JrL19vcGFtL2xpYi9iYXNlL21kNS9tZDVfbGliLm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwidHlwZSB0ID0gc3RyaW5nXG5cbigqIFNoYXJlIHRoZSBkaWdlc3Qgb2YgdGhlIGVtcHR5IHN0cmluZyAqKVxubGV0IGVtcHR5ID0gRGlnZXN0LnN0cmluZyBcIlwiXG5sZXQgbWFrZSBzID0gaWYgcyA9IGVtcHR5IHRoZW4gZW1wdHkgZWxzZSBzXG5sZXQgY29tcGFyZSA9IGNvbXBhcmVcbmxldCBsZW5ndGggPSAxNlxubGV0IHRvX2JpbmFyeSBzID0gc1xubGV0IHRvX2JpbmFyeV9sb2NhbCBzID0gc1xuXG5sZXQgb2ZfYmluYXJ5X2V4biBzID1cbiAgYXNzZXJ0IChTdHJpbmcubGVuZ3RoIHMgPSBsZW5ndGgpO1xuICBtYWtlIHNcbjs7XG5cbmxldCB1bnNhZmVfb2ZfYmluYXJ5ID0gbWFrZVxubGV0IHRvX2hleCA9IERpZ2VzdC50b19oZXhcbmxldCBvZl9oZXhfZXhuIHMgPSBtYWtlIChEaWdlc3QuZnJvbV9oZXggcylcbmxldCBzdHJpbmcgcyA9IG1ha2UgKERpZ2VzdC5zdHJpbmcgcylcbmxldCBieXRlcyBzID0gbWFrZSAoRGlnZXN0LmJ5dGVzIHMpXG5sZXQgc3ViYnl0ZXMgYnl0ZXMgfnBvcyB+bGVuID0gbWFrZSAoRGlnZXN0LnN1YmJ5dGVzIGJ5dGVzIHBvcyBsZW4pXG4iXSwibmFtZXMiOlsicnVudGltZSIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImdsb2JhbF9kYXRhIiwiY3N0IiwiU3RkbGliX0RpZ2VzdCIsIkFzc2VydF9mYWlsdXJlIiwiZW1wdHkiLCJtYWtlIiwicyIsImNvbXBhcmUiLCJ0b19iaW5hcnkiLCJ0b19iaW5hcnlfbG9jYWwiLCJvZl9iaW5hcnlfZXhuIiwidG9faGV4Iiwib2ZfaGV4X2V4biIsInN0cmluZyIsImJ5dGVzIiwic3ViYnl0ZXMiLCJwb3MiLCJsZW4iLCJNZDVfbGliIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLDhCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsUUNHWTtBQUFBLFlBQUFDLEtBQUFDLEdBQ2EsOEJBQWtCO0FBQUEsT0FBQUMsVUFEZjtBQUFBLFlBQUFDLFVBQUFGLEdBSVYsU0FBQztBQUFBLFlBQUFHLGdCQUFBSCxHQUNLLFNBQUM7QUFBQSxZQUFBSSxjQUFBSjtBQUFBQSxJQUd2Qiw0Q0FDQSxjQUFNO0FBQUEsSUFETjtBQUFBLEdBQ007QUFBQSxPQUFBSyxTQVRvQjtBQUFBLFlBQUFDLFdBQUFOLEdBY0osT0FBbUIsS0FBbkIsZ0NBQW1CO0FBQUEsWUFBQU8sT0FBQVAsR0FDdkIsT0FBaUIsS0FBakIsK0JBQWlCO0FBQUEsWUFBQVEsTUFBQVIsR0FDbEIsT0FBZ0IsS0FBaEIsK0JBQWdCO0FBQUEsWUFBQVMsU0FBQUQsT0FBQUUsS0FBQUM7QUFBQUEsSUFDQyxPQUErQixLQUEvQiw2Q0FBK0I7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFqQnZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFREg1QiIsImlnbm9yZUxpc3QiOlswXX19XX0=
