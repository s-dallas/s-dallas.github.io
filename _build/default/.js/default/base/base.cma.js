// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Base__
//# shape: Base__:[[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base = [0], Base$0 = [0, Base];
   runtime.caml_register_global(0, Base$0, "Base__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bool0
//# shape: Base__Bool0:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Bool0 = [0];
   runtime.caml_register_global(0, Base_Bool0, "Base__Bool0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Globalize
//# shape: Base__Globalize:[F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2),F(2),F(3),F(2)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_dup = runtime.caml_obj_dup;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function globalize_bool(b){return b;}
   function globalize_char(c){return c;}
   function globalize_unit(u){return u;}
   function globalize_array(param, a){return caml_obj_dup(a);}
   function globalize_list(f, param){
    if(! param) return 0;
    var xs = param[2], x = param[1], a = globalize_list(f, xs);
    return [0, caml_call1(f, x), a];
   }
   function globalize_option(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function globalize_result(globalize_a, globalize_b, t){
    if(0 === t[0]){var a = t[1]; return [0, caml_call1(globalize_a, a)];}
    var b = t[1];
    return [1, caml_call1(globalize_b, b)];
   }
   function globalize_ref(param, r){return [0, r[1]];}
   function globalize_lazy_t(param, t){return t;}
   var
    Base_Globalize =
      [0,
       globalize_bool,
       globalize_char,
       caml_obj_dup,
       function(a){return a;},
       caml_obj_dup,
       caml_obj_dup,
       caml_obj_dup,
       caml_obj_dup,
       caml_obj_dup,
       globalize_unit,
       globalize_array,
       globalize_lazy_t,
       globalize_list,
       globalize_option,
       globalize_result,
       globalize_ref];
   runtime.caml_register_global(0, Base_Globalize, "Base__Globalize");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Poly0
//# unitInfo: Requires: Base__Bool0
//# shape: Base__Poly0:[F(2)*,F(2)*,F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_compare = runtime.caml_compare;
   function descending(x, y){return caml_compare(y, x);}
   function max(x, y){
    return runtime.caml_csel_value(runtime.caml_greaterequal(x, y), x, y);
   }
   function min(x, y){
    return runtime.caml_csel_value(runtime.caml_lessequal(x, y), x, y);
   }
   var Base_Poly0 = [0, caml_compare, descending, min, max];
   runtime.caml_register_global(0, Base_Poly0, "Base__Poly0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Import0
//# unitInfo: Requires: Base__Bool0, Base__Poly0, Shadow_stdlib, Stdlib, Stdlib__MoreLabels, Stdlib__StdLabels
//# shape: Base__Import0:[N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N,[F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,N,N,F(1)*,N,N,N,N,N,N,F(2)*,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),F(2),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),N,F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N,[F(2),F(1),F(1),F(1),F(3),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(3),F(1)*,F(1),F(1),F(2),F(1),F(1)*->F(1),F(1)*->F(1),F(1)*->F(1),F(2),F(2),F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(3)*,F(4)*],[F(1)*],[F(1)*]],F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)*,[F(2)*,F(2)*,F(2),F(2)],F(2)*,F(2)*,F(2),F(2),[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],F(2),F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1),F(1)*,F(1),F(1)*,F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_compare = runtime.caml_bytes_compare,
    caml_bytes_equal = runtime.caml_bytes_equal,
    caml_bytes_greaterequal = runtime.caml_bytes_greaterequal,
    caml_bytes_lessequal = runtime.caml_bytes_lessequal,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_notequal = runtime.caml_notequal,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_greaterequal = runtime.caml_string_greaterequal,
    caml_string_lessequal = runtime.caml_string_lessequal,
    global_data = runtime.caml_get_global_data(),
    Base_Poly0 = global_data.Base__Poly0,
    Shadow_stdlib = global_data.Shadow_stdlib,
    Stdlib = global_data.Stdlib,
    Stdlib_MoreLabels = global_data.Stdlib__MoreLabels,
    Exit = Shadow_stdlib[3],
    Not_found = Shadow_stdlib[4],
    max_int = Shadow_stdlib[8],
    min_int = Shadow_stdlib[9],
    infinity = Shadow_stdlib[11],
    neg_infinity = Shadow_stdlib[12],
    nan = Shadow_stdlib[13],
    max_float = Shadow_stdlib[14],
    min_float = Shadow_stdlib[15],
    epsilon_float = Shadow_stdlib[16],
    char_of_int = Shadow_stdlib[18],
    string_of_bool = Shadow_stdlib[19],
    bool_of_string_opt = Shadow_stdlib[20],
    bool_of_string = Shadow_stdlib[21],
    string_of_int = Shadow_stdlib[22],
    int_of_string_opt = Shadow_stdlib[23],
    string_of_float = Shadow_stdlib[24],
    float_of_string_opt = Shadow_stdlib[25],
    stdin = Shadow_stdlib[27],
    stdout = Shadow_stdlib[28],
    stderr = Shadow_stdlib[29],
    print_char = Shadow_stdlib[30],
    print_string = Shadow_stdlib[31],
    print_bytes = Shadow_stdlib[32],
    print_int = Shadow_stdlib[33],
    print_float = Shadow_stdlib[34],
    print_endline = Shadow_stdlib[35],
    print_newline = Shadow_stdlib[36],
    prerr_char = Shadow_stdlib[37],
    prerr_string = Shadow_stdlib[38],
    prerr_bytes = Shadow_stdlib[39],
    prerr_int = Shadow_stdlib[40],
    prerr_float = Shadow_stdlib[41],
    prerr_endline = Shadow_stdlib[42],
    prerr_newline = Shadow_stdlib[43],
    read_line = Shadow_stdlib[44],
    read_int_opt = Shadow_stdlib[45],
    read_int = Shadow_stdlib[46],
    read_float_opt = Shadow_stdlib[47],
    read_float = Shadow_stdlib[48],
    open_out = Shadow_stdlib[49],
    open_out_bin = Shadow_stdlib[50],
    open_out_gen = Shadow_stdlib[51],
    flush = Shadow_stdlib[52],
    flush_all = Shadow_stdlib[53],
    output_char = Shadow_stdlib[54],
    output_string = Shadow_stdlib[55],
    output_bytes = Shadow_stdlib[56],
    output = Shadow_stdlib[57],
    output_substring = Shadow_stdlib[58],
    output_byte = Shadow_stdlib[59],
    output_binary_int = Shadow_stdlib[60],
    output_value = Shadow_stdlib[61],
    seek_out = Shadow_stdlib[62],
    pos_out = Shadow_stdlib[63],
    out_channel_length = Shadow_stdlib[64],
    close_out = Shadow_stdlib[65],
    close_out_noerr = Shadow_stdlib[66],
    set_binary_mode_out = Shadow_stdlib[67],
    open_in = Shadow_stdlib[68],
    open_in_bin = Shadow_stdlib[69],
    open_in_gen = Shadow_stdlib[70],
    input_char = Shadow_stdlib[71],
    input_line = Shadow_stdlib[72],
    input = Shadow_stdlib[73],
    really_input = Shadow_stdlib[74],
    really_input_string = Shadow_stdlib[75],
    input_byte = Shadow_stdlib[76],
    input_binary_int = Shadow_stdlib[77],
    input_value = Shadow_stdlib[78],
    seek_in = Shadow_stdlib[79],
    pos_in = Shadow_stdlib[80],
    in_channel_length = Shadow_stdlib[81],
    close_in = Shadow_stdlib[82],
    close_in_noerr = Shadow_stdlib[83],
    set_binary_mode_in = Shadow_stdlib[84],
    string_of_format = Shadow_stdlib[85],
    symbol = Shadow_stdlib[86],
    exit = Shadow_stdlib[87],
    at_exit = Shadow_stdlib[88],
    valid_float_lexem = Shadow_stdlib[89],
    unsafe_really_input = Shadow_stdlib[90],
    do_at_exit = Shadow_stdlib[91],
    do_domain_local_at_exit = Shadow_stdlib[92],
    invalid_arg = Stdlib[1],
    failwith = Stdlib[2],
    Exit$0 = Stdlib[3],
    Match_failure = Stdlib[4],
    Assert_failure = Stdlib[5],
    Invalid_argument = Stdlib[6],
    Failure = Stdlib[7],
    Not_found$0 = Stdlib[8],
    Out_of_memory = Stdlib[9],
    Stack_overflow = Stdlib[10],
    Sys_error = Stdlib[11],
    End_of_file = Stdlib[12],
    Division_by_zero = Stdlib[13],
    Sys_blocked_io = Stdlib[14],
    Undefined_recursive_module = Stdlib[15],
    min = Stdlib[16],
    max = Stdlib[17],
    abs = Stdlib[18],
    max_int$0 = Stdlib[19],
    min_int$0 = Stdlib[20],
    lnot = Stdlib[21],
    infinity$0 = Stdlib[22],
    neg_infinity$0 = Stdlib[23],
    nan$0 = Stdlib[24],
    max_float$0 = Stdlib[25],
    min_float$0 = Stdlib[26],
    epsilon_float$0 = Stdlib[27],
    symbol_concat = Stdlib[28],
    char_of_int$0 = Stdlib[29],
    string_of_bool$0 = Stdlib[30],
    bool_of_string_opt$0 = Stdlib[31],
    bool_of_string$0 = Stdlib[32],
    string_of_int$0 = Stdlib[33],
    int_of_string_opt$0 = Stdlib[34],
    string_of_float$0 = Stdlib[35],
    float_of_string_opt$0 = Stdlib[36],
    symbol$0 = Stdlib[37],
    stdin$0 = Stdlib[38],
    stdout$0 = Stdlib[39],
    stderr$0 = Stdlib[40],
    print_char$0 = Stdlib[41],
    print_string$0 = Stdlib[42],
    print_bytes$0 = Stdlib[43],
    print_int$0 = Stdlib[44],
    print_float$0 = Stdlib[45],
    print_endline$0 = Stdlib[46],
    print_newline$0 = Stdlib[47],
    prerr_char$0 = Stdlib[48],
    prerr_string$0 = Stdlib[49],
    prerr_bytes$0 = Stdlib[50],
    prerr_int$0 = Stdlib[51],
    prerr_float$0 = Stdlib[52],
    prerr_endline$0 = Stdlib[53],
    prerr_newline$0 = Stdlib[54],
    read_line$0 = Stdlib[55],
    read_int_opt$0 = Stdlib[56],
    read_int$0 = Stdlib[57],
    read_float_opt$0 = Stdlib[58],
    read_float$0 = Stdlib[59],
    open_out$0 = Stdlib[60],
    open_out_bin$0 = Stdlib[61],
    open_out_gen$0 = Stdlib[62],
    flush$0 = Stdlib[63],
    flush_all$0 = Stdlib[64],
    output_char$0 = Stdlib[65],
    output_string$0 = Stdlib[66],
    output_bytes$0 = Stdlib[67],
    output$0 = Stdlib[68],
    output_substring$0 = Stdlib[69],
    output_byte$0 = Stdlib[70],
    output_binary_int$0 = Stdlib[71],
    output_value$0 = Stdlib[72],
    seek_out$0 = Stdlib[73],
    pos_out$0 = Stdlib[74],
    out_channel_length$0 = Stdlib[75],
    close_out$0 = Stdlib[76],
    close_out_noerr$0 = Stdlib[77],
    set_binary_mode_out$0 = Stdlib[78],
    open_in$0 = Stdlib[79],
    open_in_bin$0 = Stdlib[80],
    open_in_gen$0 = Stdlib[81],
    input_char$0 = Stdlib[82],
    input_line$0 = Stdlib[83],
    input$0 = Stdlib[84],
    really_input$0 = Stdlib[85],
    really_input_string$0 = Stdlib[86],
    input_byte$0 = Stdlib[87],
    input_binary_int$0 = Stdlib[88],
    input_value$0 = Stdlib[89],
    seek_in$0 = Stdlib[90],
    pos_in$0 = Stdlib[91],
    in_channel_length$0 = Stdlib[92],
    close_in$0 = Stdlib[93],
    close_in_noerr$0 = Stdlib[94],
    set_binary_mode_in$0 = Stdlib[95],
    LargeFile = Stdlib[96],
    string_of_format$0 = Stdlib[97],
    symbol$1 = Stdlib[98],
    exit$0 = Stdlib[99],
    at_exit$0 = Stdlib[100],
    valid_float_lexem$0 = Stdlib[101],
    unsafe_really_input$0 = Stdlib[102],
    do_at_exit$0 = Stdlib[103],
    do_domain_local_at_exit$0 = Stdlib[104],
    Hashtbl = Stdlib_MoreLabels[1],
    Map = Stdlib_MoreLabels[2],
    Set = Stdlib_MoreLabels[3],
    Stdlib$0 =
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found$0,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int$0,
       min_int$0,
       lnot,
       infinity$0,
       neg_infinity$0,
       nan$0,
       max_float$0,
       min_float$0,
       epsilon_float$0,
       symbol_concat,
       char_of_int$0,
       string_of_bool$0,
       bool_of_string_opt$0,
       bool_of_string$0,
       string_of_int$0,
       int_of_string_opt$0,
       string_of_float$0,
       float_of_string_opt$0,
       symbol$0,
       stdin$0,
       stdout$0,
       stderr$0,
       print_char$0,
       print_string$0,
       print_bytes$0,
       print_int$0,
       print_float$0,
       print_endline$0,
       print_newline$0,
       prerr_char$0,
       prerr_string$0,
       prerr_bytes$0,
       prerr_int$0,
       prerr_float$0,
       prerr_endline$0,
       prerr_newline$0,
       read_line$0,
       read_int_opt$0,
       read_int$0,
       read_float_opt$0,
       read_float$0,
       open_out$0,
       open_out_bin$0,
       open_out_gen$0,
       flush$0,
       flush_all$0,
       output_char$0,
       output_string$0,
       output_bytes$0,
       output$0,
       output_substring$0,
       output_byte$0,
       output_binary_int$0,
       output_value$0,
       seek_out$0,
       pos_out$0,
       out_channel_length$0,
       close_out$0,
       close_out_noerr$0,
       set_binary_mode_out$0,
       open_in$0,
       open_in_bin$0,
       open_in_gen$0,
       input_char$0,
       input_line$0,
       input$0,
       really_input$0,
       really_input_string$0,
       input_byte$0,
       input_binary_int$0,
       input_value$0,
       seek_in$0,
       pos_in$0,
       in_channel_length$0,
       close_in$0,
       close_in_noerr$0,
       set_binary_mode_in$0,
       LargeFile,
       string_of_format$0,
       symbol$1,
       exit$0,
       at_exit$0,
       valid_float_lexem$0,
       unsafe_really_input$0,
       do_at_exit$0,
       do_domain_local_at_exit$0,
       Hashtbl,
       Map,
       Set];
   function bool_to_int(x){return x;}
   function symbol$2(b, a){return b !== a ? 1 : 0;}
   var symbol$3 = runtime.caml_mul;
   function symbol$4(b, a){return Math.pow(b, a);}
   function symbol$5(b, a){return b * a;}
   function symbol$6(b, a){return b + a | 0;}
   function symbol$7(b, a){return b + a;}
   function symbol$8(b, a){return b - a | 0;}
   function symbol$9(b, a){return b - a;}
   var symbol$10 = runtime.caml_div;
   function symbol$11(b, a){return b / a;}
   var ascending = caml_int_compare;
   function descending(x, y){return caml_int_compare(y, x);}
   function max$0(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$0(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Int_replace_polymorphic_compar = [0, ascending, descending, max$0, min$0],
    symbol$12 = caml_lessthan,
    symbol$13 = caml_lessequal,
    symbol$14 = caml_notequal,
    symbol$15 = caml_equal,
    symbol$16 = caml_greaterthan,
    symbol$17 = caml_greaterequal;
   function ascending$0(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$0(x, y){return Base_Poly0[2].call(null, x, y);}
   var
    compare = caml_int_compare,
    compare_local = caml_int_compare,
    equal = caml_equal,
    equal_local = caml_equal;
   function max$1(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$1(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Int32_replace_polymorphic_comp =
      [0,
       symbol$12,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       ascending$0,
       descending$0,
       compare,
       compare_local,
       equal,
       equal_local,
       max$1,
       min$1];
   function ascending$1(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$1(x, y){return Base_Poly0[2].call(null, x, y);}
   function max$2(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$2(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Int64_replace_polymorphic_comp =
      [0, ascending$1, descending$1, max$2, min$2],
    symbol$18 = caml_lessthan,
    symbol$19 = caml_lessequal,
    symbol$20 = caml_notequal,
    symbol$21 = caml_equal,
    symbol$22 = caml_greaterthan,
    symbol$23 = caml_greaterequal;
   function ascending$2(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$2(x, y){return Base_Poly0[2].call(null, x, y);}
   var
    compare$0 = caml_int_compare,
    compare_local$0 = caml_int_compare,
    equal$0 = caml_equal,
    equal_local$0 = caml_equal;
   function max$3(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$3(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Nativeint_replace_polymorphic_ =
      [0,
       symbol$18,
       symbol$19,
       symbol$20,
       symbol$21,
       symbol$22,
       symbol$23,
       ascending$2,
       descending$2,
       compare$0,
       compare_local$0,
       equal$0,
       equal_local$0,
       max$3,
       min$3];
   function symbol$24(x, y){return x < y ? 1 : 0;}
   function symbol$25(x, y){return x <= y ? 1 : 0;}
   function symbol$26(x, y){return x !== y ? 1 : 0;}
   function symbol$27(x, y){return x === y ? 1 : 0;}
   function symbol$28(x, y){return y < x ? 1 : 0;}
   function symbol$29(x, y){return y <= x ? 1 : 0;}
   function ascending$3(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$3(x, y){return Base_Poly0[2].call(null, x, y);}
   var compare$1 = caml_int_compare, compare_local$1 = caml_int_compare;
   function equal$1(x, y){return x === y ? 1 : 0;}
   function equal_local$1(x, y){return x === y ? 1 : 0;}
   function max$4(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$4(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Bool_replace_polymorphic_compa =
      [0,
       symbol$24,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       ascending$3,
       descending$3,
       compare$1,
       compare_local$1,
       equal$1,
       equal_local$1,
       max$4,
       min$4];
   function symbol$30(x, y){return x < y ? 1 : 0;}
   function symbol$31(x, y){return x <= y ? 1 : 0;}
   function symbol$32(x, y){return x !== y ? 1 : 0;}
   function symbol$33(x, y){return x === y ? 1 : 0;}
   function symbol$34(x, y){return y < x ? 1 : 0;}
   function symbol$35(x, y){return y <= x ? 1 : 0;}
   function ascending$4(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$4(x, y){return Base_Poly0[2].call(null, x, y);}
   var compare$2 = caml_int_compare, compare_local$2 = caml_int_compare;
   function equal$2(x, y){return x === y ? 1 : 0;}
   function equal_local$2(x, y){return x === y ? 1 : 0;}
   function max$5(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$5(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Char_replace_polymorphic_compa =
      [0,
       symbol$30,
       symbol$31,
       symbol$32,
       symbol$33,
       symbol$34,
       symbol$35,
       ascending$4,
       descending$4,
       compare$2,
       compare_local$2,
       equal$2,
       equal_local$2,
       max$5,
       min$5];
   function symbol$36(x, y){return x < y ? 1 : 0;}
   function symbol$37(x, y){return x <= y ? 1 : 0;}
   function symbol$38(x, y){return x !== y ? 1 : 0;}
   function symbol$39(x, y){return x === y ? 1 : 0;}
   function symbol$40(x, y){return y < x ? 1 : 0;}
   function symbol$41(x, y){return y <= x ? 1 : 0;}
   var ascending$5 = caml_int_compare;
   function descending$5(x, y){return caml_int_compare(y, x);}
   var compare$3 = caml_int_compare;
   function equal$3(x, y){return x === y ? 1 : 0;}
   var compare_local$3 = caml_int_compare;
   function equal_local$3(x, y){return x === y ? 1 : 0;}
   function max$6(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$6(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Uchar_replace_polymorphic_comp =
      [0,
       symbol$36,
       symbol$37,
       symbol$38,
       symbol$39,
       symbol$40,
       symbol$41,
       ascending$5,
       descending$5,
       compare$3,
       equal$3,
       compare_local$3,
       equal_local$3,
       max$6,
       min$6];
   function ascending$6(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$6(x, y){return Base_Poly0[2].call(null, x, y);}
   var compare_local$4 = runtime.caml_float_compare;
   function equal_local$4(x, y){return x === y ? 1 : 0;}
   function max$7(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$7(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Float_replace_polymorphic_comp =
      [0,
       ascending$6,
       descending$6,
       compare_local$4,
       equal_local$4,
       max$7,
       min$7],
    symbol$42 = runtime.caml_string_lessthan,
    symbol$43 = caml_string_lessequal,
    symbol$44 = runtime.caml_string_notequal,
    symbol$45 = caml_string_equal,
    symbol$46 = runtime.caml_string_greaterthan,
    symbol$47 = caml_string_greaterequal;
   function ascending$7(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$7(x, y){return Base_Poly0[2].call(null, x, y);}
   var
    compare$4 = caml_string_compare,
    compare_local$5 = caml_string_compare,
    equal$4 = caml_string_equal,
    equal_local$5 = caml_string_equal;
   function max$8(x, y){
    return runtime.caml_csel_value(caml_string_greaterequal(x, y), x, y);
   }
   function min$8(x, y){
    return runtime.caml_csel_value(caml_string_lessequal(x, y), x, y);
   }
   var
    String_replace_polymorphic_com =
      [0,
       symbol$42,
       symbol$43,
       symbol$44,
       symbol$45,
       symbol$46,
       symbol$47,
       ascending$7,
       descending$7,
       compare$4,
       compare_local$5,
       equal$4,
       equal_local$5,
       max$8,
       min$8],
    symbol$48 = runtime.caml_bytes_lessthan,
    symbol$49 = caml_bytes_lessequal,
    symbol$50 = runtime.caml_bytes_notequal,
    symbol$51 = caml_bytes_equal,
    symbol$52 = runtime.caml_bytes_greaterthan,
    symbol$53 = caml_bytes_greaterequal;
   function ascending$8(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending$8(x, y){return Base_Poly0[2].call(null, x, y);}
   var
    compare$5 = caml_bytes_compare,
    compare_local$6 = caml_bytes_compare,
    equal$5 = caml_bytes_equal,
    equal_local$6 = caml_bytes_equal;
   function max$9(x, y){
    return runtime.caml_csel_value(caml_bytes_greaterequal(x, y), x, y);
   }
   function min$9(x, y){
    return runtime.caml_csel_value(caml_bytes_lessequal(x, y), x, y);
   }
   var
    Bytes_replace_polymorphic_comp =
      [0,
       symbol$48,
       symbol$49,
       symbol$50,
       symbol$51,
       symbol$52,
       symbol$53,
       ascending$8,
       descending$8,
       compare$5,
       compare_local$6,
       equal$5,
       equal_local$6,
       max$9,
       min$9];
   function symbol$54(a){return - a | 0;}
   function symbol$55(a){return - a;}
   function asr(b, a){return b >> a;}
   function land(b, a){return b & a;}
   function lor(b, a){return b | a;}
   function lsl(b, a){return b << a;}
   function lsr(b, a){return b >>> a | 0;}
   function lxor(b, a){return b ^ a;}
   var mod = runtime.caml_mod;
   function fst(a){return a[1];}
   function snd(a){return a[2];}
   var
    float_of_string = runtime.caml_float_of_string,
    am_testing = runtime.Base_am_testing(0),
    Base_Import0 =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Stdlib$0,
       bool_to_int,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       Int_replace_polymorphic_compar,
       ascending,
       descending,
       max$0,
       min$0,
       Int32_replace_polymorphic_comp,
       Int64_replace_polymorphic_comp,
       Nativeint_replace_polymorphic_,
       Bool_replace_polymorphic_compa,
       Char_replace_polymorphic_compa,
       Uchar_replace_polymorphic_comp,
       Float_replace_polymorphic_comp,
       String_replace_polymorphic_com,
       Bytes_replace_polymorphic_comp,
       symbol$0,
       symbol_concat,
       symbol$54,
       symbol$55,
       asr,
       land,
       lnot,
       lor,
       lsl,
       lsr,
       lxor,
       mod,
       abs,
       failwith,
       fst,
       invalid_arg,
       snd,
       float_of_string,
       am_testing];
   runtime.caml_register_global(4, Base_Import0, "Base__Import0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int0
//# unitInfo: Requires: Stdlib
//# shape: Base__Int0:[F(1)*,F(1),F(1),F(1)*,F(1)*,N,N,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    to_string = Stdlib[33],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib[34];
   function to_float(a){return a;}
   function of_float(a){return a | 0;}
   var max_value = Stdlib[19], min_value = Stdlib[20];
   function succ(a){return a + 1 | 0;}
   function pred(a){return a - 1 | 0;}
   var
    Base_Int0 =
      [0,
       to_string,
       of_string,
       of_string_opt,
       to_float,
       of_float,
       max_value,
       min_value,
       succ,
       pred];
   runtime.caml_register_global(1, Base_Int0, "Base__Int0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Printf
//# unitInfo: Requires: Base__Import0, Stdlib__Printf
//# shape: Base__Printf:[F(2),F(1),F(2),F(2),F(3),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Stdlib_Printf = global_data.Stdlib__Printf,
    sprintf = Stdlib_Printf[4],
    bprintf = Stdlib_Printf[5],
    ifprintf = Stdlib_Printf[6],
    ksprintf = Stdlib_Printf[10],
    kbprintf = Stdlib_Printf[11];
   function failwithf(fmt){
    return ksprintf
            (function(s, param){return Base_Import0[124].call(null, s);}, fmt);
   }
   function invalid_argf(fmt){
    return ksprintf
            (function(s, param){return Base_Import0[126].call(null, s);}, fmt);
   }
   var
    Base_Printf =
      [0,
       ifprintf,
       sprintf,
       bprintf,
       ksprintf,
       kbprintf,
       failwithf,
       invalid_argf];
   runtime.caml_register_global(2, Base_Printf, "Base__Printf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sys0
//# unitInfo: Requires: Base__Import0, Base__Printf, Stdlib__Sys
//# shape: Base__Sys0:[[N],N,N,N,N,N,N,N,N,N,N,F(1),F(1),N,F(1),N,F(1),F(1),F(2)*,F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Sys = global_data.Stdlib__Sys,
    backend_type = Stdlib_Sys[5],
    interactive = Stdlib_Sys[3],
    os_type = Stdlib_Sys[4],
    unix = Stdlib_Sys[6],
    win32 = Stdlib_Sys[7],
    cygwin = Stdlib_Sys[8],
    word_size_in_bits = Stdlib_Sys[9],
    int_size_in_bits = Stdlib_Sys[10],
    big_endian = Stdlib_Sys[11],
    max_string_length = Stdlib_Sys[12],
    max_array_length = Stdlib_Sys[13],
    runtime_variant = runtime.caml_runtime_variant,
    runtime_parameters = runtime.caml_runtime_parameters,
    argv = caml_sys_argv(0);
   function get_argv(param){return caml_sys_argv(0);}
   var
    ocaml_version = Stdlib_Sys[46],
    enable_runtime_warnings = Stdlib_Sys[49],
    runtime_warnings_enabled = Stdlib_Sys[50],
    a =
      [0,
       [11,
        "Sys.getenv_exn: environment variable ",
        [2, 0, [11, " is not set", 0]]],
       "Sys.getenv_exn: environment variable %s is not set"];
   function Make_immediate64(b, a){return Stdlib_Sys[51][1].call(null, b, a);}
   function getenv_exn(var$){
    try{var b = caml_sys_getenv(var$); return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Base_Import0[85][8])
      return caml_call2(Base_Printf[6].call(null, a), var$, 0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function getenv(var$){
    try{var x = caml_sys_getenv(var$);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Base_Import0[85][8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, x];
   }
   var
    Break = Stdlib_Sys[44],
    Base_Sys0 =
      [0,
       backend_type,
       interactive,
       os_type,
       unix,
       win32,
       cygwin,
       word_size_in_bits,
       int_size_in_bits,
       big_endian,
       max_string_length,
       max_array_length,
       runtime_variant,
       runtime_parameters,
       argv,
       get_argv,
       ocaml_version,
       enable_runtime_warnings,
       runtime_warnings_enabled,
       Make_immediate64,
       getenv_exn,
       getenv,
       Break];
   runtime.caml_register_global(4, Base_Sys0, "Base__Sys0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array0
//# unitInfo: Requires: Base__Import0, Base__Int0, Base__Printf, Base__Sys0, Stdlib, Stdlib__ArrayLabels
//# shape: Base__Array0:[F(1),[],N,F(2)*,F(2)*,F(1)*,F(2)*,F(5),F(1)*,F(1)*,F(4),F(2),F(3),F(1),F(3),F(1),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Base_Import0 = global_data.Base__Import0,
    Base_Int0 = global_data.Base__Int0;
   global_data.Stdlib;
   var
    Base_Printf = global_data.Base__Printf,
    Base_Sys0 = global_data.Base__Sys0,
    invalid_argf = Base_Printf[7],
    Array = [0],
    max_length = Base_Sys0[11],
    create = caml_make_vect,
    create_local = caml_make_vect,
    create_float_uninitialized = runtime.caml_make_float_vect,
    append = Stdlib_ArrayLabels[4],
    blit = Stdlib_ArrayLabels[9],
    concat = Stdlib_ArrayLabels[5],
    copy = Stdlib_ArrayLabels[7],
    fill = Stdlib_ArrayLabels[8],
    cst_Array_init = "Array.init";
   function init(len, f){
    if(0 === len) return [0];
    if(0 > len) return Base_Import0[126].call(null, cst_Array_init);
    var
     x = caml_call1(f, 0),
     res = caml_make_vect(len, x),
     a = Base_Int0[9].call(null, len),
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      res[i + 1] = caml_call1(f, i);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return res;
   }
   var
    make_matrix = Stdlib_ArrayLabels[2],
    of_list = Stdlib_ArrayLabels[11],
    sub = Stdlib_ArrayLabels[6],
    to_list = Stdlib_ArrayLabels[10];
   function fold(t, init, f){
    var
     r = [0, init],
     a = Base_Import0[93].call(null, t.length - 1, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      r[1] = caml_call2(f, r[1], t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r[1];
   }
   function fold_right(t, f, init){
    var r = [0, init], a = Base_Import0[93].call(null, t.length - 1, 1);
    if(a >= 0){
     var i = a;
     for(;;){
      r[1] = caml_call2(f, t[i + 1], r[1]);
      var b = i - 1 | 0;
      if(0 === i) break;
      i = b;
     }
    }
    return r[1];
   }
   function iter(t, f){
    var a = Base_Import0[93].call(null, t.length - 1, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call1(f, t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function iteri(t, f){
    var a = Base_Import0[93].call(null, t.length - 1, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i, t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function map(t, f){
    var len = t.length - 1;
    if(0 === len) return [0];
    var
     x = caml_call1(f, t[1]),
     r = caml_make_vect(len, x),
     a = Base_Import0[93].call(null, len, 1),
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      r[i + 1] = caml_call1(f, t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   function mapi(t, f){
    var len = t.length - 1;
    if(0 === len) return [0];
    var
     x = caml_call2(f, 0, t[1]),
     r = caml_make_vect(len, x),
     a = Base_Import0[93].call(null, len, 1),
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      r[i + 1] = caml_call2(f, i, t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   function stable_sort(t, compare){
    return Stdlib_ArrayLabels[36].call(null, compare, t);
   }
   function swap(t, i, j){
    var
     elt_i = caml_check_bound(t, i)[i + 1],
     elt_j = caml_check_bound(t, j)[j + 1];
    t[i + 1] = elt_j;
    t[j + 1] = elt_i;
    return 0;
   }
   var
    Base_Array0 =
      [0,
       invalid_argf,
       Array,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       append,
       blit,
       concat,
       copy,
       fill,
       init,
       make_matrix,
       of_list,
       sub,
       to_list,
       fold,
       fold_right,
       iter,
       iteri,
       map,
       mapi,
       stable_sort,
       swap];
   runtime.caml_register_global(10, Base_Array0, "Base__Array0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Char0
//# unitInfo: Requires: Base__Printf, Stdlib__Char
//# shape: Base__Char0:[F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(1),F(2)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Printf = global_data.Base__Printf,
    Stdlib_Char = global_data.Stdlib__Char,
    failwithf = Base_Printf[6],
    escaped = Stdlib_Char[2],
    lowercase = Stdlib_Char[3];
   function to_int(a){return a;}
   function unsafe_of_int(a){return a;}
   var uppercase = Stdlib_Char[4];
   function int_is_ok(i){
    var a = 0 <= i ? 1 : 0, b = a ? i <= 255 ? 1 : 0 : a;
    return b;
   }
   var
    a =
      [0,
       [11, "Char.of_int_exn got integer out of range: ", [4, 0, 0, 0, 0]],
       "Char.of_int_exn got integer out of range: %d"];
   function of_int(i){return int_is_ok(i) ? [0, i] : 0;}
   function of_int_exn(i){
    return int_is_ok(i) ? i : caml_call2(failwithf(a), i, 0);
   }
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    Base_Char0 =
      [0,
       failwithf,
       escaped,
       lowercase,
       to_int,
       unsafe_of_int,
       uppercase,
       int_is_ok,
       0,
       255,
       of_int,
       of_int_exn,
       equal];
   runtime.caml_register_global(3, Base_Char0, "Base__Char0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_intf
//# shape: Base__Hash_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hash_intf = [0];
   runtime.caml_register_global(0, Base_Hash_intf, "Base__Hash_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List0
//# unitInfo: Requires: Base__Import0, Stdlib__ListLabels
//# shape: Base__List0:[F(1),F(2),F(1),F(1),F(1),F(2),F(3),F(3),F(4),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2),F(3),F(1),F(3),F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst_List_fold_left2 = "List.fold_left2",
    Base_Import0 = global_data.Base__Import0,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    hd_exn = Stdlib_ListLabels[6],
    rev_append = Stdlib_ListLabels[13],
    tl_exn = Stdlib_ListLabels[7],
    unzip = Stdlib_ListLabels[57],
    cst_List_exists2 = "List.exists2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_iter2 = "List.iter2",
    cst_List_rev_map2 = "List.rev_map2";
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = Base_Import0[91].call(null, len, 1);
     len = len$0;
     param = l;
    }
   }
   function exists(t$0, f){
    var t = t$0;
    for(;;){
     if(! t) return 0;
     var xs = t[2], x = t[1];
     if(caml_call1(f, x)) return 1;
     t = xs;
    }
   }
   function exists2_ok(l1$1, l2$1, f){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        a = caml_call2(f, a1, a2);
       if(a) return a;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 0;
     return Base_Import0[126].call(null, cst_List_exists2);
    }
   }
   function fold(t$0, init$1, f){
    var t = t$0, init = init$1;
    for(;;){
     if(! t) return init;
     var l = t[2], a = t[1], init$0 = caml_call2(f, init, a);
     t = l;
     init = init$0;
    }
   }
   function fold2_ok(l1$1, l2$1, init$1, f){
    var l1 = l1$1, l2 = l2$1, init = init$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        init$0 = caml_call3(f, init, a1, a2);
       l1 = l1$0;
       l2 = l2$0;
       init = init$0;
       continue;
      }
     }
     else if(! l2) return init;
     return Base_Import0[126].call(null, cst_List_fold_left2);
    }
   }
   function for_all(t, f){
    var t$0 = t;
    for(;;){
     if(t$0){
      var xs = t$0[2], x = t$0[1];
      if(! (1 - caml_call1(f, x))){t$0 = xs; continue;}
      var a = 1;
     }
     else
      var a = 0;
     return 1 - a;
    }
   }
   function for_all2_ok(l1$1, l2$1, f){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        a = caml_call2(f, a1, a2);
       if(! a) return a;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 1;
     return Base_Import0[126].call(null, cst_List_for_all2);
    }
   }
   function iter(t$0, f){
    var t = t$0;
    for(;;){
     if(! t) return 0;
     var l = t[2], a = t[1];
     caml_call1(f, a);
     t = l;
    }
   }
   function iter2_ok(l1$1, l2$1, f){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       caml_call2(f, a1, a2);
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 0;
     return Base_Import0[126].call(null, cst_List_iter2);
    }
   }
   function nontail_map(t, f){
    if(! t) return 0;
    var xs = t[2], x = t[1], y = caml_call1(f, x);
    return [0, y, nontail_map(xs, f)];
   }
   function nontail_mapi(t, f){return Stdlib_ListLabels[21].call(null, f, t);}
   function partition(t, f){return Stdlib_ListLabels[47].call(null, f, t);}
   function rev_map(l$0, f){
    var accu = 0, param = l$0;
    for(;;){
     if(! param) return accu;
     var l = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l;
    }
   }
   function rev_map2_ok(l1$1, l2$1, f){
    var accu = 0, l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return accu;
     return Base_Import0[126].call(null, cst_List_rev_map2);
    }
   }
   function rev(res){
    if(res){
     var match = res[2];
     if(match){
      var rest = match[2], y = match[1], x = res[1];
      return rev_append(rest, [0, y, [0, x, 0]]);
     }
    }
    return res;
   }
   function fold_right(l, f, init){
    if(! l) return init;
    var t = rev(l), init$1 = init, t$0 = t;
    for(;;){
     if(! t$0) return init$1;
     var l$0 = t$0[2], a = t$0[1], init$0 = caml_call2(f, a, init$1);
     init$1 = init$0;
     t$0 = l$0;
    }
   }
   function fold_right2_ok(l1, l2, f, init){
    if(! l1 && ! l2) return init;
    var
     l2$0 = rev(l2),
     l1$0 = rev(l1),
     init$1 = init,
     l2$2 = l2$0,
     l1$2 = l1$0;
    for(;;){
     if(l1$2){
      if(l2$2){
       var
        l2$1 = l2$2[2],
        a2 = l2$2[1],
        l1$1 = l1$2[2],
        a1 = l1$2[1],
        init$0 = caml_call3(f, a1, a2, init$1);
       init$1 = init$0;
       l2$2 = l2$1;
       l1$2 = l1$1;
       continue;
      }
     }
     else if(! l2$2) return init$1;
     return Base_Import0[126].call(null, cst_List_fold_left2);
    }
   }
   var
    Base_List0 =
      [0,
       hd_exn,
       rev_append,
       tl_exn,
       unzip,
       length,
       exists,
       exists2_ok,
       fold,
       fold2_ok,
       for_all,
       for_all2_ok,
       iter,
       iter2_ok,
       nontail_map,
       nontail_mapi,
       partition,
       rev_map,
       rev_map2_ok,
       rev,
       fold_right,
       fold_right2_ok];
   runtime.caml_register_global(7, Base_List0, "Base__List0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash
//# unitInfo: Requires: Base__Char0, Base__Hash_intf, Base__Import0, Base__Int0, Base__List0, Base_internalhash_types, CamlinternalLazy
//# shape: Base__Hash:[F(1)*,N,F(2),F(2),F(2),F(2),F(1)*,F(2)*,F(1),[F(2)*,F(1)*],F(2)*,F(2),N,F(3)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    description = "internalhash",
    Base_Import0 = global_data.Base__Import0,
    Base_Int0 = global_data.Base__Int0,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_List0 = global_data.Base__List0,
    Base_Char0 = global_data.Base__Char0;
   function Folding(Hash){
    function hash_fold_unit(s, param){return s;}
    var
     hash_fold_int = Hash[2],
     hash_fold_int64 = Hash[3],
     hash_fold_float = Hash[4],
     hash_fold_string = Hash[5];
    function hash_fold_int32(s, x){return caml_call2(hash_fold_int, s, x);}
    var f = Base_Char0[4];
    function hash_fold_char(s, x){return caml_call2(hash_fold_int, s, f(x));}
    function hash_fold_bool(s, x){
     var a = x ? 1 : 0;
     return caml_call2(hash_fold_int, s, a);
    }
    function hash_fold_nativeint(s, x){
     return caml_call2(hash_fold_int64, s, runtime.caml_int64_of_int32(x));
    }
    function hash_fold_option(hash_fold_elem, s, param){
     if(! param) return caml_call2(hash_fold_int, s, 0);
     var x = param[1];
     return caml_call2(hash_fold_elem, caml_call2(hash_fold_int, s, 1), x);
    }
    function hash_fold_list(hash_fold_elem, s$1, list$1){
     var
      s$2 = caml_call2(hash_fold_int, s$1, Base_List0[5].call(null, list$1)),
      s = s$2,
      list = list$1;
     for(;;){
      if(! list) return s;
      var
       list$0 = list[2],
       x = list[1],
       s$0 = caml_call2(hash_fold_elem, s, x);
      s = s$0;
      list = list$0;
     }
    }
    function hash_fold_lazy_t(hash_fold_elem, s, x){
     var a = runtime.caml_obj_tag(x);
     a:
     if(250 === a)
      var b = x[1];
     else{
      if(246 !== a && 244 !== a){var b = x; break a;}
      var b = CamlinternalLazy[2].call(null, x);
     }
     return caml_call2(hash_fold_elem, s, b);
    }
    function hash_fold_ref_frozen(hash_fold_elem, s, x){return caml_call2(hash_fold_elem, s, x[1]);
    }
    function hash_fold_array_frozen(hash_fold_elem, s$1, array){
     var
      s$2 = caml_call2(hash_fold_int, s$1, array.length - 1),
      s = s$2,
      i = 0;
     for(;;){
      if(i === array.length - 1) return s;
      var
       e = array[i + 1],
       i$0 = Base_Import0[91].call(null, i, 1),
       s$0 = caml_call2(hash_fold_elem, s, e);
      s = s$0;
      i = i$0;
     }
    }
    function hash_nativeint(x){
     var
      a = caml_call1(Hash[6], 0),
      b = hash_fold_nativeint(caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_int64(x){
     var
      a = caml_call1(Hash[6], 0),
      b = caml_call2(hash_fold_int64, caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_int32(x){
     var
      a = caml_call1(Hash[6], 0),
      b = hash_fold_int32(caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_char(x){
     var
      a = caml_call1(Hash[6], 0),
      b = hash_fold_char(caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_int(x){
     var
      a = caml_call1(Hash[6], 0),
      b = caml_call2(hash_fold_int, caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_bool(x){
     var
      a = caml_call1(Hash[6], 0),
      b = hash_fold_bool(caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_string(x){
     var
      a = caml_call1(Hash[6], 0),
      b = caml_call2(hash_fold_string, caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_float(x){
     var
      a = caml_call1(Hash[6], 0),
      b = caml_call2(hash_fold_float, caml_call2(Hash[7], 0, a), x);
     return caml_call1(Hash[8], b);
    }
    function hash_unit(x){
     var a = caml_call1(Hash[6], 0), s = caml_call2(Hash[7], 0, a);
     return caml_call1(Hash[8], s);
    }
    return [0,
            hash_fold_nativeint,
            hash_fold_int64,
            hash_fold_int32,
            hash_fold_char,
            hash_fold_int,
            hash_fold_bool,
            hash_fold_string,
            hash_fold_float,
            hash_fold_unit,
            hash_fold_option,
            hash_fold_list,
            hash_fold_lazy_t,
            hash_fold_ref_frozen,
            hash_fold_array_frozen,
            hash_nativeint,
            hash_int64,
            hash_int32,
            hash_char,
            hash_int,
            hash_bool,
            hash_string,
            hash_float,
            hash_unit];
   }
   function F(Hash){
    var
     description = Hash[1],
     fold_int = Hash[2],
     fold_int64 = Hash[3],
     fold_float = Hash[4],
     fold_string = Hash[5],
     alloc = Hash[6],
     reset = Hash[7],
     get_hash_value = Hash[8],
     For_tests = Hash[9];
    function create(seed, param){
     return caml_call2(reset, seed, caml_call1(alloc, 0));
    }
    function of_fold(hash_fold_t, t){
     return caml_call1
             (get_hash_value, caml_call2(hash_fold_t, create(0, 0), t));
    }
    var Builtin = Folding(Hash);
    function run(seed, folder, x){
     var
      a = caml_call1(Hash[6], 0),
      b = caml_call2(folder, caml_call2(Hash[7], seed, a), x);
     return caml_call1(Hash[8], b);
    }
    return [0,
            description,
            fold_int,
            fold_int64,
            fold_float,
            fold_string,
            alloc,
            reset,
            get_hash_value,
            For_tests,
            create,
            of_fold,
            Builtin,
            run];
   }
   function alloc(param){return 0;}
   function reset(opt, t){var seed = opt ? opt[1] : 0; return seed;}
   var compare_state = runtime.caml_int_compare;
   function state_to_string(state){return Base_Int0[1].call(null, state);}
   var For_tests = [0, compare_state, state_to_string];
   function create(seed, param){return reset(seed, 0);}
   function run(seed, folder, x){
    return runtime.Base_internalhash_get_hash_value
            (caml_call2(folder, reset(seed, 0), x));
   }
   function of_fold(hash_fold_t, t){
    return runtime.Base_internalhash_get_hash_value
            (caml_call2(hash_fold_t, create(0, 0), t));
   }
   var
    Folding$0 =
      Folding
       ([0,
         description,
         function(b, a){return runtime.Base_internalhash_fold_int(b, a);},
         function(b, a){return runtime.Base_internalhash_fold_int64(b, a);},
         function(b, a){return runtime.Base_internalhash_fold_float(b, a);},
         function(b, a){return runtime.Base_internalhash_fold_string(b, a);},
         alloc,
         reset,
         function(a){return runtime.Base_internalhash_get_hash_value(a);},
         For_tests]),
    hash_fold_nativeint = Folding$0[1],
    hash_fold_int64 = Folding$0[2],
    hash_fold_int32 = Folding$0[3],
    hash_fold_char = Folding$0[4],
    hash_fold_int = Folding$0[5],
    hash_fold_bool = Folding$0[6],
    hash_fold_string = Folding$0[7],
    hash_fold_float = Folding$0[8],
    hash_fold_unit = Folding$0[9],
    hash_fold_option = Folding$0[10],
    hash_fold_list = Folding$0[11],
    hash_fold_lazy_t = Folding$0[12],
    hash_fold_ref_frozen = Folding$0[13],
    hash_fold_array_frozen = Folding$0[14],
    hash_nativeint = Folding$0[15],
    hash_int64 = Folding$0[16],
    hash_int32 = Folding$0[17],
    hash_string = Folding$0[21],
    hash_char = Base_Char0[4];
   function hash_int(t){
    var
     a = Base_Import0[119].call(null, t, 21),
     b = Base_Import0[117].call(null, t),
     t$0 = Base_Import0[91].call(null, b, a),
     c = Base_Import0[120].call(null, t$0, 24),
     t$1 = Base_Import0[121].call(null, t$0, c),
     d = Base_Import0[119].call(null, t$1, 8),
     e = Base_Import0[119].call(null, t$1, 3),
     f = Base_Import0[91].call(null, t$1, e),
     t$2 = Base_Import0[91].call(null, f, d),
     g = Base_Import0[120].call(null, t$2, 14),
     t$3 = Base_Import0[121].call(null, t$2, g),
     h = Base_Import0[119].call(null, t$3, 4),
     i = Base_Import0[119].call(null, t$3, 2),
     j = Base_Import0[91].call(null, t$3, i),
     t$4 = Base_Import0[91].call(null, j, h),
     k = Base_Import0[120].call(null, t$4, 28),
     t$5 = Base_Import0[121].call(null, t$4, k),
     l = Base_Import0[119].call(null, t$5, 31);
    return Base_Import0[91].call(null, t$5, l);
   }
   function hash_bool(x){return x ? 1 : 0;}
   function hash_unit(param){return 0;}
   var
    Base_Hash =
      [0,
       F,
       description,
       function(b, a){return runtime.Base_internalhash_fold_int(b, a);},
       function(b, a){return runtime.Base_internalhash_fold_int64(b, a);},
       function(b, a){return runtime.Base_internalhash_fold_float(b, a);},
       function(b, a){return runtime.Base_internalhash_fold_string(b, a);},
       alloc,
       reset,
       function(a){return runtime.Base_internalhash_get_hash_value(a);},
       For_tests,
       create,
       of_fold,
       [0,
        hash_fold_nativeint,
        hash_fold_int64,
        hash_fold_int32,
        hash_fold_char,
        hash_fold_int,
        hash_fold_bool,
        hash_fold_string,
        hash_fold_float,
        hash_fold_unit,
        hash_fold_option,
        hash_fold_list,
        hash_fold_lazy_t,
        hash_fold_ref_frozen,
        hash_fold_array_frozen,
        hash_nativeint,
        hash_int64,
        hash_int32,
        hash_char,
        hash_int,
        hash_bool,
        hash_string,
        function(a){return runtime.Base_hash_double(a);},
        hash_unit],
       run];
   runtime.caml_register_global(6, Base_Hash, "Base__Hash");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_compare_lib
//# unitInfo: Requires: Base__Import0, Base__Printf
//# shape: Base__Ppx_compare_lib:[F(3),F(3),[],[],N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_which_is_abstract_in_an_im =
      ", which is abstract in an implementation.",
    caml_bytes_compare = runtime.caml_bytes_compare,
    caml_bytes_equal = runtime.caml_bytes_equal,
    caml_equal = runtime.caml_equal,
    caml_float_compare = runtime.caml_float_compare,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int_compare = runtime.caml_int_compare,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Printf = global_data.Base__Printf,
    a =
      [0,
       [11,
        "Compare called on the type ",
        [2, 0, [11, cst_which_is_abstract_in_an_im, 0]]],
       "Compare called on the type %s, which is abstract in an implementation."],
    b =
      [0,
       [11,
        "Equal called on the type ",
        [2, 0, [11, cst_which_is_abstract_in_an_im, 0]]],
       "Equal called on the type %s, which is abstract in an implementation."];
   function compare_abstract(type_name, b, param){
    return caml_call1
            (Base_Printf[4].call(null, Base_Import0[124], a), type_name);
   }
   function equal_abstract(type_name, a, param){
    return caml_call1
            (Base_Printf[4].call(null, Base_Import0[124], b), type_name);
   }
   var
    Comparable = [0],
    Equal = [0],
    compare_bool = caml_int_compare,
    compare_bool_local = caml_int_compare,
    compare_char = caml_int_compare,
    compare_char_local = caml_int_compare,
    compare_float = caml_float_compare,
    compare_float_local = caml_float_compare,
    compare_int = caml_int_compare,
    compare_int_local = caml_int_compare,
    compare_int32 = caml_int_compare,
    compare_int32_local = caml_int_compare;
   function compare_int64(b, a){return caml_int64_compare(b, a);}
   function compare_int64_local(b, a){return caml_int64_compare(b, a);}
   var
    compare_nativeint = caml_int_compare,
    compare_nativeint_local = caml_int_compare,
    compare_string = caml_string_compare,
    compare_string_local = caml_string_compare,
    compare_bytes = caml_bytes_compare,
    compare_bytes_local = caml_bytes_compare,
    compare_unit = caml_int_compare,
    compare_unit_local = caml_int_compare;
   function compare_array_local(compare_elt, a, b){
    if(a === b) return 0;
    var
     len_a = a.length - 1,
     len_b = b.length - 1,
     ret = caml_int_compare(len_a, len_b);
    if(0 !== ret) return ret;
    var i = 0;
    for(;;){
     if(i === len_a) return 0;
     var l = a[i + 1], r = b[i + 1], res = caml_call2(compare_elt, l, r);
     if(0 !== res) return res;
     var i$0 = Base_Import0[91].call(null, i, 1);
     i = i$0;
    }
   }
   function compare_array(compare_elt, a, b){
    return compare_array_local(compare_elt, a, b);
   }
   function compare_list(compare_elt, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var
      ys = b[2],
      y = b[1],
      xs = a[2],
      x = a[1],
      res = caml_call2(compare_elt, x, y);
     if(0 !== res) return res;
     a = xs;
     b = ys;
    }
   }
   function compare_list_local(compare_elt_local, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var
      ys = b[2],
      y = b[1],
      xs = a[2],
      x = a[1],
      res = caml_call2(compare_elt_local, x, y);
     if(0 !== res) return res;
     a = xs;
     b = ys;
    }
   }
   function compare_option(compare_elt, a, b){
    if(! a) return b ? -1 : 0;
    var a$0 = a[1];
    if(! b) return 1;
    var b$0 = b[1];
    return caml_call2(compare_elt, a$0, b$0);
   }
   function compare_option_local(compare_elt_local, a, b){
    if(! a) return b ? -1 : 0;
    var a$0 = a[1];
    if(! b) return 1;
    var b$0 = b[1];
    return caml_call2(compare_elt_local, a$0, b$0);
   }
   function compare_ref(compare_elt, a, b){
    return caml_call2(compare_elt, a[1], b[1]);
   }
   function compare_ref_local(compare_elt, a, b){return caml_call2(compare_elt, a[1], b[1]);
   }
   function equal_bool(b, a){return b === a ? 1 : 0;}
   function equal_bool_local(b, a){return b === a ? 1 : 0;}
   function equal_char(b, a){return b === a ? 1 : 0;}
   function equal_char_local(b, a){return b === a ? 1 : 0;}
   function equal_int(b, a){return b === a ? 1 : 0;}
   function equal_int_local(b, a){return b === a ? 1 : 0;}
   var
    equal_int32 = caml_equal,
    equal_int32_local = caml_equal,
    equal_int64 = caml_equal,
    equal_int64_local = caml_equal,
    equal_nativeint = caml_equal,
    equal_nativeint_local = caml_equal,
    equal_string = caml_string_equal,
    equal_string_local = caml_string_equal,
    equal_bytes = caml_bytes_equal,
    equal_bytes_local = caml_bytes_equal;
   function equal_unit(b, a){return b === a ? 1 : 0;}
   function equal_unit_local(b, a){return b === a ? 1 : 0;}
   function equal_float(x, y){return caml_float_compare(x, y) === 0 ? 1 : 0;}
   function equal_float_local(x, y){
    return caml_float_compare(x, y) === 0 ? 1 : 0;
   }
   function equal_array_local(equal_elt, a, b){
    var c = a === b ? 1 : 0;
    if(c)
     var d = c;
    else{
     var
      len_a = a.length - 1,
      len_b = b.length - 1,
      e = len_a === len_b ? 1 : 0;
     if(e){
      var i = 0;
      for(;;){
       var f = i === len_a ? 1 : 0;
       if(f)
        var g = f;
       else{
        var l = a[i + 1], r = b[i + 1], h = caml_call2(equal_elt, l, r);
        if(h){var i$0 = Base_Import0[91].call(null, i, 1); i = i$0; continue;}
        var g = h;
       }
       return g;
      }
     }
     var d = e;
    }
    return d;
   }
   function equal_array(equal_elt, a, b){
    return equal_array_local(equal_elt, a, b);
   }
   function equal_list(equal_elt, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(a){
      if(b){
       var
        ys = b[2],
        y = b[1],
        xs = a[2],
        x = a[1],
        c = caml_call2(equal_elt, x, y);
       if(! c) return c;
       a = xs;
       b = ys;
       continue;
      }
     }
     else if(! b) return 1;
     return 0;
    }
   }
   function equal_list_local(equal_elt_local, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(a){
      if(b){
       var
        ys = b[2],
        y = b[1],
        xs = a[2],
        x = a[1],
        c = caml_call2(equal_elt_local, x, y);
       if(! c) return c;
       a = xs;
       b = ys;
       continue;
      }
     }
     else if(! b) return 1;
     return 0;
    }
   }
   function equal_option(equal_elt, a, b){
    if(a){
     if(b){
      var b$0 = b[1], a$0 = a[1];
      return caml_call2(equal_elt, a$0, b$0);
     }
    }
    else if(! b) return 1;
    return 0;
   }
   function equal_option_local(equal_elt_local, a, b){
    if(a){
     if(b){
      var b$0 = b[1], a$0 = a[1];
      return caml_call2(equal_elt_local, a$0, b$0);
     }
    }
    else if(! b) return 1;
    return 0;
   }
   function equal_ref(equal_elt, a, b){
    return caml_call2(equal_elt, a[1], b[1]);
   }
   function equal_ref_local(equal_elt, a, b){
    return caml_call2(equal_elt, a[1], b[1]);
   }
   var
    Base_Ppx_compare_lib =
      [0,
       compare_abstract,
       equal_abstract,
       Comparable,
       Equal,
       [0,
        compare_bool,
        compare_char,
        compare_float,
        compare_int,
        compare_int32,
        compare_int64,
        compare_nativeint,
        compare_string,
        compare_bytes,
        compare_unit,
        compare_array,
        compare_list,
        compare_option,
        compare_ref,
        equal_bool,
        equal_char,
        equal_float,
        equal_int,
        equal_int32,
        equal_int64,
        equal_nativeint,
        equal_string,
        equal_bytes,
        equal_unit,
        equal_array,
        equal_list,
        equal_option,
        equal_ref,
        compare_bool_local,
        compare_char_local,
        compare_float_local,
        compare_int_local,
        compare_int32_local,
        compare_int64_local,
        compare_nativeint_local,
        compare_string_local,
        compare_bytes_local,
        compare_unit_local,
        compare_array_local,
        compare_list_local,
        compare_option_local,
        compare_ref_local,
        equal_bool_local,
        equal_char_local,
        equal_float_local,
        equal_int_local,
        equal_int32_local,
        equal_int64_local,
        equal_nativeint_local,
        equal_string_local,
        equal_bytes_local,
        equal_unit_local,
        equal_array_local,
        equal_list_local,
        equal_option_local,
        equal_ref_local]];
   runtime.caml_register_global
    (4, Base_Ppx_compare_lib, "Base__Ppx_compare_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_hash_lib
//# shape: Base__Ppx_hash_lib:[[],[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Std = [0],
    Hashable = [0],
    Base_Ppx_hash_lib = [0, Std, Hashable];
   runtime.caml_register_global(0, Base_Ppx_hash_lib, "Base__Ppx_hash_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexp
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Ppx_compare_lib, Sexplib0__Sexp, Sexplib0__Sexp_conv
//# shape: Base__Sexp:[F(1),F(2),F(1),F(1)*,F(1)*,F(2),F(2),N,N,F(2),N,F(2),F(3),F(2),F(2),F(2),F(1),F(1),N,N,N,F(2),F(2),N,F(1)*,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Base_Globalize = global_data.Base__Globalize,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    t_of_sexp = Sexplib0_Sexp[1],
    sexp_of_t = Sexplib0_Sexp[2],
    equal = Sexplib0_Sexp[3],
    Not_found_s = Sexplib0_Sexp[5],
    Of_sexp_error = Sexplib0_Sexp[6],
    message = Sexplib0_Sexp[7],
    default_indent = Sexplib0_Sexp[8],
    pp_hum = Sexplib0_Sexp[9],
    pp_hum_indent = Sexplib0_Sexp[10],
    pp_mach = Sexplib0_Sexp[11],
    pp = Sexplib0_Sexp[12],
    to_string_hum = Sexplib0_Sexp[13],
    to_string_mach = Sexplib0_Sexp[14],
    to_string = Sexplib0_Sexp[15],
    of_float_style = Sexplib0_Sexp[16],
    of_int_style = Sexplib0_Sexp[17],
    Private = Sexplib0_Sexp[18];
   function compare_local(a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(Base_Ppx_compare_lib[5][36], a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call3
            (Base_Ppx_compare_lib[5][40], compare_local, a_005, b_006);
   }
   function compare(a, b){return compare_local(a, b);}
   function globalize(x_009){
    if(0 === x_009[0]){
     var arg_010 = x_009[1];
     return [0, Base_Globalize[9].call(null, arg_010)];
    }
    var arg_011 = x_009[1];
    return [1, Base_Globalize[13].call(null, globalize, arg_011)];
   }
   var letrec_function_context = [];
   function hash_fold_t(hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = Base_Hash[3].call(null, hsv, 0);
     return caml_call2(Base_Hash[13][7], hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = Base_Hash[3].call(null, hsv, 1);
    return caml_call3(Base_Hash[13][11], hash_fold_t, hsv$1, a0$0);
   }
   function hash(x){return caml_call1(letrec_function_context[1], x);}
   function func(arg){
    var hsv = Base_Hash[11].call(null, 0, 0), a = hash_fold_t(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   runtime.caml_update_dummy(letrec_function_context, [0, func]);
   var t_sexp_grammar = Sexplib0_Sexp_conv[61];
   function invariant(param){return 0;}
   function equal_local(a, b){return 0 === compare_local(a, b) ? 1 : 0;}
   var
    Base_Sexp =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       Private,
       equal_local,
       compare_local,
       t_sexp_grammar,
       invariant,
       0];
   runtime.caml_register_global(5, Base_Sexp, "Base__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Import
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Import0, Base__Ppx_compare_lib, Base__Sexp, Sexplib0__Sexp_conv
//# shape: Base__Import:[N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N,[F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,N,N,F(1)*,N,N,N,N,N,N,F(2)*,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),F(2),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),N,F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N,[F(2),F(1),F(1),F(1),F(3),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(3),F(1)*,F(1),F(1),F(2),F(1),F(1)*->F(1),F(1)*->F(1),F(1)*->F(1),F(2),F(2),F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(3)*,F(4)*],[F(1)*],[F(1)*]],F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)*,[F(2)*,F(2)*,F(2),F(2)],F(2)*,F(2)*,F(2),F(2),[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)],F(2),F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1),F(1)*,F(1),F(1)*,F(1),N,N,N,N,F(2),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1)*,F(1)*,N,N,F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1),F(1),F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1),F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2),F(2),F(3),F(2)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Hash = global_data.Base__Hash,
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Base_Globalize = global_data.Base__Globalize,
    Base_Sexp = global_data.Base__Sexp,
    Exit = Base_Import0[1],
    Not_found = Base_Import0[2],
    max_int = Base_Import0[3],
    min_int = Base_Import0[4],
    infinity = Base_Import0[5],
    neg_infinity = Base_Import0[6],
    nan = Base_Import0[7],
    max_float = Base_Import0[8],
    min_float = Base_Import0[9],
    epsilon_float = Base_Import0[10],
    char_of_int = Base_Import0[11],
    string_of_bool = Base_Import0[12],
    bool_of_string_opt = Base_Import0[13],
    bool_of_string = Base_Import0[14],
    string_of_int = Base_Import0[15],
    int_of_string_opt = Base_Import0[16],
    string_of_float = Base_Import0[17],
    float_of_string_opt = Base_Import0[18],
    stdin = Base_Import0[19],
    stdout = Base_Import0[20],
    stderr = Base_Import0[21],
    print_char = Base_Import0[22],
    print_string = Base_Import0[23],
    print_bytes = Base_Import0[24],
    print_int = Base_Import0[25],
    print_float = Base_Import0[26],
    print_endline = Base_Import0[27],
    print_newline = Base_Import0[28],
    prerr_char = Base_Import0[29],
    prerr_string = Base_Import0[30],
    prerr_bytes = Base_Import0[31],
    prerr_int = Base_Import0[32],
    prerr_float = Base_Import0[33],
    prerr_endline = Base_Import0[34],
    prerr_newline = Base_Import0[35],
    read_line = Base_Import0[36],
    read_int_opt = Base_Import0[37],
    read_int = Base_Import0[38],
    read_float_opt = Base_Import0[39],
    read_float = Base_Import0[40],
    open_out = Base_Import0[41],
    open_out_bin = Base_Import0[42],
    open_out_gen = Base_Import0[43],
    flush = Base_Import0[44],
    flush_all = Base_Import0[45],
    output_char = Base_Import0[46],
    output_string = Base_Import0[47],
    output_bytes = Base_Import0[48],
    output = Base_Import0[49],
    output_substring = Base_Import0[50],
    output_byte = Base_Import0[51],
    output_binary_int = Base_Import0[52],
    output_value = Base_Import0[53],
    seek_out = Base_Import0[54],
    pos_out = Base_Import0[55],
    out_channel_length = Base_Import0[56],
    close_out = Base_Import0[57],
    close_out_noerr = Base_Import0[58],
    set_binary_mode_out = Base_Import0[59],
    open_in = Base_Import0[60],
    open_in_bin = Base_Import0[61],
    open_in_gen = Base_Import0[62],
    input_char = Base_Import0[63],
    input_line = Base_Import0[64],
    input = Base_Import0[65],
    really_input = Base_Import0[66],
    really_input_string = Base_Import0[67],
    input_byte = Base_Import0[68],
    input_binary_int = Base_Import0[69],
    input_value = Base_Import0[70],
    seek_in = Base_Import0[71],
    pos_in = Base_Import0[72],
    in_channel_length = Base_Import0[73],
    close_in = Base_Import0[74],
    close_in_noerr = Base_Import0[75],
    set_binary_mode_in = Base_Import0[76],
    string_of_format = Base_Import0[77],
    symbol = Base_Import0[78],
    exit = Base_Import0[79],
    at_exit = Base_Import0[80],
    valid_float_lexem = Base_Import0[81],
    unsafe_really_input = Base_Import0[82],
    do_at_exit = Base_Import0[83],
    do_domain_local_at_exit = Base_Import0[84],
    Stdlib = Base_Import0[85],
    bool_to_int = Base_Import0[86],
    symbol$0 = Base_Import0[87],
    symbol$1 = Base_Import0[88],
    symbol$2 = Base_Import0[89],
    symbol$3 = Base_Import0[90],
    symbol$4 = Base_Import0[91],
    symbol$5 = Base_Import0[92],
    symbol$6 = Base_Import0[93],
    symbol$7 = Base_Import0[94],
    symbol$8 = Base_Import0[95],
    symbol$9 = Base_Import0[96],
    Int_replace_polymorphic_compar = Base_Import0[97],
    ascending = Base_Import0[98],
    descending = Base_Import0[99],
    max = Base_Import0[100],
    min = Base_Import0[101],
    Int32_replace_polymorphic_comp = Base_Import0[102],
    Int64_replace_polymorphic_comp = Base_Import0[103],
    Nativeint_replace_polymorphic_ = Base_Import0[104],
    Bool_replace_polymorphic_compa = Base_Import0[105],
    Char_replace_polymorphic_compa = Base_Import0[106],
    Uchar_replace_polymorphic_comp = Base_Import0[107],
    Float_replace_polymorphic_comp = Base_Import0[108],
    String_replace_polymorphic_com = Base_Import0[109],
    Bytes_replace_polymorphic_comp = Base_Import0[110],
    symbol$10 = Base_Import0[111],
    symbol_concat = Base_Import0[112],
    symbol$11 = Base_Import0[113],
    symbol$12 = Base_Import0[114],
    asr = Base_Import0[115],
    land = Base_Import0[116],
    lnot = Base_Import0[117],
    lor = Base_Import0[118],
    lsl = Base_Import0[119],
    lsr = Base_Import0[120],
    lxor = Base_Import0[121],
    mod = Base_Import0[122],
    abs = Base_Import0[123],
    failwith = Base_Import0[124],
    fst = Base_Import0[125],
    invalid_arg = Base_Import0[126],
    snd = Base_Import0[127],
    float_of_string = Base_Import0[128],
    am_testing = Base_Import0[129],
    default_string_of_float = Sexplib0_Sexp_conv[1],
    write_old_option_format = Sexplib0_Sexp_conv[2],
    read_old_option_format = Sexplib0_Sexp_conv[3],
    list_map = Sexplib0_Sexp_conv[4],
    sexp_of_unit = Sexplib0_Sexp_conv[5],
    sexp_of_bool = Sexplib0_Sexp_conv[6],
    sexp_of_string = Sexplib0_Sexp_conv[7],
    sexp_of_bytes = Sexplib0_Sexp_conv[8],
    sexp_of_char = Sexplib0_Sexp_conv[9],
    sexp_of_int = Sexplib0_Sexp_conv[10],
    sexp_of_float = Sexplib0_Sexp_conv[11],
    sexp_of_int32 = Sexplib0_Sexp_conv[12],
    sexp_of_int64 = Sexplib0_Sexp_conv[13],
    sexp_of_nativeint = Sexplib0_Sexp_conv[14],
    sexp_of_ref = Sexplib0_Sexp_conv[15],
    sexp_of_lazy_t = Sexplib0_Sexp_conv[16],
    sexp_of_option = Sexplib0_Sexp_conv[17],
    sexp_of_pair = Sexplib0_Sexp_conv[18],
    sexp_of_triple = Sexplib0_Sexp_conv[19],
    sexp_of_list = Sexplib0_Sexp_conv[20],
    sexp_of_array = Sexplib0_Sexp_conv[21],
    sexp_of_hashtbl = Sexplib0_Sexp_conv[22],
    sexp_of_opaque = Sexplib0_Sexp_conv[23],
    sexp_of_fun = Sexplib0_Sexp_conv[24],
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    record_check_extra_fields = Sexplib0_Sexp_conv[26],
    of_sexp_error = Sexplib0_Sexp_conv[27],
    of_sexp_error_exn = Sexplib0_Sexp_conv[28],
    unit_of_sexp = Sexplib0_Sexp_conv[29],
    bool_of_sexp = Sexplib0_Sexp_conv[30],
    string_of_sexp = Sexplib0_Sexp_conv[31],
    bytes_of_sexp = Sexplib0_Sexp_conv[32],
    char_of_sexp = Sexplib0_Sexp_conv[33],
    int_of_sexp = Sexplib0_Sexp_conv[34],
    float_of_sexp = Sexplib0_Sexp_conv[35],
    int32_of_sexp = Sexplib0_Sexp_conv[36],
    int64_of_sexp = Sexplib0_Sexp_conv[37],
    nativeint_of_sexp = Sexplib0_Sexp_conv[38],
    ref_of_sexp = Sexplib0_Sexp_conv[39],
    lazy_t_of_sexp = Sexplib0_Sexp_conv[40],
    option_of_sexp = Sexplib0_Sexp_conv[41],
    pair_of_sexp = Sexplib0_Sexp_conv[42],
    triple_of_sexp = Sexplib0_Sexp_conv[43],
    list_of_sexp = Sexplib0_Sexp_conv[44],
    array_of_sexp = Sexplib0_Sexp_conv[45],
    hashtbl_of_sexp = Sexplib0_Sexp_conv[46],
    opaque_of_sexp = Sexplib0_Sexp_conv[47],
    fun_of_sexp = Sexplib0_Sexp_conv[48],
    sexp_grammar_with_tags = Sexplib0_Sexp_conv[49],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv[50],
    unit_sexp_grammar = Sexplib0_Sexp_conv[51],
    bool_sexp_grammar = Sexplib0_Sexp_conv[52],
    string_sexp_grammar = Sexplib0_Sexp_conv[53],
    bytes_sexp_grammar = Sexplib0_Sexp_conv[54],
    char_sexp_grammar = Sexplib0_Sexp_conv[55],
    int_sexp_grammar = Sexplib0_Sexp_conv[56],
    float_sexp_grammar = Sexplib0_Sexp_conv[57],
    int32_sexp_grammar = Sexplib0_Sexp_conv[58],
    int64_sexp_grammar = Sexplib0_Sexp_conv[59],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv[60],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv[61],
    ref_sexp_grammar = Sexplib0_Sexp_conv[62],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv[63],
    option_sexp_grammar = Sexplib0_Sexp_conv[64],
    list_sexp_grammar = Sexplib0_Sexp_conv[65],
    array_sexp_grammar = Sexplib0_Sexp_conv[66],
    opaque_sexp_grammar = Sexplib0_Sexp_conv[67],
    fun_sexp_grammar = Sexplib0_Sexp_conv[68],
    sexp_of_exn = Sexplib0_Sexp_conv[69],
    printexc_prefer_sexp = Sexplib0_Sexp_conv[70],
    sexp_of_exn_opt = Sexplib0_Sexp_conv[71],
    Exn_converter = Sexplib0_Sexp_conv[72],
    b = Base_Hash[13],
    hash_fold_nativeint = b[1],
    hash_fold_int64 = b[2],
    hash_fold_int32 = b[3],
    hash_fold_char = b[4],
    hash_fold_int = b[5],
    hash_fold_bool = b[6],
    hash_fold_string = b[7],
    hash_fold_float = b[8],
    hash_fold_unit = b[9],
    hash_fold_option = b[10],
    hash_fold_list = b[11],
    hash_fold_lazy_t = b[12],
    hash_fold_ref_frozen = b[13],
    hash_fold_array_frozen = b[14],
    hash_nativeint = b[15],
    hash_int64 = b[16],
    hash_int32 = b[17],
    hash_char = b[18],
    hash_int = b[19],
    hash_bool = b[20],
    hash_string = b[21],
    hash_float = b[22],
    hash_unit = b[23],
    a = Base_Ppx_compare_lib[5],
    compare_bool = a[1],
    compare_char = a[2],
    compare_float = a[3],
    compare_int = a[4],
    compare_int32 = a[5],
    compare_int64 = a[6],
    compare_nativeint = a[7],
    compare_string = a[8],
    compare_bytes = a[9],
    compare_unit = a[10],
    compare_array = a[11],
    compare_list = a[12],
    compare_option = a[13],
    compare_ref = a[14],
    equal_bool = a[15],
    equal_char = a[16],
    equal_float = a[17],
    equal_int = a[18],
    equal_int32 = a[19],
    equal_int64 = a[20],
    equal_nativeint = a[21],
    equal_string = a[22],
    equal_bytes = a[23],
    equal_unit = a[24],
    equal_array = a[25],
    equal_list = a[26],
    equal_option = a[27],
    equal_ref = a[28],
    compare_bool_local = a[29],
    compare_char_local = a[30],
    compare_float_local = a[31],
    compare_int_local = a[32],
    compare_int32_local = a[33],
    compare_int64_local = a[34],
    compare_nativeint_local = a[35],
    compare_string_local = a[36],
    compare_bytes_local = a[37],
    compare_unit_local = a[38],
    compare_array_local = a[39],
    compare_list_local = a[40],
    compare_option_local = a[41],
    compare_ref_local = a[42],
    equal_bool_local = a[43],
    equal_char_local = a[44],
    equal_float_local = a[45],
    equal_int_local = a[46],
    equal_int32_local = a[47],
    equal_int64_local = a[48],
    equal_nativeint_local = a[49],
    equal_string_local = a[50],
    equal_bytes_local = a[51],
    equal_unit_local = a[52],
    equal_array_local = a[53],
    equal_list_local = a[54],
    equal_option_local = a[55],
    equal_ref_local = a[56],
    globalize_bool = Base_Globalize[1],
    globalize_char = Base_Globalize[2],
    globalize_float = Base_Globalize[3],
    globalize_int = Base_Globalize[4],
    globalize_int32 = Base_Globalize[5],
    globalize_int64 = Base_Globalize[6],
    globalize_nativeint = Base_Globalize[7],
    globalize_bytes = Base_Globalize[8],
    globalize_string = Base_Globalize[9],
    globalize_unit = Base_Globalize[10],
    globalize_array = Base_Globalize[11],
    globalize_lazy_t = Base_Globalize[12],
    globalize_list = Base_Globalize[13],
    globalize_option = Base_Globalize[14],
    globalize_result = Base_Globalize[15],
    globalize_ref = Base_Globalize[16],
    Not_found_s = Base_Sexp[8],
    Base_Import =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Stdlib,
       bool_to_int,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       Int_replace_polymorphic_compar,
       ascending,
       descending,
       max,
       min,
       Int32_replace_polymorphic_comp,
       Int64_replace_polymorphic_comp,
       Nativeint_replace_polymorphic_,
       Bool_replace_polymorphic_compa,
       Char_replace_polymorphic_compa,
       Uchar_replace_polymorphic_comp,
       Float_replace_polymorphic_comp,
       String_replace_polymorphic_com,
       Bytes_replace_polymorphic_comp,
       symbol$10,
       symbol_concat,
       symbol$11,
       symbol$12,
       asr,
       land,
       lnot,
       lor,
       lsl,
       lsr,
       lxor,
       mod,
       abs,
       failwith,
       fst,
       invalid_arg,
       snd,
       float_of_string,
       am_testing,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       hash_fold_nativeint,
       hash_fold_int64,
       hash_fold_int32,
       hash_fold_char,
       hash_fold_int,
       hash_fold_bool,
       hash_fold_string,
       hash_fold_float,
       hash_fold_unit,
       hash_fold_option,
       hash_fold_list,
       hash_fold_lazy_t,
       hash_fold_ref_frozen,
       hash_fold_array_frozen,
       hash_nativeint,
       hash_int64,
       hash_int32,
       hash_char,
       hash_int,
       hash_bool,
       hash_string,
       hash_float,
       hash_unit,
       compare_bool,
       compare_char,
       compare_float,
       compare_int,
       compare_int32,
       compare_int64,
       compare_nativeint,
       compare_string,
       compare_bytes,
       compare_unit,
       compare_array,
       compare_list,
       compare_option,
       compare_ref,
       equal_bool,
       equal_char,
       equal_float,
       equal_int,
       equal_int32,
       equal_int64,
       equal_nativeint,
       equal_string,
       equal_bytes,
       equal_unit,
       equal_array,
       equal_list,
       equal_option,
       equal_ref,
       compare_bool_local,
       compare_char_local,
       compare_float_local,
       compare_int_local,
       compare_int32_local,
       compare_int64_local,
       compare_nativeint_local,
       compare_string_local,
       compare_bytes_local,
       compare_unit_local,
       compare_array_local,
       compare_list_local,
       compare_option_local,
       compare_ref_local,
       equal_bool_local,
       equal_char_local,
       equal_float_local,
       equal_int_local,
       equal_int32_local,
       equal_int64_local,
       equal_nativeint_local,
       equal_string_local,
       equal_bytes_local,
       equal_unit_local,
       equal_array_local,
       equal_list_local,
       equal_option_local,
       equal_ref_local,
       globalize_bool,
       globalize_char,
       globalize_float,
       globalize_int,
       globalize_int32,
       globalize_int64,
       globalize_nativeint,
       globalize_bytes,
       globalize_string,
       globalize_unit,
       globalize_array,
       globalize_lazy_t,
       globalize_list,
       globalize_option,
       globalize_result,
       globalize_ref,
       Not_found_s];
   runtime.caml_register_global(6, Base_Import, "Base__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Word_size
//# unitInfo: Requires: Base__Import, Base__Sys0
//# shape: Base__Word_size:[F(1)*,F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Sys0 = global_data.Base__Sys0,
    Base_Import = global_data.Base__Import,
    a = [0, "W64"],
    b = [0, "W32"];
   function sexp_of_t(param){return param ? a : b;}
   function num_bits(param){return param ? 64 : 32;}
   var
    match = Base_Sys0[7],
    cst_unknown_word_size = "unknown word size",
    word_size =
      32 === match
       ? 0
       : 64 === match ? 1 : Base_Import[124].call(null, cst_unknown_word_size),
    Base_Word_size = [0, sexp_of_t, num_bits, word_size];
   runtime.caml_register_global(5, Base_Word_size, "Base__Word_size");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Formatter
//# shape: Base__Formatter:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Formatter = [0];
   runtime.caml_register_global(0, Base_Formatter, "Base__Formatter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Pretty_printer
//# unitInfo: Requires: Base__Import, Stdlib__Format
//# shape: Base__Pretty_printer:[F(1)*,F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Import = global_data.Base__Import,
    r = [0, [0, "Base.Sexp.pp_hum", 0]],
    cst_pp = ".pp";
   function all(param){return r[1];}
   function register(p){r[1] = [0, p, r[1]]; return 0;}
   function Register_pp(M){
    var pp = M[1];
    register(Base_Import[112].call(null, M[2], cst_pp));
    return [0, pp];
   }
   var
    Base_Pretty_printer =
      [0,
       all,
       function(M){
        var module_name = M[1];
        function pp(formatter, t){
         var a = caml_call1(M[2], t);
         return Stdlib_Format[13].call(null, formatter, a);
        }
        return [0, Register_pp([0, pp, module_name])[1]];
       },
       function(a){return [0, Register_pp(a)[1]];},
       register];
   runtime.caml_register_global
    (4, Base_Pretty_printer, "Base__Pretty_printer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Exn
//# unitInfo: Requires: Base__Import, Base__Pretty_printer, Base__Printf, Base__Sexp, Sexplib0__Sexp_conv, Stdlib__Format, Stdlib__Printexc, Stdlib__Printf
//# shape: Base__Exn:[F(1),N,N,N,F(1)*,F(1),F(2),F(2),F(2),F(1),F(1),F(3),F(2),F(2),F(1),F(2),F(1),F(1),F(1),[F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_2 = "<2>",
    cst_src_exn_ml = "src/exn.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Exn",
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Import = global_data.Base__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Sexp = global_data.Base__Sexp,
    Base_Printf = global_data.Base__Printf,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    sexp_of_t = Base_Import[198],
    exit = Base_Import[85][99],
    Finally = [248, "Base__Exn.Finally", caml_fresh_oo_id(0)],
    a = [0, "exn.ml.Finally"],
    b = [0, cst_src_exn_ml, 19, 11];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Finally,
     function(param){
      var tag = param[1];
      if(tag !== Finally)
       throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
      var
       arg1_002 = param[3],
       arg0_001 = param[2],
       res0_003 = sexp_of_t(arg0_001),
       res1_004 = sexp_of_t(arg1_002);
      return [1, [0, a, [0, res0_003, [0, res1_004, 0]]]];
     });
   var
    Reraised = [248, "Base__Exn.Reraised", caml_fresh_oo_id(0)],
    c = [0, "exn.ml.Reraised"],
    d = [0, cst_src_exn_ml, 32, 11];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Reraised,
     function(param){
      var tag = param[1];
      if(tag !== Reraised)
       throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
      var
       arg1_006 = param[3],
       arg0_005 = param[2],
       res0_007 = Base_Import[136].call(null, arg0_005),
       res1_008 = sexp_of_t(arg1_006);
      return [1, [0, c, [0, res0_007, [0, res1_008, 0]]]];
     });
   var
    Sexp = [248, "Base__Exn.Sexp", caml_fresh_oo_id(0)],
    e = [0, cst_src_exn_ml, 53, 6];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Sexp,
     function(param){
      var tag = param[1];
      if(tag !== Sexp)
       throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
      var t = param[2];
      return t;
     });
   var f = [0, 2];
   function create_s(sexp){return [0, Sexp, sexp];}
   function raise_with_original_backtrace(t, backtrace){
    runtime.caml_restore_raw_backtrace(t, backtrace);
    throw caml_maybe_attach_backtrace(t, 0);
   }
   function reraise(exn, str){
    var exn$0 = [0, Reraised, str, exn];
    if(! runtime.Base_caml_exn_is_most_recent_exn(exn))
     throw caml_maybe_attach_backtrace(exn$0, 1);
    var bt = Stdlib_Printexc[12].call(null, 0);
    return raise_with_original_backtrace(exn$0, bt);
   }
   function reraisef(exc, format){
    return Base_Printf[4].call
            (null, function(str, param){return reraise(exc, str);}, format);
   }
   function to_string(exc){
    var a = Base_Import[198].call(null, exc);
    return Base_Sexp[16].call(null, f, a);
   }
   function to_string_mach(exc){
    var a = Base_Import[198].call(null, exc);
    return Base_Sexp[17].call(null, a);
   }
   var sexp_of_t$0 = Base_Import[198];
   function protectx(f, x, finally$){
    try{var res = caml_call1(f, x);}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      bt = Stdlib_Printexc[12].call(null, 0);
     try{caml_call1(finally$, x);}
     catch(final_exn$0){
      var final_exn = caml_wrap_exception(final_exn$0);
      return raise_with_original_backtrace([0, Finally, exn, final_exn], bt);
     }
     return raise_with_original_backtrace(exn, bt);
    }
    caml_call1(finally$, x);
    return res;
   }
   function protect(f, finally$){return protectx(f, 0, finally$);}
   function does_raise(f){
    try{caml_call1(f, 0); var a = 0; return a;}catch(exn){return 1;}
   }
   function pp(ppf, t){
    var match = Base_Import[200].call(null, t);
    if(match){
     var sexp = match[1];
     return Base_Sexp[12].call(null, ppf, sexp);
    }
    var a = Stdlib_Printexc[1].call(null, t);
    return Stdlib_Format[13].call(null, ppf, a);
   }
   var
    include = Base_Pretty_printer[3].call(null, [0, pp, module_name]),
    pp$0 = include[1],
    g =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "Uncaught exception:",
         [17,
          3,
          [17,
           3,
           [18, [1, [0, 0, ""]], [15, [17, 0, [17, 0, [17, 3, [17, 4, 0]]]]]]]]]],
       "@[<2>Uncaught exception:@\n@\n@[%a@]@]@\n@."],
    h =
      [0,
       [11, "Exn.handle_uncaught could not print; exiting anyway\n", [10, 0]],
       "Exn.handle_uncaught could not print; exiting anyway\n%!"];
   function print_with_backtrace(exc, raw_backtrace){
    caml_call2(Stdlib_Format[141].call(null, g), pp$0, exc);
    if(Stdlib_Printexc[8].call(null, 0))
     Stdlib_Printexc[13].call(null, Base_Import[85][40], raw_backtrace);
    return Base_Import[85][63].call(null, Base_Import[85][40]);
   }
   function handle_uncaught_aux(do_at_exit, exit, f){
    try{var a = caml_call1(f, 0); return a;}
    catch(exc$0){
     var
      exc = caml_wrap_exception(exc$0),
      raw_backtrace = Stdlib_Printexc[12].call(null, 0);
     if(do_at_exit) try{Base_Import[85][103].call(null, 0);}catch(exn){}
     try{print_with_backtrace(exc, raw_backtrace);}
     catch(exn){try{Stdlib_Printf[3].call(null, h);}catch(exn){}}
     return caml_call1(exit, 1);
    }
   }
   function handle_uncaught_and_exit(f){
    return handle_uncaught_aux(1, exit, f);
   }
   function handle_uncaught(must_exit, f){
    var exit$0 = must_exit ? exit : function(a){return 0;};
    return handle_uncaught_aux(must_exit, exit$0, f);
   }
   function reraise_uncaught(str, func){
    try{var a = caml_call1(func, 0); return a;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      bt = Stdlib_Printexc[12].call(null, 0);
     return raise_with_original_backtrace([0, Reraised, str, exn], bt);
    }
   }
   function raise_without_backtrace(e){
    runtime.Base_clear_caml_backtrace_pos(0);
    throw e;
   }
   function initialize_module(param){
    return Stdlib_Printexc[16].call(null, print_with_backtrace);
   }
   function clear_backtrace(a){
    return runtime.Base_clear_caml_backtrace_pos(a);
   }
   var
    Private = [0, clear_backtrace],
    Base_Exn =
      [0,
       sexp_of_t$0,
       pp$0,
       Finally,
       Reraised,
       create_s,
       raise_without_backtrace,
       raise_with_original_backtrace,
       reraise,
       reraisef,
       to_string,
       to_string_mach,
       protectx,
       protect,
       handle_uncaught,
       handle_uncaught_and_exit,
       reraise_uncaught,
       does_raise,
       function(a){return runtime.Base_caml_exn_is_most_recent_exn(a);},
       initialize_module,
       Private];
   runtime.caml_register_global(21, Base_Exn, "Base__Exn");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__With_return
//# unitInfo: Requires: Base__Exn, Base__Import
//# shape: Base__With_return:[F(1),F(1),F(2)*->F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Exn = global_data.Base__Exn,
    cst_Return = "Return",
    cst_use_of_return_from_a_with_ =
      "use of [return] from a [with_return] that already returned";
   function with_return(f){
    var
     Return = [248, cst_Return, runtime.caml_fresh_oo_id(0)],
     is_alive = [0, 1];
    function return$(a){
     if(1 - is_alive[1])
      Base_Import[124].call(null, cst_use_of_return_from_a_with_);
     return Base_Exn[6].call(null, [0, Return, a]);
    }
    try{var a$0 = caml_call1(f, return$); is_alive[1] = 0; return a$0;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     is_alive[1] = 0;
     var tag = exn[1];
     if(tag !== Return) throw caml_maybe_attach_backtrace(exn, 0);
     var a = exn[2];
     return a;
    }
   }
   function with_return_option(f){
    return with_return
            (function(return$){
              caml_call1(f, function(a){return caml_call1(return$, [0, a]);});
              return 0;
             });
   }
   function prepend(param, f){
    return function(x){return caml_call1(param, caml_call1(f, x));};
   }
   var Base_With_return = [0, with_return, with_return_option, prepend];
   runtime.caml_register_global(4, Base_With_return, "Base__With_return");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Variant
//# shape: Base__Variant:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Variant = [0];
   runtime.caml_register_global(0, Base_Variant, "Base__Variant");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Variantslib
//# shape: Base__Variantslib:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Variantslib = [0];
   runtime.caml_register_global(0, Base_Variantslib, "Base__Variantslib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Fn
//# unitInfo: Requires: Base__Import
//# shape: Base__Fn:[F(2)*,F(2),F(1),F(3),F(3),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import;
   function const$(c, param){return c;}
   function non(f, x){return 1 - caml_call1(f, x);}
   function forever(f){
    try{for(;;) caml_call1(f, 0);}
    catch(e$0){var e = caml_wrap_exception(e$0); return e;}
   }
   function compose(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function apply_n_times(n$1, f, x$1){
    var n = n$1, x = x$1;
    for(;;){
     if(0 >= n) return x;
     var x$0 = caml_call1(f, x), n$0 = Base_Import[93].call(null, n, 1);
     n = n$0;
     x = x$0;
    }
   }
   var Base_Fn = [0, const$, non, forever, apply_n_times, compose, flip];
   runtime.caml_register_global(1, Base_Fn, "Base__Fn");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Monad_intf
//# shape: Base__Monad_intf:[F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function S_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Monad_infix = X[3],
     bind = X[4],
     return$ = X[5],
     map = X[6],
     join = X[7],
     ignore_m = X[8],
     all = X[9],
     all_unit = X[10],
     Let_syntax = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S2_to_S3(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$ = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S_to_S_indexed(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Monad_infix = X[3],
     bind = X[4],
     return$ = X[5],
     map = X[6],
     join = X[7],
     ignore_m = X[8],
     all = X[9],
     all_unit = X[10],
     Let_syntax = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S2_to_S(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$ = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit,
            Let_syntax];
   }
   function S3_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$ = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S_indexed_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$ = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   var
    Base_Monad_intf =
      [0,
       S_to_S2,
       S2_to_S3,
       S_to_S_indexed,
       S2_to_S,
       S3_to_S2,
       S_indexed_to_S2];
   runtime.caml_register_global(0, Base_Monad_intf, "Base__Monad_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Monad
//# unitInfo: Requires: Base__List0, Base__Monad_intf
//# shape: Base__Monad:[F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_List0 = global_data.Base__List0;
   function Make_general(M){
    var bind = M[1], return$ = M[3];
    function map_via_bind(ma, f){
     return caml_call2
             (M[1],
              ma,
              function(a){
               var b = caml_call1(f, a);
               return caml_call1(M[3], b);
              });
    }
    var match = M[2];
    if(typeof match === "number")
     var map = map_via_bind;
    else
     var x = match[2], map = x;
    function symbol_bind(t, f){return caml_call2(bind, t, f);}
    function symbol_map(t, f){return caml_call2(map, t, f);}
    var Monad_infix = [0, symbol_bind, symbol_map];
    function both(a, b){
     function f(a){
      function f(b){return [0, a, b];}
      return caml_call2(map, b, f);
     }
     return caml_call2(bind, a, f);
    }
    var
     Open_on_rhs = [0],
     Let_syntax = [0, return$, bind, map, both, Open_on_rhs],
     Let_syntax$0 = [0, return$, symbol_bind, symbol_map, Let_syntax];
    function join(t){function f(t){return t;} return caml_call2(bind, t, f);}
    function ignore_m(t){
     return caml_call2(map, t, function(param){return 0;});
    }
    function loop(vs, param){
     if(! param) return caml_call1(return$, Base_List0[19].call(null, vs));
     var ts = param[2], t = param[1];
     function f(v){return loop([0, v, vs], ts);}
     return caml_call2(bind, t, f);
    }
    function all(ts){return loop(0, ts);}
    function all_unit(param){
     if(! param) return caml_call1(return$, 0);
     var ts = param[2], t = param[1];
     function f(param){return all_unit(ts);}
     return caml_call2(bind, t, f);
    }
    return [0,
            bind,
            return$,
            ,
            map,
            Monad_infix,
            symbol_bind,
            symbol_map,
            Let_syntax$0,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function Make_indexed(M){
    var
     bind = M[1],
     map = M[2],
     return$ = M[3],
     a = Make_general([0, bind, map, return$]);
    return [0,
            a[6],
            a[7],
            a[8],
            a[5],
            a[1],
            a[2],
            a[4],
            a[9],
            a[10],
            a[11],
            a[12]];
   }
   function Make3(M){
    var
     bind = M[1],
     map = M[2],
     return$ = M[3],
     a = Make_general([0, bind, map, return$]);
    return [0,
            a[6],
            a[7],
            a[8],
            a[5],
            a[1],
            a[2],
            a[4],
            a[9],
            a[10],
            a[11],
            a[12]];
   }
   function Make2(M){
    var
     bind = M[1],
     map = M[2],
     return$ = M[3],
     a = Make_general([0, bind, map, return$]);
    return [0,
            a[6],
            a[7],
            a[8],
            a[5],
            a[1],
            a[2],
            a[4],
            a[9],
            a[10],
            a[11],
            a[12]];
   }
   function Make(M){
    var
     bind = M[1],
     return$ = M[2],
     map = M[3],
     a = Make_general([0, bind, map, return$]);
    return [0,
            a[6],
            a[7],
            a[5],
            a[1],
            a[2],
            a[4],
            a[9],
            a[10],
            a[11],
            a[12],
            a[8]];
   }
   function Make2_local(M){
    var bind = M[1], return$ = M[3];
    function map_via_bind(ma, f){
     var
      res =
        caml_call2
         (M[1],
          ma,
          function(a){var b = caml_call1(f, a); return caml_call1(M[3], b);});
     return res;
    }
    var match = M[2];
    if(typeof match === "number")
     var map = map_via_bind;
    else
     var x = match[2], map = x;
    function symbol_bind(t, f){return caml_call2(bind, t, f);}
    function symbol_map(t, f){return caml_call2(map, t, f);}
    var Monad_infix = [0, symbol_bind, symbol_map];
    function both(a, b){
     var
      res =
        caml_call2
         (bind,
          a,
          function(a){
           var res = caml_call2(map, b, function(b){return [0, a, b];});
           return res;
          });
     return res;
    }
    var
     Open_on_rhs = [0],
     Let_syntax = [0, return$, bind, map, both, Open_on_rhs],
     Let_syntax$0 = [0, return$, symbol_bind, symbol_map, Let_syntax];
    function join(t){function f(a){return a;} return caml_call2(bind, t, f);}
    function ignore_m(t){
     var res = caml_call2(map, t, function(param){return 0;});
     return res;
    }
    function loop(vs, param){
     if(! param) return caml_call1(return$, Base_List0[19].call(null, vs));
     var ts = param[2], t = param[1];
     function f(v){return loop([0, v, vs], ts);}
     return caml_call2(bind, t, f);
    }
    function all(ts){return loop(0, ts);}
    function all_unit(param){
     if(! param) return caml_call1(return$, 0);
     var ts = param[2], t = param[1];
     function f(param){return all_unit(ts);}
     return caml_call2(bind, t, f);
    }
    return [0,
            bind,
            return$,
            ,
            map,
            Monad_infix,
            symbol_bind,
            symbol_map,
            Let_syntax$0,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function Make_local(M){
    var
     bind = M[1],
     return$ = M[2],
     map = M[3],
     a = Make2_local([0, bind, map, return$]);
    return [0,
            a[6],
            a[7],
            a[5],
            a[1],
            a[2],
            a[4],
            a[9],
            a[10],
            a[11],
            a[12],
            a[8]];
   }
   function Of_monad_general(Monad, M){
    function return$(a){
     var b = caml_call1(Monad[3], a);
     return caml_call1(M[2], b);
    }
    function bind(t, f){
     var
      a = caml_call1(M[1], t),
      b =
        caml_call2
         (Monad[1],
          a,
          function(a){var b = caml_call1(f, a); return caml_call1(M[1], b);});
     return caml_call1(M[2], b);
    }
    var
     map =
       [0,
        -198771759,
        function(t, f){
         var a = caml_call1(M[1], t), b = caml_call2(Monad[2], a, f);
         return caml_call1(M[2], b);
        }];
    return Make_general([0, bind, map, return$]);
   }
   function bind(a, f){return caml_call1(f, a);}
   function map(a, f){return caml_call1(f, a);}
   function symbol_map(a, f){return caml_call1(f, a);}
   function symbol_bind(a, f){return caml_call1(f, a);}
   function return$(a){return a;}
   function both(a, b){return [0, a, b];}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$, bind, map, both, Open_on_rhs],
    Base_Monad =
      [0,
       Make,
       Make2,
       Make3,
       Make_indexed,
       Make_local,
       function(b){
        var a = Make2_local(b);
        return [0,
                a[6],
                a[7],
                a[8],
                a[5],
                a[1],
                a[2],
                a[4],
                a[9],
                a[10],
                a[11],
                a[12]];
       },
       function(Monad, M){
        var
         to_monad = M[1],
         of_monad = M[2],
         bind = Monad[4],
         return$ = Monad[5],
         map = Monad[6],
         a =
           Of_monad_general([0, bind, map, return$], [0, to_monad, of_monad]);
        return [0,
                a[6],
                a[7],
                a[5],
                a[1],
                a[2],
                a[4],
                a[9],
                a[10],
                a[11],
                a[12],
                a[8]];
       },
       function(Monad, M){
        var
         to_monad = M[1],
         of_monad = M[2],
         bind = Monad[5],
         return$ = Monad[6],
         map = Monad[7],
         a =
           Of_monad_general([0, bind, map, return$], [0, to_monad, of_monad]);
        return [0,
                a[6],
                a[7],
                a[8],
                a[5],
                a[1],
                a[2],
                a[4],
                a[9],
                a[10],
                a[11],
                a[12]];
       },
       function(Monad, M){
        var
         to_monad = M[1],
         of_monad = M[2],
         bind = Monad[5],
         return$ = Monad[6],
         map = Monad[7],
         a =
           Of_monad_general([0, bind, map, return$], [0, to_monad, of_monad]);
        return [0,
                a[6],
                a[7],
                a[8],
                a[5],
                a[1],
                a[2],
                a[4],
                a[9],
                a[10],
                a[11],
                a[12]];
       },
       function(Monad, M){
        var
         to_monad = M[1],
         of_monad = M[2],
         bind = Monad[5],
         return$ = Monad[6],
         map = Monad[7],
         a =
           Of_monad_general([0, bind, map, return$], [0, to_monad, of_monad]);
        return [0,
                a[6],
                a[7],
                a[8],
                a[5],
                a[1],
                a[2],
                a[4],
                a[9],
                a[10],
                a[11],
                a[12]];
       },
       [0,
        symbol_bind,
        symbol_map,
        [0, symbol_bind, symbol_map],
        bind,
        function(a){return a;},
        map,
        function(a){return a;},
        function(a){return 0;},
        function(a){return a;},
        function(a){return 0;},
        [0, return$, symbol_bind, symbol_map, Let_syntax]]];
   runtime.caml_register_global(1, Base_Monad, "Base__Monad");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__T
//# shape: Base__T:[]
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_T = [0];
   runtime.caml_register_global(0, Base_T, "Base__T");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Applicative_intf
//# shape: Base__Applicative_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Applicative_intf = [0];
   runtime.caml_register_global
    (0, Base_Applicative_intf, "Base__Applicative_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Applicative
//# unitInfo: Requires: Base__Applicative_intf, Base__Import, Base__List0
//# shape: Base__Applicative:[[N,N,N,N,N,N,N,N,N,N,N,N,N],F(2)*,F(1)*,F(2)*,F(3)*,F(1)*,F(1)*,F(1)*,F(1)*,F(3)*,F(3)*,F(3)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_List0 = global_data.Base__List0;
   function S_to_S2(X){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S2_to_S(T, X){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S2_to_S3(X){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S3_to_S2(T, X){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S3_to_S(T1, T2, X){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function Make3(include){
    var return$ = include[1], symbol = include[2];
    function derived_map(t, f){
     return caml_call2(symbol, caml_call1(return$, f), t);
    }
    var match = include[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var x = match[2], map = x;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function map2(ta, tb, f){
     return caml_call2(symbol, caml_call2(map, ta, f), tb);
    }
    function map3(ta, tb, tc, f){
     return caml_call2
             (symbol, caml_call2(symbol, caml_call2(map, ta, f), tb), tc);
    }
    function all(ts){
     function b(x, xs){return [0, x, xs];}
     var a = caml_call1(return$, 0);
     return Base_List0[20].call
             (null,
              ts,
              function(a){return function(c){return map2(a, c, b);};},
              a);
    }
    function both(ta, tb){
     return map2(ta, tb, function(a, b){return [0, a, b];});
    }
    function symbol$0(u, v){
     return caml_call2
             (symbol,
              caml_call2
               (symbol, caml_call1(return$, function(param, y){return y;}), u),
              v);
    }
    function symbol$1(u, v){
     return caml_call2
             (symbol,
              caml_call2
               (symbol, caml_call1(return$, function(x, param){return x;}), u),
              v);
    }
    function all_unit(ts){
     var a = caml_call1(return$, 0);
     return Base_List0[8].call(null, ts, a, symbol$0);
    }
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2(X){
    var return$ = X[1], apply = X[2], map = X[3];
    return Make3([0, return$, apply, map]);
   }
   function Make(X){
    var return$ = X[1], apply = X[2], map = X[3];
    return Make2([0, return$, apply, map]);
   }
   function Make_let_syntax3(X, Intf, Impl){
    var
     return$ = X[1],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     return$0 = X[1],
     map = X[2],
     both = X[3],
     Let_syntax = [0, return$0, map, both, , , , , Impl],
     Let_syntax$0 =
       [0, return$, , , symbol, symbol$0, symbol$1, symbol_map, Let_syntax];
    return [0, Let_syntax$0];
   }
   function Make_let_syntax2(X, Intf, Impl){
    var
     return$ = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7];
    return Make_let_syntax3
            ([0, return$, map, both, symbol, symbol$0, symbol$1, symbol_map],
             Intf,
             Impl);
   }
   function Make3_using_map2(include){
    var return$ = include[1], map2 = include[2];
    function symbol(tf, ta){
     return caml_call3(map2, tf, ta, function(f, a){return caml_call1(f, a);});
    }
    function derived_map(t, f){return symbol(caml_call1(return$, f), t);}
    var match = include[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var x = match[2], map = x;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function both(ta, tb){
     return caml_call3(map2, ta, tb, function(a, b){return [0, a, b];});
    }
    function map3(ta, tb, tc, f){
     return caml_call3
             (map2,
              caml_call3(map2, ta, tb, f),
              tc,
              function(fab, c){return caml_call1(fab, c);});
    }
    function all(ts){
     function b(x, xs){return [0, x, xs];}
     var a = caml_call1(return$, 0);
     return Base_List0[20].call
             (null,
              ts,
              function(c){
               var a = caml_call1(map2, c);
               return function(c){return caml_call2(a, c, b);};
              },
              a);
    }
    function symbol$0(u, v){
     return caml_call3(map2, u, v, function(param, y){return y;});
    }
    function symbol$1(u, v){
     return caml_call3(map2, u, v, function(x, param){return x;});
    }
    function all_unit(ts){
     var a = caml_call1(return$, 0);
     return Base_List0[8].call(null, ts, a, symbol$0);
    }
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2_using_map2(X){
    var return$ = X[1], map2 = X[2], map = X[3];
    return Make3_using_map2([0, return$, map2, map]);
   }
   function Make_using_map2(X){
    var return$ = X[1], map2 = X[2], map = X[3];
    return Make2_using_map2([0, return$, map2, map]);
   }
   function Make3_using_map2_local(include){
    var return$ = include[1], map2 = include[2];
    function symbol(tf, ta){
     return caml_call3(map2, tf, ta, function(f, a){return caml_call1(f, a);});
    }
    function derived_map(t, f){
     return caml_call3
             (map2, caml_call1(return$, 0), t, function(param){return f;});
    }
    var match = include[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var map$0 = match[2], map = map$0;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function both(ta, tb){
     return caml_call3(map2, ta, tb, function(a, b){return [0, a, b];});
    }
    function map3(ta, tb, tc, f){
     var
      res =
        caml_call3
         (map2,
          both(ta, tb),
          tc,
          function(param, c){
           var b = param[2], a = param[1];
           return caml_call3(f, a, b, c);
          });
     return res;
    }
    function all(ts){
     function b(x, xs){return [0, x, xs];}
     var a = caml_call1(return$, 0);
     return Base_List0[20].call
             (null,
              ts,
              function(c){
               var a = caml_call1(map2, c);
               return function(c){return caml_call2(a, c, b);};
              },
              a);
    }
    function symbol$0(u, v){
     return caml_call3(map2, u, v, function(param, y){return y;});
    }
    function symbol$1(u, v){
     return caml_call3(map2, u, v, function(x, param){return x;});
    }
    function all_unit(ts){
     var a = caml_call1(return$, 0);
     return Base_List0[8].call(null, ts, a, symbol$0);
    }
    return [0,
            return$,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2_using_map2_local(X){
    var return$ = X[1], map2 = X[2], map = X[3];
    return Make3_using_map2_local([0, return$, map2, map]);
   }
   function Make_using_map2_local(X){
    var return$ = X[1], map2 = X[2], map = X[3];
    return Make2_using_map2_local([0, return$, map2, map]);
   }
   function Of_monad2(M){
    var return$ = M[6];
    function apply(mf, mx){
     return caml_call2(M[5], mf, function(f){return caml_call2(M[7], mx, f);});
    }
    var map = [0, -198771759, M[7]];
    return Make2([0, return$, apply, map]);
   }
   function Of_monad(M){
    var
     symbol_bind = M[1],
     symbol_map = M[2],
     Monad_infix = M[3],
     bind = M[4],
     return$ = M[5],
     map = M[6],
     join = M[7],
     ignore_m = M[8],
     all = M[9],
     all_unit = M[10],
     Let_syntax = M[11];
    return Of_monad2
            ([0,
              symbol_bind,
              symbol_map,
              Let_syntax,
              Monad_infix,
              bind,
              return$,
              map,
              join,
              ignore_m,
              all,
              all_unit]);
   }
   function Compose(F, G){
    function return$(a){
     var b = caml_call1(F[1], a);
     return caml_call1(G[1], b);
    }
    function apply(tf, tx){
     var a = caml_call2(G[2], tf, F[8]);
     return caml_call2(G[8], a, tx);
    }
    function custom_map(t, f){
     var a = F[2];
     return caml_call2(G[2], t, function(b){return caml_call2(a, b, f);});
    }
    var
     map = [0, -198771759, custom_map],
     include = Make([0, return$, apply, map]),
     return$0 = include[1],
     map$0 = include[2],
     both = include[3],
     symbol = include[4],
     symbol$0 = include[5],
     symbol$1 = include[6],
     symbol_map = include[7],
     apply$0 = include[8],
     map2 = include[9],
     map3 = include[10],
     all = include[11],
     all_unit = include[12],
     Applicative_infix = include[13];
    return [0,
            return$0,
            map$0,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply$0,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function Pair(F, G){
    function return$(a){
     var b = caml_call1(G[1], a);
     return [0, caml_call1(F[1], a), b];
    }
    function apply(tf, tx){
     var
      a = Base_Import[127].call(null, tx),
      b = Base_Import[127].call(null, tf),
      c = caml_call2(G[8], b, a),
      d = Base_Import[125].call(null, tx),
      e = Base_Import[125].call(null, tf);
     return [0, caml_call2(F[8], e, d), c];
    }
    function custom_map(t, f){
     var
      a = Base_Import[127].call(null, t),
      b = caml_call2(G[2], a, f),
      c = Base_Import[125].call(null, t);
     return [0, caml_call2(F[2], c, f), b];
    }
    var
     map = [0, -198771759, custom_map],
     include = Make([0, return$, apply, map]),
     return$0 = include[1],
     map$0 = include[2],
     both = include[3],
     symbol = include[4],
     symbol$0 = include[5],
     symbol$1 = include[6],
     symbol_map = include[7],
     apply$0 = include[8],
     map2 = include[9],
     map3 = include[10],
     all = include[11],
     all_unit = include[12],
     Applicative_infix = include[13];
    return [0,
            return$0,
            map$0,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply$0,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function return$(a){return a;}
   function map2(a, b, f){return caml_call2(f, a, b);}
   var
    map = [0, -198771759, function(a, f){return caml_call1(f, a);}],
    include = Make_using_map2_local([0, return$, map2, map]),
    return$0 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13],
    Ident =
      [0,
       return$0,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       map3,
       all,
       all_unit,
       Applicative_infix],
    Base_Applicative =
      [0,
       Ident,
       S2_to_S,
       S_to_S2,
       S3_to_S2,
       S3_to_S,
       S2_to_S3,
       Make,
       Make2,
       Make3,
       function(X, Intf, Impl){
        var
         return$ = X[1],
         map = X[2],
         both = X[3],
         symbol = X[4],
         symbol$0 = X[5],
         symbol$1 = X[6],
         symbol_map = X[7],
         a =
           Make_let_syntax2
             ([0, return$, map, both, symbol, symbol$0, symbol$1, symbol_map],
              Intf,
              Impl)
            [1],
         b = a[8];
        return [0,
                [0, a[1], a[4], a[5], a[6], a[7], [0, b[1], b[2], b[3], b[8]]]];
       },
       function(e, d, c){
        var a = Make_let_syntax2(e, d, c)[1], b = a[8];
        return [0,
                [0, a[1], a[4], a[5], a[6], a[7], [0, b[1], b[2], b[3], b[8]]]];
       },
       function(e, d, c){
        var a = Make_let_syntax3(e, d, c)[1], b = a[8];
        return [0,
                [0, a[1], a[4], a[5], a[6], a[7], [0, b[1], b[2], b[3], b[8]]]];
       },
       Make_using_map2,
       Make2_using_map2,
       Make3_using_map2,
       Make_using_map2_local,
       Make2_using_map2_local,
       Make3_using_map2_local,
       Of_monad,
       Of_monad2,
       Compose,
       Pair];
   runtime.caml_register_global(2, Base_Applicative, "Base__Applicative");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparator
//# shape: Base__Comparator:[F(2)*,[N],[],F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var Module = [0];
   function of_module(M){return M[1];}
   function to_module(t){return [0, t];}
   function make(compare, sexp_of_t){
    var comparator = [0, compare, sexp_of_t];
    return [0, comparator];
   }
   function S_to_S1(S){var comparator = S[1]; return [0, comparator];}
   function Make1(M){
    var comparator = [0, M[1], M[2]];
    return [0, comparator];
   }
   var compare = runtime.caml_compare, a = [0, "_"];
   function sexp_of_t(param){return a;}
   var
    include = Make1([0, compare, sexp_of_t]),
    comparator = include[1],
    Poly = [0, comparator];
   function Derived(M){
    function comparator(a){
     var b = caml_call1(M[2], a[2]);
     return [0, caml_call1(M[1], a[1]), b];
    }
    return [0, comparator];
   }
   function Derived2(M){
    function comparator(a, b){
     var c = caml_call2(M[2], a[2], b[2]);
     return [0, caml_call2(M[1], a[1], b[1]), c];
    }
    return [0, comparator];
   }
   function Derived_phantom(M){
    function comparator(a){
     var b = caml_call1(M[2], a[2]);
     return [0, caml_call1(M[1], a[1]), b];
    }
    return [0, comparator];
   }
   function Derived2_phantom(M){
    function comparator(a, b){
     var c = caml_call2(M[2], a[2], b[2]);
     return [0, caml_call2(M[1], a[1], b[1]), c];
    }
    return [0, comparator];
   }
   var
    Base_Comparator =
      [0,
       make,
       Poly,
       Module,
       of_module,
       to_module,
       S_to_S1,
       function(M){var comparator = [0, M[1], M[2]]; return [0, comparator];},
       Make1,
       Derived,
       Derived2,
       Derived_phantom,
       Derived2_phantom];
   runtime.caml_register_global(1, Base_Comparator, "Base__Comparator");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparisons
//# shape: Base__Comparisons:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Comparisons = [0];
   runtime.caml_register_global(0, Base_Comparisons, "Base__Comparisons");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Either0
//# unitInfo: Requires: Base__Hash, Sexplib0__Sexp_conv_error
//# shape: Base__Either0:[F(4),F(4),F(4),F(3),F(3),F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_First$0 = "First",
    cst_Second$0 = "Second",
    cst_first = "first",
    cst_second = "second";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_017 = "either0.ml.t",
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    a = [0, cst_First$0],
    b = [0, cst_Second$0],
    cst_Second = cst_Second$0,
    cst_First = cst_First$0;
   function compare_local(cmp_f, cmp_s, a_007, b_008){
    if(a_007 === b_008) return 0;
    if(0 === a_007[0]){
     var a_009 = a_007[1];
     if(0 !== b_008[0]) return -1;
     var b_010 = b_008[1];
     return caml_call2(cmp_f, a_009, b_010);
    }
    var a_011 = a_007[1];
    if(0 === b_008[0]) return 1;
    var b_012 = b_008[1];
    return caml_call2(cmp_s, a_011, b_012);
   }
   function compare(cmp_f, cmp_s, a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(cmp_f, a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call2(cmp_s, a_005, b_006);
   }
   function hash_fold_t(hash_fold_f, hash_fold_s, hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = Base_Hash[3].call(null, hsv, 0);
     return caml_call2(hash_fold_f, hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = Base_Hash[3].call(null, hsv, 1);
    return caml_call2(hash_fold_s, hsv$1, a0$0);
   }
   function t_of_sexp(of_f_013, of_s_014, sexp_019){
    a:
    {
     if(0 === sexp_019[0]){
      var a = sexp_019[1];
      b:
      if(a !== cst_First$0){
       if(a !== cst_Second$0){
        if(a === cst_first) break b;
        if(a !== cst_second) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_017, sexp_019);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_017, sexp_019);
     }
     var match = sexp_019[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_017, sexp_019);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_017, sexp_019);
     var tag_020 = match$0[1];
     b:
     if(tag_020 !== cst_First$0){
      if(tag_020 !== cst_Second$0){
       if(tag_020 === cst_first) break b;
       if(tag_020 !== cst_second) break a;
      }
      var sexp_args_026 = match[2];
      if(sexp_args_026 && ! sexp_args_026[2]){
       var
        arg0_027 = sexp_args_026[1],
        res0_028 = caml_call1(of_s_014, arg0_027);
       return [1, res0_028];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_017, tag_020, sexp_019);
     }
     var sexp_args_021 = match[2];
     if(sexp_args_021 && ! sexp_args_021[2]){
      var
       arg0_022 = sexp_args_021[1],
       res0_023 = caml_call1(of_f_013, arg0_022);
      return [0, res0_023];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_017, tag_020, sexp_019);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_017, sexp_019);
   }
   function sexp_of_t(of_f_031, of_s_032, param){
    if(0 === param[0]){
     var arg0_033 = param[1], res0_034 = caml_call1(of_f_031, arg0_033);
     return [1, [0, a, [0, res0_034, 0]]];
    }
    var arg0_035 = param[1], res0_036 = caml_call1(of_s_032, arg0_035);
    return [1, [0, b, [0, res0_036, 0]]];
   }
   function t_sexp_grammar(f_sexp_grammar, s_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_First, [0, [0, f_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Second, [0, [0, s_sexp_grammar, 0]]]], 0]]]];
   }
   var
    Base_Either0 =
      [0,
       compare_local,
       compare,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar];
   runtime.caml_register_global(15, Base_Either0, "Base__Either0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Field
//# shape: Base__Field:[[F(1)*],F(1)*,F(2),F(3),F(1)*,F(3),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function opaque_identity(a){return a;}
   var For_generated_code = [0, opaque_identity];
   function name(param){return param[2];}
   function get(param, r){return caml_call1(param[4], r);}
   function fset(param, r, v){return caml_call2(param[5], r, v);}
   function setter(param){return param[3];}
   function map(param, r, f){
    var a = caml_call1(f, caml_call1(param[4], r));
    return caml_call2(param[5], r, a);
   }
   function updater(param){
    var match = param[3];
    if(! match) return 0;
    var setter = match[1];
    return [0,
            function(r, f){
             return caml_call2
                     (setter, r, caml_call1(f, caml_call1(param[4], r)));
            }];
   }
   var
    Base_Field =
      [0, For_generated_code, name, get, fset, setter, map, updater];
   runtime.caml_register_global(0, Base_Field, "Base__Field");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_conversions
//# unitInfo: Requires: Base__Import, Base__Int0, Base__Printf, Base__Sys0, Base__Word_size, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint
//# shape: Base__Int_conversions:[F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_int$3 = "int",
    cst_int32$3 = "int32",
    cst_int64$3 = "int64",
    cst_nativeint$2 = "nativeint",
    cst_src_int_conversions_ml = "src/int_conversions.ml",
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Sys0 = global_data.Base__Sys0,
    Base_Word_size = global_data.Base__Word_size,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Base_Int0 = global_data.Base__Int0,
    a =
      [0,
       [11,
        "conversion from ",
        [2,
         0,
         [11,
          " to ",
          [2, 0, [11, " failed: ", [2, 0, [11, " is out of range", 0]]]]]]],
       "conversion from %s to %s failed: %s is out of range"];
   function convert_failure(x, a$0, b, to_string){
    var c = caml_call1(to_string, x);
    return caml_call4(Base_Printf[6].call(null, a), a$0, b, c, 0);
   }
   var
    num_bits_int = Base_Sys0[8],
    num_bits_nativeint = Base_Word_size[2].call(null, Base_Word_size[3]),
    cst_int63 = "int63",
    cst_int64$2 = cst_int64$3,
    cst_nativeint$1 = cst_nativeint$2,
    cst_int64$1 = cst_int64$3,
    cst_int32$2 = cst_int32$3,
    cst_nativeint$0 = cst_nativeint$2,
    cst_int32$1 = cst_int32$3,
    cst_int64$0 = cst_int64$3,
    cst_int$2 = cst_int$3,
    cst_nativeint = cst_nativeint$2,
    cst_int$1 = cst_int$3,
    cst_int64 = cst_int64$3,
    b = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_int$0 = cst_int$3,
    cst_int32$0 = cst_int32$3,
    cst_int32 = cst_int32$3,
    cst_int = cst_int$3,
    g = [0, cst_src_int_conversions_ml, 19, 9],
    f = [0, cst_src_int_conversions_ml, 82, 9],
    e = [0, cst_src_int_conversions_ml, 103, 9],
    d = [0, cst_src_int_conversions_ml, 155, 9],
    c = [0, cst_src_int_conversions_ml, 183, 9],
    num_bits_int32 = 32,
    num_bits_int64 = 64;
   if(63 !== num_bits_int && 31 !== num_bits_int && 32 !== num_bits_int)
    throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
   var
    min_int32 = Stdlib_Int32[10],
    max_int32 = Stdlib_Int32[9],
    min_int64 = Stdlib_Int64[10],
    max_int64 = Stdlib_Int64[9],
    min_nativeint = Stdlib_Nativeint[11],
    max_nativeint = Stdlib_Nativeint[10],
    int_to_string = Base_Import[85][33],
    int32_to_string = Stdlib_Int32[14],
    int64_to_string = Stdlib_Int64[14],
    nativeint_to_string = Stdlib_Nativeint[15];
   function int32_to_int_trunc(a){return a;}
   function int_to_int32_trunc(a){return a;}
   if(num_bits_int <= 32)
    var int_is_representable_as_int32 = function(param){return 1;};
   else
    var
     min$6 = min_int32,
     max$6 = max_int32,
     int_is_representable_as_int32 =
       function(x){
        var
         a = caml_call2(Base_Import[228], min$6, x) <= 0 ? 1 : 0,
         b = a ? caml_call2(Base_Import[228], x, max$6) <= 0 ? 1 : 0 : a;
        return b;
       };
   if(32 <= num_bits_int)
    var int32_is_representable_as_int = function(param){return 1;};
   else
    var
     min$5 = Base_Int0[7],
     max$5 = Base_Int0[6],
     int32_is_representable_as_int =
       function(x){
        var
         a = caml_call2(Base_Import[229], min$5, x) <= 0 ? 1 : 0,
         b = a ? caml_call2(Base_Import[229], x, max$5) <= 0 ? 1 : 0 : a;
        return b;
       };
   function int_to_int32(x){
    return int_is_representable_as_int32(x) ? [0, x] : 0;
   }
   function int32_to_int(x){
    return int32_is_representable_as_int(x) ? [0, x] : 0;
   }
   function int_to_int32_exn(x){
    return int_is_representable_as_int32(x)
            ? x
            : convert_failure(x, cst_int, cst_int32, int_to_string);
   }
   function int32_to_int_exn(x){
    return int32_is_representable_as_int(x)
            ? x
            : convert_failure(x, cst_int32$0, cst_int$0, int32_to_string);
   }
   if(num_bits_int >= 64)
    throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
   var
    int_to_int64 = caml_int64_of_int32,
    int64_to_int_trunc = caml_int64_to_int32,
    min$4 = caml_int64_of_int32(Base_Int0[7]),
    max$4 = caml_int64_of_int32(Base_Int0[6]);
   function int64_is_representable_as_int(x){
    var
     a = caml_call2(Base_Import[230], min$4, x) <= 0 ? 1 : 0,
     b = a ? caml_call2(Base_Import[230], x, max$4) <= 0 ? 1 : 0 : a;
    return b;
   }
   function int64_to_int(x){
    return int64_is_representable_as_int(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_int_exn(x){
    return int64_is_representable_as_int(x)
            ? caml_int64_to_int32(x)
            : convert_failure
              (runtime.caml_int64_add(x, b),
               cst_int64,
               cst_int$1,
               int64_to_string);
   }
   if(num_bits_int > num_bits_nativeint)
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   function int_to_nativeint(a){return a;}
   function nativeint_to_int_trunc(a){return a;}
   if(num_bits_nativeint <= num_bits_int)
    var nativeint_is_representable_as_ = function(param){return 1;};
   else
    var
     min$3 = Base_Int0[7],
     max$3 = Base_Int0[6],
     nativeint_is_representable_as_ =
       function(x){
        var
         a = caml_call2(Base_Import[231], min$3, x) <= 0 ? 1 : 0,
         b = a ? caml_call2(Base_Import[231], x, max$3) <= 0 ? 1 : 0 : a;
        return b;
       };
   function nativeint_to_int(x){
    return nativeint_is_representable_as_(x) ? [0, x] : 0;
   }
   function nativeint_to_int_exn(x){
    return nativeint_is_representable_as_(x)
            ? x
            : convert_failure
              (x, cst_nativeint, cst_int$2, nativeint_to_string);
   }
   var
    int32_to_int64 = caml_int64_of_int32,
    int64_to_int32_trunc = caml_int64_to_int32,
    min$2 = caml_int64_of_int32(min_int32),
    max$2 = caml_int64_of_int32(max_int32);
   function int64_is_representable_as_int3(x){
    var
     a = caml_call2(Base_Import[230], min$2, x) <= 0 ? 1 : 0,
     b = a ? caml_call2(Base_Import[230], x, max$2) <= 0 ? 1 : 0 : a;
    return b;
   }
   function int64_to_int32(x){
    return int64_is_representable_as_int3(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_int32_exn(x){
    return int64_is_representable_as_int3(x)
            ? caml_int64_to_int32(x)
            : convert_failure(x, cst_int64$0, cst_int32$1, int64_to_string);
   }
   if(32 > num_bits_nativeint)
    throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
   function int32_to_nativeint(a){return a;}
   function nativeint_to_int32_trunc(a){return a;}
   if(num_bits_nativeint <= 32)
    var nativeint_is_representable_as_$0 = function(param){return 1;};
   else
    var
     min$1 = min_int32,
     max$1 = max_int32,
     nativeint_is_representable_as_$0 =
       function(x){
        var
         a = caml_call2(Base_Import[231], min$1, x) <= 0 ? 1 : 0,
         b = a ? caml_call2(Base_Import[231], x, max$1) <= 0 ? 1 : 0 : a;
        return b;
       };
   function nativeint_to_int32(x){
    return nativeint_is_representable_as_$0(x) ? [0, x] : 0;
   }
   function nativeint_to_int32_exn(x){
    return nativeint_is_representable_as_$0(x)
            ? x
            : convert_failure
              (x, cst_nativeint$0, cst_int32$2, nativeint_to_string);
   }
   if(num_bits_nativeint > 64)
    throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
   var
    int64_to_nativeint_trunc = caml_int64_to_int32,
    nativeint_to_int64 = caml_int64_of_int32;
   if(64 <= num_bits_nativeint)
    var int64_is_representable_as_nati = function(param){return 1;};
   else
    var
     min$0 = caml_int64_of_int32(min_nativeint),
     max$0 = caml_int64_of_int32(max_nativeint),
     int64_is_representable_as_nati =
       function(x){
        var
         a = caml_call2(Base_Import[230], min$0, x) <= 0 ? 1 : 0,
         b = a ? caml_call2(Base_Import[230], x, max$0) <= 0 ? 1 : 0 : a;
        return b;
       };
   function int64_to_nativeint(x){
    return int64_is_representable_as_nati(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_nativeint_exn(x){
    return int64_is_representable_as_nati(x)
            ? caml_int64_to_int32(x)
            : convert_failure
              (x, cst_int64$1, cst_nativeint$1, int64_to_string);
   }
   var
    min = caml_int64_shift_right(min_int64, 1),
    max = caml_int64_shift_right(max_int64, 1);
   function int64_is_representable_as_int6(x){
    var
     a = caml_call2(Base_Import[230], min, x) <= 0 ? 1 : 0,
     b = a ? caml_call2(Base_Import[230], x, max) <= 0 ? 1 : 0 : a;
    return b;
   }
   function int64_fit_on_int63_exn(x){
    return int64_is_representable_as_int6(x)
            ? 0
            : convert_failure(x, cst_int64$2, cst_int63, int64_to_string);
   }
   var
    Base_Int_conversions =
      [0,
       int_to_int32,
       int_to_int32_exn,
       int_to_int32_trunc,
       int_to_int64,
       int_to_nativeint,
       int32_to_int,
       int32_to_int_exn,
       int32_to_int_trunc,
       int32_to_int64,
       int32_to_nativeint,
       int32_is_representable_as_int,
       int64_to_int,
       int64_to_int_exn,
       int64_to_int_trunc,
       int64_to_int32,
       int64_to_int32_exn,
       int64_to_int32_trunc,
       int64_to_nativeint,
       int64_to_nativeint_exn,
       int64_to_nativeint_trunc,
       int64_fit_on_int63_exn,
       int64_is_representable_as_int6,
       nativeint_to_int,
       nativeint_to_int_exn,
       nativeint_to_int_trunc,
       nativeint_to_int32,
       nativeint_to_int32_exn,
       nativeint_to_int32_trunc,
       nativeint_to_int64,
       num_bits_int,
       num_bits_int32,
       num_bits_int64,
       num_bits_nativeint];
   runtime.caml_register_global
    (33, Base_Int_conversions, "Base__Int_conversions");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar0
//# unitInfo: Requires: Stdlib__Uchar
//# shape: Base__Uchar0:[F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(2)*,F(2)*,N,N,N,N,F(1),F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    succ = Stdlib_Uchar[5],
    pred = Stdlib_Uchar[6],
    is_valid = Stdlib_Uchar[7],
    is_char = Stdlib_Uchar[11],
    unsafe_to_char = Stdlib_Uchar[14],
    unsafe_of_int = Stdlib_Uchar[9],
    of_int = Stdlib_Uchar[8],
    to_int = Stdlib_Uchar[10],
    of_char = Stdlib_Uchar[12],
    compare = Stdlib_Uchar[16],
    equal = Stdlib_Uchar[15],
    min_value = Stdlib_Uchar[1],
    max_value = Stdlib_Uchar[2],
    byte_order_mark = Stdlib_Uchar[3],
    replacement_char = Stdlib_Uchar[4],
    utf_8_byte_length = Stdlib_Uchar[23],
    utf_16_byte_length = Stdlib_Uchar[24],
    utf_decode_is_valid = Stdlib_Uchar[18],
    utf_decode_uchar = Stdlib_Uchar[19],
    utf_decode_length = Stdlib_Uchar[20],
    utf_decode = Stdlib_Uchar[21],
    utf_decode_invalid = Stdlib_Uchar[22],
    Base_Uchar0 =
      [0,
       succ,
       pred,
       is_valid,
       is_char,
       unsafe_to_char,
       unsafe_of_int,
       of_int,
       to_int,
       of_char,
       compare,
       equal,
       min_value,
       max_value,
       byte_order_mark,
       replacement_char,
       utf_8_byte_length,
       utf_16_byte_length,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid];
   runtime.caml_register_global(1, Base_Uchar0, "Base__Uchar0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String0
//# unitInfo: Requires: Base__Char0, Base__Import0, Base__Int_conversions, Base__Sys0, Base__Uchar0, Stdlib, Stdlib__StringLabels
//# shape: Base__String0:[[],N,F(2)*,F(1),F(2)*,F(1),F(1),F(2),F(3),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Base_Import0 = global_data.Base__Import0,
    Base_Char0 = global_data.Base__Char0,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Uchar0 = global_data.Base__Uchar0,
    Stdlib = global_data.Stdlib,
    Base_Sys0 = global_data.Base__Sys0,
    String = [0],
    max_length = Base_Sys0[10],
    symbol_concat = Base_Import0[112],
    capitalize = Stdlib_StringLabels[28],
    compare = Stdlib_StringLabels[10],
    escaped = Stdlib_StringLabels[25],
    lowercase = Stdlib_StringLabels[27],
    make = Stdlib_StringLabels[1],
    sub = Stdlib_StringLabels[16],
    uncapitalize = Stdlib_StringLabels[29],
    uppercase = Stdlib_StringLabels[26],
    is_valid_utf_8 = Stdlib_StringLabels[44],
    is_valid_utf_16le = Stdlib_StringLabels[48],
    is_valid_utf_16be = Stdlib_StringLabels[46],
    cst_index_out_of_bounds = "index out of bounds",
    dummy = 0;
   function get_utf_8_uchar(t, byte_pos){
    return Stdlib_StringLabels[43].call(null, t, byte_pos);
   }
   function get_utf_16le_uchar(t, byte_pos){
    return Stdlib_StringLabels[47].call(null, t, byte_pos);
   }
   function get_utf_16be_uchar(t, byte_pos){
    return Stdlib_StringLabels[45].call(null, t, byte_pos);
   }
   function get_utf_32_uchar(get_int32, t, byte_pos){
    var
     len = caml_ml_string_length(t),
     a = 0 <= byte_pos ? 1 : 0,
     match = a ? byte_pos < len ? 1 : 0 : a;
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_index_out_of_bounds], 1);
    var bytes_read = Base_Import0[93].call(null, len, byte_pos);
    if(2 >= bytes_read - 1 >>> 0)
     return Base_Uchar0[22].call(null, bytes_read);
    var int32 = caml_call2(get_int32, t, byte_pos);
    if(! Base_Int_conversions[11].call(null, int32))
     return Base_Uchar0[22].call(null, 4);
    var int = Base_Int_conversions[8].call(null, int32);
    if(! Base_Uchar0[3].call(null, int)) return Base_Uchar0[22].call(null, 4);
    var b = Base_Uchar0[6].call(null, int);
    return Base_Uchar0[21].call(null, 4, b);
   }
   function get_utf_32le_uchar(t, byte_pos){
    return get_utf_32_uchar(Stdlib_StringLabels[61], t, byte_pos);
   }
   function get_utf_32be_uchar(t, byte_pos){
    return get_utf_32_uchar(Stdlib_StringLabels[60], t, byte_pos);
   }
   function concat(opt, l){
    var sep = opt ? opt[1] : cst$0;
    if(! l) return cst;
    if(l[2]) return Stdlib_StringLabels[7].call(null, sep, l);
    var x = l[1];
    return x;
   }
   function iter(t, f){
    var a = Base_Import0[93].call(null, caml_ml_string_length(t), 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call1(f, runtime.caml_string_unsafe_get(t, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function back_up_at_newline(t, pos, eol){
    a:
    {
     if(0 < pos[1]){
      var b = caml_string_get(t, Base_Import0[93].call(null, pos[1], 1));
      if(Base_Char0[12].call(null, b, 13)){var a = 2; break a;}
     }
     var a = 1;
    }
    pos[1] = Base_Import0[93].call(null, pos[1], a);
    eol[1] = Base_Import0[91].call(null, pos[1], 1);
   }
   function split_lines(t){
    var n = caml_ml_string_length(t);
    if(0 === n) return 0;
    var
     pos = [0, Base_Import0[93].call(null, n, 1)],
     eol = [0, n],
     ac = [0, 0],
     a = caml_string_get(t, pos[1]);
    if(Base_Char0[12].call(null, a, 10)) back_up_at_newline(t, pos, eol);
    for(;;){
     if(0 > pos[1]){var d = ac[1]; return [0, sub(t, 0, eol[1]), d];}
     var b = caml_string_get(t, pos[1]);
     if(Base_Char0[12].call(null, b, 10)){
      var start = Base_Import0[91].call(null, pos[1], 1), c = ac[1];
      ac[1] =
       [0, sub(t, start, Base_Import0[93].call(null, eol[1], start)), c];
      back_up_at_newline(t, pos, eol);
     }
     else
      pos[1]--;
    }
   }
   var
    Base_String0 =
      [0,
       String,
       max_length,
       symbol_concat,
       capitalize,
       compare,
       escaped,
       lowercase,
       make,
       sub,
       uncapitalize,
       uppercase,
       is_valid_utf_8,
       is_valid_utf_16le,
       is_valid_utf_16be,
       get_utf_8_uchar,
       get_utf_16le_uchar,
       get_utf_16be_uchar,
       get_utf_32le_uchar,
       get_utf_32be_uchar,
       concat,
       iter,
       split_lines];
   runtime.caml_register_global(10, Base_String0, "Base__String0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Source_code_position0
//# unitInfo: Requires: Base__Comparator, Base__Hash, Base__Import, Base__Int0, Base__String0
//# shape: Base__Source_code_position0:[[F(2),F(2),F(2),F(1),F(1)*],F(2),F(2),F(2),F(1),N,F(4),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$1 = ":";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Base_Import = global_data.Base__Import,
    Base_Int0 = global_data.Base__Int0,
    Base_String0 = global_data.Base__String0,
    Base_Hash = global_data.Base__Hash,
    Base_Comparator = global_data.Base__Comparator,
    a = [0, "pos_cnum"],
    b = [0, "pos_bol"],
    c = [0, "pos_lnum"],
    d = [0, "pos_fname"];
   function compare_local(a_001, b_002){
    if(a_001 === b_002) return 0;
    var n = caml_call2(Base_Import[260], a_001[1], b_002[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base_Import[256], a_001[2], b_002[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base_Import[256], a_001[3], b_002[3]);
    return 0 === n$1 ? caml_call2(Base_Import[256], a_001[4], b_002[4]) : n$1;
   }
   function compare(a, b){return compare_local(a, b);}
   function hash_fold_t(hsv, arg){
    var
     hsv$0 = caml_call2(Base_Import[208], hsv, arg[1]),
     hsv$1 = caml_call2(Base_Import[206], hsv$0, arg[2]),
     hsv$2 = caml_call2(Base_Import[206], hsv$1, arg[3]);
    return caml_call2(Base_Import[206], hsv$2, arg[4]);
   }
   function hash(arg){
    var hsv = Base_Hash[11].call(null, 0, 0), a = hash_fold_t(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   function sexp_of_t(param){
    var
     pos_cnum_010 = param[4],
     pos_bol_008 = param[3],
     pos_lnum_006 = param[2],
     pos_fname_004 = param[1],
     arg_011 = Base_Import[139].call(null, pos_cnum_010),
     bnds_003 = [0, [1, [0, a, [0, arg_011, 0]]], 0],
     arg_009 = Base_Import[139].call(null, pos_bol_008),
     bnds_003$0 = [0, [1, [0, b, [0, arg_009, 0]]], bnds_003],
     arg_007 = Base_Import[139].call(null, pos_lnum_006),
     bnds_003$1 = [0, [1, [0, c, [0, arg_007, 0]]], bnds_003$0],
     arg_005 = Base_Import[136].call(null, pos_fname_004),
     bnds_003$2 = [0, [1, [0, d, [0, arg_005, 0]]], bnds_003$1];
    return [1, bnds_003$2];
   }
   var
    T = [0, compare_local, compare, hash_fold_t, hash, sexp_of_t],
    include = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include[1];
   function make_location_string(pos_fname, pos_lnum, pos_cnum, pos_bol){
    var
     a = Base_Import[93].call(null, pos_cnum, pos_bol),
     b = [0, cst, [0, Base_Int0[1].call(null, a), 0]],
     c = [0, pos_fname, [0, cst$0, [0, Base_Int0[1].call(null, pos_lnum), b]]];
    return Base_String0[20].call(null, 0, c);
   }
   function to_string(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return make_location_string(pos_fname, pos_lnum, pos_cnum, pos_bol);
   }
   function sexp_of_t$0(t){return [0, to_string(t)];}
   var
    Base_Source_code_position0 =
      [0,
       T,
       compare_local,
       compare,
       hash_fold_t,
       hash,
       comparator,
       make_location_string,
       to_string,
       sexp_of_t$0];
   runtime.caml_register_global
    (11, Base_Source_code_position0, "Base__Source_code_position0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Invariant_intf
//# shape: Base__Invariant_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Invariant_intf = [0];
   runtime.caml_register_global
    (0, Base_Invariant_intf, "Base__Invariant_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List1
//# unitInfo: Requires: Base__List0
//# shape: Base__List1:[F(1),F(2),F(1),F(1),F(1),F(2),F(3),F(3),F(4),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2),F(3),F(1),F(3),F(4),F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List0 = global_data.Base__List0,
    hd_exn = Base_List0[1],
    rev_append = Base_List0[2],
    tl_exn = Base_List0[3],
    unzip = Base_List0[4],
    length = Base_List0[5],
    exists = Base_List0[6],
    exists2_ok = Base_List0[7],
    fold = Base_List0[8],
    fold2_ok = Base_List0[9],
    for_all = Base_List0[10],
    for_all2_ok = Base_List0[11],
    iter = Base_List0[12],
    iter2_ok = Base_List0[13],
    nontail_map = Base_List0[14],
    nontail_mapi = Base_List0[15],
    partition = Base_List0[16],
    rev_map = Base_List0[17],
    rev_map2_ok = Base_List0[18],
    rev = Base_List0[19],
    fold_right = Base_List0[20],
    fold_right2_ok = Base_List0[21];
   function is_empty(param){return param ? 0 : 1;}
   function partition_map(t, f){
    var t$0 = t, fst = 0, snd = 0;
    for(;;){
     if(! t$0){var a = rev(snd); return [0, rev(fst), a];}
     var t$1 = t$0[2], x = t$0[1], match = caml_call1(f, x);
     if(0 === match[0]){
      var y = match[1], fst$0 = [0, y, fst];
      t$0 = t$1;
      fst = fst$0;
     }
     else{var y$0 = match[1], snd$0 = [0, y$0, snd]; t$0 = t$1; snd = snd$0;}
    }
   }
   var
    Base_List1 =
      [0,
       hd_exn,
       rev_append,
       tl_exn,
       unzip,
       length,
       exists,
       exists2_ok,
       fold,
       fold2_ok,
       for_all,
       for_all2_ok,
       iter,
       iter2_ok,
       nontail_map,
       nontail_mapi,
       partition,
       rev_map,
       rev_map2_ok,
       rev,
       fold_right,
       fold_right2_ok,
       is_empty,
       partition_map];
   runtime.caml_register_global(1, Base_List1, "Base__List1");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Result
//# unitInfo: Requires: Base__Hash, Base__Import, Base__List1, Base__Monad, Base__Printf, Sexplib0__Sexp_conv_error
//# shape: Base__Result:[F(3),F(3),F(2)*,F(4),F(4),F(4),F(4),F(4),F(3),N,N,N,N,N,N,N,N,N,N,N,F(3),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(2)*,F(2),F(2),N,F(2),F(4),F(1),F(1),F(1)*,F(1)*,F(2)*,F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Error$0 = "Error",
    cst_Ok$0 = "Ok",
    cst_error = "error",
    cst_ok = "ok",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_005 = "result.ml.t",
    Base_List1 = global_data.Base__List1,
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Monad = global_data.Base__Monad,
    a = [0, cst_Ok$0],
    b = [0, cst_Error$0],
    cst_Error = cst_Error$0,
    cst_Ok = cst_Ok$0;
   function t_of_sexp(of_a_001, of_b_002, sexp_007){
    a:
    {
     if(0 === sexp_007[0]){
      var a = sexp_007[1];
      b:
      if(a !== cst_Error$0){
       if(a !== cst_Ok$0){
        if(a === cst_error) break b;
        if(a !== cst_ok) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_005, sexp_007);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_005, sexp_007);
     }
     var match = sexp_007[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_005, sexp_007);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_005, sexp_007);
     var tag_008 = match$0[1];
     b:
     if(tag_008 !== cst_Error$0){
      if(tag_008 !== cst_Ok$0){
       if(tag_008 === cst_error) break b;
       if(tag_008 !== cst_ok) break a;
      }
      var sexp_args_009 = match[2];
      if(sexp_args_009 && ! sexp_args_009[2]){
       var
        arg0_010 = sexp_args_009[1],
        res0_011 = caml_call1(of_a_001, arg0_010);
       return [0, res0_011];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_005, tag_008, sexp_007);
     }
     var sexp_args_014 = match[2];
     if(sexp_args_014 && ! sexp_args_014[2]){
      var
       arg0_015 = sexp_args_014[1],
       res0_016 = caml_call1(of_b_002, arg0_015);
      return [1, res0_016];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_005, tag_008, sexp_007);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_005, sexp_007);
   }
   function sexp_of_t(of_a_019, of_b_020, param){
    if(0 === param[0]){
     var arg0_021 = param[1], res0_022 = caml_call1(of_a_019, arg0_021);
     return [1, [0, a, [0, res0_022, 0]]];
    }
    var arg0_023 = param[1], res0_024 = caml_call1(of_b_020, arg0_023);
    return [1, [0, b, [0, res0_024, 0]]];
   }
   function t_sexp_grammar(a_sexp_grammar, b_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Ok, [0, [0, a_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Error, [0, [0, b_sexp_grammar, 0]]]], 0]]]];
   }
   function compare_local(cmp_a, cmp_b, a_033, b_034){
    if(a_033 === b_034) return 0;
    if(0 === a_033[0]){
     var a_035 = a_033[1];
     if(0 !== b_034[0]) return -1;
     var b_036 = b_034[1];
     return caml_call2(cmp_a, a_035, b_036);
    }
    var a_037 = a_033[1];
    if(0 === b_034[0]) return 1;
    var b_038 = b_034[1];
    return caml_call2(cmp_b, a_037, b_038);
   }
   function compare(cmp_a, cmp_b, a_027, b_028){
    if(a_027 === b_028) return 0;
    if(0 === a_027[0]){
     var a_029 = a_027[1];
     if(0 !== b_028[0]) return -1;
     var b_030 = b_028[1];
     return caml_call2(cmp_a, a_029, b_030);
    }
    var a_031 = a_027[1];
    if(0 === b_028[0]) return 1;
    var b_032 = b_028[1];
    return caml_call2(cmp_b, a_031, b_032);
   }
   function equal_local(cmp_a, cmp_b, a_045, b_046){
    if(a_045 === b_046) return 1;
    if(0 === a_045[0]){
     var a_047 = a_045[1];
     if(0 !== b_046[0]) return 0;
     var b_048 = b_046[1];
     return caml_call2(cmp_a, a_047, b_048);
    }
    var a_049 = a_045[1];
    if(0 === b_046[0]) return 0;
    var b_050 = b_046[1];
    return caml_call2(cmp_b, a_049, b_050);
   }
   function equal(cmp_a, cmp_b, a_039, b_040){
    if(a_039 === b_040) return 1;
    if(0 === a_039[0]){
     var a_041 = a_039[1];
     if(0 !== b_040[0]) return 0;
     var b_042 = b_040[1];
     return caml_call2(cmp_a, a_041, b_042);
    }
    var a_043 = a_039[1];
    if(0 === b_040[0]) return 0;
    var b_044 = b_040[1];
    return caml_call2(cmp_b, a_043, b_044);
   }
   function hash_fold_t(hash_fold_a, hash_fold_b, hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = Base_Hash[3].call(null, hsv, 0);
     return caml_call2(hash_fold_a, hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = Base_Hash[3].call(null, hsv, 1);
    return caml_call2(hash_fold_b, hsv$1, a0$0);
   }
   var globalize = Base_Import[295];
   function bind(x, f){
    if(0 !== x[0]) return x;
    var x$0 = x[1];
    return caml_call1(f, x$0);
   }
   var
    map =
      [0,
       -198771759,
       function(x, f){
        if(0 !== x[0]) return x;
        var x$0 = x[1];
        return [0, caml_call1(f, x$0)];
       }];
   function return$(x){return [0, x];}
   var
    include = Base_Monad[6].call(null, [0, bind, map, return$]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Let_syntax = include[3],
    Monad_infix = include[4],
    bind$0 = include[5],
    return$0 = include[6],
    map$0 = include[7],
    join = include[8],
    ignore_m = include[9],
    all = include[10],
    all_unit = include[11];
   function invariant(check_ok, check_error, t){
    if(0 === t[0]){var ok = t[1]; return caml_call1(check_ok, ok);}
    var error = t[1];
    return caml_call1(check_error, error);
   }
   function fail(x){return [1, x];}
   function failf(format){return Base_Printf[4].call(null, fail, format);}
   function map_error(t, f){
    if(0 === t[0]) return t;
    var x = t[1];
    return [1, caml_call1(f, x)];
   }
   function bind$1(x, f){
    if(0 === x[0]) return x;
    var e = x[1];
    return caml_call1(f, e);
   }
   var map$1 = [0, -198771759, map_error];
   function return$1(e){return [1, e];}
   var
    Error = Base_Monad[6].call(null, [0, bind$1, map$1, return$1]),
    c = [0, 0];
   function is_ok(param){return 0 === param[0] ? 1 : 0;}
   function is_error(param){return 0 === param[0] ? 0 : 1;}
   function ok(param){
    if(0 !== param[0]) return 0;
    var x = param[1];
    return [0, x];
   }
   function error(param){
    if(0 === param[0]) return 0;
    var x = param[1];
    return [0, x];
   }
   function of_option(opt, error){
    if(! opt) return [1, error];
    var x = opt[1];
    return [0, x];
   }
   function iter(v, f){
    if(0 !== v[0]) return 0;
    var x = v[1];
    return caml_call1(f, x);
   }
   function iter_error(v, f){
    if(0 === v[0]) return 0;
    var x = v[1];
    return caml_call1(f, x);
   }
   function to_either(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var x$0 = param[1];
    return [1, x$0];
   }
   function of_either(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var x$0 = param[1];
    return [1, x$0];
   }
   function ok_if_true(bool, error){return bool ? c : [1, error];}
   function try_with(f){
    try{var a = [0, caml_call1(f, 0)]; return a;}
    catch(exn$0){var exn = caml_wrap_exception(exn$0); return [1, exn];}
   }
   function ok_exn(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var exn = param[1];
    throw caml_maybe_attach_backtrace(exn, 1);
   }
   function ok_or_failwith(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var str = param[1];
    return Base_Import[124].call(null, str);
   }
   function combine(t1, t2, ok, err){
    if(0 === t1[0]){
     var ok1 = t1[1];
     if(0 === t2[0]){var ok2 = t2[1]; return [0, caml_call2(ok, ok1, ok2)];}
     var e = t2[1];
    }
    else{
     var err1 = t1[1];
     if(0 !== t2[0]){
      var err2 = t2[1];
      return [1, caml_call2(err, err1, err2)];
     }
     var e = err1;
    }
    return [1, e];
   }
   function combine_errors(l){
    var
     match = Base_List1[23].call(null, l, to_either),
     errs = match[2],
     ok = match[1];
    return errs ? [1, errs] : [0, ok];
   }
   function combine_errors_unit(l){
    return caml_call2(map$0, combine_errors(l), function(param){return 0;});
   }
   var
    Base_Result =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare,
       compare_local,
       equal,
       equal_local,
       hash_fold_t,
       globalize,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Monad_infix,
       bind$0,
       return$0,
       join,
       ignore_m,
       all,
       all_unit,
       Error,
       invariant,
       fail,
       failf,
       is_ok,
       is_error,
       ok,
       ok_exn,
       ok_or_failwith,
       error,
       of_option,
       iter,
       iter_error,
       map$0,
       map_error,
       combine,
       combine_errors,
       combine_errors_unit,
       to_either,
       of_either,
       ok_if_true,
       try_with,
       [0, is_ok, is_error]];
   runtime.caml_register_global(20, Base_Result, "Base__Result");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Container_intf
//# shape: Base__Container_intf:[[[]],[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Continue_or_stop = [0],
    Export = [0, Continue_or_stop],
    Base_Container_intf = [0, Export, Continue_or_stop];
   runtime.caml_register_global
    (0, Base_Container_intf, "Base__Container_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Container
//# unitInfo: Requires: Base__Array0, Base__Container_intf, Base__Import, Base__List0, Base__With_return
//# shape: Base__Container:[F(3),F(3),F(3),F(3),F(2),F(2),F(4),F(4),F(5),F(2),F(4),F(3),F(3),F(3),F(3),F(3),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array0 = global_data.Base__Array0,
    Base_List0 = global_data.Base__List0,
    Base_Import = global_data.Base__Import,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1];
   function iter(fold, t, f){
    return caml_call3
            (fold, t, 0, function(param, a){return caml_call1(f, a);});
   }
   function count(fold, t, f){
    return caml_call3
            (fold,
             t,
             0,
             function(n, a){
              return caml_call1(f, a) ? Base_Import[91].call(null, n, 1) : n;
             });
   }
   function sum(fold, M, t, f){
    return caml_call3
            (fold,
             t,
             M[1],
             function(n, a){
              var b = caml_call1(f, a);
              return caml_call2(M[2], n, b);
             });
   }
   function fold_result(fold, init, f, t){
    return with_return
            (function(param){
              return [0,
                      caml_call3
                       (fold,
                        t,
                        init,
                        function(acc, item){
                         var e = caml_call2(f, acc, item);
                         if(0 !== e[0]) return caml_call1(param, e);
                         var x = e[1];
                         return x;
                        })];
             });
   }
   function fold_until(fold, init, f, finish, t){
    return with_return
            (function(param){
              return caml_call1
                      (finish,
                       caml_call3
                        (fold,
                         t,
                         init,
                         function(acc, item){
                          var match = caml_call2(f, acc, item);
                          if(0 === match[0]){var x = match[1]; return x;}
                          var x$0 = match[1];
                          return caml_call1(param, x$0);
                         }));
             });
   }
   function min_elt(fold, t, compare){
    return caml_call3
            (fold,
             t,
             0,
             function(acc, elt){
              if(! acc) return [0, elt];
              var min = acc[1];
              return 0 < caml_call2(compare, min, elt) ? [0, elt] : acc;
             });
   }
   function max_elt(fold, t, compare){
    return caml_call3
            (fold,
             t,
             0,
             function(acc, elt){
              if(! acc) return [0, elt];
              var max = acc[1];
              return 0 <= caml_call2(compare, max, elt) ? acc : [0, elt];
             });
   }
   function length(fold, c){
    return caml_call3
            (fold,
             c,
             0,
             function(acc, param){return Base_Import[91].call(null, acc, 1);});
   }
   function is_empty(iter, c){
    return with_return
            (function(r){
              caml_call2(iter, c, function(param){return caml_call1(r, 0);});
              return 1;
             });
   }
   function mem(iter, c, x, equal){
    return with_return
            (function(r){
              caml_call2
               (iter,
                c,
                function(y){
                 var a = caml_call2(equal, x, y);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function exists(iter, c, f){
    return with_return
            (function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var a = caml_call1(f, x);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function for_all(iter, c, f){
    return with_return
            (function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var a = 1 - caml_call1(f, x);
                 return a ? caml_call1(r, 0) : a;
                });
              return 1;
             });
   }
   function find_map(iter, t, f){
    return with_return
            (function(r){
              caml_call2
               (iter,
                t,
                function(x){
                 var res = caml_call1(f, x);
                 return res ? caml_call1(r, res) : 0;
                });
              return 0;
             });
   }
   function find(iter, c, f){
    return with_return
            (function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var a = caml_call1(f, x);
                 return a ? caml_call1(r, [0, x]) : a;
                });
              return 0;
             });
   }
   function to_list(fold, c){
    var a = caml_call3(fold, c, 0, function(acc, x){return [0, x, acc];});
    return Base_List0[19].call(null, a);
   }
   function to_array(length, iter, c){
    var array = [0, [0]], i = [0, 0];
    caml_call2
     (iter,
      c,
      function(x){
       if(0 === i[1]){
        var b = caml_call1(length, c);
        array[1] = Base_Array0[4].call(null, b, x);
       }
       var a = i[1];
       runtime.caml_check_bound(array[1], a)[a + 1] = x;
       i[1]++;
       return 0;
      });
    return array[1];
   }
   function Make_gen(T){
    var fold = T[1], match = T[2];
    if(typeof match === "number")
     var iter$0 = function(t, f){return iter(fold, t, f);};
    else
     var iter$1 = match[2], iter$0 = iter$1;
    var match$0 = T[3];
    if(typeof match$0 === "number")
     var length$0 = function(t){return length(fold, t);};
    else
     var length$1 = match$0[2], length$0 = length$1;
    function is_empty$0(t){return is_empty(iter$0, t);}
    function mem$0(t, x, equal){return mem(iter$0, t, x, equal);}
    function sum$0(m, t){return function(a){return sum(fold, m, t, a);};}
    function count$0(t, f){return count(fold, t, f);}
    function exists$0(t, f){return exists(iter$0, t, f);}
    function for_all$0(t, f){return for_all(iter$0, t, f);}
    function find_map$0(t, f){return find_map(iter$0, t, f);}
    function find$0(t, f){return find(iter$0, t, f);}
    function to_list$0(t){return to_list(fold, t);}
    function to_array$0(t){return to_array(length$0, iter$0, t);}
    function min_elt$0(t, compare){return min_elt(fold, t, compare);}
    function max_elt$0(t, compare){return max_elt(fold, t, compare);}
    function fold_result$0(t, init, f){return fold_result(fold, init, f, t);}
    function fold_until$0(t, init, f, finish){
     return fold_until(fold, init, f, finish, t);
    }
    return [0,
            length$0,
            is_empty$0,
            mem$0,
            iter$0,
            fold,
            fold_result$0,
            fold_until$0,
            exists$0,
            for_all$0,
            count$0,
            sum$0,
            find$0,
            find_map$0,
            to_list$0,
            to_array$0,
            min_elt$0,
            max_elt$0];
   }
   function Make_gen_with_creators(T){
    var
     include = Make_gen([0, T[1], T[2], T[3]]),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     of_list = T[4],
     of_array = T[5],
     concat = T[6],
     concat_of_array = T[7];
    function append(a, b){
     return caml_call1(concat, caml_call1(concat_of_array, [0, a, b]));
    }
    function concat_map(t, f){
     var a = caml_call1(to_array, t);
     return caml_call1
             (concat,
              caml_call1(concat_of_array, Base_Array0[21].call(null, a, f)));
    }
    function filter_map(t, f){
     return concat_map
             (t,
              function(x){
               var match = caml_call1(f, x);
               if(! match) return caml_call1(of_array, [0]);
               var y = match[1];
               return caml_call1(of_array, [0, y]);
              });
    }
    function map(t, f){
     return filter_map(t, function(x){return [0, caml_call1(f, x)];});
    }
    function filter(t, f){
     return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
    }
    function partition_map(t, f){
     var
      a = caml_call1(to_array, t),
      array = Base_Array0[21].call(null, a, f),
      xs =
        Base_Array0[18].call
         (null,
          array,
          function(either, acc){
           if(0 !== either[0]) return acc;
           var x = either[1];
           return [0, x, acc];
          },
          0),
      ys =
        Base_Array0[18].call
         (null,
          array,
          function(either, acc){
           if(0 === either[0]) return acc;
           var x = either[1];
           return [0, x, acc];
          },
          0),
      b = caml_call1(of_list, ys);
     return [0, caml_call1(of_list, xs), b];
    }
    function partition_tf(t, f){
     return partition_map
             (t, function(x){return caml_call1(f, x) ? [0, x] : [1, x];});
    }
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            of_list,
            of_array,
            append,
            concat,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map];
   }
   var
    Base_Container =
      [0,
       iter,
       count,
       min_elt,
       max_elt,
       length,
       to_list,
       sum,
       fold_result,
       fold_until,
       is_empty,
       mem,
       exists,
       for_all,
       find,
       find_map,
       to_array,
       function(T){
        var
         fold = T[1],
         iter = T[2],
         length = T[3],
         include = Make_gen([0, fold, iter, length]),
         length$0 = include[1],
         is_empty = include[2],
         mem = include[3],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17];
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt];
       },
       function(T){
        var
         fold = T[2],
         iter = T[3],
         length = T[4],
         include = Make_gen([0, fold, iter, length]),
         length$0 = include[1],
         is_empty = include[2],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         a = include[3];
        function mem(t, x){return caml_call3(a, t, x, T[1][1]);}
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt];
       },
       Make_gen,
       function(T){
        var
         fold = T[1],
         iter = T[2],
         length = T[3],
         of_list = T[4],
         of_array = T[5],
         concat = T[6],
         include =
           Make_gen_with_creators
            ([0, fold, iter, length, of_list, of_array, concat, of_array]),
         length$0 = include[1],
         is_empty = include[2],
         mem = include[3],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         of_list$0 = include[18],
         of_array$0 = include[19],
         append = include[20],
         concat$0 = include[21],
         map = include[22],
         filter = include[23],
         filter_map = include[24],
         concat_map = include[25],
         partition_tf = include[26],
         partition_map = include[27];
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                of_list$0,
                of_array$0,
                append,
                concat$0,
                map,
                filter,
                filter_map,
                concat_map,
                partition_tf,
                partition_map];
       },
       function(T){
        var
         fold = T[2],
         iter = T[3],
         length = T[4],
         of_list = T[5],
         of_array = T[6],
         concat = T[7],
         concat_of_array = Base_Array0[16],
         include =
           Make_gen_with_creators
            ([0,
              fold,
              iter,
              length,
              of_list,
              of_array,
              concat,
              concat_of_array]),
         length$0 = include[1],
         is_empty = include[2],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         of_list$0 = include[18],
         of_array$0 = include[19],
         append = include[20],
         concat$0 = include[21],
         map = include[22],
         filter = include[23],
         filter_map = include[24],
         concat_map = include[25],
         partition_tf = include[26],
         partition_map = include[27],
         a = include[3];
        function mem(t, x){return caml_call3(a, t, x, T[1][1]);}
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                of_list$0,
                of_array$0,
                append,
                concat$0,
                map,
                filter,
                filter_map,
                concat_map,
                partition_tf,
                partition_map];
       },
       Make_gen_with_creators];
   runtime.caml_register_global(4, Base_Container, "Base__Container");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Indexed_container_intf
//# shape: Base__Indexed_container_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Indexed_container_intf = [0];
   runtime.caml_register_global
    (0, Base_Indexed_container_intf, "Base__Indexed_container_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Indexed_container
//# unitInfo: Requires: Base__Array0, Base__Container, Base__Import, Base__Indexed_container_intf, Base__With_return
//# shape: Base__Indexed_container:[F(4),F(3),F(3),F(3),F(3),F(3),F(3),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array0 = global_data.Base__Array0,
    Base_Container = global_data.Base__Container,
    Base_Import = global_data.Base__Import,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1];
   function iteri(fold, t, f){
    caml_call3
     (fold,
      t,
      0,
      function(i, x){
       caml_call2(f, i, x);
       return Base_Import[91].call(null, i, 1);
      });
    return 0;
   }
   function foldi(fold, t, init, f){
    var i = [0, 0];
    return caml_call3
            (fold,
             t,
             init,
             function(acc, v){
              var acc$0 = caml_call3(f, i[1], acc, v);
              i[1] = Base_Import[91].call(null, i[1], 1);
              return acc$0;
             });
   }
   function counti(foldi, t, f){
    return caml_call3
            (foldi,
             t,
             0,
             function(i, n, a){
              return caml_call2(f, i, a)
                      ? Base_Import[91].call(null, n, 1)
                      : n;
             });
   }
   function existsi(iteri, c, f){
    return with_return
            (function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var a = caml_call2(f, i, x);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function for_alli(iteri, c, f){
    return with_return
            (function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var a = 1 - caml_call2(f, i, x);
                 return a ? caml_call1(r, 0) : a;
                });
              return 1;
             });
   }
   function find_mapi(iteri, t, f){
    return with_return
            (function(r){
              caml_call2
               (iteri,
                t,
                function(i, x){
                 var res = caml_call2(f, i, x);
                 return res ? caml_call1(r, res) : 0;
                });
              return 0;
             });
   }
   function findi(iteri, c, f){
    return with_return
            (function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var a = caml_call2(f, i, x);
                 return a ? caml_call1(r, [0, [0, i, x]]) : a;
                });
              return 0;
             });
   }
   function Make_gen_with_container(T, include){
    var
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     match = T[4];
    if(typeof match === "number")
     var iteri$0 = function(t, f){return iteri(fold, t, f);};
    else
     var iteri$1 = match[2], iteri$0 = iteri$1;
    var match$0 = T[5];
    if(typeof match$0 === "number")
     var foldi$0 = function(t, init, f){return foldi(fold, t, init, f);};
    else
     var foldi$1 = match$0[2], foldi$0 = foldi$1;
    function counti$0(t, f){return counti(foldi$0, t, f);}
    function existsi$0(t, f){return existsi(iteri$0, t, f);}
    function for_alli$0(t, f){return for_alli(iteri$0, t, f);}
    function find_mapi$0(t, f){return find_mapi(iteri$0, t, f);}
    function findi$0(t, f){return findi(iteri$0, t, f);}
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi$0,
            iteri$0,
            existsi$0,
            for_alli$0,
            counti$0,
            findi$0,
            find_mapi$0];
   }
   function Make_gen(T){
    var
     C = Base_Container[19].call(null, [0, T[1], T[2], T[3]]),
     include = Make_gen_with_container(T, C),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     foldi = include[18],
     iteri = include[19],
     existsi = include[20],
     for_alli = include[21],
     counti = include[22],
     findi = include[23],
     find_mapi = include[24];
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi,
            iteri,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi];
   }
   function Make_gen_with_creators(T){
    var
     C =
       Base_Container[22].call
        (null, [0, T[5], T[6], T[7], T[2], T[3], T[4], T[1]]),
     of_list = C[18],
     of_array = C[19],
     append = C[20],
     concat = C[21],
     map = C[22],
     filter = C[23],
     filter_map = C[24],
     concat_map = C[25],
     partition_tf = C[26],
     partition_map = C[27],
     include =
       Make_gen_with_container
        ([0, T[5], T[6], T[7], T[8], T[9]],
         [0,
          C[1],
          C[2],
          C[3],
          C[4],
          C[5],
          C[6],
          C[7],
          C[8],
          C[9],
          C[10],
          C[11],
          C[12],
          C[13],
          C[14],
          C[15],
          C[16],
          C[17]]),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     foldi = include[18],
     iteri = include[19],
     existsi = include[20],
     for_alli = include[21],
     counti = include[22],
     findi = include[23],
     find_mapi = include[24];
    function derived_init(n, f){
     return caml_call1(of_array, Base_Array0[12].call(null, n, f));
    }
    var match = T[10];
    if(typeof match === "number")
     var init = derived_init;
    else
     var init$0 = match[2], init = init$0;
    function derived_concat_mapi(t, f){
     var a = caml_call1(to_array, t), b = Base_Array0[22].call(null, a, f);
     return caml_call1(concat, caml_call1(T[1], b));
    }
    var match$0 = T[11];
    if(typeof match$0 === "number")
     var concat_mapi = derived_concat_mapi;
    else
     var concat_mapi$0 = match$0[2], concat_mapi = concat_mapi$0;
    function filter_mapi(t, f){
     return caml_call2
             (concat_mapi,
              t,
              function(i, x){
               var match = caml_call2(f, i, x);
               if(! match) return caml_call1(of_array, [0]);
               var y = match[1];
               return caml_call1(of_array, [0, y]);
              });
    }
    function mapi(t, f){
     return filter_mapi(t, function(i, x){return [0, caml_call2(f, i, x)];});
    }
    function filteri(t, f){
     return filter_mapi
             (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
    }
    return [0,
            of_list,
            of_array,
            append,
            concat,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi,
            iteri,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi,
            init,
            mapi,
            filteri,
            filter_mapi,
            concat_mapi];
   }
   var
    Base_Indexed_container =
      [0,
       foldi,
       iteri,
       counti,
       existsi,
       for_alli,
       findi,
       find_mapi,
       function(T){
        var
         fold = T[1],
         iter = T[2],
         length = T[3],
         iteri = T[4],
         foldi = T[5],
         include = Make_gen([0, fold, iter, length, iteri, foldi]),
         length$0 = include[1],
         is_empty = include[2],
         mem = include[3],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         foldi$0 = include[18],
         iteri$0 = include[19],
         existsi = include[20],
         for_alli = include[21],
         counti = include[22],
         findi = include[23],
         find_mapi = include[24];
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                foldi$0,
                iteri$0,
                existsi,
                for_alli,
                counti,
                findi,
                find_mapi];
       },
       function(T){
        var
         fold = T[2],
         iter = T[3],
         length = T[4],
         iteri = T[5],
         foldi = T[6],
         include = Make_gen([0, fold, iter, length, iteri, foldi]),
         length$0 = include[1],
         is_empty = include[2],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         foldi$0 = include[18],
         iteri$0 = include[19],
         existsi = include[20],
         for_alli = include[21],
         counti = include[22],
         findi = include[23],
         find_mapi = include[24],
         a = include[3];
        function mem(t, x){return caml_call3(a, t, x, T[1][1]);}
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                foldi$0,
                iteri$0,
                existsi,
                for_alli,
                counti,
                findi,
                find_mapi];
       },
       Make_gen,
       function(T){
        var
         of_list = T[1],
         of_array = T[2],
         concat = T[3],
         fold = T[4],
         iter = T[5],
         length = T[6],
         iteri = T[7],
         foldi = T[8],
         init = T[9],
         concat_mapi = T[10],
         include =
           Make_gen_with_creators
            ([0,
              of_array,
              of_list,
              of_array,
              concat,
              fold,
              iter,
              length,
              iteri,
              foldi,
              init,
              concat_mapi]),
         of_list$0 = include[1],
         of_array$0 = include[2],
         append = include[3],
         concat$0 = include[4],
         map = include[5],
         filter = include[6],
         filter_map = include[7],
         concat_map = include[8],
         partition_tf = include[9],
         partition_map = include[10],
         length$0 = include[11],
         is_empty = include[12],
         mem = include[13],
         iter$0 = include[14],
         fold$0 = include[15],
         fold_result = include[16],
         fold_until = include[17],
         exists = include[18],
         for_all = include[19],
         count = include[20],
         sum = include[21],
         find = include[22],
         find_map = include[23],
         to_list = include[24],
         to_array = include[25],
         min_elt = include[26],
         max_elt = include[27],
         foldi$0 = include[28],
         iteri$0 = include[29],
         existsi = include[30],
         for_alli = include[31],
         counti = include[32],
         findi = include[33],
         find_mapi = include[34],
         init$0 = include[35],
         mapi = include[36],
         filteri = include[37],
         filter_mapi = include[38],
         concat_mapi$0 = include[39];
        return [0,
                of_list$0,
                of_array$0,
                append,
                concat$0,
                map,
                filter,
                filter_map,
                concat_map,
                partition_tf,
                partition_map,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                foldi$0,
                iteri$0,
                existsi,
                for_alli,
                counti,
                findi,
                find_mapi,
                init$0,
                mapi,
                filteri,
                filter_mapi,
                concat_mapi$0];
       },
       function(T){
        var
         of_list = T[2],
         of_array = T[3],
         concat = T[4],
         fold = T[5],
         iter = T[6],
         length = T[7],
         iteri = T[8],
         foldi = T[9],
         init = T[10],
         concat_mapi = T[11],
         concat_of_array = Base_Array0[16],
         include =
           Make_gen_with_creators
            ([0,
              concat_of_array,
              of_list,
              of_array,
              concat,
              fold,
              iter,
              length,
              iteri,
              foldi,
              init,
              concat_mapi]),
         of_list$0 = include[1],
         of_array$0 = include[2],
         append = include[3],
         concat$0 = include[4],
         map = include[5],
         filter = include[6],
         filter_map = include[7],
         concat_map = include[8],
         partition_tf = include[9],
         partition_map = include[10],
         length$0 = include[11],
         is_empty = include[12],
         iter$0 = include[14],
         fold$0 = include[15],
         fold_result = include[16],
         fold_until = include[17],
         exists = include[18],
         for_all = include[19],
         count = include[20],
         sum = include[21],
         find = include[22],
         find_map = include[23],
         to_list = include[24],
         to_array = include[25],
         min_elt = include[26],
         max_elt = include[27],
         foldi$0 = include[28],
         iteri$0 = include[29],
         existsi = include[30],
         for_alli = include[31],
         counti = include[32],
         findi = include[33],
         find_mapi = include[34],
         init$0 = include[35],
         mapi = include[36],
         filteri = include[37],
         filter_mapi = include[38],
         concat_mapi$0 = include[39],
         a = include[13];
        function mem(t, x){return caml_call3(a, t, x, T[1][1]);}
        return [0,
                of_list$0,
                of_array$0,
                append,
                concat$0,
                map,
                filter,
                filter_map,
                concat_map,
                partition_tf,
                partition_map,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                foldi$0,
                iteri$0,
                existsi,
                for_alli,
                counti,
                findi,
                find_mapi,
                init$0,
                mapi,
                filteri,
                filter_mapi,
                concat_mapi$0];
       },
       Make_gen_with_creators];
   runtime.caml_register_global
    (4, Base_Indexed_container, "Base__Indexed_container");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Lazy
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Import, Base__Monad, CamlinternalLazy, Stdlib__Lazy
//# shape: Base__Lazy:[F(3),F(3),F(3),F(3),F(2)*,N,F(2),F(2),F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),F(1),[F(2)]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Import = global_data.Base__Import,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Base_Globalize = global_data.Base__Globalize,
    Base_Hash = global_data.Base__Hash,
    Base_Monad = global_data.Base__Monad,
    Undefined = Stdlib_Lazy[1],
    is_val = Stdlib_Lazy[3],
    from_val = Stdlib_Lazy[4],
    from_fun = Stdlib_Lazy[6],
    force_val = Stdlib_Lazy[7],
    t_of_sexp = Base_Import[169],
    sexp_of_t = Base_Import[145];
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Import[192].call(null, a_sexp_grammar);
   }
   var globalize = Base_Globalize[12];
   function compare_local(compare_a, t1, t2){
    if(t1 === t2) return 0;
    var a = caml_obj_tag(t2);
    a:
    if(250 === a)
     var b = t2[1];
    else{
     if(246 !== a && 244 !== a){var b = t2; break a;}
     var b = CamlinternalLazy[2].call(null, t2);
    }
    var c = caml_obj_tag(t1);
    a:
    if(250 === c)
     var d = t1[1];
    else{
     if(246 !== c && 244 !== c){var d = t1; break a;}
     var d = CamlinternalLazy[2].call(null, t1);
    }
    return caml_call2(compare_a, d, b);
   }
   function compare(compare_a, t1, t2){
    return compare_local(compare_a, t1, t2);
   }
   function equal_local(equal_a, t1, t2){
    if(t1 === t2) return 1;
    var a = caml_obj_tag(t2);
    a:
    if(250 === a)
     var b = t2[1];
    else{
     if(246 !== a && 244 !== a){var b = t2; break a;}
     var b = CamlinternalLazy[2].call(null, t2);
    }
    var c = caml_obj_tag(t1);
    a:
    if(250 === c)
     var d = t1[1];
    else{
     if(246 !== c && 244 !== c){var d = t1; break a;}
     var d = CamlinternalLazy[2].call(null, t1);
    }
    return caml_call2(equal_a, d, b);
   }
   function equal(equal_a, t1, t2){return equal_local(equal_a, t1, t2);}
   var hash_fold_t = Base_Hash[13][12];
   function peek(t){
    if(! is_val(t)) return 0;
    var a = caml_obj_tag(t);
    a:
    if(250 === a)
     var b = t[1];
    else{
     if(246 !== a && 244 !== a){var b = t; break a;}
     var b = CamlinternalLazy[2].call(null, t);
    }
    return [0, b];
   }
   function return$(x){return from_val(x);}
   function bind(t, f){
    return [246,
            function(param){
             var b = caml_obj_tag(t);
             a:
             if(250 === b)
              var c = t[1];
             else{
              if(246 !== b && 244 !== b){var c = t; break a;}
              var c = CamlinternalLazy[2].call(null, t);
             }
             var a = caml_call1(f, c), d = caml_obj_tag(a);
             if(250 === d) return a[1];
             if(246 !== d && 244 !== d) return a;
             return CamlinternalLazy[2].call(null, a);
            }];
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return [246,
                function(param){
                 var a = caml_obj_tag(t);
                 a:
                 if(250 === a)
                  var b = t[1];
                 else{
                  if(246 !== a && 244 !== a){var b = t; break a;}
                  var b = CamlinternalLazy[2].call(null, t);
                 }
                 return caml_call1(f, b);
                }];
       }],
    include = Base_Monad[1].call(null, [0, bind, return$, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$0 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11],
    cst_unforced_lazy = "<unforced lazy>";
   function sexp_of_t$0(sexp_of_a, t){
    if(! is_val(t)) return Base_Import[136].call(null, cst_unforced_lazy);
    var a = caml_obj_tag(t);
    a:
    if(250 === a)
     var b = t[1];
    else{
     if(246 !== a && 244 !== a){var b = t; break a;}
     var b = CamlinternalLazy[2].call(null, t);
    }
    return caml_call1(sexp_of_a, b);
   }
   var
    T_unforcing = [0, sexp_of_t$0],
    Base_Lazy =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$0,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       peek,
       T_unforcing];
   runtime.caml_register_global(7, Base_Lazy, "Base__Lazy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Info_intf
//# shape: Base__Info_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Info_intf = [0];
   runtime.caml_register_global(0, Base_Info_intf, "Base__Info_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordered_collection_common0
//# unitInfo: Requires: Base__Import, Base__Printf
//# shape: Base__Ordered_collection_common0:[F(4),F(3),[F(3)]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    invalid_argf = Base_Printf[7],
    a =
      [0,
       [11, "Negative position: ", [4, 0, 0, 0, 0]],
       "Negative position: %d"],
    b = [0, [11, "Negative length: ", [4, 0, 0, 0, 0]], "Negative length: %d"],
    c =
      [0,
       [11,
        "pos + len past end: ",
        [4, 0, 0, 0, [11, " + ", [4, 0, 0, 0, [11, " > ", [4, 0, 0, 0, 0]]]]]],
       "pos + len past end: %d + %d > %d"];
   function slow_check_pos_len_exn(pos, len, total_length){
    if(pos < 0) caml_call2(invalid_argf(a), pos, 0);
    if(len < 0) caml_call2(invalid_argf(b), len, 0);
    var d = Base_Import[93].call(null, total_length, len) < pos ? 1 : 0;
    return d ? caml_call4(invalid_argf(c), pos, len, total_length, 0) : d;
   }
   function check_pos_len_exn(pos, len, total_length){
    var
     stop = Base_Import[91].call(null, pos, len),
     b = Base_Import[93].call(null, total_length, stop),
     c = Base_Import[118].call(null, pos, len),
     d = Base_Import[118].call(null, c, stop),
     a = Base_Import[118].call(null, d, b) < 0 ? 1 : 0;
    return a ? slow_check_pos_len_exn(pos, len, total_length) : a;
   }
   function get_pos_len_exn(opt, len, param, total_length){
    var pos = opt ? opt[1] : 0;
    if(len)
     var i = len[1], len$0 = i;
    else
     var len$0 = Base_Import[93].call(null, total_length, pos);
    check_pos_len_exn(pos, len$0, total_length);
    return [0, pos, len$0];
   }
   var
    Private = [0, slow_check_pos_len_exn],
    Base_Ordered_collection_common =
      [0, get_pos_len_exn, check_pos_len_exn, Private];
   runtime.caml_register_global
    (5, Base_Ordered_collection_common, "Base__Ordered_collection_common0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Random_repr
//# unitInfo: Requires: Stdlib__Bigarray, Stdlib__Domain, Stdlib__Random
//# shape: Base__Random_repr:[[F(1)*],F(2),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random;
   function of_state(a){return a;}
   var Repr = [0, of_state];
   function assign(t, state){
    var dst = caml_call1(Stdlib_Domain[10][2], t);
    return runtime.caml_ba_blit(state, dst);
   }
   function make(state){
    function split_from_parent(v){
     return caml_call1(Stdlib_Random[19][19], v);
    }
    var
     t =
       caml_call2
        (Stdlib_Domain[10][1],
         [0, split_from_parent],
         function(param){return state;});
    caml_call1(Stdlib_Domain[10][2], t);
    return t;
   }
   function make_lazy(f){
    function split_from_parent(v){
     return caml_call1(Stdlib_Random[19][19], v);
    }
    return caml_call2(Stdlib_Domain[10][1], [0, split_from_parent], f);
   }
   function get_state(t){return caml_call1(Stdlib_Domain[10][2], t);}
   var Base_Random_repr = [0, Repr, assign, make, make_lazy, get_state];
   runtime.caml_register_global(2, Base_Random_repr, "Base__Random_repr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Random
//# unitInfo: Requires: Base__Char0, Base__Import, Base__Int0, Base__Printf, Base__Random_repr, Base__Word_size, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__Random
//# shape: Base__Random:[F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(1),F(1),F(1),N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_int64_xor = runtime.caml_int64_xor;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Random_repr = global_data.Base__Random_repr,
    Base_Import = global_data.Base__Import,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Base_Int0 = global_data.Base__Int0,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Char0 = global_data.Base__Char0,
    Base_Word_size = global_data.Base__Word_size,
    cst_initializing_Random_with_a =
      "initializing Random with a nondeterministic seed is forbidden in inline tests",
    dummy = 0;
   function forbid_nondeterminism_in_tests(allow_in_tests){
    var a = Base_Import[129];
    if(! a) return a;
    if(allow_in_tests && allow_in_tests[1]) return;
    return Base_Import[124].call(null, cst_initializing_Random_with_a);
   }
   function bits(t){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call1(Stdlib_Random[19][4], a);
   }
   function bits64(t){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call1(Stdlib_Random[19][17], a);
   }
   function bool(t){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call1(Stdlib_Random[19][15], a);
   }
   function int(t, x){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call2(Stdlib_Random[19][5], a, x);
   }
   function int32(t, x){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call2(Stdlib_Random[19][8], a, x);
   }
   function int64(t, x){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call2(Stdlib_Random[19][12], a, x);
   }
   function nativeint(t, x){
    var a = Base_Random_repr[5].call(null, t);
    return caml_call2(Stdlib_Random[19][10], a, x);
   }
   function make(seed){
    var a = caml_call1(Stdlib_Random[19][1], seed);
    return Base_Random_repr[3].call(null, a);
   }
   function copy(t){
    var
     a = Base_Random_repr[5].call(null, t),
     b = caml_call1(Stdlib_Random[19][3], a);
    return Base_Random_repr[3].call(null, b);
   }
   function char(t){var a = int(t, 256); return Base_Char0[5].call(null, a);}
   function ascii(t){var a = int(t, 128); return Base_Char0[5].call(null, a);}
   function make_self_init(allow_in_tests, param){
    forbid_nondeterminism_in_tests(allow_in_tests);
    return Base_Random_repr[4].call(null, Stdlib_Random[19][2]);
   }
   var
    assign = Base_Random_repr[2],
    cst_float = "float",
    cst_int64 = "int64",
    b = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_nativeint = "nativeint",
    cst_int32 = "int32",
    cst_int = "int",
    a =
      [0,
       [11,
        "Random.",
        [2,
         0,
         [11, ": crossed bounds [", [2, 0, [11, " > ", [2, 0, [12, 93, 0]]]]]]],
       "Random.%s: crossed bounds [%s > %s]"];
   if(Base_Import[129]){
    var t = Stdlib_Random[20].call(null, 0);
    Stdlib_Random[1].call(null, 137);
    var default$ = Base_Random_repr[3].call(null, t);
   }
   else
    var default$ = make_self_init(0, 0);
   function int_on_64bits(t, bound){
    return 1073741823 < bound
            ? caml_int64_to_int32(int64(t, caml_int64_of_int32(bound)))
            : int(t, bound);
   }
   function int_on_32bits(t, bound){
    return 1073741823 < bound ? int32(t, bound) : int(t, bound);
   }
   var int$0 = Base_Word_size[3] ? int_on_64bits : int_on_32bits;
   function bits$0(state){return caml_int64_of_int32(bits(state));}
   function full_range_int64(state){
    var
     a = caml_int64_shift_left(bits$0(state), 60),
     b = caml_int64_xor(caml_int64_shift_left(bits$0(state), 30), a);
    return caml_int64_xor(bits$0(state), b);
   }
   function bits$1(state){return bits(state);}
   function full_range_int32(state){
    var a = bits$1(state) << 30;
    return bits$1(state) ^ a;
   }
   function full_range_int_on_64bits(state){
    return caml_int64_to_int32(full_range_int64(state));
   }
   function full_range_int_on_32bits(state){return full_range_int32(state);}
   var
    full_range_int =
      Base_Word_size[3] ? full_range_int_on_64bits : full_range_int_on_32bits;
   function full_range_nativeint_on_64bits(state){
    return caml_int64_to_int32(full_range_int64(state));
   }
   function full_range_nativeint_on_32bits(state){return full_range_int32(state);
   }
   var
    full_range_nativeint =
      Base_Word_size[3]
       ? full_range_nativeint_on_64bits
       : full_range_nativeint_on_32bits;
   function raise_crossed_bounds
   (name, lower_bound, upper_bound, string_of_bound){
    var
     b = caml_call1(string_of_bound, upper_bound),
     c = caml_call1(string_of_bound, lower_bound);
    return caml_call4(Base_Printf[6].call(null, a), name, c, b, 0);
   }
   function int_incl(state, lo, hi){
    if(hi < lo) raise_crossed_bounds(cst_int, lo, hi, Base_Int0[1]);
    var diff = Base_Import[93].call(null, hi, lo);
    if(diff === Base_Int0[6]){
     var
      a = Base_Int0[6],
      b = full_range_int(state),
      c = Base_Import[116].call(null, b, a);
     return Base_Import[91].call(null, lo, c);
    }
    if(0 <= diff){
     var d = int$0(state, Base_Int0[8].call(null, diff));
     return Base_Import[91].call(null, lo, d);
    }
    for(;;){
     var int = full_range_int(state);
     if(lo <= int && int <= hi) return int;
    }
   }
   function int32_incl(state, lo, hi){
    if(Base_Import[102][5].call(null, lo, hi))
     raise_crossed_bounds(cst_int32, lo, hi, Stdlib_Int32[14]);
    var diff = hi - lo | 0;
    if(Base_Import[102][4].call(null, diff, Stdlib_Int32[9])){
     var a = Stdlib_Int32[9];
     return lo + (full_range_int32(state) & a) | 0;
    }
    if(Base_Import[102][6].call(null, diff, 0))
     return lo + int32(state, Stdlib_Int32[6].call(null, diff)) | 0;
    for(;;){
     var int = full_range_int32(state);
     if
      (Base_Import[102][6].call(null, int, lo)
       && Base_Import[102][2].call(null, int, hi))
      return int;
    }
   }
   function nativeint_incl(state, lo, hi){
    if(Base_Import[104][5].call(null, lo, hi))
     raise_crossed_bounds(cst_nativeint, lo, hi, Stdlib_Nativeint[15]);
    var diff = hi - lo | 0;
    if(Base_Import[104][4].call(null, diff, Stdlib_Nativeint[10])){
     var a = Stdlib_Nativeint[10];
     return lo + (full_range_nativeint(state) & a) | 0;
    }
    if(Base_Import[104][6].call(null, diff, 0))
     return lo + nativeint(state, Stdlib_Nativeint[6].call(null, diff)) | 0;
    for(;;){
     var int = full_range_nativeint(state);
     if
      (Base_Import[104][6].call(null, int, lo)
       && Base_Import[104][2].call(null, int, hi))
      return int;
    }
   }
   function int64_incl(state, lo, hi){
    if(runtime.caml_greaterthan(lo, hi))
     raise_crossed_bounds(cst_int64, lo, hi, Stdlib_Int64[14]);
    var diff = runtime.caml_int64_sub(hi, lo);
    if(runtime.caml_equal(diff, Stdlib_Int64[9])){
     var a = Stdlib_Int64[9];
     return caml_int64_add
             (lo, runtime.caml_int64_and(full_range_int64(state), a));
    }
    if(caml_greaterequal(diff, b))
     return caml_int64_add(lo, int64(state, Stdlib_Int64[6].call(null, diff)));
    for(;;){
     var int = full_range_int64(state);
     if(caml_greaterequal(int, lo) && runtime.caml_lessequal(int, hi))
      return int;
    }
   }
   function float(state, hi){
    for(;;){
     var
      scale = 9.313225746154785e-10,
      r1 = bits(state),
      r2 = bits(state),
      a = Base_Import[90].call(null, r1, scale),
      b = Base_Import[92].call(null, a, r2),
      result = Base_Import[90].call(null, b, scale);
     if(result < 1.) return Base_Import[90].call(null, result, hi);
    }
   }
   function float_range(state, lo, hi){
    if(hi < lo) raise_crossed_bounds(cst_float, lo, hi, Base_Import[85][35]);
    var a = float(state, Base_Import[94].call(null, hi, lo));
    return Base_Import[92].call(null, lo, a);
   }
   function bits$2(param){return bits(default$);}
   function bits64$0(param){return bits64(default$);}
   function int$1(x){return int$0(default$, x);}
   function int32$0(x){return int32(default$, x);}
   function nativeint$0(x){return nativeint(default$, x);}
   function int64$0(x){return int64(default$, x);}
   function float$0(x){return float(default$, x);}
   function int_incl$0(x, y){return int_incl(default$, x, y);}
   function int32_incl$0(x, y){return int32_incl(default$, x, y);}
   function nativeint_incl$0(x, y){return nativeint_incl(default$, x, y);}
   function int64_incl$0(x, y){return int64_incl(default$, x, y);}
   function float_range$0(x, y){return float_range(default$, x, y);}
   function bool$0(param){return bool(default$);}
   function char$0(param){return char(default$);}
   function ascii$0(param){return ascii(default$);}
   function full_init(seed){
    return assign(default$, caml_call1(Stdlib_Random[19][1], seed));
   }
   function init(seed){return full_init([0, seed]);}
   function self_init(allow_in_tests, param){
    forbid_nondeterminism_in_tests(allow_in_tests);
    return full_init(runtime.caml_sys_random_seed(0));
   }
   function set_state(s){
    return assign(default$, Base_Random_repr[5].call(null, s));
   }
   var
    Base_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$2,
       bits64$0,
       int$1,
       int32$0,
       nativeint$0,
       int64$0,
       float$0,
       int_incl$0,
       int32_incl$0,
       nativeint_incl$0,
       int64_incl$0,
       float_range$0,
       bool$0,
       char$0,
       ascii$0,
       [0,
        default$,
        make,
        make_self_init,
        copy,
        bits,
        bits64,
        int$0,
        int32,
        nativeint,
        int64,
        float,
        int_incl,
        int32_incl,
        nativeint_incl,
        int64_incl,
        float_range,
        bool,
        char,
        ascii],
       set_state];
   runtime.caml_register_global(22, Base_Random, "Base__Random");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array_permute
//# unitInfo: Requires: Base__Array0, Base__Import, Base__Ordered_collection_common0, Base__Random
//# shape: Base__Array_permute:[F(1),[],N,F(2)*,F(2)*,F(1)*,F(2)*,F(5),F(1)*,F(1)*,F(4),F(2),F(3),F(1),F(3),F(1),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(3),F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Random = global_data.Base__Random,
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common0,
    Base_Array0 = global_data.Base__Array0,
    invalid_argf = Base_Array0[1],
    Array = Base_Array0[2],
    max_length = Base_Array0[3],
    create = Base_Array0[4],
    create_local = Base_Array0[5],
    create_float_uninitialized = Base_Array0[6],
    append = Base_Array0[7],
    blit = Base_Array0[8],
    concat = Base_Array0[9],
    copy = Base_Array0[10],
    fill = Base_Array0[11],
    init = Base_Array0[12],
    make_matrix = Base_Array0[13],
    of_list = Base_Array0[14],
    sub = Base_Array0[15],
    to_list = Base_Array0[16],
    fold = Base_Array0[17],
    fold_right = Base_Array0[18],
    iter = Base_Array0[19],
    iteri = Base_Array0[20],
    map = Base_Array0[21],
    mapi = Base_Array0[22],
    stable_sort = Base_Array0[23],
    swap = Base_Array0[24];
   function permute(a, opt, len, t){
    var
     random_state = a ? a[1] : Base_Random[19][1],
     pos = opt ? opt[1] : 0,
     total_length = t.length - 1;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = Base_Import[93].call(null, total_length, pos);
    Base_Ordered_collection_common[2].call(null, pos, len$0, total_length);
    var num_swaps = Base_Import[93].call(null, len$0, 1);
    if(num_swaps >= 1){
     var i = num_swaps;
     for(;;){
      var
       this_i = Base_Import[91].call(null, pos, i),
       b = Base_Import[91].call(null, i, 1),
       c = caml_call2(Base_Random[19][7], random_state, b),
       random_i = Base_Import[91].call(null, pos, c);
      swap(t, this_i, random_i);
      var d = i - 1 | 0;
      if(1 === i) break;
      i = d;
     }
    }
    return 0;
   }
   var
    Base_Array_permute =
      [0,
       invalid_argf,
       Array,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       append,
       blit,
       concat,
       copy,
       fill,
       init,
       make_matrix,
       of_list,
       sub,
       to_list,
       fold,
       fold_right,
       iter,
       iteri,
       map,
       mapi,
       stable_sort,
       swap,
       permute];
   runtime.caml_register_global(4, Base_Array_permute, "Base__Array_permute");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Equal
//# shape: Base__Equal:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Equal = [0];
   runtime.caml_register_global(0, Base_Equal, "Base__Equal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordering
//# unitInfo: Requires: Base__Hash, Sexplib0__Sexp_conv_error
//# shape: Base__Ordering:[F(2)*,F(2)*,F(2),F(1),F(1),F(1)*,N,N,F(2)*,F(2)*,F(1)*,F(1)*,[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Equal = "Equal",
    cst_Greater = "Greater",
    cst_Less = "Less",
    cst_equal = "equal",
    cst_greater = "greater",
    cst_less = "less",
    caml_int_compare = runtime.caml_int_compare,
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    error_source_005 = "ordering.ml.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Less, 0]],
         [0, [1, [0, cst_Equal, 0]], [0, [1, [0, cst_Greater, 0]], 0]]]]],
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    compare_local = caml_int_compare,
    compare = caml_int_compare,
    a = [0, cst_Less],
    b = [0, cst_Equal],
    c = [0, cst_Greater];
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var a = 0; break;
      case 1:
       var a = 1; break;
      default: var a = 2;
    }
    return Base_Hash[3].call(null, hsv, a);
   }
   function hash(arg){
    var hsv = Base_Hash[11].call(null, 0, 0), a = hash_fold_t(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var a = sexp_006[1];
      b:
      if(a !== cst_Equal){
       c:
       if(a !== cst_Greater){
        if(a !== cst_Less){
         if(a === cst_equal) break b;
         if(a === cst_greater) break c;
         if(a !== cst_less) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var match = sexp_006[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_005, sexp_006);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_005, sexp_006);
     var b = match$0[1];
     b:
     if(b !== cst_Equal){
      c:
      if(b !== cst_Greater){
       if(b !== cst_Less){
        if(b === cst_equal) break b;
        if(b === cst_greater) break c;
        if(b !== cst_less) break a;
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_005, sexp_006);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_005, sexp_006);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_005, sexp_006);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){case 0: return a;case 1: return b;default: return c;
    }
   }
   function equal(a, b){return 0 === caml_int_compare(a, b) ? 1 : 0;}
   function equal_local(a, b){return 0 === caml_int_compare(a, b) ? 1 : 0;}
   var Export = [0];
   function of_int(n){return 0 <= n ? 0 === n ? 1 : 2 : 0;}
   function to_int(param){
    switch(param){case 0: return -1;case 1: return 0;default: return 1;
    }
   }
   var
    Base_Ordering =
      [0,
       compare,
       compare_local,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       all,
       equal,
       equal_local,
       of_int,
       to_int,
       Export];
   runtime.caml_register_global(20, Base_Ordering, "Base__Ordering");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List
//# unitInfo: Requires: Base__Applicative, Base__Array0, Base__Array_permute, Base__Container, Base__Import, Base__List1, Base__Monad, Base__Ordering, Base__Printf, Base__Random, Base__Result, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_grammar
//# shape: Base__List:[F(3),F(3),F(2),N,F(2),F(2),F(1)*,F(1)*,F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(3),F(1)*,F(2),F(3),F(3),F(4),F(2),F(2),F(2),F(3),F(2),F(2),F(1)*,F(1),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),N,F(2),F(2),N,F(2),F(1)*,F(2),N,N,N,N,N,N,F(1)*,F(2),F(2),F(1),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(4),F(4),F(4),F(4),F(3),F(3),F(3),F(3),F(2),F(2),F(1),F(2),F(2),F(2),F(3),F(1)*,F(1)*,F(1),F(1),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(3),F(4),F(4),F(4),F(4),F(3),F(3),F(3),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(1),F(3),F(3),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(5),F(6),F(2),F(2),F(1),N,F(3),F(2),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(2)*,F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),[F(2)],F(1),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = " <> ",
    cst$0 = ": ",
    cst_List_map2$1 = "List.map2",
    cst_List_map3$1 = "List.map3",
    cst_List_range_stride_function$2 =
      "List.range': stride function cannot change direction",
    cst_length_mismatch_in = "length mismatch in ",
    cst_src_list_ml = "src/list.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    error_source_036 = "list.ml.Assoc.t",
    Base_Import = global_data.Base__Import,
    Base_Container = global_data.Base__Container,
    Assert_failure = global_data.Assert_failure,
    Base_Random = global_data.Base__Random,
    Base_Array0 = global_data.Base__Array0,
    Base_Array_permute = global_data.Base__Array_permute,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Result = global_data.Base__Result,
    Base_Ordering = global_data.Base__Ordering,
    Base_List1 = global_data.Base__List1,
    Base_Printf = global_data.Base__Printf,
    Base_Applicative = global_data.Base__Applicative,
    Base_Monad = global_data.Base__Monad,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    hd_exn = Base_List1[1],
    rev_append = Base_List1[2],
    tl_exn = Base_List1[3],
    length = Base_List1[5],
    exists = Base_List1[6],
    exists2_ok = Base_List1[7],
    fold = Base_List1[8],
    fold2_ok = Base_List1[9],
    for_all = Base_List1[10],
    for_all2_ok = Base_List1[11],
    iter = Base_List1[12],
    iter2_ok = Base_List1[13],
    rev_map = Base_List1[17],
    rev_map2_ok = Base_List1[18],
    rev = Base_List1[19],
    fold_right = Base_List1[20],
    fold_right2_ok = Base_List1[21],
    is_empty = Base_List1[22],
    partition_map = Base_List1[23],
    invalid_argf = Base_Printf[7],
    globalize = Base_Import[293],
    t_of_sexp = Base_Import[173],
    sexp_of_t = Base_Import[149],
    a = [0, "Ok"],
    b = [0, "Unequal_lengths"],
    cst_List_range_stride_function =
      "List.range': stride function cannot return the same value",
    cst_List_range_stride_function$0 = cst_List_range_stride_function$2,
    cst_List_range_stride_function$1 = cst_List_range_stride_function$2,
    cst_List_range_stride_must_be_ = "List.range: stride must be non-zero",
    c =
      [0,
       [11,
        "List.nth_exn ",
        [4, 0, 0, 0, [11, " called on list of length ", [4, 0, 0, 0, 0]]]],
       "List.nth_exn %d called on list of length %d"],
    d =
      [0,
       [11,
        cst_length_mismatch_in,
        [2, 0, [11, cst$0, [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]]]],
       "length mismatch in %s: %d <> %d"],
    e =
      [0,
       [11,
        cst_length_mismatch_in,
        [2,
         0,
         [11,
          cst$0,
          [4,
           0,
           0,
           0,
           [11,
            cst,
            [4,
             0,
             0,
             0,
             [11, " || ", [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]]]]]]]],
       "length mismatch in %s: %d <> %d || %d <> %d"],
    cst_iter2_exn = "iter2_exn",
    cst_rev_map2_exn = "rev_map2_exn",
    cst_fold2_exn = "fold2_exn",
    cst_fold_right2_exn = "fold_right2_exn",
    cst_for_all2_exn = "for_all2_exn",
    cst_exists2_exn = "exists2_exn";
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Import[194].call(null, a_sexp_grammar);
   }
   function compare_local(cmp_a, a_014, b_015){
    if(a_014 === b_015) return 0;
    if(! a_014) return b_015 ? 1 : 0;
    var a_016 = a_014[1];
    if(! b_015) return -1;
    var b_017 = b_015[1];
    return caml_call2(cmp_a, a_016, b_017);
   }
   function compare(cmp_a, a_010, b_011){
    if(a_010 === b_011) return 0;
    if(! a_010) return b_011 ? 1 : 0;
    var a_012 = a_010[1];
    if(! b_011) return -1;
    var b_013 = b_011[1];
    return caml_call2(cmp_a, a_012, b_013);
   }
   function sexp_of_t$0(of_a_018, param){
    if(! param) return b;
    var arg0_019 = param[1], res0_020 = caml_call1(of_a_018, arg0_019);
    return [1, [0, a, [0, res0_020, 0]]];
   }
   function invariant(f, t){return iter(t, f);}
   function of_list(t){return t;}
   function singleton(x){return [0, x, 0];}
   function range(compare, stride, a, opt, start_i, stop_i){
    var
     start = a ? a[1] : 104758188,
     stop = opt ? opt[1] : -160346914,
     next_i = caml_call1(stride, start_i);
    function order(x, y){
     var a = caml_call2(compare, x, y);
     return Base_Ordering[11].call(null, a);
    }
    function raise_stride_cannot_return_sam(param){
     return Base_Import[126].call(null, cst_List_range_stride_function);
    }
    switch(order(start_i, next_i)){
      case 0:
       var initial_stride_order = 847855481; break;
      case 1:
       var initial_stride_order = raise_stride_cannot_return_sam(0); break;
      default: var initial_stride_order = 85047514;
    }
    var
     start_i$0 = 104758188 <= start ? start_i : next_i,
     i_to_stop_order = order(start_i$0, stop_i);
    a:
    {
     switch(i_to_stop_order){
       case 0:
        if(847855481 <= initial_stride_order) break a; break;
       case 1:
        return 104758188 <= stop ? [0, start_i$0, 0] : 0;
       default: if(847855481 > initial_stride_order) break a;
     }
     return 0;
    }
    var next_i$0 = caml_call1(stride, start_i$0);
    a:
    {
     switch(order(start_i$0, next_i$0)){
       case 0:
        if(847855481 > initial_stride_order) break a; break;
       case 1:
        return raise_stride_cannot_return_sam(0);
       default: if(847855481 <= initial_stride_order) break a;
     }
     var block = [0, start_i$0, 24029], dst = block, offset = 1, i = next_i$0;
     for(;;){
      var i_to_stop_order$0 = order(i, stop_i);
      b:
      {
       c:
       {
        switch(i_to_stop_order$0){
          case 0:
           if(847855481 <= initial_stride_order) break c; break;
          case 1:
           if(104758188 <= stop){dst[offset + 1] = [0, i, 0]; break b;}
           dst[offset + 1] = 0;
           break b;
          default: if(847855481 > initial_stride_order) break c;
        }
        dst[offset + 1] = 0;
        break b;
       }
       var next_i$1 = caml_call1(stride, i);
       c:
       {
        switch(order(i, next_i$1)){
          case 0:
           if(847855481 > initial_stride_order) break c; break;
          case 1:
           dst[offset + 1] = raise_stride_cannot_return_sam(0); break b;
          default: if(847855481 <= initial_stride_order) break c;
        }
        var dst$0 = [0, i, 24029];
        dst[offset + 1] = dst$0;
        dst = dst$0;
        offset = 1;
        i = next_i$1;
        continue;
       }
       dst[offset + 1] =
        Base_Import[126].call(null, cst_List_range_stride_function$1);
      }
      return block;
     }
    }
    return Base_Import[126].call(null, cst_List_range_stride_function$0);
   }
   function range$0(b, a, opt, start_i, stop_i){
    var
     stride = b ? b[1] : 1,
     start = a ? a[1] : 104758188,
     stop = opt ? opt[1] : -160346914;
    if(0 === stride)
     Base_Import[126].call(null, cst_List_range_stride_must_be_);
    return range
            (runtime.caml_int_compare,
             function(x){return Base_Import[91].call(null, x, stride);},
             [0, start],
             [0, stop],
             start_i,
             stop_i);
   }
   function hd(t){if(! t) return 0; var x = t[1]; return [0, x];}
   function tl(t){if(! t) return 0; var t$0 = t[2]; return [0, t$0];}
   function nth(t, n){
    if(0 > n) return 0;
    var t$0 = t, n$0 = n;
    for(;;){
     if(! t$0) return 0;
     var t$1 = t$0[2], a = t$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = Base_Import[93].call(null, n$0, 1);
     t$0 = t$1;
     n$0 = n$1;
    }
   }
   function nth_exn(t, n){
    var match = nth(t, n);
    if(match){var a = match[1]; return a;}
    var b = length(t);
    return caml_call3(invalid_argf(c), n, b, 0);
   }
   function unordered_append(l1, l2){
    if(l1){if(l2) return rev_append(l1, l2); var l = l1;} else var l = l2;
    return l;
   }
   function of_lists(l1, l2){
    var a = l1, b = l2, shared_length = 0;
    for(;;){
     if(a){
      if(b){
       var
        b$0 = b[2],
        a$0 = a[2],
        shared_length$0 = Base_Import[91].call(null, shared_length, 1);
       a = a$0;
       b = b$0;
       shared_length = shared_length$0;
       continue;
      }
     }
     else if(! b) return [0, shared_length];
     return [1, shared_length, a, b];
    }
   }
   function check_length2_exn(name, l1, l2){
    var match = of_lists(l1, l2);
    if(0 === match[0]) return;
    var
     tail_of_b = match[3],
     tail_of_a = match[2],
     shared_length = match[1],
     a = length(tail_of_b),
     b = Base_Import[91].call(null, shared_length, a),
     c = length(tail_of_a),
     e = Base_Import[91].call(null, shared_length, c);
    return caml_call4(invalid_argf(d), name, e, b, 0);
   }
   function check_length2(l1, l2, f){
    return 0 === of_lists(l1, l2)[0] ? [0, caml_call2(f, l1, l2)] : 0;
   }
   function of_lists$0(l1, l2, l3){
    var a = l1, b = l2, c = l3, shared_length = 0;
    for(;;){
     if(a){
      if(b && c){
       var
        c$0 = c[2],
        b$0 = b[2],
        a$0 = a[2],
        shared_length$0 = Base_Import[91].call(null, shared_length, 1);
       a = a$0;
       b = b$0;
       c = c$0;
       shared_length = shared_length$0;
       continue;
      }
     }
     else if(! b && ! c) return [0, shared_length];
     return [1, shared_length, a, b, c];
    }
   }
   function check_length3_exn(name, l1, l2, l3){
    var match = of_lists$0(l1, l2, l3);
    if(0 === match[0]) return;
    var
     tail_of_c = match[4],
     tail_of_b = match[3],
     tail_of_a = match[2],
     shared_length = match[1],
     a = length(tail_of_a),
     n1 = Base_Import[91].call(null, shared_length, a),
     b = length(tail_of_b),
     n2 = Base_Import[91].call(null, shared_length, b),
     c = length(tail_of_c),
     n3 = Base_Import[91].call(null, shared_length, c);
    return caml_call6(invalid_argf(e), name, n1, n2, n2, n3, 0);
   }
   function check_length3(l1, l2, l3, f){
    return 0 === of_lists$0(l1, l2, l3)[0]
            ? [0, caml_call3(f, l1, l2, l3)]
            : 0;
   }
   function iter2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return iter2_ok(a, b, f);};});
   }
   function iter2_exn(l1, l2, f){
    check_length2_exn(cst_iter2_exn, l1, l2);
    return iter2_ok(l1, l2, f);
   }
   function rev_map2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return rev_map2_ok(a, b, f);};});
   }
   function rev_map2_exn(l1, l2, f){
    check_length2_exn(cst_rev_map2_exn, l1, l2);
    return rev_map2_ok(l1, l2, f);
   }
   function fold2(l1, l2, init, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return fold2_ok(a, b, init, f);};});
   }
   function fold2_exn(l1, l2, init, f){
    check_length2_exn(cst_fold2_exn, l1, l2);
    return fold2_ok(l1, l2, init, f);
   }
   function fold_right2(l1, l2, f, init){
    return check_length2
            (l1,
             l2,
             function(a){
              return function(b){return fold_right2_ok(a, b, f, init);};
             });
   }
   function fold_right2_exn(l1, l2, f, init){
    check_length2_exn(cst_fold_right2_exn, l1, l2);
    return fold_right2_ok(l1, l2, f, init);
   }
   function for_all2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return for_all2_ok(a, b, f);};});
   }
   function for_all2_exn(l1, l2, f){
    check_length2_exn(cst_for_all2_exn, l1, l2);
    return for_all2_ok(l1, l2, f);
   }
   function exists2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return exists2_ok(a, b, f);};});
   }
   function exists2_exn(l1, l2, f){
    check_length2_exn(cst_exists2_exn, l1, l2);
    return exists2_ok(l1, l2, f);
   }
   function mem(t, a, equal){
    var param = t;
    for(;;){
     if(! param) return 0;
     var bs = param[2], b = param[1], c = caml_call2(equal, a, b);
     if(c) return c;
     param = bs;
    }
   }
   function rev_filter(t, f){
    var accu = 0, param = t;
    for(;;){
     if(! param) return accu;
     var l = param[2], x = param[1];
     if(caml_call1(f, x)){
      var accu$0 = [0, x, accu];
      accu = accu$0;
      param = l;
     }
     else
      param = l;
    }
   }
   function filter(l$1, f){
    var l = l$1;
    for(;;){
     if(! l) return 0;
     var tl = l[2], hd = l[1];
     if(caml_call1(f, hd)) break;
     l = tl;
    }
    var block = [0, hd, 24029], dst = block, offset = 1, l$0 = tl;
    for(;;){
     if(! l$0){dst[offset + 1] = 0; return block;}
     var tl$0 = l$0[2], hd$0 = l$0[1];
     if(caml_call1(f, hd$0)){
      var dst$0 = [0, hd$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      l$0 = tl$0;
     }
     else
      l$0 = tl$0;
    }
   }
   function find_map(t, f){
    var param = t;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], r = caml_call1(f, x);
     if(r) return r;
     param = l;
    }
   }
   var not_found = [0, Base_Import[297], [0, "List.find_map_exn: not found"]];
   function find_map_exn(t, f){
    var match = find_map(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var x = match[1];
    return x;
   }
   function find(t, f){
    var param = t;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1];
     if(caml_call1(f, x)) return [0, x];
     param = l;
    }
   }
   var not_found$0 = [0, Base_Import[297], [0, "List.find_exn: not found"]];
   function find_exn(t$1, f){
    var t = t$1;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace(not_found$0, 1);
     var t$0 = t[2], x = t[1];
     if(caml_call1(f, x)) return x;
     t = t$0;
    }
   }
   function findi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var l = t$0[2], x = t$0[1];
     if(caml_call2(f, i, x)) return [0, [0, i, x]];
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     t$0 = l;
    }
   }
   var not_found$1 = [0, Base_Import[297], [0, "List.findi_exn: not found"]];
   function findi_exn(t, f){
    var match = findi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$1, 1);
    var x = match[1];
    return x;
   }
   function find_mapi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var l = t$0[2], x = t$0[1], result = caml_call2(f, i, x);
     if(result) return result;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     t$0 = l;
    }
   }
   var
    not_found$2 = [0, Base_Import[297], [0, "List.find_mapi_exn: not found"]];
   function find_mapi_exn(t, f){
    var match = find_mapi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$2, 1);
    var x = match[1];
    return x;
   }
   function for_alli(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 1;
     var tl = t$0[2], hd = t$0[1], a = caml_call2(f, i, hd);
     if(! a) return a;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     t$0 = tl;
    }
   }
   function existsi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var tl = t$0[2], hd = t$0[1], a = caml_call2(f, i, hd);
     if(a) return a;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     t$0 = tl;
    }
   }
   var
    of_array = Base_Array0[16],
    to_array = Base_Array0[14],
    cst_List_map2 = cst_List_map2$1,
    cst_List_map2$0 = cst_List_map2$1,
    cst_map2_exn = "map2_exn",
    f = [0, cst_src_list_ml, 476, 11],
    cst_rev_map3_exn = "rev_map3_exn",
    cst_List_map3 = cst_List_map3$1,
    cst_List_map3$0 = cst_List_map3$1,
    cst_map3_exn = "map3_exn",
    g =
      [0,
       [11,
        "length mismatch in zip_exn: ",
        [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]],
       "length mismatch in zip_exn: %d <> %d"],
    cst_List_reduce_exn = "List.reduce_exn",
    h = [0, cst_src_list_ml, 626, 14],
    cst_List_reduce_balanced_exn = "List.reduce_balanced_exn";
   function to_list(t){return t;}
   function append(l1$0, l2){
    if(! l2) return l1$0;
    if(! l1$0) return l2;
    var match = l1$0[2], x1 = l1$0[1];
    if(! match) return [0, x1, l2];
    var match$0 = match[2], x2 = match[1];
    if(! match$0) return [0, x1, [0, x2, l2]];
    var match$1 = match$0[2], x3 = match$0[1];
    if(! match$1) return [0, x1, [0, x2, [0, x3, l2]]];
    var match$2 = match$1[2], x4 = match$1[1];
    if(! match$2) return [0, x1, [0, x2, [0, x3, [0, x4, l2]]]];
    var
     tl = match$2[2],
     x5 = match$2[1],
     block = [0, x5, 24029],
     dst = block,
     offset = 1,
     l1 = tl;
    for(;;){
     if(l1){
      var match$3 = l1[2], x1$0 = l1[1];
      if(match$3){
       var match$4 = match$3[2], x2$0 = match$3[1];
       if(match$4){
        var match$5 = match$4[2], x3$0 = match$4[1];
        if(match$5){
         var match$6 = match$5[2], x4$0 = match$5[1];
         if(match$6){
          var tl$0 = match$6[2], x5$0 = match$6[1], dst$0 = [0, x5$0, 24029];
          dst[offset + 1] = [0, x1$0, [0, x2$0, [0, x3$0, [0, x4$0, dst$0]]]];
          dst = dst$0;
          offset = 1;
          l1 = tl$0;
          continue;
         }
         dst[offset + 1] = [0, x1$0, [0, x2$0, [0, x3$0, [0, x4$0, l2]]]];
        }
        else
         dst[offset + 1] = [0, x1$0, [0, x2$0, [0, x3$0, l2]]];
       }
       else
        dst[offset + 1] = [0, x1$0, [0, x2$0, l2]];
      }
      else
       dst[offset + 1] = [0, x1$0, l2];
     }
     else
      dst[offset + 1] = l2;
     return [0, x1, [0, x2, [0, x3, [0, x4, block]]]];
    }
   }
   function map(l, f){
    if(! l) return 0;
    var
     tl = l[2],
     x = l[1],
     block = [0, caml_call1(f, x), 24029],
     dst = block,
     offset = 1,
     l$0 = tl;
    for(;;){
     if(! l$0){dst[offset + 1] = 0; return block;}
     var tl$0 = l$0[2], x$0 = l$0[1], dst$0 = [0, caml_call1(f, x$0), 24029];
     dst[offset + 1] = dst$0;
     dst = dst$0;
     offset = 1;
     l$0 = tl$0;
    }
   }
   function folding_map(t, init, f){
    var acc = [0, init];
    return map
            (t,
             function(x){
              var
               match = caml_call2(f, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_map(t, init, f){
    var
     acc = [0, init],
     result =
       map
        (t,
         function(x){
          var
           match = caml_call2(f, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function symbol_map(l, f){return map(l, f);}
   function map2_ok(l1, l2, f){
    if(l1){
     if(l2){
      var
       l2$0 = l2[2],
       x2 = l2[1],
       l1$0 = l1[2],
       x1 = l1[1],
       block = [0, caml_call2(f, x1, x2), 24029],
       dst = block,
       offset = 1,
       l1$1 = l1$0,
       l2$1 = l2$0;
      for(;;){
       a:
       {
        if(l1$1){
         if(l2$1){
          var
           l2$2 = l2$1[2],
           x2$0 = l2$1[1],
           l1$2 = l1$1[2],
           x1$0 = l1$1[1],
           dst$0 = [0, caml_call2(f, x1$0, x2$0), 24029];
          dst[offset + 1] = dst$0;
          dst = dst$0;
          offset = 1;
          l1$1 = l1$2;
          l2$1 = l2$2;
          continue;
         }
        }
        else if(! l2$1){dst[offset + 1] = 0; break a;}
        dst[offset + 1] = Base_Import[126].call(null, cst_List_map2$0);
       }
       return block;
      }
     }
    }
    else if(! l2) return 0;
    return Base_Import[126].call(null, cst_List_map2);
   }
   function map2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(a){return function(b){return map2_ok(a, b, f);};});
   }
   function map2_exn(l1, l2, f){
    check_length2_exn(cst_map2_exn, l1, l2);
    return map2_ok(l1, l2, f);
   }
   function rev_map3_ok(l1, l2, l3, f$0){
    var l1$0 = l1, l2$0 = l2, l3$0 = l3, ac = 0;
    for(;;){
     if(l1$0){
      if(l2$0 && l3$0){
       var
        l3$1 = l3$0[2],
        x3 = l3$0[1],
        l2$1 = l2$0[2],
        x2 = l2$0[1],
        l1$1 = l1$0[2],
        x1 = l1$0[1],
        ac$0 = [0, caml_call3(f$0, x1, x2, x3), ac];
       l1$0 = l1$1;
       l2$0 = l2$1;
       l3$0 = l3$1;
       ac = ac$0;
       continue;
      }
     }
     else if(! l2$0 && ! l3$0) return ac;
     throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
    }
   }
   function rev_map3(l1, l2, l3, f){
    return check_length3
            (l1,
             l2,
             l3,
             function(a){
              return function(c){
               function b(b, d){return rev_map3_ok(a, c, b, d);}
               return function(a){return b(a, f);};};
             });
   }
   function rev_map3_exn(l1, l2, l3, f){
    check_length3_exn(cst_rev_map3_exn, l1, l2, l3);
    return rev_map3_ok(l1, l2, l3, f);
   }
   function map3_ok(l1, l2, l3, f){
    if(l1){
     if(l2 && l3){
      var
       l3$0 = l3[2],
       x3 = l3[1],
       l2$0 = l2[2],
       x2 = l2[1],
       l1$0 = l1[2],
       x1 = l1[1],
       block = [0, caml_call3(f, x1, x2, x3), 24029],
       dst = block,
       offset = 1,
       l1$1 = l1$0,
       l2$1 = l2$0,
       l3$1 = l3$0;
      for(;;){
       a:
       {
        if(l1$1){
         if(l2$1 && l3$1){
          var
           l3$2 = l3$1[2],
           x3$0 = l3$1[1],
           l2$2 = l2$1[2],
           x2$0 = l2$1[1],
           l1$2 = l1$1[2],
           x1$0 = l1$1[1],
           dst$0 = [0, caml_call3(f, x1$0, x2$0, x3$0), 24029];
          dst[offset + 1] = dst$0;
          dst = dst$0;
          offset = 1;
          l1$1 = l1$2;
          l2$1 = l2$2;
          l3$1 = l3$2;
          continue;
         }
        }
        else if(! l2$1 && ! l3$1){dst[offset + 1] = 0; break a;}
        dst[offset + 1] = Base_Import[126].call(null, cst_List_map3$0);
       }
       return block;
      }
     }
    }
    else if(! l2 && ! l3) return 0;
    return Base_Import[126].call(null, cst_List_map3);
   }
   function map3(l1, l2, l3, f){
    return check_length3
            (l1,
             l2,
             l3,
             function(a){
              return function(c){
               function b(b, d){return map3_ok(a, c, b, d);}
               return function(a){return b(a, f);};};
             });
   }
   function map3_exn(l1, l2, l3, f){
    check_length3_exn(cst_map3_exn, l1, l2, l3);
    return map3_ok(l1, l2, l3, f);
   }
   function rev_map_append(l1$1, l2$1, f){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(! l1) return l2;
     var l1$0 = l1[2], h = l1[1], l2$0 = [0, caml_call1(f, h), l2];
     l1 = l1$0;
     l2 = l2$0;
    }
   }
   function unzip(list){
    var list$2 = rev(list), list$0 = list$2, l1 = 0, l2 = 0;
    for(;;){
     if(! list$0) return [0, l1, l2];
     var
      list$1 = list$0[2],
      match = list$0[1],
      y = match[2],
      x = match[1],
      l2$0 = [0, y, l2],
      l1$0 = [0, x, l1];
     list$0 = list$1;
     l1 = l1$0;
     l2 = l2$0;
    }
   }
   function unzip3(list){
    var list$2 = rev(list), list$0 = list$2, l1 = 0, l2 = 0, l3 = 0;
    for(;;){
     if(! list$0) return [0, l1, l2, l3];
     var
      list$1 = list$0[2],
      match = list$0[1],
      z = match[3],
      y = match[2],
      x = match[1],
      l3$0 = [0, z, l3],
      l2$0 = [0, y, l2],
      l1$0 = [0, x, l1];
     list$0 = list$1;
     l1 = l1$0;
     l2 = l2$0;
     l3 = l3$0;
    }
   }
   function zip_exn(l1, l2){
    try{var c = map2_ok(l1, l2, function(a, b){return [0, a, b];}); return c;}
    catch(exn){
     var a = length(l2), b = length(l1);
     return caml_call3(invalid_argf(g), b, a, 0);
    }
   }
   function zip(l1, l2){
    return map2(l1, l2, function(a, b){return [0, a, b];});
   }
   function rev_mapi(l, f){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param) return acc;
     var
      t = param[2],
      h = param[1],
      acc$0 = [0, caml_call2(f, i, h), acc],
      i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     acc = acc$0;
     param = t;
    }
   }
   function mapi(l, f){
    var i$2 = 0;
    if(! l) return 0;
    var
     t = l[2],
     h = l[1],
     block = [0, caml_call2(f, i$2, h), 24029],
     i = Base_Import[91].call(null, i$2, 1),
     dst = block,
     offset = 1,
     i$0 = i,
     param = t;
    for(;;){
     if(! param){dst[offset + 1] = 0; return block;}
     var
      t$0 = param[2],
      h$0 = param[1],
      block0_arg0 = caml_call2(f, i$0, h$0),
      block$0 = [0, block0_arg0, 24029];
     dst[offset + 1] = block$0;
     var i$1 = Base_Import[91].call(null, i$0, 1);
     dst = block$0;
     offset = 1;
     i$0 = i$1;
     param = t$0;
    }
   }
   function folding_mapi(t, init, f){
    var acc = [0, init];
    return mapi
            (t,
             function(i, x){
              var
               match = caml_call3(f, i, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_mapi(t, init, f){
    var
     acc = [0, init],
     result =
       mapi
        (t,
         function(i, x){
          var
           match = caml_call3(f, i, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function iteri(l, f){
    fold
     (l,
      0,
      function(i, x){
       caml_call2(f, i, x);
       return Base_Import[91].call(null, i, 1);
      });
    return 0;
   }
   function foldi(t, init, f){
    var
     a =
       fold
        (t,
         [0, 0, init],
         function(param, v){
          var acc = param[2], i = param[1], a = caml_call3(f, i, acc, v);
          return [0, Base_Import[91].call(null, i, 1), a];
         });
    return Base_Import[127].call(null, a);
   }
   function filteri(l, f){
    var pos = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1];
     if(caml_call2(f, pos, hd)) break;
     var pos$1 = Base_Import[91].call(null, pos, 1);
     pos = pos$1;
     l$0 = tl;
    }
    var
     block = [0, hd, 24029],
     pos$0 = Base_Import[91].call(null, pos, 1),
     dst = block,
     offset = 1,
     pos$2 = pos$0,
     l$1 = tl;
    for(;;){
     if(! l$1){dst[offset + 1] = 0; return block;}
     var tl$0 = l$1[2], hd$0 = l$1[1];
     if(caml_call2(f, pos$2, hd$0)){
      var block$0 = [0, hd$0, 24029];
      dst[offset + 1] = block$0;
      var pos$3 = Base_Import[91].call(null, pos$2, 1);
      dst = block$0;
      offset = 1;
      pos$2 = pos$3;
      l$1 = tl$0;
     }
     else{
      var pos$4 = Base_Import[91].call(null, pos$2, 1);
      pos$2 = pos$4;
      l$1 = tl$0;
     }
    }
   }
   function reduce(l, f){
    if(! l) return 0;
    var tl = l[2], hd = l[1];
    return [0, fold(tl, hd, f)];
   }
   function reduce_exn(l, f){
    var match = reduce(l, f);
    if(! match) return Base_Import[126].call(null, cst_List_reduce_exn);
    var v = match[1];
    return v;
   }
   function reduce_balanced(l, f){
    function step_accum(num$1, acc$1, x$1){
     var num = num$1, acc = acc$1, x = x$1;
     for(;;){
      if(0 === Base_Import[116].call(null, num, 1)) return [0, x, acc];
      if(! acc) throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
      var
       acc$0 = acc[2],
       y = acc[1],
       x$0 = caml_call2(f, y, x),
       num$0 = Base_Import[115].call(null, num, 1);
      num = num$0;
      acc = acc$0;
      x = x$0;
     }
    }
    var match = foldi(l, 0, step_accum);
    if(! match) return 0;
    var xs = match[2], x = match[1];
    return [0, fold(xs, x, function(x, y){return caml_call2(f, y, x);})];
   }
   function reduce_balanced_exn(l, f){
    var match = reduce_balanced(l, f);
    if(! match)
     return Base_Import[126].call(null, cst_List_reduce_balanced_exn);
    var v = match[1];
    return v;
   }
   function groupi(l, break$){
    var pos = [0, 0], l$0 = [0, l];
    function take_group(param){
     var group = l$0[1];
     if(group){
      var tl = group[2];
      if(tl){
       var y = tl[1], x = group[1];
       pos[1] = Base_Import[91].call(null, pos[1], 1);
       l$0[1] = tl;
       if(caml_call3(break$, pos[1], x, y)) return [0, x, 0];
       var block = [0, x, 24029], dst = block, offset = 1;
       for(;;){
        var group$0 = l$0[1];
        a:
        {
         if(group$0){
          var tl$0 = group$0[2];
          if(tl$0){
           var y$0 = tl$0[1], x$0 = group$0[1];
           pos[1] = Base_Import[91].call(null, pos[1], 1);
           l$0[1] = tl$0;
           if(caml_call3(break$, pos[1], x$0, y$0)){dst[offset + 1] = [0, x$0, 0]; break a;
           }
           var dst$0 = [0, x$0, 24029];
           dst[offset + 1] = dst$0;
           dst = dst$0;
           offset = 1;
           continue;
          }
         }
         l$0[1] = 0;
         dst[offset + 1] = group$0;
        }
        return block;
       }
      }
     }
     l$0[1] = 0;
     return group;
    }
    if(is_empty(l$0[1])) return 0;
    var
     group = take_group(0),
     block = [0, group, 24029],
     dst = block,
     offset = 1;
    for(;;){
     if(is_empty(l$0[1])){dst[offset + 1] = 0; return block;}
     var group$0 = take_group(0), dst$0 = [0, group$0, 24029];
     dst[offset + 1] = dst$0;
     dst = dst$0;
     offset = 1;
    }
   }
   function group(l, break$){
    return groupi(l, function(param, x, y){return caml_call2(break$, x, y);});
   }
   function merge(l1, l2, compare){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    if(0 < caml_call2(compare, h1, h2)){
     var block = [0, h2, 24029];
     merge_dps(block, 1, l1, t2, compare);
     return block;
    }
    var block$0 = [0, h1, 24029];
    merge_dps(block$0, 1, t1, l2, compare);
    return block$0;
   }
   function merge_dps(dst$2, offset$0, l1$0, l2$0, compare){
    var dst = dst$2, offset = offset$0, l1 = l1$0, l2 = l2$0;
    for(;;){
     if(! l1){dst[offset + 1] = l2; return;}
     if(! l2){dst[offset + 1] = l1; return;}
     var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
     if(0 < caml_call2(compare, h1, h2)){
      var dst$0 = [0, h2, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      l2 = t2;
     }
     else{
      var dst$1 = [0, h1, 24029];
      dst[offset + 1] = dst$1;
      dst = dst$1;
      offset = 1;
      l1 = t1;
     }
    }
   }
   function stable_sort(l, cmp){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = Base_Import[115].call(null, n, 1),
      n2 = Base_Import[93].call(null, n, n1),
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = Base_Import[115].call(null, n, 1),
      n2 = Base_Import[93].call(null, n, n1),
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    var len = length(l);
    if(2 > len) return l;
    var a = sort(len, l);
    return Base_Import[125].call(null, a);
   }
   function sort_and_group(l, compare){
    return group
            (stable_sort(l, compare),
             function(x, y){return 0 !== caml_call2(compare, x, y) ? 1 : 0;});
   }
   function dedup_and_sort(l, cmp){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 <= c$0
            ? 0 < c$0 ? [0, x2, [0, x1, 0]] : [0, x2, 0]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 <= c$1)
         if(0 < c$1){
          var c$2 = caml_call2(cmp, x1$0, x3);
          if(0 <= c$2)
           if(0 < c$2)
            var
             c$3 = caml_call2(cmp, x2$0, x3),
             s$0 =
               0 <= c$3
                ? 0
                  < c$3
                  ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                  : [0, x3, [0, x1$0, 0]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]];
           else
            var s$0 = [0, x2$0, [0, x3, 0]];
          else
           var s$0 = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         }
         else
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           s$0 =
             0 <= c$4
              ? 0 < c$4 ? [0, x3, [0, x2$0, 0]] : [0, x3, 0]
              : [0, x2$0, [0, x3, 0]];
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 <= c$5)
          if(0 < c$5)
           var
            c$6 = caml_call2(cmp, x1$0, x3),
            s$0 =
              0 <= c$6
               ? 0
                 < c$6
                 ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                 : [0, x3, [0, x2$0, 0]]
               : [0, x1$0, [0, x3, [0, x2$0, 0]]];
          else
           var s$0 = [0, x1$0, [0, x3, 0]];
         else
          var s$0 = [0, x1$0, [0, x2$0, [0, x3, 0]]];
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = Base_Import[115].call(null, n, 1),
      n2 = Base_Import[93].call(null, n, n1),
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 < c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        if(0 <= c){l1 = t1; continue;}
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 < c$0
            ? [0, x1, [0, x2, 0]]
            : 0 <= c$0 ? [0, x2, 0] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 < c$1){
         var c$2 = caml_call2(cmp, x2$0, x3);
         if(0 < c$2)
          var s$0 = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else if(0 <= c$2)
          var s$0 = [0, x1$0, [0, x3, 0]];
         else
          var
           c$3 = caml_call2(cmp, x1$0, x3),
           s$0 =
             0 < c$3
              ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : 0
                <= c$3
                ? [0, x3, [0, x2$0, 0]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]];
        }
        else if(0 <= c$1)
         var
          c$4 = caml_call2(cmp, x2$0, x3),
          s$0 =
            0 < c$4
             ? [0, x2$0, [0, x3, 0]]
             : 0 <= c$4 ? [0, x3, 0] : [0, x3, [0, x2$0, 0]];
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 < c$5)
          var s$0 = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else if(0 <= c$5)
          var s$0 = [0, x2$0, [0, x3, 0]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           s$0 =
             0 < c$6
              ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, 0]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = Base_Import[115].call(null, n, 1),
      n2 = Base_Import[93].call(null, n, n1),
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 > c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        if(0 < c){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        l1 = t1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    var len = length(l);
    if(2 > len) return l;
    var a = sort(len, l);
    return Base_Import[125].call(null, a);
   }
   function stable_dedup(list, compare){
    if(list && list[2]){
     var
      dedups = rev_map(list, function(elt){return [0, elt, 1];}),
      unique =
        dedup_and_sort
         (dedups, function(x, y){return caml_call2(compare, x[1], y[1]);});
     iter(unique, function(dedup){dedup[2] = 0; return 0;});
     return fold
             (dedups,
              0,
              function(acc, dedup){
               return dedup[2] ? acc : [0, dedup[1], acc];
              });
    }
    return list;
   }
   function concat_mapi(l, f){
    function outer_loop_dps$0(counter, dst, offset, pos, param){
     if(! param){dst[offset + 1] = 0; return;}
     var tl = param[2], hd = param[1];
     if(! tl){dst[offset + 1] = caml_call2(f, pos, hd); return;}
     var a = caml_call2(f, pos, hd), b = Base_Import[91].call(null, pos, 1);
     if(counter >= 50)
      return caml_trampoline_return
              (inner_loop_dps$0, [0, dst, offset, b, a, tl]);
     var counter$0 = counter + 1 | 0;
     return inner_loop_dps$0(counter$0, dst, offset, b, a, tl);
    }
    function outer_loop_dps(dst, offset, pos, param){
     return caml_trampoline(outer_loop_dps$0(0, dst, offset, pos, param));
    }
    function inner_loop_dps$0(counter, dst$1, offset$0, pos, l1$0, l2){
     var dst = dst$1, offset = offset$0, l1 = l1$0;
     for(;;){
      if(! l1){
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, dst, offset, pos, l2]);
       var counter$4 = counter + 1 | 0;
       return outer_loop_dps$0(counter$4, dst, offset, pos, l2);
      }
      var match = l1[2], x1 = l1[1];
      if(! match){
       var d = [0, x1, 24029];
       dst[offset + 1] = d;
       var h = 1;
       if(counter >= 50)
        return caml_trampoline_return(outer_loop_dps$0, [0, d, h, pos, l2]);
       var counter$3 = counter + 1 | 0;
       return outer_loop_dps$0(counter$3, d, h, pos, l2);
      }
      var match$0 = match[2], x2 = match[1];
      if(! match$0){
       var c = [0, x2, 24029];
       dst[offset + 1] = [0, x1, c];
       var g = 1;
       if(counter >= 50)
        return caml_trampoline_return(outer_loop_dps$0, [0, c, g, pos, l2]);
       var counter$2 = counter + 1 | 0;
       return outer_loop_dps$0(counter$2, c, g, pos, l2);
      }
      var match$1 = match$0[2], x3 = match$0[1];
      if(! match$1){
       var b = [0, x3, 24029];
       dst[offset + 1] = [0, x1, [0, x2, b]];
       var f = 1;
       if(counter >= 50)
        return caml_trampoline_return(outer_loop_dps$0, [0, b, f, pos, l2]);
       var counter$1 = counter + 1 | 0;
       return outer_loop_dps$0(counter$1, b, f, pos, l2);
      }
      var match$2 = match$1[2], x4 = match$1[1];
      if(! match$2){
       var a = [0, x4, 24029];
       dst[offset + 1] = [0, x1, [0, x2, [0, x3, a]]];
       var e = 1;
       if(counter >= 50)
        return caml_trampoline_return(outer_loop_dps$0, [0, a, e, pos, l2]);
       var counter$0 = counter + 1 | 0;
       return outer_loop_dps$0(counter$0, a, e, pos, l2);
      }
      var tl = match$2[2], x5 = match$2[1], dst$0 = [0, x5, 24029];
      dst[offset + 1] = [0, x1, [0, x2, [0, x3, [0, x4, dst$0]]]];
      dst = dst$0;
      offset = 1;
      l1 = tl;
     }
    }
    function inner_loop_dps(dst, offset, pos, l1, l2){
     return caml_trampoline(inner_loop_dps$0(0, dst, offset, pos, l1, l2));
    }
    var pos = 0, param = l;
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     if(! tl) return caml_call2(f, pos, hd);
     var
      l1 = caml_call2(f, pos, hd),
      pos$0 = Base_Import[91].call(null, pos, 1);
     if(l1) break;
     pos = pos$0;
     param = tl;
    }
    var match = l1[2], x1 = l1[1];
    if(! match){
     var block$3 = [0, x1, 24029];
     outer_loop_dps(block$3, 1, pos$0, tl);
     return block$3;
    }
    var match$0 = match[2], x2 = match[1];
    if(! match$0){
     var block$2 = [0, x2, 24029];
     outer_loop_dps(block$2, 1, pos$0, tl);
     return [0, x1, block$2];
    }
    var match$1 = match$0[2], x3 = match$0[1];
    if(! match$1){
     var block$1 = [0, x3, 24029];
     outer_loop_dps(block$1, 1, pos$0, tl);
     return [0, x1, [0, x2, block$1]];
    }
    var match$2 = match$1[2], x4 = match$1[1];
    if(match$2){
     var tl$0 = match$2[2], x5 = match$2[1], block = [0, x5, 24029];
     inner_loop_dps(block, 1, pos$0, tl$0, tl);
     return [0, x1, [0, x2, [0, x3, [0, x4, block]]]];
    }
    var block$0 = [0, x4, 24029];
    outer_loop_dps(block$0, 1, pos$0, tl);
    return [0, x1, [0, x2, [0, x3, block$0]]];
   }
   function concat_map(l, f){
    return concat_mapi(l, function(param, x){return caml_call1(f, x);});
   }
   function map2$0(a, b, f){
    return concat_map
            (a,
             function(x){
              return map(b, function(y){return caml_call2(f, x, y);});
             });
   }
   function symbol_bind(t, f){return concat_map(t, f);}
   var
    map$0 = [0, -198771759, map],
    Applicative =
      Base_Applicative[13].call(null, [0, singleton, map2$0, map$0]),
    map$1 = [0, -198771759, map],
    Monad = Base_Monad[1].call(null, [0, concat_map, singleton, map$1]),
    all = Monad[9],
    all_unit = Monad[10],
    ignore_m = Monad[8],
    join = Monad[7],
    apply = Applicative[8],
    both = Applicative[3],
    map3$0 = Applicative[10],
    symbol = Applicative[4],
    symbol$0 = Applicative[6],
    symbol$1 = Applicative[5],
    symbol$2 = Applicative[4],
    symbol$3 = Applicative[6],
    symbol$4 = Applicative[5],
    Open_on_rhs = [0],
    Let_syntax = [0, singleton, concat_map, map, both, Open_on_rhs],
    Let_syntax$0 = [0, singleton, symbol_bind, symbol_map, Let_syntax],
    Monad_infix = [0, symbol_bind, symbol_map],
    cst_List_last = "List.last",
    i = [0, [11, "List.init ", [4, 0, 0, 0, 0]], "List.init %d"],
    j = [0, cst_src_list_ml, 1111, 4],
    k = [1, 0],
    l = [1, 0],
    m = [1, 0],
    n = [0, cst_src_list_ml, 1305, 12];
   function last_exn(list$1){
    var list = list$1;
    for(;;){
     if(! list) return Base_Import[126].call(null, cst_List_last);
     var x = list[1];
     if(! list[2]) return x;
     var list$0 = list[2];
     list = list$0;
    }
   }
   function last(list$1){
    var list = list$1;
    for(;;){
     if(! list) return 0;
     var x = list[1];
     if(! list[2]) return [0, x];
     var list$0 = list[2];
     list = list$0;
    }
   }
   function is_prefix(list$1, prefix$1, equal){
    var list = list$1, prefix = prefix$1;
    for(;;){
     if(! prefix) return 1;
     var prefix$0 = prefix[2], hd = prefix[1];
     if(! list) return 0;
     var list$0 = list[2], hd$0 = list[1], a = caml_call2(equal, hd, hd$0);
     if(! a) return a;
     list = list$0;
     prefix = prefix$0;
    }
   }
   function find_consecutive_duplicate(t, equal){
    if(! t) return 0;
    var t$0 = t[2], a1 = t[1], a1$0 = a1, t$1 = t$0;
    for(;;){
     if(! t$1) return 0;
     var t$2 = t$1[2], a2 = t$1[1];
     if(caml_call2(equal, a1$0, a2)) return [0, [0, a1$0, a2]];
     a1$0 = a2;
     t$1 = t$2;
    }
   }
   function remove_consecutive_duplicates(opt, list, equal){
    var which_to_keep = opt ? opt[1] : 847656566;
    if(! list) return 0;
    var
     tl$0 = list[2],
     to_keep$1 = list[1],
     to_keep = to_keep$1,
     accum = 0,
     param = tl$0;
    for(;;){
     if(! param) return rev([0, to_keep, accum]);
     var tl = param[2], to_keep$0 = param[1];
     if(caml_call2(equal, to_keep$0, to_keep))
      if(847656566 <= which_to_keep){
       to_keep = to_keep$0;
       param = tl;
      }
      else
       param = tl;
     else{
      var accum$0 = [0, to_keep, accum];
      to_keep = to_keep$0;
      accum = accum$0;
      param = tl;
     }
    }
   }
   function find_a_dup(l, compare){
    var sorted = stable_sort(l, compare), l$0 = sorted;
    for(;;){
     if(l$0){
      var tl = l$0[2];
      if(tl){
       var hd2 = tl[1], hd1 = l$0[1];
       if(0 === caml_call2(compare, hd1, hd2)) return [0, hd1];
       l$0 = tl;
       continue;
      }
     }
     return 0;
    }
   }
   function contains_dup(lst, compare){
    return find_a_dup(lst, compare) ? 1 : 0;
   }
   function find_all_dups(l, compare){
    var sorted = stable_sort(l, compare);
    if(! sorted) return 0;
    var
     sorted$4 = sorted[2],
     prev$3 = sorted[1],
     sorted$0 = sorted$4,
     prev = prev$3,
     already_recorded = 0;
    for(;;){
     if(! sorted$0) return 0;
     var sorted$1 = sorted$0[2], prev$0 = sorted$0[1];
     if(0 === caml_call2(compare, prev, prev$0)){
      if(! already_recorded) break;
      sorted$0 = sorted$1;
      prev = prev$0;
      already_recorded = 1;
     }
     else{sorted$0 = sorted$1; prev = prev$0; already_recorded = 0;}
    }
    var
     block = [0, prev$0, 24029],
     dst = block,
     offset = 1,
     sorted$2 = sorted$1,
     prev$1 = prev$0,
     already_recorded$0 = 1;
    for(;;){
     if(! sorted$2){dst[offset + 1] = 0; return block;}
     var sorted$3 = sorted$2[2], prev$2 = sorted$2[1];
     if(0 === caml_call2(compare, prev$1, prev$2))
      if(already_recorded$0){
       sorted$2 = sorted$3;
       prev$1 = prev$2;
       already_recorded$0 = 1;
      }
      else{
       var dst$0 = [0, prev$2, 24029];
       dst[offset + 1] = dst$0;
       dst = dst$0;
       offset = 1;
       sorted$2 = sorted$3;
       prev$1 = prev$2;
       already_recorded$0 = 1;
      }
     else{sorted$2 = sorted$3; prev$1 = prev$2; already_recorded$0 = 0;}
    }
   }
   function all_equal(t$0, equal){
    if(! t$0) return 0;
    var xs$0 = t$0[2], x$0 = t$0[1], t = xs$0;
    for(;;){
     if(t){
      var xs = t[2], x = t[1], a = caml_call2(equal, x, x$0);
      if(a){t = xs; continue;}
      var b = a;
     }
     else
      var b = 1;
     return b ? [0, x$0] : 0;
    }
   }
   function count(t, f){return Base_Container[2].call(null, fold, t, f);}
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function min_elt(t, compare){
    return Base_Container[3].call(null, fold, t, compare);
   }
   function max_elt(t, compare){
    return Base_Container[4].call(null, fold, t, compare);
   }
   function counti(t, f){
    return foldi
            (t,
             0,
             function(idx, count, a){
              return caml_call2(f, idx, a)
                      ? Base_Import[91].call(null, count, 1)
                      : count;
             });
   }
   function init(n, f){
    if(n < 0) caml_call2(invalid_argf(i), n, 0);
    var i$0 = n, accum = 0;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
     if(0 === i$0) return accum;
     var
      accum$0 = [0, caml_call1(f, Base_Import[93].call(null, i$0, 1)), accum],
      i$1 = Base_Import[93].call(null, i$0, 1);
     i$0 = i$1;
     accum = accum$0;
    }
   }
   function rev_filter_map(l, f){
    var l$0 = l, accum = 0;
    for(;;){
     if(! l$0) return accum;
     var tl = l$0[2], hd = l$0[1], match = caml_call1(f, hd);
     if(match){
      var x = match[1], accum$0 = [0, x, accum];
      l$0 = tl;
      accum = accum$0;
     }
     else
      l$0 = tl;
    }
   }
   function filter_map(l$1, f){
    var l = l$1;
    for(;;){
     if(! l) return 0;
     var tl = l[2], hd = l[1], match = caml_call1(f, hd);
     if(match) break;
     l = tl;
    }
    var
     x = match[1],
     block = [0, x, 24029],
     dst = block,
     offset = 1,
     l$0 = tl;
    for(;;){
     if(! l$0){dst[offset + 1] = 0; return block;}
     var tl$0 = l$0[2], hd$0 = l$0[1], match$0 = caml_call1(f, hd$0);
     if(match$0){
      var x$0 = match$0[1], dst$0 = [0, x$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      l$0 = tl$0;
     }
     else
      l$0 = tl$0;
    }
   }
   function rev_filter_mapi(l, f){
    var i = 0, l$0 = l, accum = 0;
    for(;;){
     if(! l$0) return accum;
     var tl = l$0[2], hd = l$0[1], match = caml_call2(f, i, hd);
     if(match){
      var
       x = match[1],
       accum$0 = [0, x, accum],
       i$0 = Base_Import[91].call(null, i, 1);
      i = i$0;
      l$0 = tl;
      accum = accum$0;
     }
     else{var i$1 = Base_Import[91].call(null, i, 1); i = i$1; l$0 = tl;}
    }
   }
   function filter_mapi(l, f){
    var pos = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1], match = caml_call2(f, pos, hd);
     if(match) break;
     var pos$1 = Base_Import[91].call(null, pos, 1);
     pos = pos$1;
     l$0 = tl;
    }
    var
     x = match[1],
     block = [0, x, 24029],
     pos$0 = Base_Import[91].call(null, pos, 1),
     dst = block,
     offset = 1,
     pos$2 = pos$0,
     l$1 = tl;
    for(;;){
     if(! l$1){dst[offset + 1] = 0; return block;}
     var tl$0 = l$1[2], hd$0 = l$1[1], match$0 = caml_call2(f, pos$2, hd$0);
     if(match$0){
      var x$0 = match$0[1], block$0 = [0, x$0, 24029];
      dst[offset + 1] = block$0;
      var pos$3 = Base_Import[91].call(null, pos$2, 1);
      dst = block$0;
      offset = 1;
      pos$2 = pos$3;
      l$1 = tl$0;
     }
     else{
      var pos$4 = Base_Import[91].call(null, pos$2, 1);
      pos$2 = pos$4;
      l$1 = tl$0;
     }
    }
   }
   function filter_opt(l){return filter_map(l, function(a){return a;});}
   function partition3_map(t, f){
    var t$0 = t, fst = 0, snd = 0, trd = 0;
    for(;;){
     if(! t$0){var a = rev(trd), b = rev(snd); return [0, rev(fst), b, a];}
     var
      t$1 = t$0[2],
      x = t$0[1],
      match = caml_call1(f, x),
      variant = match[1];
     if(4152137 === variant){
      var y = match[2], snd$0 = [0, y, snd];
      t$0 = t$1;
      snd = snd$0;
     }
     else if(4202758 <= variant){
      var y$0 = match[2], trd$0 = [0, y$0, trd];
      t$0 = t$1;
      trd = trd$0;
     }
     else{var y$1 = match[2], fst$0 = [0, y$1, fst]; t$0 = t$1; fst = fst$0;}
    }
   }
   function partition_tf(t, f){
    function f$0(x){return caml_call1(f, x) ? [0, x] : [1, x];}
    return partition_map(t, f$0);
   }
   function partition_result(t){return partition_map(t, Base_Result[38]);}
   function t_of_sexp$0(of_a_028, of_b_029, x_037){
    return Base_Import[173].call
            (null,
             function(sexp_035){
              if(0 !== sexp_035[0]){
               var a = sexp_035[1];
               if(a){
                var b = a[2];
                if(b && ! b[2]){
                 var
                  arg1_032 = b[1],
                  arg0_031 = a[1],
                  res0_033 = caml_call1(of_a_028, arg0_031),
                  res1_034 = caml_call1(of_b_029, arg1_032);
                 return [0, res0_033, res1_034];
                }
               }
              }
              return Sexplib0_Sexp_conv_error[4].call
                      (null, error_source_036, 2, sexp_035);
             },
             x_037);
   }
   function sexp_of_t$1(of_a_038, of_b_039, x_044){
    return Base_Import[149].call
            (null,
             function(param){
              var
               arg1_041 = param[2],
               arg0_040 = param[1],
               res0_042 = caml_call1(of_a_038, arg0_040),
               res1_043 = caml_call1(of_b_039, arg1_041);
              return [1, [0, res0_042, [0, res1_043, 0]]];
             },
             x_044);
   }
   function t_sexp_grammar$0(a_sexp_grammar, b_sexp_grammar){
    var
     a =
       Base_Import[194].call
        (null,
         [2,
          [0,
           [5, [0, Sexplib0_Sexp_grammar[6], k, a_sexp_grammar]],
           [0, [5, [0, Sexplib0_Sexp_grammar[7], l, b_sexp_grammar]], 0]]]);
    return [5, [0, Sexplib0_Sexp_grammar[5], m, a]];
   }
   function pair_of_group(list){
    if(! list) throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
    var k = list[1][1];
    return [0, k, map(list, Base_Import[127])];
   }
   function group$0(alist, equal){
    return map
            (group
              (alist,
               function(a, param){
                var y = param[1], x = a[1];
                return 1 - caml_call2(equal, x, y);
               }),
             pair_of_group);
   }
   function sort_and_group$0(alist, compare){
    return map
            (sort_and_group
              (alist,
               function(a, param){
                var y = param[1], x = a[1];
                return caml_call2(compare, x, y);
               }),
             pair_of_group);
   }
   function find$0(t, equal, key){
    var param = t;
    for(;;){
     if(param){
      var l = param[2], x$0 = param[1], key$0 = x$0[1];
      if(! caml_call2(equal, key, key$0)){param = l; continue;}
      var match = [0, x$0];
     }
     else
      var match = 0;
     if(! match) return 0;
     var x = match[1];
     return [0, Base_Import[127].call(null, x)];
    }
   }
   var
    not_found$3 = [0, Base_Import[297], [0, "List.Assoc.find_exn: not found"]],
    cst_List_sub = "List.sub",
    o =
      [0,
       [11, "List.chunks_of: Expected length > 0, got ", [4, 0, 0, 0, 0]],
       "List.chunks_of: Expected length > 0, got %d"],
    cst_List_drop_last_exn_empty_l = "List.drop_last_exn: empty list";
   function find_exn$0(t$1, equal, key$0){
    var t = t$1;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace(not_found$3, 1);
     var t$0 = t[2], match = t[1], value = match[2], key = match[1];
     if(caml_call2(equal, key$0, key)) return value;
     t = t$0;
    }
   }
   function mem$0(t, equal, key){return find$0(t, equal, key) ? 1 : 0;}
   function remove(t, equal, key){
    return filter
            (t,
             function(param){
              var key$0 = param[1];
              return 1 - caml_call2(equal, key, key$0);
             });
   }
   function add(t, equal, key, value){
    return [0, [0, key, value], remove(t, equal, key)];
   }
   function inverse(t){
    return map
            (t,
             function(param){
              var y = param[2], x = param[1];
              return [0, y, x];
             });
   }
   function map$2(t, f){
    return map
            (t,
             function(param){
              var value = param[2], key = param[1];
              return [0, key, caml_call1(f, value)];
             });
   }
   function sub(l, pos, len){
    var b = pos < 0 ? 1 : 0;
    if(b)
     var a = b;
    else{
     var c = len < 0 ? 1 : 0;
     if(c)
      var a = c;
     else
      var d = length(l), a = Base_Import[93].call(null, d, len) < pos ? 1 : 0;
    }
    if(a) Base_Import[126].call(null, cst_List_sub);
    var stop = Base_Import[91].call(null, pos, len), i = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1];
     if(i >= pos) break;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     l$0 = tl;
    }
    if(i >= stop) return 0;
    var
     block = [0, hd, 24029],
     i$1 = Base_Import[91].call(null, i, 1),
     dst = block,
     offset = 1,
     i$2 = i$1,
     l$1 = tl;
    for(;;){
     if(l$1){
      var tl$0 = l$1[2], hd$0 = l$1[1];
      if(i$2 < pos){
       var i$3 = Base_Import[91].call(null, i$2, 1);
       i$2 = i$3;
       l$1 = tl$0;
       continue;
      }
      if(i$2 < stop){
       var block$0 = [0, hd$0, 24029];
       dst[offset + 1] = block$0;
       var i$4 = Base_Import[91].call(null, i$2, 1);
       dst = block$0;
       offset = 1;
       i$2 = i$4;
       l$1 = tl$0;
       continue;
      }
      dst[offset + 1] = 0;
     }
     else
      dst[offset + 1] = 0;
     return block;
    }
   }
   function split_n(t_orig, n){
    if(0 >= n) return [0, 0, t_orig];
    var n$0 = n, t = t_orig, accum = 0;
    for(;;){
     if(! t) return [0, t_orig, 0];
     var tl = t[2], hd = t[1];
     if(0 === n$0) return [0, rev(accum), t];
     var accum$0 = [0, hd, accum], n$1 = Base_Import[93].call(null, n$0, 1);
     n$0 = n$1;
     t = tl;
     accum = accum$0;
    }
   }
   function take(t_orig, n){
    if(0 >= n) return 0;
    var n$0 = n, t = t_orig, accum = 0;
    for(;;){
     if(! t) return t_orig;
     var tl = t[2], hd = t[1];
     if(0 === n$0) return rev(accum);
     var accum$0 = [0, hd, accum], n$1 = Base_Import[93].call(null, n$0, 1);
     n$0 = n$1;
     t = tl;
     accum = accum$0;
    }
   }
   function drop(t$0, n$1){
    var t = t$0, n = n$1;
    for(;;){
     if(t){
      var tl = t[2];
      if(0 < n){
       var n$0 = Base_Import[93].call(null, n, 1);
       t = tl;
       n = n$0;
       continue;
      }
     }
     return t;
    }
   }
   function chunks_of(l, length){
    if(length <= 0) caml_call2(invalid_argf(o), length, 0);
    var acc = 0, l$0 = l;
    for(;;){
     if(! l$0) return rev(acc);
     var
      match = split_n(l$0, length),
      l$1 = match[2],
      sublist = match[1],
      acc$0 = [0, sublist, acc];
     acc = acc$0;
     l$0 = l$1;
    }
   }
   function split_while(xs, f){
    var acc = 0, t = xs;
    for(;;){
     if(t){
      var tl = t[2], hd = t[1];
      if(caml_call1(f, hd)){
       var acc$0 = [0, hd, acc];
       acc = acc$0;
       t = tl;
       continue;
      }
     }
     return [0, rev(acc), t];
    }
   }
   function take_while(xs, f){
    var acc = 0, param = xs;
    for(;;){
     if(param){
      var tl = param[2], hd = param[1];
      if(caml_call1(f, hd)){
       var acc$0 = [0, hd, acc];
       acc = acc$0;
       param = tl;
       continue;
      }
     }
     return rev(acc);
    }
   }
   function drop_while(t$0, f){
    var t = t$0;
    for(;;){
     if(t){var tl = t[2], hd = t[1]; if(caml_call1(f, hd)){t = tl; continue;}}
     return t;
    }
   }
   function drop_last(t){
    var match = rev(t);
    if(! match) return 0;
    var lst = match[2];
    return [0, rev(lst)];
   }
   function drop_last_exn(t){
    var match = drop_last(t);
    if(! match)
     return Base_Import[124].call(null, cst_List_drop_last_exn_empty_l);
    var lst = match[1];
    return lst;
   }
   function cartesian_product(list1, list2){
    if(is_empty(list2)) return 0;
    var l1 = list1;
    for(;;){
     if(! l1) return 0;
     var l1$0 = l1[2], x1 = l1[1];
     if(list2) break;
     l1 = l1$0;
    }
    var
     l2 = list2[2],
     x2 = list2[1],
     block = [0, [0, x1, x2], 24029],
     l2$2 = l2,
     l1$2 = l1$0,
     x1$1 = x1,
     offset$0 = 1,
     dst$1 = block;
    for(;;){
     var dst = dst$1, offset = offset$0, l2$0 = l2$2;
     for(;;){
      if(! l2$0){
       if(l1$2){
        var l1$1 = l1$2[2], x1$0 = l1$2[1];
        l2$2 = list2;
        l1$2 = l1$1;
        x1$1 = x1$0;
        offset$0 = offset;
        dst$1 = dst;
        break;
       }
       dst[offset + 1] = 0;
       return block;
      }
      var l2$1 = l2$0[2], x2$0 = l2$0[1], dst$0 = [0, [0, x1$1, x2$0], 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      l2$0 = l2$1;
     }
    }
   }
   function concat(l){return fold_right(l, append, 0);}
   function concat_no_order(l){
    return fold(l, 0, function(acc, l){return rev_append(l, acc);});
   }
   function cons(x, l){return [0, x, l];}
   function is_sorted(l, compare){
    var l$0 = l;
    for(;;){
     if(l$0){
      var rest = l$0[2];
      if(rest){
       var
        x2 = rest[1],
        x1 = l$0[1],
        a = caml_call2(compare, x1, x2) <= 0 ? 1 : 0;
       if(! a) return a;
       l$0 = rest;
       continue;
      }
     }
     return 1;
    }
   }
   function is_sorted_strictly(l, compare){
    var l$0 = l;
    for(;;){
     if(l$0){
      var rest = l$0[2];
      if(rest){
       var
        x2 = rest[1],
        x1 = l$0[1],
        a = caml_call2(compare, x1, x2) < 0 ? 1 : 0;
       if(! a) return a;
       l$0 = rest;
       continue;
      }
     }
     return 1;
    }
   }
   var
    Infix = [0, append],
    cst_List_random_element_exn_em = "List.random_element_exn: empty list";
   function permute(opt, list){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    if(list){
     var a = list[2];
     if(a){
      if(a[2]){
       var arr = Base_Array0[14].call(null, list);
       Base_Array_permute[25].call(null, [0, random_state], 0, 0, arr);
       return Base_Array0[16].call(null, arr);
      }
      var y = a[1], x = list[1];
      return caml_call1(Base_Random[19][17], random_state)
              ? [0, y, [0, x, 0]]
              : list;
     }
    }
    return list;
   }
   function random_element_exn(opt, list){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    if(is_empty(list))
     return Base_Import[124].call(null, cst_List_random_element_exn_em);
    var a = length(list);
    return nth_exn(list, caml_call2(Base_Random[19][7], random_state, a));
   }
   function random_element(opt, list){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    try{var a = [0, random_element_exn([0, random_state], list)]; return a;}
    catch(exn){return 0;}
   }
   function compare$0(cmp, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var ys = b[2], y = b[1], xs = a[2], x = a[1], n = caml_call2(cmp, x, y);
     if(0 !== n) return n;
     a = xs;
     b = ys;
    }
   }
   function compare_local$0(cmp, a$0, b$0){
    var a = a$0, b = b$0;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var ys = b[2], y = b[1], xs = a[2], x = a[1], n = caml_call2(cmp, x, y);
     if(0 !== n) return n;
     a = xs;
     b = ys;
    }
   }
   var hash_fold_t = Base_Import[212];
   function equal_with_local_closure(equal, t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     if(t1$0){
      if(t2$0){
       var
        t2$1 = t2$0[2],
        x2 = t2$0[1],
        t1$1 = t1$0[2],
        x1 = t1$0[1],
        a = caml_call2(equal, x1, x2);
       if(! a) return a;
       t1$0 = t1$1;
       t2$0 = t2$1;
       continue;
      }
     }
     else if(! t2$0) return 1;
     return 0;
    }
   }
   function equal(f, x, y){return equal_with_local_closure(f, x, y);}
   function equal_local(equal_a_local, t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     if(t1$0){
      if(t2$0){
       var
        t2$1 = t2$0[2],
        x2 = t2$0[1],
        t1$1 = t1$0[2],
        x1 = t1$0[1],
        a = caml_call2(equal_a_local, x1, x2);
       if(! a) return a;
       t1$0 = t1$1;
       t2$0 = t2$1;
       continue;
      }
     }
     else if(! t2$0) return 1;
     return 0;
    }
   }
   function transpose(rows$0){
    var rows = rows$0, columns = 0, do_rev = 1;
    for(;;){
     var t = rows, column_acc = 0, trimmed_rows = 0, found_empty = 0;
     for(;;){
      if(! t){
       if(! column_acc && ! trimmed_rows) return [0, rev(columns)];
       if(found_empty) return 0;
       var
        column = do_rev ? rev(column_acc) : column_acc,
        do_rev$0 = 1 - do_rev,
        columns$0 = [0, column, columns];
       rows = trimmed_rows;
       columns = columns$0;
       do_rev = do_rev$0;
       break;
      }
      var match = t[1];
      if(match){
       var
        tl = t[2],
        xs = match[2],
        x = match[1],
        trimmed = [0, xs, trimmed_rows],
        column_acc$0 = [0, x, column_acc];
       t = tl;
       column_acc = column_acc$0;
       trimmed_rows = trimmed;
      }
      else{var tl$0 = t[2]; t = tl$0; found_empty = 1;}
     }
    }
   }
   var
    Transpose_got_lists_of_differe =
      [248,
       "Base__List.Transpose_got_lists_of_different_lengths",
       runtime.caml_fresh_oo_id(0)],
    p = [0, "list.ml.Transpose_got_lists_of_different_lengths"],
    q = [0, cst_src_list_ml, 1588, 11];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Transpose_got_lists_of_differe,
     function(param){
      var tag = param[1];
      if(tag !== Transpose_got_lists_of_differe)
       throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
      var
       arg0_045 = param[2],
       res0_046 = Base_Import[149].call(null, Base_Import[139], arg0_045);
      return [1, [0, p, [0, res0_046, 0]]];
     });
   function transpose_exn(l){
    var match = transpose(l);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Transpose_got_lists_of_differe, map(l, length)], 1);
    var l$0 = match[1];
    return l$0;
   }
   function intersperse(t, sep){
    if(! t) return 0;
    var xs = t[2], x = t[1];
    return [0,
            x,
            fold_right(xs, function(y, acc){return [0, sep, [0, y, acc]];}, 0)];
   }
   function fold_result(t, init, f){
    return Base_Container[8].call(null, fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return Base_Container[9].call(null, fold, init, f, finish, t);
   }
   function is_suffix(list, suffix, equal_elt){
    var
     list_len = length(list),
     suffix_len = length(suffix),
     a = suffix_len <= list_len ? 1 : 0;
    return a
            ? equal_with_local_closure
              (equal_elt,
               drop(list, Base_Import[93].call(null, list_len, suffix_len)),
               suffix)
            : a;
   }
   var
    Base_List =
      [0,
       compare$0,
       compare_local$0,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       of_list,
       of_array,
       append,
       concat,
       filter,
       filter_map,
       concat_map,
       partition_tf,
       partition_map,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       length,
       invariant,
       [0,
        both,
        symbol,
        symbol$1,
        symbol$0,
        apply,
        map2$0,
        map3$0,
        [0, symbol$2, symbol$4, symbol$3, symbol_map],
        symbol_bind,
        symbol_map,
        [0, symbol_bind, symbol_map],
        concat_map,
        singleton,
        map,
        join,
        ignore_m,
        all,
        all_unit,
        [0, singleton, symbol_bind, symbol_map, Let_syntax]],
       symbol_bind,
       symbol_map,
       Monad_infix,
       concat_map,
       singleton,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax$0,
       [0, compare, compare_local, sexp_of_t$0],
       singleton,
       nth,
       nth_exn,
       rev,
       rev_append,
       unordered_append,
       rev_map,
       iter2_exn,
       iter2,
       rev_map2_exn,
       rev_map2,
       fold2_exn,
       fold2,
       fold_right2_exn,
       fold_right2,
       for_all2_exn,
       for_all2,
       exists2_exn,
       exists2,
       rev_filter,
       partition3_map,
       partition_result,
       split_n,
       stable_sort,
       stable_sort,
       merge,
       hd,
       tl,
       hd_exn,
       tl_exn,
       findi_exn,
       find_exn,
       find_map_exn,
       find_mapi_exn,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       map2_exn,
       map2,
       rev_map3_exn,
       rev_map3,
       map3_exn,
       map3,
       rev_map_append,
       fold_right,
       fold,
       unzip,
       unzip3,
       zip,
       zip_exn,
       rev_mapi,
       reduce_exn,
       reduce,
       reduce_balanced,
       reduce_balanced_exn,
       group,
       groupi,
       sort_and_group,
       chunks_of,
       last,
       last_exn,
       is_prefix,
       is_suffix,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       dedup_and_sort,
       stable_dedup,
       find_a_dup,
       contains_dup,
       find_all_dups,
       all_equal,
       range$0,
       range,
       rev_filter_map,
       rev_filter_mapi,
       filter_opt,
       [0,
        t_of_sexp$0,
        sexp_of_t$1,
        t_sexp_grammar$0,
        add,
        find$0,
        find_exn$0,
        mem$0,
        remove,
        map$2,
        inverse,
        group$0,
        sort_and_group$0],
       sub,
       take,
       drop,
       take_while,
       drop_while,
       split_while,
       drop_last,
       drop_last_exn,
       concat_no_order,
       cons,
       cartesian_product,
       permute,
       random_element,
       random_element_exn,
       is_sorted,
       is_sorted_strictly,
       equal,
       equal_local,
       Infix,
       transpose,
       transpose_exn,
       intersperse];
   runtime.caml_register_global(62, Base_List, "Base__List");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Info
//# unitInfo: Requires: Base__Exn, Base__Hash, Base__Import, Base__Info_intf, Base__List, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Source_code_position0, Base__String0, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib__Format, Stdlib__Printexc
//# shape: Base__Info:[F(2),F(2),F(2),F(2),F(1)*,F(2),F(1),F(1)*,F(1),N,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(5),F(1)*,F(1),F(2)*,F(2)*,F(2)*,F(4)*,F(1)*,F(2),F(1),N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    a = [0, [0, "cycle while computing message"]],
    t_sexp_grammar = [0, "Info.t"],
    module_name = "Base.Info",
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Sexp = global_data.Base__Sexp,
    Base_Hash = global_data.Base__Hash,
    Base_Import = global_data.Base__Import,
    Base_List = global_data.Base__List,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_String0 = global_data.Base__String0,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    b = [0, "Could_not_construct"],
    c = [0, "String"],
    d = [0, "Exn"],
    e = [0, "Sexp"],
    f = [0, "Tag_sexp"],
    g = [0, "Tag_t"],
    h = [0, "Tag_arg"],
    i = [0, "Of_list"],
    j = [0, "With_backtrace"];
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_001 = param[1], res0_002 = Base_Sexp[5].call(null, arg0_001);
       return [1, [0, b, [0, res0_002, 0]]];
      case 1:
       var
        arg0_003 = param[1],
        res0_004 = Base_Import[136].call(null, arg0_003);
       return [1, [0, c, [0, res0_004, 0]]];
      case 2:
       var
        arg0_005 = param[1],
        res0_006 = Base_Import[198].call(null, arg0_005);
       return [1, [0, d, [0, res0_006, 0]]];
      case 3:
       var arg0_007 = param[1], res0_008 = Base_Sexp[5].call(null, arg0_007);
       return [1, [0, e, [0, res0_008, 0]]];
      case 4:
       var
        arg2_011 = param[3],
        arg1_010 = param[2],
        arg0_009 = param[1],
        res0_012 = Base_Import[136].call(null, arg0_009),
        res1_013 = Base_Sexp[5].call(null, arg1_010),
        res2_014 =
          Base_Import[146].call(null, Base_Source_code_position0[9], arg2_011);
       return [1, [0, f, [0, res0_012, [0, res1_013, [0, res2_014, 0]]]]];
      case 5:
       var
        arg1_016 = param[2],
        arg0_015 = param[1],
        res0_017 = Base_Import[136].call(null, arg0_015),
        res1_018 = sexp_of_t(arg1_016);
       return [1, [0, g, [0, res0_017, [0, res1_018, 0]]]];
      case 6:
       var
        arg2_021 = param[3],
        arg1_020 = param[2],
        arg0_019 = param[1],
        res0_022 = Base_Import[136].call(null, arg0_019),
        res1_023 = Base_Sexp[5].call(null, arg1_020),
        res2_024 = sexp_of_t(arg2_021);
       return [1, [0, h, [0, res0_022, [0, res1_023, [0, res2_024, 0]]]]];
      case 7:
       var
        arg1_026 = param[2],
        arg0_025 = param[1],
        res0_027 = Base_Import[146].call(null, Base_Import[139], arg0_025),
        res1_028 = Base_Import[149].call(null, sexp_of_t, arg1_026);
       return [1, [0, i, [0, res0_027, [0, res1_028, 0]]]];
      default:
       var
        arg1_030 = param[2],
        arg0_029 = param[1],
        res0_031 = sexp_of_t(arg0_029),
        res1_032 = Base_Import[136].call(null, arg1_030);
       return [1, [0, j, [0, res0_031, [0, res1_032, 0]]]];
    }
   }
   function to_sexps_hum(t, ac){
    switch(t[0]){
      case 0:
       return [0, sexp_of_t(t), ac];
      case 1:
       var string = t[1]; return [0, [0, string], ac];
      case 2:
       var exn = t[1]; return [0, Base_Exn[1].call(null, exn), ac];
      case 3:
       var sexp = t[1]; return [0, sexp, ac];
      case 4:
       var here = t[3], sexp$0 = t[2], tag = t[1];
       if(here)
        var
         here$0 = here[1],
         a = [0, Base_Source_code_position0[9].call(null, here$0), 0];
       else
        var a = 0;
       return [0, [1, [0, [0, tag], [0, sexp$0, a]]], ac];
      case 5:
       var t$0 = t[2], tag$0 = t[1];
       return [0, [1, [0, [0, tag$0], to_sexps_hum(t$0, 0)]], ac];
      case 6:
       var
        t$1 = t[3],
        sexp$1 = t[2],
        tag$1 = t[1],
        body = [0, sexp$1, to_sexps_hum(t$1, 0)];
       return 0 === runtime.caml_ml_string_length(tag$1)
               ? [0, [1, body], ac]
               : [0, [1, [0, [0, tag$1], body]], ac];
      case 7:
       var ts = t[2], b = Base_List[63].call(null, ts);
       return Base_List[20].call
               (null, b, ac, function(ac, t){return to_sexps_hum(t, ac);});
      default:
       var
        backtrace = t[2],
        t$2 = t[1],
        c = Base_String0[22].call(null, backtrace),
        d = [0, Base_Import[149].call(null, Base_Import[136], c), 0];
       return [0, [1, [0, to_sexp_hum(t$2), d]], ac];
    }
   }
   function to_sexp_hum(t){
    var sexps = to_sexps_hum(t, 0);
    if(sexps && ! sexps[2]){var sexp = sexps[1]; return sexp;}
    return [1, sexps];
   }
   function globalize_info(param){return param;}
   function compute_info$0(counter, info$3, stack$3){
    var info = info$3, stack = stack$3;
    for(;;){
     var match = info[1];
     if(typeof match === "number"){
      if(counter >= 50)
       return caml_trampoline_return(compute_message, [0, a, stack]);
      var counter$0 = counter + 1 | 0;
      return compute_message(counter$0, a, stack);
     }
     if(0 !== match[0]){
      var message = match[1];
      if(counter >= 50)
       return caml_trampoline_return(compute_message, [0, message, stack]);
      var counter$1 = counter + 1 | 0;
      return compute_message(counter$1, message, stack);
     }
     var cons = match[1];
     info[1] = 0;
     var stack$0 = [0, [0, info], stack];
     switch(cons[0]){
       case 0:
        var lazy_info = cons[1];
        try{
         var b = caml_obj_tag(lazy_info);
         a:
         if(250 === b)
          var info$0 = lazy_info[1];
         else{
          if(246 !== b && 244 !== b){var info$0 = lazy_info; break a;}
          var info$0 = CamlinternalLazy[2].call(null, lazy_info);
         }
         info = info$0;
         stack = stack$0;
        }
        catch(exn$0){
         var
          exn = caml_wrap_exception(exn$0),
          c = [0, Base_Exn[1].call(null, exn)];
         if(counter >= 50)
          return caml_trampoline_return(compute_message, [0, c, stack$0]);
         var counter$2 = counter + 1 | 0;
         return compute_message(counter$2, c, stack$0);
        }
        break;
       case 1:
        var infos = cons[1], d = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (compute_info_list, [0, infos, d, stack$0]);
        var counter$3 = counter + 1 | 0;
        return compute_info_list(counter$3, infos, d, stack$0);
       case 2:
        var
         info$1 = cons[3],
         arg = cons[2],
         tag = cons[1],
         stack$1 = [0, [1, tag, arg], stack$0];
        info = info$1;
        stack = stack$1;
        break;
       default:
        var
         info$2 = cons[2],
         tag$0 = cons[1],
         stack$2 = [0, [2, tag$0], stack$0];
        info = info$2;
        stack = stack$2;
     }
    }
   }
   function compute_info(info, stack){
    return caml_trampoline(compute_info$0(0, info, stack));
   }
   function compute_info_list(counter, fwd_prefix, rev_suffix, stack){
    if(fwd_prefix){
     var
      fwd_prefix$0 = fwd_prefix[2],
      info = fwd_prefix[1],
      a = [0, [3, fwd_prefix$0, rev_suffix], stack];
     if(counter >= 50)
      return caml_trampoline_return(compute_info$0, [0, info, a]);
     var counter$1 = counter + 1 | 0;
     return compute_info$0(counter$1, info, a);
    }
    var
     infos =
       Base_List[20].call
        (null,
         rev_suffix,
         0,
         function(tail, message){
          if(7 !== message[0]) return [0, message, tail];
          var messages = message[2];
          return Base_Import[111].call(null, messages, tail);
         }),
     b = [7, 0, infos];
    if(counter >= 50)
     return caml_trampoline_return(compute_message, [0, b, stack]);
    var counter$0 = counter + 1 | 0;
    return compute_message(counter$0, b, stack);
   }
   function compute_message(counter, message$2, stack$4){
    var message = message$2, stack = stack$4;
    for(;;){
     if(! stack) return message;
     var match = stack[1];
     switch(match[0]){
       case 0:
        var stack$0 = stack[2], info = match[1];
        info[1] = [1, message];
        stack = stack$0;
        break;
       case 1:
        var
         stack$1 = stack[2],
         arg = match[2],
         tag = match[1],
         message$0 = [6, tag, arg, message];
        message = message$0;
        stack = stack$1;
        break;
       case 2:
        var
         stack$2 = stack[2],
         tag$0 = match[1],
         message$1 = [5, tag$0, message];
        message = message$1;
        stack = stack$2;
        break;
       default:
        var
         stack$3 = stack[2],
         rev_suffix = match[2],
         fwd_prefix = match[1],
         a = [0, message, rev_suffix];
        if(counter >= 50)
         return caml_trampoline_return
                 (compute_info_list, [0, fwd_prefix, a, stack$3]);
        var counter$0 = counter + 1 | 0;
        return compute_info_list(counter$0, fwd_prefix, a, stack$3);
     }
    }
   }
   function to_message(info){return compute_info(info, 0);}
   function of_message(message){return [0, [1, message]];}
   function of_cons(cons){return [0, [0, cons]];}
   function of_lazy_cons(lazy_cons){
    return of_cons
            ([0,
              [246,
               function(param){
                var a = caml_obj_tag(lazy_cons);
                a:
                if(250 === a)
                 var b = lazy_cons[1];
                else{
                 if(246 !== a && 244 !== a){var b = lazy_cons; break a;}
                 var b = CamlinternalLazy[2].call(null, lazy_cons);
                }
                return of_cons(b);
               }]]);
   }
   function of_lazy_message(lazy_message){
    return of_cons
            ([0,
              [246,
               function(param){
                var a = caml_obj_tag(lazy_message);
                a:
                if(250 === a)
                 var b = lazy_message[1];
                else{
                 if(246 !== a && 244 !== a){var b = lazy_message; break a;}
                 var b = CamlinternalLazy[2].call(null, lazy_message);
                }
                return of_message(b);
               }]]);
   }
   function invariant(param){return 0;}
   function sexp_of_t$0(t){return to_sexp_hum(to_message(t));}
   function t_of_sexp(sexp){return of_message([3, sexp]);}
   function compare(t1, t2){
    var a = sexp_of_t$0(t2), b = sexp_of_t$0(t1);
    return Base_Sexp[7].call(null, b, a);
   }
   function compare_local(t1, t2){return compare(t1, t2);}
   function equal(t1, t2){
    var a = sexp_of_t$0(t2), b = sexp_of_t$0(t1);
    return Base_Sexp[6].call(null, b, a);
   }
   function equal_local(t1, t2){return equal(t1, t2);}
   function hash_fold_t(state, t){
    var a = sexp_of_t$0(t);
    return Base_Sexp[2].call(null, state, a);
   }
   function hash(t){return Base_Hash[14].call(null, 0, hash_fold_t, t);}
   function to_string_hum(t){
    var message = to_message(t);
    if(1 === message[0]){var s = message[1]; return s;}
    var a = to_sexp_hum(message);
    return Base_Sexp[16].call(null, 0, a);
   }
   function to_string_mach(t){
    var a = sexp_of_t$0(t);
    return Base_Sexp[17].call(null, a);
   }
   function of_lazy(l){
    return of_lazy_message
            ([246,
              function(param){
               var a = caml_obj_tag(l);
               a:
               if(250 === a)
                var b = l[1];
               else{
                if(246 !== a && 244 !== a){var b = l; break a;}
                var b = CamlinternalLazy[2].call(null, l);
               }
               return [1, b];
              }]);
   }
   function of_lazy_sexp(l){
    return of_lazy_message
            ([246,
              function(param){
               var a = caml_obj_tag(l);
               a:
               if(250 === a)
                var b = l[1];
               else{
                if(246 !== a && 244 !== a){var b = l; break a;}
                var b = CamlinternalLazy[2].call(null, l);
               }
               return [3, b];
              }]);
   }
   function of_lazy_t(lazy_info){return of_cons([0, lazy_info]);}
   function of_string(message){return of_message([1, message]);}
   function createf(format){
    return Base_Printf[4].call(null, of_string, format);
   }
   function of_thunk(f){
    return of_lazy_message
            ([246, function(param){return [1, caml_call1(f, 0)];}]);
   }
   function create(here, strict, tag, x, sexp_of_x){
    return strict
            ? of_message([4, tag, caml_call1(sexp_of_x, x), here])
            : of_lazy_message
              ([246,
                function(param){
                 return [4, tag, caml_call1(sexp_of_x, x), here];
                }]);
   }
   function create_s(sexp){return of_message([3, sexp]);}
   function tag(t, tag){return of_cons([3, tag, t]);}
   function tag_s_lazy(t, tag){
    return of_lazy_cons
            ([246,
              function(param){
               var a = caml_obj_tag(tag);
               a:
               if(250 === a)
                var b = tag[1];
               else{
                if(246 !== a && 244 !== a){var b = tag; break a;}
                var b = CamlinternalLazy[2].call(null, tag);
               }
               return [2, cst, b, t];
              }]);
   }
   function tag_s(t, tag){return of_cons([2, cst$0, tag, t]);}
   function tag_arg(t, tag, x, sexp_of_x){
    return of_lazy_cons
            ([246,
              function(param){return [2, tag, caml_call1(sexp_of_x, x), t];}]);
   }
   function of_list(ts){return of_cons([1, ts]);}
   var
    Exn = [248, "Base__Info.Exn", runtime.caml_fresh_oo_id(0)],
    k = [0, "src/info.ml", 261, 6];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Exn,
     function(param){
      var tag = param[1];
      if(tag !== Exn)
       throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
      var t = param[2];
      return sexp_of_t$0(t);
     });
   function to_exn(info){
    var match = info[1];
    a:
    {
     if(typeof match !== "number" && 0 !== match[0]){var a = 1; break a;}
     var a = 0;
    }
    if(! a) return [0, Exn, info];
    var match$0 = to_message(info);
    if(2 !== match$0[0]) return [0, Exn, info];
    var exn = match$0[1];
    return exn;
   }
   function of_exn(backtrace, exn){
    if(backtrace){
     var match = backtrace[1];
     if(typeof match === "number")
      var backtrace$0 = [0, Stdlib_Printexc[6].call(null, 0)];
     else
      var s = match[2], backtrace$0 = [0, s];
    }
    else
     var backtrace$0 = 0;
    var tag = exn[1];
    if(tag === Exn){
     var t = exn[2];
     if(! backtrace$0) return t;
     var backtrace$1 = backtrace$0[1];
     return of_lazy_message
             ([246, function(param){return [8, to_message(t), backtrace$1];}]);
    }
    if(! backtrace$0) return of_message([2, exn]);
    var backtrace$2 = backtrace$0[1];
    return of_lazy_message
            ([246,
              function(param){
               return [8, [3, Base_Exn[1].call(null, exn)], backtrace$2];
              }]);
   }
   function pp(ppf, t){
    var a = to_string_hum(t);
    return Stdlib_Format[13].call(null, ppf, a);
   }
   var
    include = Base_Pretty_printer[3].call(null, [0, pp, module_name]),
    pp$0 = include[1],
    Base_Info =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize_info,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       t_sexp_grammar,
       invariant,
       to_string_hum,
       to_string_mach,
       of_string,
       of_lazy,
       of_lazy_sexp,
       of_thunk,
       of_lazy_t,
       create,
       create_s,
       createf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       of_list,
       of_exn,
       to_exn,
       pp$0,
       [0, sexp_of_t, to_message, of_message]];
   runtime.caml_register_global(30, Base_Info, "Base__Info");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Error
//# unitInfo: Requires: Base__Info, Base__Pretty_printer
//# shape: Base__Error:[F(2),F(2),F(2),F(2),F(1)*,F(2),F(1),F(1)*,F(1),N,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(5),F(1)*,F(1),F(2)*,F(2)*,F(2)*,F(4)*,F(1)*,F(2),F(1),N,N,F(1),F(1),F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    t_sexp_grammar = [0, "Error.t"],
    module_name = "Base.Error",
    Base_Info = global_data.Base__Info,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    compare = Base_Info[1],
    compare_local = Base_Info[2],
    equal = Base_Info[3],
    equal_local = Base_Info[4],
    globalize = Base_Info[5],
    hash_fold_t = Base_Info[6],
    hash = Base_Info[7],
    t_of_sexp = Base_Info[8],
    sexp_of_t = Base_Info[9],
    invariant = Base_Info[11],
    to_string_hum = Base_Info[12],
    to_string_mach = Base_Info[13],
    of_string = Base_Info[14],
    of_lazy = Base_Info[15],
    of_lazy_sexp = Base_Info[16],
    of_thunk = Base_Info[17],
    of_lazy_t = Base_Info[18],
    create = Base_Info[19],
    create_s = Base_Info[20],
    createf = Base_Info[21],
    tag = Base_Info[22],
    tag_s = Base_Info[23],
    tag_s_lazy = Base_Info[24],
    tag_arg = Base_Info[25],
    of_list = Base_Info[26],
    of_exn = Base_Info[27],
    to_exn = Base_Info[28],
    pp = Base_Info[29],
    Internal_repr = Base_Info[30];
   function raise(t){throw caml_maybe_attach_backtrace(to_exn(t), 1);}
   function raise_s(sexp){return raise(create_s(sexp));}
   function to_info(t){return t;}
   function of_info(t){return t;}
   var
    include = Base_Pretty_printer[3].call(null, [0, pp, module_name]),
    pp$0 = include[1],
    Base_Error =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       to_string_hum,
       to_string_mach,
       of_string,
       of_lazy,
       of_lazy_sexp,
       of_thunk,
       of_lazy_t,
       create,
       create_s,
       createf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       of_list,
       of_exn,
       to_exn,
       pp$0,
       Internal_repr,
       raise,
       raise_s,
       to_info,
       of_info];
   runtime.caml_register_global(4, Base_Error, "Base__Error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Invariant
//# unitInfo: Requires: Base__Error, Base__Field, Base__Import, Base__Invariant_intf, Base__Sexp, Base__Source_code_position0
//# shape: Base__Invariant:[F(4),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_exn$1 = "exn",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Base_Field = global_data.Base__Field,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Error = global_data.Base__Error,
    raise_s = Base_Error[32],
    cst_exn = cst_exn$1,
    cst_invariant_failed = "invariant failed",
    cst_exn$0 = cst_exn$1,
    cst_field = "field",
    cst_problem_with_field = "problem with field";
   function invariant(here, t, sexp_of_t, f){
    try{var d = caml_call1(f, 0); return d;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      a = [0, [0, cst, caml_call1(sexp_of_t, t)], 0],
      b = [0, [0, cst_exn, Base_Import[198].call(null, exn)], a],
      c = [0, [0, cst$0, Base_Source_code_position0[9].call(null, here)], b];
     return raise_s(Base_Sexp[10].call(null, cst_invariant_failed, c));
    }
   }
   function check_field(t, f, field){
    try{var d = caml_call1(f, Base_Field[3].call(null, field, t)); return d;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      a = [0, [0, cst_exn$0, Base_Import[198].call(null, exn)], 0],
      b = Base_Field[2].call(null, field),
      c = [0, [0, cst_field, Base_Import[136].call(null, b)], a];
     return raise_s(Base_Sexp[10].call(null, cst_problem_with_field, c));
    }
   }
   var Base_Invariant = [0, invariant, check_field];
   runtime.caml_register_global(12, Base_Invariant, "Base__Invariant");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Or_error
//# unitInfo: Requires: Base__Applicative, Base__Error, Base__Import, Base__List, Base__Printf, Base__Result, Base__With_return
//# shape: Base__Or_error:[F(3),F(3),F(3),F(3),F(2),F(3),F(2),F(2),F(1)*,N,N,N,N,N,F(3),N,N,F(2),N,N,N,N,N,N,N,F(1),F(1),N,F(1)*,F(1)*,F(2),F(2),F(1)*,F(1),F(2),F(2),F(2)*,F(5),F(1)*,F(1)*,F(1),F(2),F(2),F(2),F(4),F(1),N,F(2),F(2),F(1),F(1),F(1),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Base_Error = global_data.Base__Error,
    Base_With_return = global_data.Base__With_return,
    Assert_failure = global_data.Assert_failure,
    Base_Result = global_data.Base__Result,
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Applicative = global_data.Base__Applicative;
   function compare_local(cmp_a, a_007, b_008){
    return Base_Result[5].call(null, cmp_a, Base_Error[2], a_007, b_008);
   }
   function compare(cmp_a, a_001, b_002){
    return Base_Result[4].call(null, cmp_a, Base_Error[1], a_001, b_002);
   }
   function equal_local(cmp_a, a_019, b_020){
    return Base_Result[7].call(null, cmp_a, Base_Error[4], a_019, b_020);
   }
   function equal(cmp_a, a_013, b_014){
    return Base_Result[6].call(null, cmp_a, Base_Error[3], a_013, b_014);
   }
   function globalize(globalize_a_026, x_027){
    return Base_Result[9].call(null, globalize_a_026, Base_Error[5], x_027);
   }
   function hash_fold_t(hash_fold_a, hsv, arg){
    return Base_Result[8].call(null, hash_fold_a, Base_Error[6], hsv, arg);
   }
   function t_of_sexp(of_a_030, x_032){
    return Base_Result[1].call(null, of_a_030, Base_Error[8], x_032);
   }
   function sexp_of_t(of_a_033, x_034){
    return Base_Result[2].call(null, of_a_033, Base_Error[9], x_034);
   }
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Result[3].call(null, a_sexp_grammar, Base_Error[10]);
   }
   var
    symbol_bind = Base_Result[10],
    symbol_map = Base_Result[11],
    bind = Base_Result[14],
    ignore_m = Base_Result[17],
    join = Base_Result[16],
    map = Base_Result[33],
    return$ = Base_Result[15];
   function invariant(invariant_a, t){
    if(0 === t[0]){var a = t[1]; return caml_call1(invariant_a, a);}
    var error = t[1];
    return Base_Error[11].call(null, error);
   }
   function map2(a, b, f){
    if(0 === a[0]){
     var x = a[1];
     if(0 === b[0]){var y = b[1]; return [0, caml_call2(f, x, y)];}
     var e = b;
    }
    else{
     var e1 = a[1];
     if(0 !== b[0]){
      var e2 = b[1];
      return [1, Base_Error[26].call(null, [0, e1, [0, e2, 0]])];
     }
     var e = a;
    }
    return e;
   }
   var
    map$0 = [0, -198771759, map],
    For_applicative =
      Base_Applicative[16].call(null, [0, return$, map2, map$0]),
    symbol = For_applicative[6],
    symbol$0 = For_applicative[5],
    symbol$1 = For_applicative[4],
    apply = For_applicative[8],
    both = For_applicative[3],
    map3 = For_applicative[10],
    include = Base_Result[13],
    symbol_bind$0 = include[1],
    symbol_map$0 = include[2],
    Open_on_rhs = [0],
    ok = Base_Result[26],
    is_ok = Base_Result[24],
    is_error = Base_Result[25],
    a = [0, 3553398];
   function try_with(opt, f){
    var backtrace = opt ? opt[1] : 0;
    try{var c = [0, caml_call1(f, 0)]; return c;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), b = backtrace ? a : 0;
     return [1, Base_Error[27].call(null, b, exn)];
    }
   }
   function try_with_join(backtrace, f){
    return caml_call1(join, try_with(backtrace, f));
   }
   function ok_exn(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var err = param[1];
    return Base_Error[31].call(null, err);
   }
   function of_exn(backtrace, exn){
    return [1, Base_Error[27].call(null, backtrace, exn)];
   }
   function of_exn_result(backtrace, z){
    if(0 === z[0]) return z;
    var exn = z[1];
    return of_exn(backtrace, exn);
   }
   var
    of_option = Base_Result[30],
    cst_unimplemented = "unimplemented",
    b = [0, "src/or_error.ml", 192, 21];
   function error(here, strict, message, a, sexp_of_a){
    return [1, Base_Error[19].call(null, here, strict, message, a, sexp_of_a)];
   }
   function error_s(sexp){return [1, Base_Error[20].call(null, sexp)];}
   function error_string(message){
    return [1, Base_Error[14].call(null, message)];
   }
   function errorf(format){
    return Base_Printf[4].call(null, error_string, format);
   }
   function tag(t, tag){
    var a = Base_Error[22];
    return Base_Result[34].call(null, t, function(b){return a(b, tag);});
   }
   function tag_s(t, tag){
    var a = Base_Error[23];
    return Base_Result[34].call(null, t, function(b){return a(b, tag);});
   }
   function tag_s_lazy(t, tag){
    var a = Base_Error[24];
    return Base_Result[34].call(null, t, function(b){return a(b, tag);});
   }
   function tag_arg(t, message, a, sexp_of_a){
    return Base_Result[34].call
            (null,
             t,
             function(e){
              return Base_Error[25].call(null, e, message, a, sexp_of_a);
             });
   }
   function unimplemented(s){
    return error(0, 0, cst_unimplemented, s, Base_Import[136]);
   }
   function error_of_list_if_necessary(list){
    if(list && ! list[2]){var e = list[1]; return e;}
    return Base_Error[26].call(null, list);
   }
   function all(list){
    var match = Base_Result[36].call(null, list);
    if(0 === match[0]){var x = match[1]; return [0, x];}
    var errs = match[1];
    return [1, error_of_list_if_necessary(errs)];
   }
   function all_unit(list){
    var match = Base_Result[36].call(null, list);
    if(0 === match[0]) return [0, 0];
    var errs = match[1];
    return [1, error_of_list_if_necessary(errs)];
   }
   function combine_errors(list){
    var on_error = Base_Error[26], match = Base_Result[36].call(null, list);
    if(0 === match[0]){var x = match[1]; return [0, x];}
    var errs = match[1];
    return [1, on_error(errs)];
   }
   function combine_errors_unit(list){
    var on_error = Base_Error[26], match = Base_Result[36].call(null, list);
    if(0 === match[0]) return [0, 0];
    var errs = match[1];
    return [1, on_error(errs)];
   }
   function filter_ok_at_least_one(l){
    var
     match = Base_List[16].call(null, l, Base_Result[38]),
     errs = match[2],
     ok = match[1];
    return ok ? [0, ok] : [1, Base_Error[26].call(null, errs)];
   }
   function find_ok(l){
    var match = Base_List[28].call(null, l, Base_Result[26]);
    if(match){var x = match[1]; return [0, x];}
    var
     a =
       Base_List[53].call
        (null,
         l,
         function(param){
          if(0 === param[0])
           throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
          var err = param[1];
          return err;
         });
    return [1, Base_Error[26].call(null, a)];
   }
   function find_map_ok(l, f){
    return Base_With_return[1].call
            (null,
             function(param){
              var
               a =
                 Base_List[53].call
                  (null,
                   l,
                   function(elt){
                    var x = caml_call1(f, elt);
                    if(0 === x[0]) return caml_call1(param, x);
                    var err = x[1];
                    return err;
                   });
              return [1, Base_Error[26].call(null, a)];
             });
   }
   var
    map$1 = Base_Result[33],
    iter = Base_Result[31],
    iter_error = Base_Result[32],
    Base_Or_error =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       both,
       symbol$1,
       symbol$0,
       symbol,
       apply,
       map2,
       map3,
       For_applicative[13],
       invariant,
       symbol_bind,
       symbol_map,
       Base_Result[13],
       bind,
       return$,
       join,
       ignore_m,
       all,
       all_unit,
       [0,
        return$,
        symbol_bind$0,
        symbol_map$0,
        [0, return$, bind, map, both, Open_on_rhs]],
       is_ok,
       is_error,
       try_with,
       try_with_join,
       ok,
       ok_exn,
       of_exn,
       of_exn_result,
       of_option,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       map$1,
       iter,
       iter_error,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       find_ok,
       find_map_ok];
   runtime.caml_register_global(11, Base_Or_error, "Base__Or_error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign0
//# unitInfo: Requires: Base__Hash, Base__Import, Base__Poly0, Sexplib0__Sexp_conv_error
//# shape: Base__Sign0:[F(1),F(1)*,N,F(2)*,F(2)*,F(2),N,[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*],F(1),F(1),F(1)*,F(1)*,N,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Neg = "Neg",
    cst_Pos = "Pos",
    cst_Zero = "Zero",
    cst_neg = "neg",
    cst_pos = "pos",
    cst_zero = "zero",
    caml_int_compare = runtime.caml_int_compare,
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "sign0.ml.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Neg, 0]],
         [0, [1, [0, cst_Zero, 0]], [0, [1, [0, cst_Pos, 0]], 0]]]]],
    all = [0, 0, [0, 1, [0, 2, 0]]],
    module_name = "Base.Sign",
    Base_Import = global_data.Base__Import,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    a = [0, cst_Neg],
    b = [0, cst_Zero],
    c = [0, cst_Pos];
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var a = sexp_004[1];
      b:
      if(a !== cst_Neg){
       c:
       if(a !== cst_Pos){
        if(a !== cst_Zero){
         if(a === cst_neg) break b;
         if(a === cst_pos) break c;
         if(a !== cst_zero) break a;
        }
        return 1;
       }
       return 2;
      }
      return 0;
     }
     var match = sexp_004[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_003, sexp_004);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_003, sexp_004);
     var b = match$0[1];
     b:
     if(b !== cst_Neg){
      c:
      if(b !== cst_Pos){
       if(b !== cst_Zero){
        if(b === cst_neg) break b;
        if(b === cst_pos) break c;
        if(b !== cst_zero) break a;
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_003, sexp_004);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_003, sexp_004);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_003, sexp_004);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){case 0: return a;case 1: return b;default: return c;
    }
   }
   var compare_local = caml_int_compare, compare = caml_int_compare;
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var a = 0; break;
      case 1:
       var a = 1; break;
      default: var a = 2;
    }
    return Base_Hash[3].call(null, hsv, a);
   }
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   function ascending(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending(x, y){return Base_Poly0[2].call(null, x, y);}
   var compare$0 = caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function equal_local(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Replace_polymorphic_compare =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       ascending,
       descending,
       compare$0,
       equal,
       equal_local,
       max,
       min];
   function of_string(s){return t_of_sexp(Base_Import[136].call(null, s));}
   function to_string(t){
    var a = sexp_of_t(t);
    return Base_Import[160].call(null, a);
   }
   function to_int(param){
    switch(param){case 0: return -1;case 1: return 0;default: return 1;
    }
   }
   function of_int(n){return 0 <= n ? 0 === n ? 1 : 2 : 0;}
   var
    Base_Sign0 =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare_local,
       compare,
       hash_fold_t,
       all,
       Replace_polymorphic_compare,
       of_string,
       to_string,
       to_int,
       to_int,
       module_name,
       of_int];
   runtime.caml_register_global(23, Base_Sign0, "Base__Sign0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparable_intf
//# shape: Base__Comparable_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Comparable_intf = [0];
   runtime.caml_register_global
    (0, Base_Comparable_intf, "Base__Comparable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparable
//# unitInfo: Requires: Base__Comparable_intf, Base__Comparator, Base__Or_error, Base__Poly0, Base__Sexp, Base__Sign0
//# shape: Base__Comparable:[F(3),F(4),F(3),F(3),F(3),F(3),F(3),F(1)*,F(1)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_clamp_requires_min_max$1 = "clamp requires [min <= max]",
    cst_max$1 = "max",
    cst_min$1 = "min",
    cst_src_comparable_ml = "src/comparable.ml",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Comparator = global_data.Base__Comparator,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Sign0 = global_data.Base__Sign0,
    a = [0, cst_src_comparable_ml, 47, 4],
    cst_max = cst_max$1,
    cst_min = cst_min$1,
    cst_clamp_requires_min_max = cst_clamp_requires_min_max$1,
    b = [0, cst_src_comparable_ml, 135, 4],
    cst_max$0 = cst_max$1,
    cst_min$0 = cst_min$1,
    cst_clamp_requires_min_max$0 = cst_clamp_requires_min_max$1;
   function geq(cmp, a, b){return 0 <= caml_call2(cmp, a, b) ? 1 : 0;}
   function leq(cmp, a, b){return caml_call2(cmp, a, b) <= 0 ? 1 : 0;}
   function equal(cmp, a, b){return 0 === caml_call2(cmp, a, b) ? 1 : 0;}
   function min(cmp, t$0, t){return leq(cmp, t$0, t) ? t$0 : t;}
   function max(cmp, t$0, t){return geq(cmp, t$0, t) ? t$0 : t;}
   function Infix(T){
    function symbol(a, b){
     var cmp = T[1];
     return 0 < caml_call2(cmp, a, b) ? 1 : 0;
    }
    function symbol$0(a, b){
     var cmp = T[1];
     return caml_call2(cmp, a, b) < 0 ? 1 : 0;
    }
    function symbol$1(a, b){return geq(T[1], a, b);}
    function symbol$2(a, b){return leq(T[1], a, b);}
    function symbol$3(a, b){return equal(T[1], a, b);}
    function symbol$4(a, b){
     var cmp = T[1];
     return 0 !== caml_call2(cmp, a, b) ? 1 : 0;
    }
    return [0, symbol$1, symbol$2, symbol$3, symbol, symbol$0, symbol$4];
   }
   function Comparisons(T){
    var
     include = Infix(T),
     symbol = include[1],
     symbol$0 = include[2],
     symbol$1 = include[3],
     symbol$2 = include[4],
     symbol$3 = include[5],
     symbol$4 = include[6],
     compare = T[1];
    function min$0(t$0, t){return min(compare, t$0, t);}
    function max$0(t$0, t){return max(compare, t$0, t);}
    return [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            symbol$1,
            compare,
            min$0,
            max$0];
   }
   function Make_using_comparator(T){
    var
     sexp_of_t = T[1],
     comparator = T[2],
     compare = comparator[1],
     Replace_polymorphic_compare = Comparisons([0, compare]),
     symbol = Replace_polymorphic_compare[1],
     symbol$0 = Replace_polymorphic_compare[2],
     symbol$1 = Replace_polymorphic_compare[3],
     symbol$2 = Replace_polymorphic_compare[4],
     symbol$3 = Replace_polymorphic_compare[5],
     symbol$4 = Replace_polymorphic_compare[6],
     equal = Replace_polymorphic_compare[7],
     compare$0 = Replace_polymorphic_compare[8],
     min = Replace_polymorphic_compare[9],
     max = Replace_polymorphic_compare[10];
    function descending(t$0, t){return caml_call2(compare$0, t, t$0);}
    function between(t, low, high){
     var a = caml_call2(symbol$0, low, t);
     return a ? caml_call2(symbol$0, t, high) : a;
    }
    function clamp_unchecked(t, min, max){
     return caml_call2(symbol$3, t, min)
             ? min
             : caml_call2(symbol$0, t, max) ? t : max;
    }
    function clamp_exn(t, min, max){
     if(caml_call2(symbol$0, min, max)) return clamp_unchecked(t, min, max);
     throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    }
    function clamp(t, min, max){
     if(! caml_call2(symbol$2, min, max))
      return [0, clamp_unchecked(t, min, max)];
     var
      a = [0, [0, cst_max$0, caml_call1(sexp_of_t, max)], 0],
      b = [0, [0, cst_min$0, caml_call1(sexp_of_t, min)], a],
      c = Base_Sexp[10].call(null, cst_clamp_requires_min_max$0, b);
     return Base_Or_error[39].call(null, c);
    }
    return [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare$0,
            min,
            max,
            compare$0,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator];
   }
   function Make(T){
    var
     sexp_of_t = T[2],
     include = Base_Comparator[7].call(null, T),
     comparator = include[1];
    return Make_using_comparator([0, sexp_of_t, comparator]);
   }
   function Inherit(C, T){
    var sexp_of_t = T[1];
    function compare(t$0, t){
     var a = caml_call1(T[2], t), b = caml_call1(T[2], t$0);
     return caml_call2(C[1], b, a);
    }
    return Make([0, compare, sexp_of_t]);
   }
   function lexicographic(cmps, x, y){
    var param = cmps;
    for(;;){
     if(! param) return 0;
     var cmps$0 = param[2], cmp = param[1], res = caml_call2(cmp, x, y);
     if(0 !== res) return res;
     param = cmps$0;
    }
   }
   function lift(cmp, f, x, y){
    var a = caml_call1(f, y);
    return caml_call2(cmp, caml_call1(f, x), a);
   }
   function reverse(cmp, x, y){return caml_call2(cmp, y, x);}
   function compare_reversed(cmp, x, y){return caml_call2(cmp, y, x);}
   var
    Base_Comparable =
      [0,
       lexicographic,
       lift,
       reverse,
       compare_reversed,
       equal,
       max,
       min,
       Infix,
       Comparisons,
       Inherit,
       Make,
       Make_using_comparator,
       function(T){
        var
         sexp_of_t = T[1],
         ascending = Base_Poly0[1],
         descending = Base_Poly0[2],
         min = Base_Poly0[3],
         max = Base_Poly0[4];
        function between(t, low, high){
         var a = caml_lessequal(low, t), b = a ? caml_lessequal(t, high) : a;
         return b;
        }
        function clamp_unchecked(t, min, max){
         return caml_lessthan(t, min) ? min : caml_lessequal(t, max) ? t : max;
        }
        function clamp_exn(t, min, max){
         if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
         throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
        }
        function clamp(t, min, max){
         if(! caml_greaterthan(min, max))
          return [0, clamp_unchecked(t, min, max)];
         var
          a = [0, [0, cst_max, caml_call1(T[1], max)], 0],
          b = [0, [0, cst_min, caml_call1(T[1], min)], a],
          c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
         return Base_Or_error[39].call(null, c);
        }
        var
         include = Base_Comparator[7].call(null, [0, caml_compare, sexp_of_t]),
         comparator = include[1];
        return [0,
                runtime.caml_greaterequal,
                caml_lessequal,
                caml_equal,
                caml_greaterthan,
                caml_lessthan,
                runtime.caml_notequal,
                caml_equal,
                caml_compare,
                min,
                max,
                ascending,
                descending,
                between,
                clamp_exn,
                clamp,
                comparator];
       },
       function(c){
        var a = c[3], b = c[1];
        function is_positive(t){return 0 < caml_call2(b, t, a) ? 1 : 0;}
        function is_non_negative(t){return 0 <= caml_call2(b, t, a) ? 1 : 0;}
        function is_negative(t){return caml_call2(b, t, a) < 0 ? 1 : 0;}
        function is_non_positive(t){return caml_call2(b, t, a) <= 0 ? 1 : 0;}
        function sign(t){
         var c = caml_call2(b, t, a);
         return Base_Sign0[14].call(null, c);
        }
        return [0,
                is_positive,
                is_non_negative,
                is_negative,
                is_non_positive,
                sign];
       }];
   runtime.caml_register_global(14, Base_Comparable, "Base__Comparable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashable_intf
//# unitInfo: Requires: Base__Import
//# shape: Base__Hashable_intf:[[F(2)*,F(3)*,F(1)*,N,F(1)*,F(1)*],F(2)*,F(3)*,F(1)*,N,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import;
   function equal(a, b){
    var d = a === b ? 1 : 0;
    if(d)
     var c = d;
    else{
     var e = a[1] === b[1] ? 1 : 0;
     if(e)
      var f = a[2] === b[2] ? 1 : 0, c = f ? a[3] === b[3] ? 1 : 0 : f;
     else
      var c = e;
    }
    return c;
   }
   var
    hash_param = Base_Import[85][105][30],
    hash = Base_Import[85][105][28],
    a = [0, "_"],
    poly = [0, hash, runtime.caml_compare, function(param){return a;}];
   function of_key(Key){return [0, Key[3], Key[1], Key[2]];}
   function to_key(param){
    var sexp_of_t = param[3], compare = param[2], hash = param[1];
    return [0, compare, sexp_of_t, hash];
   }
   var
    Hashable = [0, equal, hash_param, hash, poly, of_key, to_key],
    Base_Hashable_intf =
      [0, Hashable, equal, hash_param, hash, poly, of_key, to_key];
   runtime.caml_register_global(2, Base_Hashable_intf, "Base__Hashable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashable
//# unitInfo: Requires: Base__Hashable_intf
//# shape: Base__Hashable:[F(2)*,N,F(1)*,F(1)*,F(3)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Hashable_intf = global_data.Base__Hashable_intf,
    equal = Base_Hashable_intf[2],
    hash_param = Base_Hashable_intf[3],
    hash = Base_Hashable_intf[4],
    poly = Base_Hashable_intf[5],
    of_key = Base_Hashable_intf[6],
    to_key = Base_Hashable_intf[7],
    Base_Hashable = [0, equal, poly, of_key, to_key, hash_param, hash];
   runtime.caml_register_global(1, Base_Hashable, "Base__Hashable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stringable
//# shape: Base__Stringable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Stringable = [0];
   runtime.caml_register_global(0, Base_Stringable, "Base__Stringable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Identifiable_intf
//# shape: Base__Identifiable_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Identifiable_intf = [0];
   runtime.caml_register_global
    (0, Base_Identifiable_intf, "Base__Identifiable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Identifiable
//# unitInfo: Requires: Base__Comparable, Base__Identifiable_intf, Base__Pretty_printer
//# shape: Base__Identifiable:[F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Comparable = global_data.Base__Comparable,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Identifiable =
      [0,
       function(T){
        var
         hash_fold_t = T[2],
         hash = T[3],
         t_of_sexp = T[4],
         sexp_of_t = T[5],
         of_string = T[6],
         to_string = T[7],
         a = Base_Comparable[11].call(null, [0, T[1], T[5]]),
         symbol = a[1],
         symbol$0 = a[2],
         symbol$1 = a[3],
         symbol$2 = a[4],
         symbol$3 = a[5],
         symbol$4 = a[6],
         equal = a[7],
         compare = a[8],
         min = a[9],
         max = a[10],
         ascending = a[11],
         descending = a[12],
         between = a[13],
         clamp_exn = a[14],
         clamp = a[15],
         comparator = a[16],
         include = Base_Pretty_printer[2].call(null, [0, T[8], T[7]]),
         pp = include[1],
         hashable = [0, hash, compare, sexp_of_t];
        return [0,
                hash_fold_t,
                hash,
                t_of_sexp,
                sexp_of_t,
                of_string,
                to_string,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                equal,
                compare,
                min,
                max,
                ascending,
                descending,
                between,
                clamp_exn,
                clamp,
                comparator,
                pp,
                hashable];
       },
       function(T){
        var
         hash_fold_t = T[2],
         hash = T[3],
         t_of_sexp = T[4],
         sexp_of_t = T[5],
         of_string = T[6],
         to_string = T[7],
         a = Base_Comparable[12].call(null, [0, T[5], T[9]]),
         symbol = a[1],
         symbol$0 = a[2],
         symbol$1 = a[3],
         symbol$2 = a[4],
         symbol$3 = a[5],
         symbol$4 = a[6],
         equal = a[7],
         compare = a[8],
         min = a[9],
         max = a[10],
         ascending = a[11],
         descending = a[12],
         between = a[13],
         clamp_exn = a[14],
         clamp = a[15],
         comparator = a[16],
         include = Base_Pretty_printer[2].call(null, [0, T[8], T[7]]),
         pp = include[1],
         hashable = [0, hash, compare, sexp_of_t];
        return [0,
                hash_fold_t,
                hash,
                t_of_sexp,
                sexp_of_t,
                of_string,
                to_string,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                equal,
                compare,
                min,
                max,
                ascending,
                descending,
                between,
                clamp_exn,
                clamp,
                comparator,
                pp,
                hashable];
       }];
   runtime.caml_register_global(2, Base_Identifiable, "Base__Identifiable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Unit
//# unitInfo: Requires: Base__Identifiable, Base__Import
//# shape: Base__Unit:[N,F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$0 = "()";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    all = [0, 0, 0],
    module_name = "Base.Unit",
    Base_Import = global_data.Base__Import,
    Base_Identifiable = global_data.Base__Identifiable,
    globalize = Base_Import[290],
    hash_fold_t = Base_Import[210],
    func = Base_Import[224];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[158],
    sexp_of_t = Base_Import[134],
    t_sexp_grammar = Base_Import[180],
    cst_Base_Unit_of_string_expect = "Base.Unit.of_string: () expected";
   function compare(a, param){return 0;}
   function compare_local(a, param){return 0;}
   function equal_local(a, param){return 1;}
   function of_string(param){
    return param !== cst$0
            ? Base_Import[124].call(null, cst_Base_Unit_of_string_expect)
            : 0;
   }
   function to_string(param){return cst;}
   var
    include =
      Base_Identifiable[1].call
       (null,
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = include[1],
    hash$0 = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t$0 = include[4],
    of_string$0 = include[5],
    to_string$0 = include[6],
    symbol = include[7],
    symbol$0 = include[8],
    symbol$1 = include[9],
    symbol$2 = include[10],
    symbol$3 = include[11],
    symbol$4 = include[12],
    equal = include[13],
    compare$0 = include[14],
    min = include[15],
    max = include[16],
    ascending = include[17],
    descending = include[18],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    pp = include[23],
    hashable = include[24];
   function invariant(param){return 0;}
   var
    Base_Unit =
      [0,
       all,
       globalize,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local,
       compare_local,
       invariant];
   runtime.caml_register_global(7, Base_Unit, "Base__Unit");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordered_collection_common
//# unitInfo: Requires: Base__Error, Base__Ordered_collection_common0, Stdlib
//# shape: Base__Ordered_collection_common:[F(4),F(3),[F(3)],F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Base_Error = global_data.Base__Error,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common0,
    get_pos_len_exn = Base_Ordered_collection_common[1],
    check_pos_len_exn = Base_Ordered_collection_common[2],
    Private = Base_Ordered_collection_common[3];
   function get_pos_len(pos, len, param, total_length){
    try{var a = [0, get_pos_len_exn(pos, len, 0, total_length)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var s = exn[2];
     return [1, Base_Error[14].call(null, s)];
    }
   }
   var
    Base_Ordered_collection_common$0 =
      [0, get_pos_len_exn, check_pos_len_exn, Private, get_pos_len];
   runtime.caml_register_global
    (3, Base_Ordered_collection_common$0, "Base__Ordered_collection_common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_search
//# unitInfo: Requires: Base__Import, Base__Ordered_collection_common
//# shape: Base__Binary_search:[F(8),F(7)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common;
   function find_first_satisfying(pos, len, t, get, length, pred){
    var
     c = caml_call1(length, t),
     match = Base_Ordered_collection_common[1].call(null, pos, len, 0, c),
     len$0 = match[2],
     pos$0 = match[1],
     d = Base_Import[91].call(null, pos$0, len$0),
     hi$0 = Base_Import[93].call(null, d, 1),
     lo$1 = pos$0,
     hi = hi$0;
    for(;;){
     if(8 >= Base_Import[93].call(null, hi, lo$1)){var lo = lo$1; break;}
     var
      a = Base_Import[93].call(null, hi, lo$1),
      b = Base_Import[95].call(null, a, 2),
      mid = Base_Import[91].call(null, lo$1, b);
     if(caml_call1(pred, caml_call2(get, t, mid)))
      hi = mid;
     else{var lo$2 = Base_Import[91].call(null, mid, 1); lo$1 = lo$2;}
    }
    for(;;){
     if(hi < lo) return 0;
     if(caml_call1(pred, caml_call2(get, t, lo))) return [0, lo];
     var lo$0 = Base_Import[91].call(null, lo, 1);
     lo = lo$0;
    }
   }
   function find_last_satisfying(pos, len, t, pred, get, length){
    var
     a = caml_call1(length, t),
     match = Base_Ordered_collection_common[1].call(null, pos, len, 0, a),
     len$0 = match[2],
     pos$0 = match[1];
    if(0 === len$0) return 0;
    var
     match$0 =
       find_first_satisfying
        ([0, pos$0],
         [0, len$0],
         t,
         get,
         length,
         function(x){return 1 - caml_call1(pred, x);});
    if(match$0){
     var i = match$0[1];
     return i === pos$0 ? 0 : [0, Base_Import[93].call(null, i, 1)];
    }
    var b = Base_Import[91].call(null, pos$0, len$0);
    return [0, Base_Import[93].call(null, b, 1)];
   }
   function binary_search(pos, len, t, length, get, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (pos,
                  len,
                  t,
                  get,
                  length,
                  function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;})
               : find_last_satisfying
                 (pos,
                  len,
                  t,
                  function(x){return caml_call2(compare, x, v) < 0 ? 1 : 0;},
                  get,
                  length)
             : -253007807
               <= how
               ? find_last_satisfying
                 (pos,
                  len,
                  t,
                  function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;},
                  get,
                  length)
               : find_first_satisfying
                 (pos,
                  len,
                  t,
                  get,
                  length,
                  function(x){return 0 < caml_call2(compare, x, v) ? 1 : 0;});
    if(-1055410545 <= how){
     var
      match =
        find_last_satisfying
         (pos,
          len,
          t,
          function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;},
          get,
          length);
     if(match){
      var x = match[1];
      if(0 === caml_call2(compare, caml_call2(get, t, x), v)) return [0, x];
     }
     return 0;
    }
    var
     match$0 =
       find_first_satisfying
        (pos,
         len,
         t,
         get,
         length,
         function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;});
    if(match$0){
     var x$0 = match$0[1];
     if(0 === caml_call2(compare, caml_call2(get, t, x$0), v))
      return [0, x$0];
    }
    return 0;
   }
   function binary_search_segmented(pos, len, t, length, get, segment_of, how){
    function is_left(x){
     return 847852583 <= caml_call1(segment_of, x) ? 1 : 0;
    }
    function is_right(x){return 1 - is_left(x);}
    return 125585502 <= how
            ? find_last_satisfying(pos, len, t, is_left, get, length)
            : find_first_satisfying(pos, len, t, get, length, is_right);
   }
   var Base_Binary_search = [0, binary_search, binary_search_segmented];
   runtime.caml_register_global(2, Base_Binary_search, "Base__Binary_search");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_searchable_intf
//# shape: Base__Binary_searchable_intf:[[N],[N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    all =
      [0,
       200870407,
       [0,
        -253007807,
        [0, -1055410545, [0, -1056898635, [0, 926943384, [0, -839473056, 0]]]]]],
    all$0 = [0, 125585502, [0, -63348021, 0]],
    Which_target_by_key = [0, all],
    Which_target_by_segment = [0, all$0],
    Base_Binary_searchable_intf =
      [0, Which_target_by_key, Which_target_by_segment];
   runtime.caml_register_global
    (2, Base_Binary_searchable_intf, "Base__Binary_searchable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_searchable
//# unitInfo: Requires: Base__Binary_search, Base__Binary_searchable_intf
//# shape: Base__Binary_searchable:[F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_Binary_search = global_data.Base__Binary_search;
   function Make_gen(T){
    var get = T[1], length = T[2];
    function binary_search(pos, len, t, compare, how, v){
     return Base_Binary_search[1].call
             (null, pos, len, t, length, get, compare, how, v);
    }
    function binary_search_segmented(pos, len, t, segment_of, how){
     return Base_Binary_search[2].call
             (null, pos, len, t, length, get, segment_of, how);
    }
    return [0, , , binary_search, binary_search_segmented];
   }
   var
    Base_Binary_searchable =
      [0,
       function(T){
        var get = T[1], length = T[2], a = Make_gen([0, get, length]);
        return [0, a[3], a[4]];
       },
       function(T){
        var get = T[1], length = T[2], a = Make_gen([0, get, length]);
        return [0, a[3], a[4]];
       }];
   runtime.caml_register_global
    (1, Base_Binary_searchable, "Base__Binary_searchable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Blit_intf
//# shape: Base__Blit_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Blit_intf = [0];
   runtime.caml_register_global(0, Base_Blit_intf, "Base__Blit_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes0
//# unitInfo: Requires: Base__Import0, Base__Int_conversions, Base__Sys0, Base__Uchar0, Stdlib__BytesLabels
//# shape: Base__Bytes0:[[],N,F(5),F(5),F(2)*,F(1),F(1)*,F(3),F(3),F(3),F(4),F(3),F(3),F(1),F(4),F(2),F(2),F(2),F(3),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Sys0 = global_data.Base__Sys0,
    Base_Uchar0 = global_data.Base__Uchar0,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Primitives = [0],
    max_length = Base_Sys0[10],
    blit = Stdlib_BytesLabels[11],
    blit_string = Stdlib_BytesLabels[12],
    compare = Stdlib_BytesLabels[40],
    copy = Stdlib_BytesLabels[4],
    create = caml_create_bytes,
    set_uchar_utf_8 = Stdlib_BytesLabels[51],
    set_uchar_utf_16le = Stdlib_BytesLabels[57],
    set_uchar_utf_16be = Stdlib_BytesLabels[54];
   function set_utf_32_uchar(set_int32, bytes, idx, uchar){
    var
     a = Base_Uchar0[8].call(null, uchar),
     b = Base_Int_conversions[3].call(null, a);
    caml_call1(caml_call2(set_int32, bytes, idx), b);
    return 4;
   }
   var a = Stdlib_BytesLabels[83];
   function set_uchar_utf_32le(b, c, d){return set_utf_32_uchar(a, b, c, d);}
   var
    b = Stdlib_BytesLabels[82],
    cst_Bytes_create_local = "Bytes.create_local";
   function set_uchar_utf_32be(a, c, d){return set_utf_32_uchar(b, a, c, d);}
   function create_local(len){
    if(Base_Sys0[10] < len)
     Base_Import0[126].call(null, cst_Bytes_create_local);
    return runtime.Base_unsafe_create_local_bytes(len);
   }
   var fill = Stdlib_BytesLabels[10], make = Stdlib_BytesLabels[1];
   function map(t, f){
    var l = caml_ml_bytes_length(t);
    if(0 === l) return t;
    var
     r = caml_create_bytes(l),
     a = Base_Import0[93].call(null, l, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(t, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   function mapi(t, f){
    var l = caml_ml_bytes_length(t);
    if(0 === l) return t;
    var
     r = caml_create_bytes(l),
     a = Base_Import0[93].call(null, l, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(t, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   var
    sub = Stdlib_BytesLabels[7],
    to_string = Stdlib_BytesLabels[6],
    of_string = Stdlib_BytesLabels[5],
    Base_Bytes0 =
      [0,
       Primitives,
       max_length,
       blit,
       blit_string,
       compare,
       copy,
       create,
       set_uchar_utf_8,
       set_uchar_utf_16le,
       set_uchar_utf_16be,
       set_utf_32_uchar,
       set_uchar_utf_32le,
       set_uchar_utf_32be,
       create_local,
       fill,
       make,
       map,
       mapi,
       sub,
       to_string,
       of_string];
   runtime.caml_register_global(6, Base_Bytes0, "Base__Bytes0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Blit
//# unitInfo: Requires: Base__Blit_intf, Base__Import, Base__Ordered_collection_common
//# shape: Base__Blit:[F(1)*,F(2)*,F(2)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common;
   function Make_gen(Src, Dst){
    var unsafe_blit = Dst[3];
    function blit(src, src_pos, dst, dst_pos, len){
     var b = caml_call1(Src[1], src);
     Base_Ordered_collection_common[2].call(null, src_pos, len, b);
     var c = caml_call1(Dst[1], dst);
     Base_Ordered_collection_common[2].call(null, dst_pos, len, c);
     var a = 0 < len ? 1 : 0;
     return a ? caml_call5(unsafe_blit, src, src_pos, dst, dst_pos, len) : a;
    }
    function blito(src, b, a, dst, opt, param){
     var src_pos = b ? b[1] : 0;
     if(a)
      var src_len = a[1];
     else
      var
       c = caml_call1(Src[1], src),
       src_len = Base_Import[93].call(null, c, src_pos);
     var dst_pos = opt ? opt[1] : 0;
     return blit(src, src_pos, dst, dst_pos, src_len);
    }
    function sub(src, pos, len){
     var a = caml_call1(Src[1], src);
     Base_Ordered_collection_common[2].call(null, pos, len, a);
     var dst = caml_call2(Dst[2], len, src);
     if(0 < len) caml_call5(unsafe_blit, src, pos, dst, 0, len);
     return dst;
    }
    function subo(opt, len, src){
     var pos = opt ? opt[1] : 0;
     if(len)
      var i = len[1], i$0 = i;
     else
      var
       a = caml_call1(Src[1], src),
       i$0 = Base_Import[93].call(null, a, pos);
     return sub(src, pos, i$0);
    }
    return [0, unsafe_blit, blit, blito, sub, subo];
   }
   function Make_to_string(T, To_bytes){
    function sub(src, pos, len){
     return caml_string_of_bytes(caml_call3(To_bytes[4], src, pos, len));
    }
    function subo(pos, len, src){
     return caml_string_of_bytes(caml_call3(To_bytes[5], pos, len, src));
    }
    return [0, sub, subo];
   }
   var
    Base_Blit =
      [0,
       function(Sequence){
        function create_like(len, param){return caml_call1(Sequence[2], len);}
        var
         length = Sequence[1],
         unsafe_blit = Sequence[3],
         include =
           Make_gen([0, length], [0, length, create_like, unsafe_blit]),
         unsafe_blit$0 = include[1],
         blit = include[2],
         blito = include[3],
         sub = include[4],
         subo = include[5];
        return [0, blit, blito, unsafe_blit$0, sub, subo];
       },
       function(Src, Dst){
        var length = Dst[1];
        function create_like(len, param){return caml_call1(Dst[2], len);}
        var
         unsafe_blit = Dst[3],
         length$0 = Src[1],
         a = Make_gen([0, length$0], [0, length, create_like, unsafe_blit]);
        return [0, a[2], a[3], a[1], a[4], a[5]];
       },
       Make_to_string,
       function(b){
        var c = [0, b[2], b[1], b[3]], a = Make_gen([0, c[1]], c);
        return [0, a[2], a[3], a[1], a[4], a[5]];
       },
       function(b){
        var a = Make_gen([0, b[2]], [0, b[2], b[1], b[3]]);
        return [0, a[2], a[3], a[1], a[4], a[5]];
       }];
   runtime.caml_register_global(2, Base_Blit, "Base__Blit");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bool
//# unitInfo: Requires: Base__Bool0, Base__Comparator, Base__Import, Base__Or_error, Base__Pretty_printer, Base__Printf, Base__Sexp
//# shape: Base__Bool:[N,F(1)*,N,N,F(1),F(1),F(1)*,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,F(2)*,F(2)*,F(1)*,F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_bool_ml = "src/bool.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, 0]],
    module_name = "Base.Bool",
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Printf = global_data.Base__Printf,
    Base_Comparator = global_data.Base__Comparator,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    invalid_argf = Base_Printf[7],
    compare = Base_Import[225],
    globalize = Base_Import[281],
    hash_fold_t = Base_Import[207],
    func = Base_Import[221];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[159],
    sexp_of_t = Base_Import[135],
    t_sexp_grammar = Base_Import[181],
    hashable = [0, hash, compare, sexp_of_t],
    a =
      [0,
       [11, "Bool.of_string: expected true or false but got ", [2, 0, 0]],
       "Bool.of_string: expected true or false but got %s"];
   function of_string(s){
    return s !== "false"
            ? s !== "true" ? caml_call2(invalid_argf(a), s, 0) : 1
            : 0;
   }
   var
    to_string = Base_Import[85][30],
    include = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include[1],
    include$0 = Base_Pretty_printer[2].call(null, [0, module_name, to_string]),
    pp = include$0[1],
    b = [0, cst_src_bool_ml, 59, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function invariant(param){return 0;}
   function between(t, low, high){
    var a = Base_Import[105][2].call(null, low, t);
    return a ? Base_Import[105][2].call(null, t, high) : a;
   }
   function clamp_unchecked(t, min, max){
    return Base_Import[105][1].call(null, t, min)
            ? min
            : Base_Import[105][2].call(null, t, max) ? t : max;
   }
   function clamp_exn(t, min, max){
    if(Base_Import[105][2].call(null, min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function clamp(t, min, max){
    if(! Base_Import[105][5].call(null, min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function to_int(x){return Base_Import[86].call(null, x);}
   function symbol(a, b){
    var c = to_int(b), d = to_int(a), x = Base_Import[118].call(null, d, c);
    return x;
   }
   function symbol$0(a, b){
    var c = to_int(b), d = to_int(a), x = Base_Import[116].call(null, d, c);
    return x;
   }
   var c = [0, cst_src_bool_ml, 86, 9];
   if(1 === to_int(1) && 0 === to_int(0)){
    var
     include$1 = Base_Import[105],
     symbol$1 = include$1[1],
     symbol$2 = include$1[2],
     symbol$3 = include$1[3],
     symbol$4 = include$1[4],
     symbol$5 = include$1[5],
     symbol$6 = include$1[6],
     ascending = include$1[7],
     descending = include$1[8],
     compare$0 = include$1[9],
     compare_local = include$1[10],
     equal = include$1[11],
     equal_local = include$1[12],
     max = include$1[13],
     min = include$1[14],
     Base_Bool =
       [0,
        all,
        globalize,
        t_sexp_grammar,
        hash_fold_t,
        hash,
        t_of_sexp,
        sexp_of_t,
        of_string,
        to_string,
        symbol$6,
        symbol$2,
        symbol$4,
        symbol$5,
        symbol$1,
        symbol$3,
        equal,
        compare$0,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        pp,
        hashable,
        compare_local,
        equal_local,
        invariant,
        to_int,
        [0, symbol$0, symbol]];
    runtime.caml_register_global(17, Base_Bool, "Base__Bool");
    return;
   }
   throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
  }
  (globalThis));

//# unitInfo: Provides: Base__Either_intf
//# shape: Base__Either_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Either_intf = [0];
   runtime.caml_register_global(0, Base_Either_intf, "Base__Either_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Either
//# unitInfo: Requires: Base__Applicative, Base__Either0, Base__Either_intf, Base__List0, Base__Monad, Base__With_return
//# shape: Base__Either:[F(4),F(4),F(4),F(3),F(3),F(2)*,F(3),F(1)*,F(1)*,F(3),F(3),F(3),F(4),F(4),N,N,F(1)*,F(1)*,F(1)*,F(1)*,[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_With_return = global_data.Base__With_return,
    Base_List0 = global_data.Base__List0,
    Base_Monad = global_data.Base__Monad,
    Base_Applicative = global_data.Base__Applicative,
    Base_Either0 = global_data.Base__Either0,
    compare_local = Base_Either0[1],
    compare = Base_Either0[2],
    hash_fold_t = Base_Either0[3],
    t_of_sexp = Base_Either0[4],
    sexp_of_t = Base_Either0[5],
    t_sexp_grammar = Base_Either0[6];
   function swap(param){
    if(0 === param[0]){var x = param[1]; return [1, x];}
    var x$0 = param[1];
    return [0, x$0];
   }
   function is_first(param){return 0 === param[0] ? 1 : 0;}
   function is_second(param){return 0 === param[0] ? 0 : 1;}
   function value(param){var x = param[1]; return x;}
   function value_map(t, first, second){
    if(0 === t[0]){var x = t[1]; return caml_call1(first, x);}
    var x$0 = t[1];
    return caml_call1(second, x$0);
   }
   function map(t, first, second){
    if(0 === t[0]){var x = t[1]; return [0, caml_call1(first, x)];}
    var x$0 = t[1];
    return [1, caml_call1(second, x$0)];
   }
   function first(x){return [0, x];}
   function second(x){return [1, x];}
   function equal(eq1, eq2, t1, t2){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return caml_call2(eq1, x, y);}
    }
    else{
     var x$0 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return caml_call2(eq2, x$0, y$0);}
    }
    return 0;
   }
   function local_equal(eq1, eq2, t1, t2){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return caml_call2(eq1, x, y);}
    }
    else{
     var x$0 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return caml_call2(eq2, x$0, y$0);}
    }
    return 0;
   }
   function invariant(f, s, param){
    if(0 === param[0]){var x = param[1]; return caml_call1(f, x);}
    var y = param[1];
    return caml_call1(s, y);
   }
   function Make_focused(M){
    var
     return$ = M[1],
     other = M[2],
     focus = M[3],
     combine = M[4],
     bind = M[5],
     map =
       [0,
        -198771759,
        function(t, f){
         var
          res =
            caml_call2
             (bind,
              t,
              function(x){return caml_call1(return$, caml_call1(f, x));});
         return res;
        }],
     include = Base_Monad[6].call(null, [0, bind, map, return$]),
     symbol_bind = include[1],
     Let_syntax = include[3],
     Monad_infix = include[4],
     bind$0 = include[5],
     return$0 = include[6],
     join = include[8],
     ignore_m = include[9],
     map$0 = [0, -198771759, include[7]];
    function map2(t1, t2, f){
     return caml_call2
             (bind$0,
              t1,
              function(x){
               return caml_call2
                       (bind$0,
                        t2,
                        function(y){
                         return caml_call1(return$0, caml_call2(f, x, y));
                        });
              });
    }
    var
     App = Base_Applicative[17].call(null, [0, return$0, map2, map$0]),
     return$1 = App[1],
     map$1 = App[2],
     both = App[3],
     symbol = App[4],
     symbol$0 = App[5],
     symbol$1 = App[6],
     symbol_map = App[7],
     apply = App[8],
     map2$0 = App[9],
     map3 = App[10],
     all = App[11],
     all_unit = App[12],
     Applicative_infix = App[13];
    function combine_all(ts$1, f){
     var acc$1 = 0, param$0 = ts$1;
     for(;;){
      if(! param$0)
       return caml_call1(return$1, Base_List0[19].call(null, acc$1));
      var
       ts$0 = param$0[2],
       t$0 = param$0[1],
       match$0 = caml_call1(focus, t$0);
      if(0 !== match$0[0]) break;
      var acc$2 = [0, match$0[1], acc$1];
      acc$1 = acc$2;
      param$0 = ts$0;
     }
     var acc$3 = match$0[1], acc = acc$3, param = ts$0;
     for(;;){
      if(! param) return caml_call1(other, acc);
      var ts = param[2], t = param[1], match = caml_call1(focus, t);
      if(0 === match[0])
       param = ts;
      else{var acc$0 = caml_call2(f, acc, match[1]); acc = acc$0; param = ts;}
     }
    }
    function combine_all_unit(ts$1, f){
     var param$0 = ts$1;
     for(;;){
      if(! param$0) return caml_call1(return$1, 0);
      var
       ts$0 = param$0[2],
       t$0 = param$0[1],
       match$0 = caml_call1(focus, t$0);
      if(0 !== match$0[0]) break;
      param$0 = ts$0;
     }
     var acc$1 = match$0[1], acc = acc$1, param = ts$0;
     for(;;){
      if(! param) return caml_call1(other, acc);
      var ts = param[2], t = param[1], match = caml_call1(focus, t);
      if(0 === match[0])
       param = ts;
      else{var acc$0 = caml_call2(f, acc, match[1]); acc = acc$0; param = ts;}
     }
    }
    function to_option(t){
     var match = caml_call1(focus, t);
     return 0 === match[0] ? [0, match[1]] : 0;
    }
    function value(t, default$){
     var match = caml_call1(focus, t);
     return 0 === match[0] ? match[1] : default$;
    }
    function with_return(f){
     return Base_With_return[1].call
             (null,
              function(ret){
               return caml_call1
                       (other,
                        caml_call1(f, Base_With_return[3].call(null, ret, return$1)));
              });
    }
    return [0,
            ,
            ,
            combine,
            symbol_bind,
            Let_syntax,
            Monad_infix,
            bind$0,
            join,
            ignore_m,
            ,
            return$1,
            map$1,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2$0,
            map3,
            all,
            all_unit,
            Applicative_infix,
            combine_all,
            combine_all_unit,
            to_option,
            value,
            with_return];
   }
   function focus(t){
    if(0 === t[0]){var x = t[1]; return [0, x];}
    var y = t[1];
    return [1, y];
   }
   function combine(t1, t2, f, other){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return [0, caml_call2(f, x, y)];}
     var x$0 = t2[1];
    }
    else{
     var x$1 = t1[1];
     if(0 !== t2[0]){
      var y$0 = t2[1];
      return [1, caml_call2(other, x$1, y$0)];
     }
     var x$0 = x$1;
    }
    return [1, x$0];
   }
   function bind(t, f){
    if(0 !== t[0]) return t;
    var x = t[1];
    return caml_call1(f, x);
   }
   var First = Make_focused([0, first, second, focus, combine, bind]);
   function focus$0(t){
    if(0 === t[0]){var y = t[1]; return [1, y];}
    var x = t[1];
    return [0, x];
   }
   function combine$0(t1, t2, f, other){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return [0, caml_call2(other, x, y)];}
     var x$0 = x;
    }
    else{
     var x$1 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return [1, caml_call2(f, x$1, y$0)];}
     var x$0 = t2[1];
    }
    return [0, x$0];
   }
   function bind$0(t, f){
    if(0 === t[0]) return t;
    var x = t[1];
    return caml_call1(f, x);
   }
   var
    Second = Make_focused([0, second, first, focus$0, combine$0, bind$0]),
    Export = [0],
    Base_Either =
      [0,
       compare,
       compare_local,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       swap,
       value,
       value_map,
       value_map,
       map,
       equal,
       local_equal,
       [0,
        First[4],
        First[5],
        First[6],
        First[7],
        First[8],
        First[9],
        First[11],
        First[12],
        First[13],
        First[14],
        First[15],
        First[16],
        First[17],
        First[18],
        First[19],
        First[20],
        First[21],
        First[22],
        First[23],
        First[27],
        First[26],
        First[28],
        First[3],
        First[24],
        First[25]],
       [0,
        Second[4],
        Second[5],
        Second[6],
        Second[7],
        Second[8],
        Second[9],
        Second[11],
        Second[12],
        Second[13],
        Second[14],
        Second[15],
        Second[16],
        Second[17],
        Second[18],
        Second[19],
        Second[20],
        Second[21],
        Second[22],
        Second[23],
        Second[27],
        Second[26],
        Second[28],
        Second[3],
        Second[24],
        Second[25]],
       is_first,
       is_second,
       first,
       second,
       Export];
   runtime.caml_register_global(5, Base_Either, "Base__Either");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Option
//# unitInfo: Requires: Base__Applicative, Base__Error, Base__Import, Base__Monad, Base__Source_code_position0
//# shape: Base__Option:[N,N,F(2),N,F(1)*,F(3),F(3),F(2),F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)*,F(4),F(3),F(2),F(3),F(3),F(1)*,F(2),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(2),F(3),F(2),F(1),F(1),F(1)*,F(2)*,F(2)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Error = global_data.Base__Error,
    Base_Import = global_data.Base__Import,
    Base_Monad = global_data.Base__Monad,
    Base_Applicative = global_data.Base__Applicative,
    compare_local = Base_Import[265],
    compare = Base_Import[237],
    globalize = Base_Import[294],
    hash_fold_t = Base_Import[211],
    t_of_sexp = Base_Import[170],
    sexp_of_t = Base_Import[146],
    cst_Option_value_exn = "Option.value_exn",
    cst_Option_value_exn_None = "Option.value_exn None";
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Import[193].call(null, a_sexp_grammar);
   }
   function is_none(param){return param ? 0 : 1;}
   function is_some(param){return param ? 1 : 0;}
   function value_map(o, default$, f){
    if(! o) return default$;
    var x = o[1];
    return caml_call1(f, x);
   }
   function iter(o, f){
    if(! o) return 0;
    var a = o[1];
    return caml_call1(f, a);
   }
   function invariant(f, t){return iter(t, f);}
   function call(x, f){
    if(! f) return 0;
    var f$0 = f[1];
    return caml_call1(f$0, x);
   }
   function value(t, default$){
    if(! t) return default$;
    var x = t[1];
    return x;
   }
   function value_exn(here, error, message, t){
    if(t){var x = t[1]; return x;}
    if(here){
     var p = here[1];
     if(error)
      var
       e = error[1],
       a = Base_Source_code_position0[9],
       b = Base_Error[9],
       c = Base_Import[147],
       d = value(message, cst),
       error$0 =
         Base_Error[19].call
          (null, 0, 0, d, [0, e, p], function(d){return c(b, a, d);});
     else if(message)
      var
       m = message[1],
       error$0 =
         Base_Error[19].call(null, 0, 0, m, p, Base_Source_code_position0[9]);
     else
      var
       error$0 =
         Base_Error[19].call
          (null, 0, 0, cst_Option_value_exn, p, Base_Source_code_position0[9]);
    }
    else if(error){
     var e$0 = error[1];
     if(message)
      var m$0 = message[1], error$0 = Base_Error[22].call(null, e$0, m$0);
     else
      var error$0 = e$0;
    }
    else if(message)
     var m$1 = message[1], error$0 = Base_Error[14].call(null, m$1);
    else
     var error$0 = Base_Error[14].call(null, cst_Option_value_exn_None);
    return Base_Error[31].call(null, error$0);
   }
   function value_or_thunk(o, default$){
    if(! o) return caml_call1(default$, 0);
    var x = o[1];
    return x;
   }
   function to_array(t){if(! t) return [0]; var x = t[1]; return [0, x];}
   function to_list(t){if(! t) return 0; var x = t[1]; return [0, x, 0];}
   function for_all(t, f){
    if(! t) return 1;
    var x = t[1];
    return caml_call1(f, x);
   }
   function exists(t, f){
    if(! t) return 0;
    var x = t[1];
    return caml_call1(f, x);
   }
   function mem(t, a, equal){
    if(! t) return 0;
    var a$0 = t[1];
    return caml_call2(equal, a, a$0);
   }
   function length(t){return t ? 1 : 0;}
   function fold(t, init, f){
    if(! t) return init;
    var x = t[1];
    return caml_call2(f, init, x);
   }
   function find(t, f){
    if(! t) return 0;
    var x = t[1];
    return caml_call1(f, x) ? t : 0;
   }
   function find_map(t, f){
    if(! t) return 0;
    var a = t[1];
    return caml_call1(f, a);
   }
   function equal(f, t$0, t){
    if(t$0){
     if(t){var x = t[1], x$0 = t$0[1]; return caml_call2(f, x$0, x);}
    }
    else if(! t) return 1;
    return 0;
   }
   function equal_local(f, t$0, t){
    if(t$0){
     if(t){var x = t[1], x$0 = t$0[1]; return caml_call2(f, x$0, x);}
    }
    else if(! t) return 1;
    return 0;
   }
   function some(x){return [0, x];}
   function first_some(x, y){return x ? x : y;}
   function some_if(cond, x){return cond ? [0, x] : 0;}
   function merge(a, b, f){
    if(a){
     if(b){var b$0 = b[1], a$0 = a[1]; return [0, caml_call2(f, a$0, b$0)];}
     var x = a;
    }
    else
     var x = b;
    return x;
   }
   function filter(t, f){
    if(t){var v = t[1]; if(caml_call1(f, v)) return t;}
    return 0;
   }
   function try_with(f){
    try{var x = caml_call1(f, 0);}catch(exn){return 0;}
    return [0, x];
   }
   function try_with_join(f){
    try{var x = caml_call1(f, 0); return x;}catch(exn){return 0;}
   }
   function return$(x){return [0, x];}
   var
    map =
      [0,
       -198771759,
       function(t, f){
        if(! t) return 0;
        var a = t[1];
        return [0, caml_call1(f, a)];
       }];
   function bind(o, f){
    if(! o) return 0;
    var x = o[1];
    return caml_call1(f, x);
   }
   var
    include = Base_Monad[5].call(null, [0, bind, return$, map]),
    symbol_bind = include[1],
    Monad_infix = include[3],
    bind$0 = include[4],
    join = include[7],
    ignore_m = include[8],
    Let_syntax = include[11];
   function return$0(x){return [0, x];}
   var map$0 = [0, -198771759, include[6]];
   function map2(x, y, f){
    if(x && y){
     var y$0 = y[1], x$0 = x[1];
     return [0, caml_call2(f, x$0, y$0)];
    }
    return 0;
   }
   var
    include$0 = Base_Applicative[16].call(null, [0, return$0, map2, map$0]),
    return$1 = include$0[1],
    map$1 = include$0[2],
    both = include$0[3],
    symbol = include$0[4],
    symbol$0 = include$0[5],
    symbol$1 = include$0[6],
    symbol_map = include$0[7],
    apply = include$0[8],
    map2$0 = include$0[9],
    map3 = include$0[10],
    all = include$0[11],
    all_unit = include$0[12],
    Applicative_infix = include$0[13],
    Base_Option =
      [0,
       compare,
       compare_local,
       globalize,
       hash_fold_t,
       t_sexp_grammar,
       equal,
       equal_local,
       invariant,
       t_of_sexp,
       sexp_of_t,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply,
       map2$0,
       map3,
       Applicative_infix,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$1,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       value,
       value_exn,
       value_map,
       value_or_thunk,
       fold,
       mem,
       length,
       iter,
       exists,
       for_all,
       find,
       find_map,
       to_list,
       to_array,
       call,
       merge,
       filter,
       try_with,
       try_with_join,
       some,
       first_some,
       some_if,
       is_none,
       is_some];
   runtime.caml_register_global(8, Base_Option, "Base__Option");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_enumerate_lib
//# shape: Base__Ppx_enumerate_lib:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Enumerable = [0],
    Base_Ppx_enumerate_lib = [0, Enumerable];
   runtime.caml_register_global
    (0, Base_Ppx_enumerate_lib, "Base__Ppx_enumerate_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sequence
//# unitInfo: Requires: Base__Array0, Base__Bool, Base__Container, Base__Hash, Base__Import, Base__List1, Base__Monad, Base__Result, CamlinternalLazy, Sexplib0__Sexp_conv_error
//# shape: Base__Sequence:[F(2)*,F(2),F(3),F(3),F(3),F(3),F(3),F(1),F(1),F(2),F(3),F(3),F(4),F(2),F(2),F(2),F(3),F(2),F(2),F(1),F(1),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,N,F(1),[F(3)],F(2)*,F(2)*,F(3)*,F(5)*,F(2),F(2),F(3)*,F(3)*,F(2)*,F(2)*,F(2)*,F(3),F(3)*,N,F(3)*,F(1),F(1),F(1),F(1),F(2),F(2),F(2)*,F(1),F(2),F(2),F(1)*,F(1)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2),F(2)*,F(5)*,F(2)*,F(2),F(2),F(1)*,F(3),F(2),F(2),F(2),F(2)*,F(2)*,F(2),F(2),F(2),F(2)*,F(2)*,F(2),[F(2)*],F(2),F(2),F(2)*,F(1),F(1)*,F(1),F(4),F(5),F(4),F(1),F(1)*,F(1)*,F(1)*,F(1),F(2),F(3),F(1)*,F(1)*->F(1),N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Both$0 = "Both",
    cst_Left$0 = "Left",
    cst_Right$0 = "Right",
    cst_Sequence_nth$1 = "Sequence.nth",
    cst_both = "both",
    cst_left = "left",
    cst_right = "right",
    cst_state = "state",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    init = [0, 0, 0],
    error_source_057 = "sequence.ml.Merge_with_duplicates_element.t",
    Base_List1 = global_data.Base__List1,
    Base_Import = global_data.Base__Import,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Result = global_data.Base__Result,
    Base_Container = global_data.Base__Container,
    Base_Bool = global_data.Base__Bool,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Assert_failure = global_data.Assert_failure,
    Base_Array0 = global_data.Base__Array0,
    Base_Monad = global_data.Base__Monad,
    b = [0, "Done"],
    c = [0, cst_state],
    d = [0, "Skip"],
    e = [0, cst_state],
    f = [0, "value"],
    g = [0, "Yield"];
   function sexp_of_t(of_a_001, of_s_002, param){
    if(typeof param === "number") return b;
    if(0 === param[0]){
     var
      state_004 = param[1],
      arg_005 = caml_call1(of_s_002, state_004),
      bnds_003 = [0, [1, [0, c, [0, arg_005, 0]]], 0];
     return [1, [0, d, bnds_003]];
    }
    var
     state_009 = param[2],
     value_007 = param[1],
     arg_010 = caml_call1(of_s_002, state_009),
     bnds_006 = [0, [1, [0, e, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(of_a_001, value_007),
     bnds_006$0 = [0, [1, [0, f, [0, arg_008, 0]]], bnds_006];
    return [1, [0, g, bnds_006$0]];
   }
   var Step = [0, sexp_of_t], T = [0], h = [0, "src/sequence.ml", 304, 14];
   function globalize(a, param){
    var next = param[2], state = param[1];
    return [0, state, next];
   }
   function view(t){return t;}
   function next_step(param){
    var f = param[2], s = param[1], match = caml_call1(f, s);
    if(typeof match === "number") return 0;
    if(0 === match[0]){var s$0 = match[1]; return [0, [0, s$0, f]];}
    var s$1 = match[2], a = match[1];
    return [1, a, [0, s$1, f]];
   }
   function delayed_fold_step(s, init, f, finish){
    function loop(s, next, finish, f, acc){
     var match = caml_call1(next, s);
     if(typeof match === "number") return caml_call1(finish, acc);
     if(0 === match[0]){
      var s$0 = match[1];
      return caml_call3
              (f, acc, 0, function(a){return loop(s$0, next, finish, f, a);});
     }
     var s$1 = match[2], a = match[1];
     return caml_call3
             (f,
              acc,
              [0, a],
              function(a){return loop(s$1, next, finish, f, a);});
    }
    var next = s[2], s$0 = s[1];
    return loop(s$0, next, finish, f, init);
   }
   function unfold_step(init, f){return [0, init, f];}
   function unfold(init, f){
    function f$0(s){
     var match = caml_call1(f, s);
     if(! match) return 0;
     var match$0 = match[1], s$0 = match$0[2], a = match$0[1];
     return [1, a, s$0];
    }
    return [0, init, f$0];
   }
   function unfold_with(s, init, f){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, init, s$0],
            function(param){
             var s = param[2], seed = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){
              var s$0 = match[1];
              return [0, [0, seed, s$0]];
             }
             var
              s$1 = match[2],
              a = match[1],
              match$0 = caml_call2(f, seed, a);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var seed$0 = match$0[1];
              return [0, [0, seed$0, s$1]];
             }
             var seed$1 = match$0[2], a$0 = match$0[1];
             return [1, a$0, [0, seed$1, s$1]];
            }];
   }
   function unfold_with_and_finish
   (s, init, running_step, inner_finished, finishing_step){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, -172306698, [0, init, s$0]],
            function(state){
             var variant = state[1];
             if(301075099 <= variant){
              var
               state$0 = state[2],
               match = caml_call1(finishing_step, state$0);
              if(typeof match === "number") return 0;
              if(0 === match[0]){
               var state$1 = match[1];
               return [0, [0, 301075099, state$1]];
              }
              var state$2 = match[2], y = match[1];
              return [1, y, [0, 301075099, state$2]];
             }
             var
              match$0 = state[2],
              inner_state = match$0[2],
              state$3 = match$0[1],
              match$1 = caml_call1(next, inner_state);
             if(typeof match$1 === "number")
              return [0, [0, 301075099, caml_call1(inner_finished, state$3)]];
             if(0 === match$1[0]){
              var inner_state$0 = match$1[1];
              return [0, [0, -172306698, [0, state$3, inner_state$0]]];
             }
             var
              inner_state$1 = match$1[2],
              x = match$1[1],
              match$2 = caml_call2(running_step, state$3, x);
             if(typeof match$2 === "number") return 0;
             if(0 === match$2[0]){
              var state$4 = match$2[1];
              return [0, [0, -172306698, [0, state$4, inner_state$1]]];
             }
             var state$5 = match$2[2], y$0 = match$2[1];
             return [1, y$0, [0, -172306698, [0, state$5, inner_state$1]]];
            }];
   }
   function of_list(init){
    function f(param){
     if(! param) return 0;
     var l = param[2], x = param[1];
     return [1, x, l];
    }
    return [0, init, f];
   }
   function fold(t, init, f){
    var next = t[2], seed$2 = t[1], seed = seed$2, v = init;
    for(;;){
     var match = caml_call1(next, seed);
     if(typeof match === "number") return v;
     if(0 === match[0]){
      var seed$0 = match[1];
      seed = seed$0;
     }
     else{
      var seed$1 = match[2], a = match[1], v$0 = caml_call2(f, v, a);
      seed = seed$1;
      v = v$0;
     }
    }
   }
   function to_list_rev(t){
    var next = t[2], seed$2 = t[1], v$0 = 0, seed$1 = seed$2;
    for(;;){
     var match = caml_call1(next, seed$1);
     if(typeof match === "number") return v$0;
     if(0 === match[0]){
      var seed = match[1];
      seed$1 = seed;
     }
     else{
      var seed$0 = match[2], a = match[1], v = [0, a, v$0];
      v$0 = v;
      seed$1 = seed$0;
     }
    }
   }
   function to_list(param){
    var next = param[2], s = param[1], s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]) break;
     var s$1 = match[1];
     s$0 = s$1;
    }
    var
     s$2 = match[2],
     a = match[1],
     block = [0, a, 24029],
     dst = block,
     offset = 1,
     s$3 = s$2;
    for(;;){
     var match$0 = caml_call1(next, s$3);
     if(typeof match$0 === "number"){dst[offset + 1] = 0; return block;}
     if(0 === match$0[0]){
      var s$4 = match$0[1];
      s$3 = s$4;
     }
     else{
      var s$5 = match$0[2], a$0 = match$0[1], dst$0 = [0, a$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      s$3 = s$5;
     }
    }
   }
   function sexp_of_t$0(sexp_of_a, t){
    var a = to_list(t);
    return Base_Import[149].call(null, sexp_of_a, a);
   }
   function range(b, a, opt, start_v, stop_v){
    var
     stride = b ? b[1] : 1,
     start = a ? a[1] : 104758188,
     stop = opt ? opt[1] : -160346914,
     step =
       104758188 <= stop
        ? 0
          <= stride
          ? function
           (i){
            return stop_v < i
                    ? 0
                    : [1, i, Base_Import[91].call(null, i, stride)];
           }
          : function
           (i){
            return i < stop_v
                    ? 0
                    : [1, i, Base_Import[91].call(null, i, stride)];
           }
        : 0
          <= stride
          ? function
           (i){
            return stop_v <= i
                    ? 0
                    : [1, i, Base_Import[91].call(null, i, stride)];
           }
          : function
           (i){
            return i <= stop_v
                    ? 0
                    : [1, i, Base_Import[91].call(null, i, stride)];
           },
     init =
       104758188 <= start
        ? start_v
        : Base_Import[91].call(null, start_v, stride);
    return [0, init, step];
   }
   function of_lazy(t_lazy){
    function f(t_lazy){
     var a = caml_obj_tag(t_lazy);
     a:
     if(250 === a)
      var match = t_lazy[1];
     else{
      if(246 !== a && 244 !== a){var match = t_lazy; break a;}
      var match = CamlinternalLazy[2].call(null, t_lazy);
     }
     var next = match[2], s = match[1], match$0 = caml_call1(next, s);
     if(typeof match$0 === "number") return 0;
     if(0 === match$0[0]){
      var s$0 = match$0[1], v = [0, s$0, next];
      return [0, v];
     }
     var s$1 = match$0[2], x = match$0[1], v$0 = [0, s$1, next];
     return [1, x, v$0];
    }
    return [0, t_lazy, f];
   }
   function a(t, f){
    var next = t[2], seed = t[1];
    return [0,
            seed,
            function(seed){
             var match = caml_call1(next, seed);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s = match[1]; return [0, s];}
             var s$0 = match[2], a = match[1];
             return [1, caml_call1(f, a), s$0];
            }];
   }
   function mapi(t, f){
    var next = t[2], s = t[1];
    return [0,
            [0, 0, s],
            function(param){
             var s = param[2], i = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var
              s$1 = match[2],
              a = match[1],
              b = [0, Base_Import[91].call(null, i, 1), s$1];
             return [1, caml_call2(f, i, a), b];
            }];
   }
   function folding_map(t, init, f){
    return unfold_with
            (t,
             init,
             function(acc, x){
              var
               match = caml_call2(f, acc, x),
               x$0 = match[2],
               acc$0 = match[1];
              return [1, x$0, acc$0];
             });
   }
   function folding_mapi(t, init, f){
    return unfold_with
            (t,
             [0, 0, init],
             function(param, x){
              var
               acc = param[2],
               i = param[1],
               match = caml_call3(f, i, acc, x),
               x$0 = match[2],
               acc$0 = match[1];
              return [1, x$0, [0, Base_Import[91].call(null, i, 1), acc$0]];
             });
   }
   function filter(t, f){
    var next = t[2], seed = t[1];
    return [0,
            seed,
            function(seed){
             var match = caml_call1(next, seed);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s = match[1]; return [0, s];}
             var a = match[1], s$0 = match[2];
             if(caml_call1(f, a)) return [1, a, s$0];
             var s$1 = match[2];
             return [0, s$1];
            }];
   }
   function filteri(t, f){
    var b = Base_Import[127];
    return a
            (filter
              (mapi(t, function(i, s){return [0, i, s];}),
               function(param){
                var s = param[2], i = param[1];
                return caml_call2(f, i, s);
               }),
             b);
   }
   function length(t){
    var next = t[2], seed = t[1], i = 0, s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return i;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var s$1 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      i = i$0;
      s = s$1;
     }
    }
   }
   function to_array(t){
    var next = t[2], seed$2 = t[1], v$0 = init, seed$1 = seed$2;
    for(;;){
     var match = caml_call1(next, seed$1);
     if(typeof match === "number") break;
     if(0 === match[0]){
      var seed = match[1];
      seed$1 = seed;
     }
     else{
      var
       seed$0 = match[2],
       a$0 = match[1],
       i = v$0[2],
       l = v$0[1],
       v = [0, [0, a$0, l], Base_Import[91].call(null, i, 1)];
      v$0 = v;
      seed$1 = seed$0;
     }
    }
    var len = v$0[2], l$0 = v$0[1];
    if(! l$0) return [0];
    var
     l$1 = l$0[2],
     x = l$0[1],
     a = Base_Array0[4].call(null, len, x),
     i$2 = Base_Import[93].call(null, len, 2),
     i$0 = i$2,
     l$2 = l$1;
    for(;;){
     if(! l$2){
      if(-1 === i$0) return a;
      throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
     }
     var l$3 = l$2[2], x$0 = l$2[1];
     runtime.caml_check_bound(a, i$0)[i$0 + 1] = x$0;
     var i$1 = Base_Import[93].call(null, i$0, 1);
     i$0 = i$1;
     l$2 = l$3;
    }
   }
   function find(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      s = match[1];
     else{var a = match[1]; if(caml_call1(f, a)) return [0, a]; s = match[2];}
    }
   }
   function find_map(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var s$1 = match[2], a = match[1], some_b = caml_call1(f, a);
      if(some_b) return some_b;
      s = s$1;
     }
    }
   }
   function find_mapi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var s$1 = match[2], a = match[1], some_b = caml_call2(f, i, a);
      if(some_b) return some_b;
      var i$0 = Base_Import[91].call(null, i, 1);
      s = s$1;
      i = i$0;
     }
    }
   }
   function for_all(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 === match[0])
      s = match[1];
     else{var a = match[1]; if(! caml_call1(f, a)) return 0; s = match[2];}
    }
   }
   function for_alli(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var a = match[1];
      if(! caml_call2(f, i, a)) return 0;
      var s$1 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      s = s$1;
      i = i$0;
     }
    }
   }
   function exists(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      s = match[1];
     else{var a = match[1]; if(caml_call1(f, a)) return 1; s = match[2];}
    }
   }
   function existsi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var a = match[1];
      if(caml_call2(f, i, a)) return 1;
      var s$1 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      s = s$1;
      i = i$0;
     }
    }
   }
   function iter(t, f){
    var next = t[2], seed$2 = t[1], seed = seed$2;
    for(;;){
     var match = caml_call1(next, seed);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var seed$0 = match[1];
      seed = seed$0;
     }
     else{
      var seed$1 = match[2], a = match[1];
      caml_call1(f, a);
      seed = seed$1;
     }
    }
   }
   function is_empty(t){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 !== match[0]) return 0;
     var s$0 = match[1];
     s = s$0;
    }
   }
   function mem(t, a, equal){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      s = match[1];
     else{
      var b = match[1];
      if(caml_call2(equal, a, b)) return 1;
      s = match[2];
     }
    }
   }
   var empty = [0, 0, function(param){return 0;}];
   function bind(t, f){
    function f$0(param){
     var
      rest = param[2],
      match = param[1],
      next = match[2],
      seed = match[1],
      match$0 = caml_call1(next, seed);
     if(typeof match$0 === "number"){
      var
       next$0 = rest[2],
       seed$0 = rest[1],
       match$1 = caml_call1(next$0, seed$0);
      if(typeof match$1 === "number") return 0;
      if(0 === match$1[0]){
       var s = match$1[1];
       return [0, [0, empty, [0, s, next$0]]];
      }
      var s$0 = match$1[2], a = match$1[1];
      return [0, [0, caml_call1(f, a), [0, s$0, next$0]]];
     }
     if(0 === match$0[0]){
      var s$1 = match$0[1];
      return [0, [0, [0, s$1, next], rest]];
     }
     var s$2 = match$0[2], a$0 = match$0[1];
     return [1, a$0, [0, [0, s$2, next], rest]];
    }
    var init = [0, empty, t];
    return [0, init, f$0];
   }
   function return$(x){
    function f(param){
     if(! param) return 0;
     var x = param[1];
     return [1, x, 0];
    }
    var init = [0, x];
    return [0, init, f];
   }
   var
    map = [0, -198771759, a],
    include = Base_Monad[1].call(null, [0, bind, return$, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$0 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11],
    cst_Sequence_nth = cst_Sequence_nth$1,
    cst_Sequence_nth$0 = cst_Sequence_nth$1,
    i = [0, cst_Left$0],
    j = [0, cst_Right$0],
    k = [0, cst_Both$0],
    cst_Both = cst_Both$0,
    cst_Right = cst_Right$0,
    cst_Left = cst_Left$0,
    cst_hd_exn = "hd_exn",
    cst_Sequence_tl_exn = "Sequence.tl_exn",
    cst_Sequence_chunks_exn = "Sequence.chunks_exn",
    cst_Sequence_find_exn = "Sequence.find_exn",
    cst_Sequence_reduce_exn = "Sequence.reduce_exn",
    cst_Sequence_sub = "Sequence.sub",
    cst_Sequence_take = "Sequence.take",
    cst_Sequence_drop = "Sequence.drop";
   function nth(s, n){
    if(0 > n) return 0;
    var next = s[2], s$3 = s[1], i = n, s$0 = s$3;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], a = match[1];
      if(0 === i) return [0, a];
      var i$0 = Base_Import[93].call(null, i, 1);
      i = i$0;
      s$0 = s$2;
     }
    }
   }
   function nth_exn(s, n){
    if(0 > n) return Base_Import[126].call(null, cst_Sequence_nth$0);
    var match = nth(s, n);
    if(! match) return Base_Import[124].call(null, cst_Sequence_nth);
    var x = match[1];
    return x;
   }
   function compare_local(cmp_a, cmp_b, a_023, b_024){
    if(a_023 === b_024) return 0;
    switch(a_023[0]){
      case 0:
       var a_025 = a_023[1];
       if(0 !== b_024[0]) return -1;
       var b_026 = b_024[1];
       return caml_call2(cmp_a, a_025, b_026);
      case 1:
       var a_027 = a_023[1];
       switch(b_024[0]){
         case 1:
          var b_028 = b_024[1]; return caml_call2(cmp_b, a_027, b_028);
         case 2:
          return -1;
       }
       break;
      default:
       var a_031 = a_023[2], a_029 = a_023[1];
       switch(b_024[0]){
         case 1:
          return 1;
         case 2:
          var
           b_032 = b_024[2],
           b_030 = b_024[1],
           n = caml_call2(cmp_a, a_029, b_030);
          return 0 === n ? caml_call2(cmp_b, a_031, b_032) : n;
       }
    }
    return 1;
   }
   function compare(cmp_a, cmp_b, a_013, b_014){
    if(a_013 === b_014) return 0;
    switch(a_013[0]){
      case 0:
       var a_015 = a_013[1];
       if(0 !== b_014[0]) return -1;
       var b_016 = b_014[1];
       return caml_call2(cmp_a, a_015, b_016);
      case 1:
       var a_017 = a_013[1];
       switch(b_014[0]){
         case 1:
          var b_018 = b_014[1]; return caml_call2(cmp_b, a_017, b_018);
         case 2:
          return -1;
       }
       break;
      default:
       var a_021 = a_013[2], a_019 = a_013[1];
       switch(b_014[0]){
         case 1:
          return 1;
         case 2:
          var
           b_022 = b_014[2],
           b_020 = b_014[1],
           n = caml_call2(cmp_a, a_019, b_020);
          return 0 === n ? caml_call2(cmp_b, a_021, b_022) : n;
       }
    }
    return 1;
   }
   function equal_local(cmp_a, cmp_b, a_043, b_044){
    if(a_043 === b_044) return 1;
    switch(a_043[0]){
      case 0:
       var a_045 = a_043[1];
       if(0 !== b_044[0]) return 0;
       var b_046 = b_044[1];
       return caml_call2(cmp_a, a_045, b_046);
      case 1:
       var a_047 = a_043[1];
       switch(b_044[0]){
         case 1:
          var b_048 = b_044[1]; return caml_call2(cmp_b, a_047, b_048);
         case 2:
          return 0;
       }
       break;
      default:
       var a_051 = a_043[2], a_049 = a_043[1];
       switch(b_044[0]){
         case 1:
          return 0;
         case 2:
          var
           b_052 = b_044[2],
           b_050 = b_044[1],
           a = caml_call2(cmp_a, a_049, b_050);
          return a ? caml_call2(cmp_b, a_051, b_052) : a;
       }
    }
    return 0;
   }
   function equal(cmp_a, cmp_b, a_033, b_034){
    if(a_033 === b_034) return 1;
    switch(a_033[0]){
      case 0:
       var a_035 = a_033[1];
       if(0 !== b_034[0]) return 0;
       var b_036 = b_034[1];
       return caml_call2(cmp_a, a_035, b_036);
      case 1:
       var a_037 = a_033[1];
       switch(b_034[0]){
         case 1:
          var b_038 = b_034[1]; return caml_call2(cmp_b, a_037, b_038);
         case 2:
          return 0;
       }
       break;
      default:
       var a_041 = a_033[2], a_039 = a_033[1];
       switch(b_034[0]){
         case 1:
          return 0;
         case 2:
          var
           b_042 = b_034[2],
           b_040 = b_034[1],
           a = caml_call2(cmp_a, a_039, b_040);
          return a ? caml_call2(cmp_b, a_041, b_042) : a;
       }
    }
    return 0;
   }
   function hash_fold_t(hash_fold_a, hash_fold_b, hsv, arg){
    switch(arg[0]){
      case 0:
       var a0 = arg[1], hsv$0 = Base_Hash[3].call(null, hsv, 0);
       return caml_call2(hash_fold_a, hsv$0, a0);
      case 1:
       var a0$0 = arg[1], hsv$1 = Base_Hash[3].call(null, hsv, 1);
       return caml_call2(hash_fold_b, hsv$1, a0$0);
      default:
       var
        a1 = arg[2],
        a0$1 = arg[1],
        hsv$2 = Base_Hash[3].call(null, hsv, 2),
        hsv$3 = caml_call2(hash_fold_a, hsv$2, a0$1);
       return caml_call2(hash_fold_b, hsv$3, a1);
    }
   }
   function t_of_sexp(of_a_053, of_b_054, sexp_059){
    a:
    {
     if(0 === sexp_059[0]){
      var a = sexp_059[1];
      b:
      if(a !== cst_Both$0){
       c:
       if(a !== cst_Left$0){
        if(a !== cst_Right$0){
         if(a === cst_both) break b;
         if(a === cst_left) break c;
         if(a !== cst_right) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, error_source_057, sexp_059);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_057, sexp_059);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_057, sexp_059);
     }
     var match = sexp_059[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_057, sexp_059);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_057, sexp_059);
     var tag_060 = match$0[1];
     b:
     if(tag_060 !== cst_Both$0){
      c:
      if(tag_060 !== cst_Left$0){
       if(tag_060 !== cst_Right$0){
        if(tag_060 === cst_both) break b;
        if(tag_060 === cst_left) break c;
        if(tag_060 !== cst_right) break a;
       }
       var sexp_args_066 = match[2];
       if(sexp_args_066 && ! sexp_args_066[2]){
        var
         arg0_067 = sexp_args_066[1],
         res0_068 = caml_call1(of_b_054, arg0_067);
        return [1, res0_068];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, error_source_057, tag_060, sexp_059);
      }
      var sexp_args_061 = match[2];
      if(sexp_args_061 && ! sexp_args_061[2]){
       var
        arg0_062 = sexp_args_061[1],
        res0_063 = caml_call1(of_a_053, arg0_062);
       return [0, res0_063];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_057, tag_060, sexp_059);
     }
     var sexp_args_071 = match[2];
     if(sexp_args_071){
      var b = sexp_args_071[2];
      if(b && ! b[2]){
       var
        arg1_073 = b[1],
        arg0_072 = sexp_args_071[1],
        res0_074 = caml_call1(of_a_053, arg0_072),
        res1_075 = caml_call1(of_b_054, arg1_073);
       return [2, res0_074, res1_075];
      }
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_057, tag_060, sexp_059);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_057, sexp_059);
   }
   function sexp_of_t$1(of_a_078, of_b_079, param){
    switch(param[0]){
      case 0:
       var arg0_080 = param[1], res0_081 = caml_call1(of_a_078, arg0_080);
       return [1, [0, i, [0, res0_081, 0]]];
      case 1:
       var arg0_082 = param[1], res0_083 = caml_call1(of_b_079, arg0_082);
       return [1, [0, j, [0, res0_083, 0]]];
      default:
       var
        arg1_085 = param[2],
        arg0_084 = param[1],
        res0_086 = caml_call1(of_a_078, arg0_084),
        res1_087 = caml_call1(of_b_079, arg1_085);
       return [1, [0, k, [0, res0_086, [0, res1_087, 0]]]];
    }
   }
   function t_sexp_grammar(a_sexp_grammar, b_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Left, [0, [0, a_sexp_grammar, 0]]]],
              [0,
               [1, [0, cst_Right, [0, [0, b_sexp_grammar, 0]]]],
               [0,
                [1,
                 [0,
                  cst_Both,
                  [0, [0, a_sexp_grammar, [0, b_sexp_grammar, 0]]]]],
                0]]]]];
   }
   function merge_with_duplicates(a, param, compare){
    var next2 = param[2], s2 = param[1], next1 = a[2], s1 = a[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, [1, b], [0, 0, [0, s2$0]]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var s2$2 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof s2$2 === "number") return [1, [0, a], [0, [0, s1$1], 0]];
      if(0 !== s2$2[0]){
       var
        s2$3 = s2$2[2],
        b$0 = s2$2[1],
        comparison = caml_call2(compare, a, b$0);
       return 0 <= comparison
               ? 0
                 === comparison
                 ? [1, [2, a, b$0], [0, [0, s1$1], [0, s2$3]]]
                 : [1, [1, b$0], [0, s1, [0, s2$3]]]
               : [1, [0, a], [0, [0, s1$1], s2$2]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function merge_deduped_and_sorted(s1, s2, compare){
    return caml_call2
            (map$0,
             merge_with_duplicates(s1, s2, compare),
             function(param){var x = param[1]; return x;});
   }
   function merge_sorted(a, param, compare){
    var next2 = param[2], s2 = param[1], next1 = a[2], s1 = a[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, b, [0, 0, [0, s2$0]]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var s2$2 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof s2$2 === "number") return [1, a, [0, [0, s1$1], 0]];
      if(0 !== s2$2[0]){
       var
        s2$3 = s2$2[2],
        b$0 = s2$2[1],
        comparison = caml_call2(compare, a, b$0);
       return 0 < comparison
               ? [1, b$0, [0, s1, [0, s2$3]]]
               : [1, a, [0, [0, s1$1], s2$2]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function hd(s){
    var next = s[2], s$2 = s[1], s$0 = s$2;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]){var a = match[1]; return [0, a];}
     var s$1 = match[1];
     s$0 = s$1;
    }
   }
   function hd_exn(s){
    var match = hd(s);
    if(! match) return Base_Import[124].call(null, cst_hd_exn);
    var a = match[1];
    return a;
   }
   function tl(s){
    var next = s[2], s$2 = s[1], s$0 = s$2;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number")
      var match$0 = 0;
     else{
      if(0 === match[0]){var s$1 = match[1]; s$0 = s$1; continue;}
      var a = match[2], match$0 = [0, a];
     }
     if(! match$0) return 0;
     var s$3 = match$0[1];
     return [0, [0, s$3, next]];
    }
   }
   function tl_eagerly_exn(s){
    var match = tl(s);
    if(! match) return Base_Import[124].call(null, cst_Sequence_tl_exn);
    var s$0 = match[1];
    return s$0;
   }
   function lift_identity(next, s){
    var match = caml_call1(next, s);
    if(typeof match === "number") return 0;
    if(0 === match[0]){var s$0 = match[1]; return [0, [0, 316735838, s$0]];}
    var s$1 = match[2], a = match[1];
    return [1, a, [0, 316735838, s$1]];
   }
   function next(s){
    var next = s[2], s$3 = s[1], s$0 = s$3;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]){
      var s$2 = match[2], a = match[1];
      return [0, [0, a, [0, s$2, next]]];
     }
     var s$1 = match[1];
     s$0 = s$1;
    }
   }
   function filter_opt(s){
    var next = s[2], s$0 = s[1];
    return [0,
            s$0,
            function(s){
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, s$0];}
             var match$0 = match[1];
             if(match$0){
              var s$1 = match[2], a = match$0[1];
              return [1, a, s$1];
             }
             var s$2 = match[2];
             return [0, s$2];
            }];
   }
   function filter_map(s, f){return filter_opt(caml_call2(map$0, s, f));}
   function filter_mapi(s, f){
    return filter_map
            (mapi(s, function(i, s){return [0, i, s];}),
             function(param){
              var s = param[2], i = param[1];
              return caml_call2(f, i, s);
             });
   }
   function split_n(s, n){
    var next = s[2], s$3 = s[1], s$0 = s$3, i = n, accum = 0;
    for(;;){
     if(0 >= i) return [0, Base_List1[19].call(null, accum), [0, s$0, next]];
     var match = caml_call1(next, s$0);
     if(typeof match === "number")
      return [0, Base_List1[19].call(null, accum), empty];
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var
       s$2 = match[2],
       a = match[1],
       accum$0 = [0, a, accum],
       i$0 = Base_Import[93].call(null, i, 1);
      s$0 = s$2;
      i = i$0;
      accum = accum$0;
     }
    }
   }
   function chunks_exn(init, n){
    if(0 >= n) return Base_Import[126].call(null, cst_Sequence_chunks_exn);
    function f(t){
     var match = split_n(t, n), xs = match[1];
     if(! xs) return 0;
     var t$0 = match[2];
     return [1, xs, t$0];
    }
    return [0, init, f];
   }
   function findi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$0 = match[1];
      s = s$0;
     }
     else{
      var a = match[1];
      if(caml_call2(f, i, a)) return [0, [0, i, a]];
      var s$1 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      s = s$1;
      i = i$0;
     }
    }
   }
   function find_exn(s, f){
    var match = find(s, f);
    if(! match) return Base_Import[124].call(null, cst_Sequence_find_exn);
    var x = match[1];
    return x;
   }
   function append(s1, s2){
    var next2 = s2[2], s2$0 = s2[1], next1 = s1[2], s1$0 = s1[1];
    return [0,
            [0, 472258093, s1$0],
            function(param){
             var variant = param[1];
             if(472258093 <= variant){
              var s1 = param[2], match = caml_call1(next1, s1);
              if(typeof match === "number") return [0, [0, -630817751, s2$0]];
              if(0 === match[0]){
               var s1$0 = match[1];
               return [0, [0, 472258093, s1$0]];
              }
              var s1$1 = match[2], a = match[1];
              return [1, a, [0, 472258093, s1$1]];
             }
             var s2 = param[2], match$0 = caml_call1(next2, s2);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var s2$1 = match$0[1];
              return [0, [0, -630817751, s2$1]];
             }
             var s2$2 = match$0[2], a$0 = match$0[1];
             return [1, a$0, [0, -630817751, s2$2]];
            }];
   }
   function concat_map(s, f){return caml_call2(bind$0, s, f);}
   function concat(s){
    function f(a){return a;}
    return caml_call2(bind$0, s, f);
   }
   function concat_mapi(s, f){
    function f$0(param){
     var s = param[2], i = param[1];
     return caml_call2(f, i, s);
    }
    var s$0 = mapi(s, function(i, s){return [0, i, s];});
    return caml_call2(bind$0, s$0, f$0);
   }
   function zip(a, param){
    var next2 = param[2], s2 = param[1], next1 = a[2], s1 = a[1];
    function next(param){
     var c = param[1];
     if(typeof c !== "number"){
      if(0 !== c[0]){
       var match = param[2], s1$0 = c[2], a = c[1];
       if(typeof match !== "number"){
        if(0 === match[0]){
         var s2$0 = param[2][1];
         return [0, [0, c, caml_call1(next2, s2$0)]];
        }
        var s2$1 = match[2], b = match[1];
        return [1, [0, a, b], [0, [0, s1$0], [0, s2$1]]];
       }
      }
      if(typeof param[2] !== "number"){
       var s2 = param[2], s1 = c[1];
       return [0, [0, caml_call1(next1, s1), s2]];
      }
     }
     return 0;
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function zip_full(a, param){
    var next2 = param[2], s2 = param[1], next1 = a[2], s1 = a[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, [0, -57574468, b], [0, 0, caml_call1(next2, s2$0)]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var match$0 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof match$0 === "number")
       return [1, [0, 847852583, a], [0, caml_call1(next1, s1$1), 0]];
      if(0 !== match$0[0]){
       var s2$2 = match$0[2], b$0 = match$0[1];
       return [1, [0, 737457313, [0, a, b$0]], [0, [0, s1$1], [0, s2$2]]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function bounded_length(param, at_most){
    var next = param[2], seed = param[1], i = 0, seed$0 = seed;
    for(;;){
     if(at_most < i) return 85047514;
     var match = caml_call1(next, seed$0);
     if(typeof match === "number") return [0, 16394, i];
     if(0 === match[0]){
      var seed$1 = match[1];
      seed$0 = seed$1;
     }
     else{
      var seed$2 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      i = i$0;
      seed$0 = seed$2;
     }
    }
   }
   function length_is_bounded_by(opt, max, t){
    var min = opt ? opt[1] : -1;
    if(max){
     var max$0 = max[1], match$0 = bounded_length(t, max$0);
     if(typeof match$0 !== "number"){
      var variant = match$0[1];
      if(16394 === variant){var len = match$0[2]; if(min <= len) return 1;}
     }
     return 0;
    }
    var next = t[2], s = t[1], s$0 = s, acc = 0;
    for(;;){
     if(min <= acc) return 1;
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], acc$0 = Base_Import[91].call(null, acc, 1);
      s$0 = s$2;
      acc = acc$0;
     }
    }
   }
   function iteri(s, f){
    var
     t = mapi(s, function(i, s){return [0, i, s];}),
     next = t[2],
     seed$2 = t[1],
     seed$1 = seed$2;
    for(;;){
     var match = caml_call1(next, seed$1);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var seed = match[1];
      seed$1 = seed;
     }
     else{
      var seed$0 = match[2], a = match[1], s$0 = a[2], i = a[1];
      caml_call2(f, i, s$0);
      seed$1 = seed$0;
     }
    }
   }
   function foldi(s, init, f){
    var
     t = mapi(s, function(i, s){return [0, i, s];}),
     next = t[2],
     seed$2 = t[1],
     acc = init,
     seed$1 = seed$2;
    for(;;){
     var match = caml_call1(next, seed$1);
     if(typeof match === "number") return acc;
     if(0 === match[0]){
      var seed = match[1];
      seed$1 = seed;
     }
     else{
      var
       seed$0 = match[2],
       a = match[1],
       s$0 = a[2],
       i = a[1],
       v = caml_call3(f, i, acc, s$0);
      acc = v;
      seed$1 = seed$0;
     }
    }
   }
   function reduce(s, f){
    var match = next(s);
    if(! match) return 0;
    var match$0 = match[1], s$0 = match$0[2], a = match$0[1];
    return [0, fold(s$0, a, f)];
   }
   function reduce_exn(s, f){
    var match = reduce(s, f);
    if(! match) return Base_Import[124].call(null, cst_Sequence_reduce_exn);
    var res = match[1];
    return res;
   }
   function group(param, break$){
    var next = param[2], s = param[1];
    function f(param){
     if(! param) return 0;
     var
      match = param[1],
      s = match[2],
      acc = match[1],
      match$0 = caml_call1(next, s);
     if(typeof match$0 !== "number" && 0 === match$0[0]){
      var s$2 = match$0[1];
      return [0, [0, [0, acc, s$2]]];
     }
     if(acc){
      if(typeof match$0 === "number")
       return [1, Base_List1[19].call(null, acc), 0];
      var s$0 = match$0[2], cur = match$0[1], prev = acc[1];
      return caml_call2(break$, prev, cur)
              ? [1,
                Base_List1[19].call(null, acc),
                [0, [0, [0, cur, 0], s$0]]]
              : [0, [0, [0, [0, cur, acc], s$0]]];
     }
     if(typeof match$0 === "number") return 0;
     var s$1 = match$0[2], cur$0 = match$0[1];
     return [0, [0, [0, [0, cur$0, 0], s$1]]];
    }
    var init = [0, [0, 0, s]];
    return [0, init, f];
   }
   function find_consecutive_duplicate(param, equal){
    var next = param[2], s = param[1], last_elt = 0, s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], a = match[1];
      if(last_elt){
       var b = last_elt[1];
       if(caml_call2(equal, a, b)) return [0, [0, b, a]];
      }
      var last_elt$0 = [0, a];
      last_elt = last_elt$0;
      s$0 = s$2;
     }
    }
   }
   function remove_consecutive_duplicates(s, equal){
    return unfold_with
            (s,
             0,
             function(prev, a){
              if(prev){
               var b = prev[1];
               if(caml_call2(equal, a, b)) return [0, [0, a]];
              }
              return [1, a, [0, a]];
             });
   }
   function count(s, f){
    var next = s[2], seed$2 = s[1], acc = 0, seed$1 = seed$2;
    for(;;){
     var match = caml_call1(next, seed$1);
     if(typeof match === "number") return acc;
     if(0 === match[0]){
      var seed = match[1];
      seed$1 = seed;
     }
     else{
      var
       seed$0 = match[2],
       elt = match[1],
       a = caml_call1(f, elt),
       b = Base_Bool[31].call(null, a),
       v = Base_Import[91].call(null, acc, b);
      acc = v;
      seed$1 = seed$0;
     }
    }
   }
   function counti(t, f){
    return foldi
            (t,
             0,
             function(i, acc, elt){
              var a = caml_call2(f, i, elt), b = Base_Bool[31].call(null, a);
              return Base_Import[91].call(null, acc, b);
             });
   }
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function min_elt(t, compare){
    return Base_Container[3].call(null, fold, t, compare);
   }
   function max_elt(t, compare){
    return Base_Container[4].call(null, fold, t, compare);
   }
   function init$0(n, f){
    function f$0(i){
     if(n <= i) return 0;
     var a = Base_Import[91].call(null, i, 1);
     return [1, caml_call1(f, i), a];
    }
    return [0, 0, f$0];
   }
   function sub(s, pos, len){
    var a = pos < 0 ? 1 : 0, b = a || (len < 0 ? 1 : 0);
    if(b) Base_Import[124].call(null, cst_Sequence_sub);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1];
             if(len <= Base_Import[93].call(null, i, pos)) return 0;
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var a = match[1], s$1 = match[2];
             if(pos <= i)
              return [1, a, [0, Base_Import[91].call(null, i, 1), s$1]];
             var s$2 = match[2];
             return [0, [0, Base_Import[91].call(null, i, 1), s$2]];
            }];
   }
   function take(s, len){
    if(len < 0) Base_Import[124].call(null, cst_Sequence_take);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1];
             if(len <= i) return 0;
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var s$1 = match[2], a = match[1];
             return [1, a, [0, Base_Import[91].call(null, i, 1), s$1]];
            }];
   }
   function drop(s, len){
    if(len < 0) Base_Import[124].call(null, cst_Sequence_drop);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var a = match[1], s$1 = match[2];
             if(len <= i)
              return [1, a, [0, Base_Import[91].call(null, i, 1), s$1]];
             var s$2 = match[2];
             return [0, [0, Base_Import[91].call(null, i, 1), s$2]];
            }];
   }
   function take_while(s, f){
    var next = s[2], s$0 = s[1];
    return [0,
            s$0,
            function(s){
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, s$0];}
             var a = match[1], s$1 = match[2];
             return caml_call1(f, a) ? [1, a, s$1] : 0;
            }];
   }
   function drop_while(s, f){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, -557110719, s$0],
            function(param){
             var variant = param[1];
             if(316735838 <= variant){
              var s = param[2];
              return lift_identity(next, s);
             }
             var s$0 = param[2], match = caml_call1(next, s$0);
             if(typeof match === "number") return 0;
             if(0 === match[0]){
              var s$1 = match[1];
              return [0, [0, -557110719, s$1]];
             }
             var a = match[1], s$2 = match[2];
             if(caml_call1(f, a)) return [0, [0, -557110719, s$2]];
             var s$3 = match[2];
             return [1, a, [0, 316735838, s$3]];
            }];
   }
   function shift_right(s, x){
    var next = s[2], seed = s[1];
    return [0,
            [0, -433944719, [0, seed, x]],
            function(param){
             var variant = param[1];
             if(316735838 <= variant){
              var s = param[2];
              return lift_identity(next, s);
             }
             var match = param[2], x = match[2], seed = match[1];
             return [1, x, [0, 316735838, seed]];
            }];
   }
   function shift_right_with_list(s, l){return append(of_list(l), s);}
   var
    Infix = [0, append],
    cst_Sequence_cycle_list_exn = "Sequence.cycle_list_exn",
    cst_Bug_This_branch_should_be_ = "Bug: This branch should be unreachable";
   function intersperse(s, sep){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 815032112, s$0],
            function(param){
             var variant = param[1];
             if(815032112 === variant){
              var s = param[2], match = caml_call1(next, s);
              if(typeof match === "number") return 0;
              if(0 === match[0]){
               var s$0 = match[1];
               return [0, [0, 815032112, s$0]];
              }
              var s$1 = match[2], a = match[1];
              return [1, a, [0, 951752159, s$1]];
             }
             if(951752159 > variant){
              var match$1 = param[2], s$5 = match$1[2], a$1 = match$1[1];
              return [1, a$1, [0, 951752159, s$5]];
             }
             var s$2 = param[2], match$0 = caml_call1(next, s$2);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var s$3 = match$0[1];
              return [0, [0, 951752159, s$3]];
             }
             var s$4 = match$0[2], a$0 = match$0[1];
             return [1, sep, [0, -571577571, [0, a$0, s$4]]];
            }];
   }
   function repeat(init){
    function f(x){return [1, x, x];}
    return [0, init, f];
   }
   function cycle_list_exn(xs){
    if(Base_List1[22].call(null, xs))
     Base_Import[126].call(null, cst_Sequence_cycle_list_exn);
    var s = of_list(xs);
    function f(param){return s;}
    var s$0 = repeat(0);
    return caml_call2(bind$0, s$0, f);
   }
   function cartesian_product(sa, sb){
    function f(a){return zip(repeat(a), sb);}
    return caml_call2(bind$0, sa, f);
   }
   function singleton(x){return caml_call1(return$0, x);}
   function delayed_fold(s, init, f, finish){
    return delayed_fold_step
            (s,
             init,
             function(acc, option, k){
              if(! option) return caml_call1(k, acc);
              var a = option[1];
              return caml_call3(f, acc, a, k);
             },
             finish);
   }
   function fold_m(bind, return$, t, init, f){
    return delayed_fold_step
            (t,
             init,
             function(acc, option, k){
              if(! option)
               return caml_call2(bind, caml_call1(return$, acc), k);
              var a = option[1];
              return caml_call2(bind, caml_call2(f, acc, a), k);
             },
             return$);
   }
   function iter_m(bind, return$, t, f){
    return delayed_fold_step
            (t,
             0,
             function(param, option, k){
              if(! option) return caml_call2(bind, caml_call1(return$, 0), k);
              var a = option[1];
              return caml_call2(bind, caml_call1(f, a), k);
             },
             return$);
   }
   function fold_until(s, init, f, finish){
    var next = s[2], s$3 = s[1], s$0 = s$3, acc = init;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return caml_call1(finish, acc);
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], a = match[1], match$0 = caml_call2(f, acc, a);
      if(0 !== match$0[0]){var x = match$0[1]; return x;}
      var acc$0 = match$0[1];
      s$0 = s$2;
      acc = acc$0;
     }
    }
   }
   function fold_result(s, init, f){
    var next = s[2], s$3 = s[1], s$0 = s$3, acc = init;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return caml_call1(Base_Result[15], acc);
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], a = match[1], e = caml_call2(f, acc, a);
      if(0 !== e[0]) return e;
      var acc$0 = e[1];
      s$0 = s$2;
      acc = acc$0;
     }
    }
   }
   function force_eagerly(t){return of_list(to_list(t));}
   function memoize(param){
    var next = param[2], s = param[1];
    function memoize(s){
     return [0,
             [246,
              function(b){
               var s$0 = s;
               for(;;){
                var match = caml_call1(next, s$0);
                if(typeof match === "number") return 0;
                if(0 !== match[0]){
                 var s$2 = match[2], a = match[1];
                 return [1, a, memoize(s$2)];
                }
                var s$1 = match[1];
                s$0 = s$1;
               }
              }]];
    }
    return [0,
            memoize(s),
            function(param){
             var l = param[1], a = caml_obj_tag(l);
             if(250 === a) return l[1];
             if(246 !== a && 244 !== a) return l;
             return CamlinternalLazy[2].call(null, l);
            }];
   }
   function drop_eagerly(s, len){
    var next = s[2], s$3 = s[1], i = 0, s$0 = s$3;
    for(;;){
     if(len <= i) return [0, s$0, next];
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return empty;
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], i$0 = Base_Import[91].call(null, i, 1);
      i = i$0;
      s$0 = s$2;
     }
    }
   }
   function drop_while_option(param, f){
    var next = param[2], s = param[1], s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var s$1 = match[1];
      s$0 = s$1;
     }
     else{
      var s$2 = match[2], x = match[1];
      if(! caml_call1(f, x)) return [0, [0, x, [0, s$2, next]]];
      s$0 = s$2;
     }
    }
   }
   function skip_loop(s$0, next$0){
    var s = s$0;
    for(;;){
     var next = caml_call1(next$0, s);
     if(typeof next !== "number" && 0 === next[0]){var state = next[1]; s = state; continue;}
     return next;
    }
   }
   function compare$0(compare_a, l, param){
    var
     next_r = param[2],
     s_r$1 = param[1],
     next_l = l[2],
     s_l$1 = l[1],
     s_l = s_l$1,
     s_r = s_r$1;
    for(;;){
     var l$0 = skip_loop(s_l, next_l), match = skip_loop(s_r, next_r);
     if(typeof l$0 === "number"){
      if(typeof match === "number") return 0;
      if(0 !== match[0]) return -1;
     }
     else if(0 !== l$0[0]){
      if(typeof match === "number") return 1;
      if(0 !== match[0]){
       var c = caml_call2(compare_a, l$0[1], match[1]);
       if(0 !== c) return c;
       var s_r$0 = match[2], s_l$0 = l$0[2];
       s_l = s_l$0;
       s_r = s_r$0;
       continue;
      }
     }
     return Base_Import[124].call(null, cst_Bug_This_branch_should_be_);
    }
   }
   function compare_local$0(compare_a_local, t1, t2){
    var a = globalize(0, t2);
    return compare$0
            (function(x, y){return caml_call2(compare_a_local, x, y);},
             globalize(0, t1),
             a);
   }
   function equal$0(equal_a, t1, t2){
    return for_all
            (zip_full(t1, t2),
             function(param){
              var variant = param[1];
              if(737457313 !== variant) return 0;
              var match = param[2], a2 = match[2], a1 = match[1];
              return caml_call2(equal_a, a1, a2);
             });
   }
   function equal_local$0(equal_a_local, t1, t2){
    var a = globalize(0, t2);
    return equal$0
            (function(x, y){return caml_call2(equal_a_local, x, y);},
             globalize(0, t1),
             a);
   }
   function round_robin(list){
    function next(param){
     var done_stack = param[2], todo_stack = param[1];
     if(! todo_stack)
      return Base_List1[22].call(null, done_stack)
              ? 0
              : [0, [0, Base_List1[19].call(null, done_stack), 0]];
     var
      todo_stack$0 = todo_stack[2],
      match = todo_stack[1],
      f = match[2],
      s = match[1],
      match$0 = caml_call1(f, s);
     if(typeof match$0 === "number")
      return [0, [0, todo_stack$0, done_stack]];
     if(0 === match$0[0]){
      var s$0 = match$0[1];
      return [0, [0, [0, [0, s$0, f], todo_stack$0], done_stack]];
     }
     var s$1 = match$0[2], x = match$0[1];
     return [1, x, [0, todo_stack$0, [0, [0, s$1, f], done_stack]]];
    }
    var state = [0, list, 0];
    return [0, state, next];
   }
   function interleave(param){
    var f1 = param[2], s1 = param[1];
    function next(param){
     var s1 = param[3], done_stack = param[2], todo_stack = param[1];
     if(todo_stack){
      var
       todo_stack$0 = todo_stack[2],
       match = todo_stack[1],
       f2 = match[2],
       s2 = match[1],
       match$0 = caml_call1(f2, s2);
      if(typeof match$0 === "number")
       return [0, [0, todo_stack$0, done_stack, s1]];
      if(0 === match$0[0]){
       var s2$0 = match$0[1];
       return [0, [0, todo_stack$0, [0, [0, s2$0, f2], done_stack], s1]];
      }
      var s2$1 = match$0[2], x = match$0[1];
      return [1, x, [0, todo_stack$0, [0, [0, s2$1, f2], done_stack], s1]];
     }
     var match$1 = caml_call1(f1, s1);
     if(typeof match$1 === "number")
      return done_stack
              ? [0, [0, Base_List1[19].call(null, done_stack), 0, s1]]
              : 0;
     if(0 === match$1[0]){
      var s1$0 = match$1[1];
      return [0, [0, Base_List1[19].call(null, done_stack), 0, s1$0]];
     }
     var s1$1 = match$1[2], t = match$1[1];
     return [0, [0, Base_List1[19].call(null, [0, t, done_stack]), 0, s1$1]];
    }
    var state = [0, 0, 0, s1];
    return [0, state, next];
   }
   function interleaved_cartesian_product(s1, s2){
    return interleave
            (caml_call2
              (map$0,
               s1,
               function(x1){
                return caml_call2
                        (map$0, s2, function(x2){return [0, x1, x2];});
               }));
   }
   function of_seq(init){
    function f(seq){
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var tl = match[2], hd = match[1];
     return [1, hd, tl];
    }
    return [0, init, f];
   }
   function to_seq(param){
    var next = param[2], state = param[1];
    function loop(state$2){
     var state = state$2;
     for(;;){
      var match = caml_call1(next, state);
      if(typeof match === "number") return 0;
      if(0 !== match[0]) break;
      var state$0 = match[1];
      state = state$0;
     }
     var state$1 = match[2], hd = match[1];
     return [0, hd, function(param){return loop(state$1);}];
    }
    return function(param){return loop(state);};
   }
   function return$1(x, k){return caml_call1(k, x);}
   function bind$1(m, f, k){
    return caml_call1
            (m,
             function(a){var m = caml_call1(f, a); return caml_call1(m, k);});
   }
   var
    map$1 =
      [0,
       -198771759,
       function(m, f, k){
        return caml_call1
                (m, function(a){return caml_call1(k, caml_call1(f, a));});
       }],
    include$0 = Base_Monad[2].call(null, [0, bind$1, map$1, return$1]),
    symbol_bind$0 = include$0[1],
    symbol_map$0 = include$0[2],
    Let_syntax$0 = include$0[3],
    Monad_infix$0 = include$0[4],
    bind$2 = include$0[5],
    return$2 = include$0[6],
    map$2 = include$0[7],
    join$0 = include$0[8],
    ignore_m$0 = include$0[9],
    all$0 = include$0[10],
    all_unit$0 = include$0[11],
    l = [0, 0];
   function yield$(e, k){return [0, [1, e, k]];}
   function to_steps(t){return caml_call1(t, function(param){return l;});}
   function of_sequence(sequence){
    return delayed_fold
            (sequence,
             0,
             function(param, x, k, f){
              return [0, [1, x, function(param){return caml_call2(k, 0, f);}]];
             },
             return$2);
   }
   function run(t){
    function init(param){return to_steps(t);}
    function f(thunk){var step = caml_call1(thunk, 0)[1]; return step;}
    return [0, init, f];
   }
   var
    Base_Sequence =
      [0,
       globalize,
       sexp_of_t$0,
       equal$0,
       equal_local$0,
       compare$0,
       compare_local$0,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       counti,
       findi,
       find_mapi,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$0,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       empty,
       next,
       Step,
       unfold_step,
       unfold,
       unfold_with,
       unfold_with_and_finish,
       nth,
       nth_exn,
       folding_map,
       folding_mapi,
       mapi,
       filteri,
       filter,
       merge_deduped_and_sorted,
       merge_sorted,
       [0,
        compare,
        compare_local,
        equal,
        equal_local,
        hash_fold_t,
        t_of_sexp,
        sexp_of_t$1,
        t_sexp_grammar],
       merge_with_duplicates,
       hd,
       hd_exn,
       tl,
       tl_eagerly_exn,
       find_exn,
       for_alli,
       append,
       concat,
       concat_map,
       concat_mapi,
       interleave,
       round_robin,
       zip,
       zip_full,
       reduce_exn,
       reduce,
       group,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       range,
       init$0,
       filter_map,
       filter_mapi,
       filter_opt,
       sub,
       take,
       drop,
       drop_eagerly,
       take_while,
       drop_while,
       drop_while_option,
       split_n,
       chunks_exn,
       shift_right,
       shift_right_with_list,
       drop,
       Infix,
       cartesian_product,
       interleaved_cartesian_product,
       intersperse,
       cycle_list_exn,
       repeat,
       singleton,
       delayed_fold,
       fold_m,
       iter_m,
       to_list_rev,
       of_list,
       of_lazy,
       memoize,
       force_eagerly,
       bounded_length,
       length_is_bounded_by,
       of_seq,
       to_seq,
       [0,
        symbol_bind$0,
        symbol_map$0,
        Let_syntax$0,
        Monad_infix$0,
        bind$2,
        return$2,
        map$2,
        join$0,
        ignore_m$0,
        all$0,
        all_unit$0,
        yield$,
        of_sequence,
        run],
       [0, next_step, delayed_fold_step, T, view]];
   runtime.caml_register_global(51, Base_Sequence, "Base__Sequence");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexpable
//# unitInfo: Requires: Base__Import, Sexplib0__Sexp_grammar, Sexplib0__Sexpable
//# shape: Base__Sexpable:[F(2)*,F(2)*,F(2)*,F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    cst_Sexpable_Of_stringable_t_o =
      "Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list";
   function Of_sexpable(Sexpable, M){
    function t_of_sexp(sexp){
     var s = caml_call1(Sexpable[1], sexp);
     try{var a = caml_call1(M[2], s); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return Base_Import[157].call(null, exn, sexp);
     }
    }
    function sexp_of_t(t){
     var a = caml_call1(M[1], t);
     return caml_call1(Sexpable[2], a);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable1(Sexpable, M){
    function t_of_sexp(a_of_sexp, sexp){
     var s = caml_call2(Sexpable[1], a_of_sexp, sexp);
     try{var a = caml_call1(M[2], s); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return Base_Import[157].call(null, exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, t){
     var a = caml_call1(M[1], t);
     return caml_call2(Sexpable[2], sexp_of_a, a);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable2(Sexpable, M){
    function t_of_sexp(a_of_sexp, b_of_sexp, sexp){
     var s = caml_call3(Sexpable[1], a_of_sexp, b_of_sexp, sexp);
     try{var a = caml_call1(M[2], s); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return Base_Import[157].call(null, exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, sexp_of_b, t){
     var a = caml_call1(M[1], t);
     return caml_call3(Sexpable[2], sexp_of_a, sexp_of_b, a);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable3(Sexpable, M){
    function t_of_sexp(a_of_sexp, b_of_sexp, c_of_sexp, sexp){
     var s = caml_call4(Sexpable[1], a_of_sexp, b_of_sexp, c_of_sexp, sexp);
     try{var a = caml_call1(M[2], s); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return Base_Import[157].call(null, exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, sexp_of_b, sexp_of_c, t){
     var a = caml_call1(M[1], t);
     return caml_call4(Sexpable[2], sexp_of_a, sexp_of_b, sexp_of_c, a);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_stringable(M){
    function t_of_sexp(sexp){
     if(0 !== sexp[0])
      return Base_Import[156].call(null, cst_Sexpable_Of_stringable_t_o, sexp);
     var s = sexp[1];
     try{var a = caml_call1(M[1], s); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return Base_Import[157].call(null, exn, sexp);
     }
    }
    function sexp_of_t(t){return [0, caml_call1(M[2], t)];}
    var
     t_sexp_grammar = Sexplib0_Sexp_grammar[1].call(null, Base_Import[182]);
    return [0, t_sexp_grammar, t_of_sexp, sexp_of_t];
   }
   var
    Base_Sexpable =
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable];
   runtime.caml_register_global(3, Base_Sexpable, "Base__Sexpable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array
//# unitInfo: Requires: Base__Array0, Base__Array_permute, Base__Binary_searchable, Base__Blit, Base__Bool, Base__Container, Base__Import, Base__List, Base__Option, Base__Ordered_collection_common, Base__Random, Base__Sequence
//# shape: Base__Array:[N,N,F(2)*,F(2),F(2),F(1)*,N,N,F(1),F(1)*,F(2)*,F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(1)*,F(2),F(3),F(3),F(4),F(2),F(2),F(2),F(3),F(2),F(2),F(1),F(1)*,F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),N,F(2)*,F(2)*,F(1)*,F(3),F(1),F(1)*,F(1)*,F(4),N,N,N,N,N,F(3),F(3),F(3),F(3),F(3),N,F(2),F(2),F(2),F(3),F(2),F(2),F(1),F(1),F(1),F(3),F(3),F(4),F(3),F(3),F(3),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(4),F(2),F(2),F(2),F(2),F(1),F(2),F(1),F(3),F(3),F(1)*,F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_array_ml = "src/array.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Sequence = global_data.Base__Sequence,
    Base_Random = global_data.Base__Random,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Bool = global_data.Base__Bool,
    Base_Container = global_data.Base__Container,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Array0 = global_data.Base__Array0,
    Base_Array_permute = global_data.Base__Array_permute,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    Base_Blit = global_data.Base__Blit,
    invalid_argf = Base_Array0[1],
    max_length = Base_Array0[3],
    create = Base_Array0[4],
    create_local = Base_Array0[5],
    create_float_uninitialized = Base_Array0[6],
    append = Base_Array0[7],
    concat = Base_Array0[9],
    copy = Base_Array0[10],
    fill = Base_Array0[11],
    init = Base_Array0[12],
    make_matrix = Base_Array0[13],
    of_list = Base_Array0[14],
    sub = Base_Array0[15],
    to_list = Base_Array0[16],
    fold = Base_Array0[17],
    fold_right = Base_Array0[18],
    iter = Base_Array0[19],
    iteri = Base_Array0[20],
    map = Base_Array0[21],
    mapi = Base_Array0[22],
    stable_sort = Base_Array0[23],
    swap = Base_Array0[24],
    compare_local = Base_Import[263],
    compare = Base_Import[235],
    globalize = Base_Import[291],
    t_of_sexp = Base_Import[174],
    sexp_of_t = Base_Import[150];
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Import[195].call(null, a_sexp_grammar);
   }
   function Sorter(S){
    var get = S[1], set = S[2], length = S[3];
    function swap(arr, i, j){
     var tmp = caml_call2(get, arr, i);
     caml_call3(set, arr, i, caml_call2(get, arr, j));
     return caml_call3(set, arr, j, tmp);
    }
    function sort(arr, compare, left, right){
     var a = Base_Import[91].call(null, left, 1);
     if(right >= a){
      var pos = a;
      a:
      for(;;){
       var v = caml_call2(get, arr, pos), final_pos = pos;
       for(;;){
        var i_next = Base_Import[93].call(null, final_pos, 1);
        if
         (left <= i_next
          && 0 < caml_call2(compare, caml_call2(get, arr, i_next), v)){
         caml_call3(set, arr, final_pos, caml_call2(get, arr, i_next));
         final_pos = i_next;
         continue;
        }
        caml_call3(set, arr, final_pos, v);
        var b = pos + 1 | 0;
        if(right === pos) break a;
        pos = b;
        break;
       }
      }
     }
     return 0;
    }
    var Insertion_sort = [0, sort];
    function heapify(arr, compare, root$0, left, right){
     var root = root$0;
     for(;;){
      var
       relative_root = Base_Import[93].call(null, root, left),
       b = Base_Import[88].call(null, 2, relative_root),
       c = Base_Import[91].call(null, b, left),
       left_child = Base_Import[91].call(null, c, 1),
       d = Base_Import[88].call(null, 2, relative_root),
       e = Base_Import[91].call(null, d, left),
       right_child = Base_Import[91].call(null, e, 2);
      if(left_child <= right)
       var
        f = caml_call2(get, arr, root),
        largest =
          0 < caml_call2(compare, caml_call2(get, arr, left_child), f)
           ? left_child
           : root;
      else
       var largest = root;
      if(right_child <= right)
       var
        g = caml_call2(get, arr, largest),
        largest$0 =
          0 < caml_call2(compare, caml_call2(get, arr, right_child), g)
           ? right_child
           : largest;
      else
       var largest$0 = largest;
      var a = largest$0 !== root ? 1 : 0;
      if(! a) return a;
      swap(arr, root, largest$0);
      root = largest$0;
     }
    }
    function sort$0(arr, compare, left, right){
     var
      c = Base_Import[91].call(null, left, right),
      a = Base_Import[95].call(null, c, 2);
     if(a >= left){
      var i = a;
      for(;;){
       heapify(arr, compare, i, left, right);
       var d = i - 1 | 0;
       if(left === i) break;
       i = d;
      }
     }
     var b = Base_Import[91].call(null, left, 1);
     if(right >= b){
      var i$0 = right;
      for(;;){
       swap(arr, left, i$0);
       heapify(arr, compare, left, left, Base_Import[93].call(null, i$0, 1));
       var e = i$0 - 1 | 0;
       if(b === i$0) break;
       i$0 = e;
      }
     }
     return 0;
    }
    var Heap_sort = [0, sort$0];
    function five_element_sort(arr, compare, m1, m2, m3, m4, m5){
     function compare_and_swap(i, j){
      var
       b = caml_call2(get, arr, j),
       a = 0 < caml_call2(compare, caml_call2(get, arr, i), b) ? 1 : 0;
      return a ? swap(arr, i, j) : a;
     }
     compare_and_swap(m1, m2);
     compare_and_swap(m4, m5);
     compare_and_swap(m1, m3);
     compare_and_swap(m2, m3);
     compare_and_swap(m1, m4);
     compare_and_swap(m3, m4);
     compare_and_swap(m2, m5);
     compare_and_swap(m2, m3);
     return compare_and_swap(m4, m5);
    }
    function intro_sort(arr, max_depth$1, compare, left$1, right){
     var max_depth = max_depth$1, left = left$1;
     for(;;){
      var
       b = Base_Import[93].call(null, right, left),
       len = Base_Import[91].call(null, b, 1);
      if(32 >= len) return sort(arr, compare, left, right);
      if(0 > max_depth) return sort$0(arr, compare, left, right);
      var
       max_depth$0 = Base_Import[93].call(null, max_depth, 1),
       a = Base_Import[93].call(null, right, left),
       sixth = Base_Import[95].call(null, a, 6),
       m1 = Base_Import[91].call(null, left, sixth),
       m2 = Base_Import[91].call(null, m1, sixth),
       m3 = Base_Import[91].call(null, m2, sixth),
       m4 = Base_Import[91].call(null, m3, sixth),
       m5 = Base_Import[91].call(null, m4, sixth);
      five_element_sort(arr, compare, m1, m2, m3, m4, m5);
      var
       m2_val = caml_call2(get, arr, m2),
       m3_val = caml_call2(get, arr, m3),
       m4_val = caml_call2(get, arr, m4),
       match =
         0 === caml_call2(compare, m2_val, m3_val)
          ? [0, m2_val, m3_val, 1]
          : 0
            === caml_call2(compare, m3_val, m4_val)
            ? [0, m3_val, m4_val, 1]
            : [0, m2_val, m4_val, 0],
       middle_sorted = match[3],
       pivot2 = match[2],
       pivot1 = match[1],
       l$0 = left,
       p$1 = left,
       r$2 = right;
      for(;;){
       if(r$2 < p$1){
        intro_sort
         (arr, max_depth$0, compare, left, Base_Import[93].call(null, l$0, 1));
        if(1 - middle_sorted) intro_sort(arr, max_depth$0, compare, l$0, r$2);
        var left$0 = Base_Import[91].call(null, r$2, 1);
        max_depth = max_depth$0;
        left = left$0;
        break;
       }
       var pv = caml_call2(get, arr, p$1);
       if(0 <= caml_call2(compare, pv, pivot1))
        if(0 < caml_call2(compare, pv, pivot2)){
         var r = r$2;
         for(;;){
          if
           (p$1 < r
            && 0 < caml_call2(compare, caml_call2(get, arr, r), pivot2)){
           var r$0 = Base_Import[93].call(null, r, 1);
           r = r$0;
           continue;
          }
          swap(arr, r, p$1);
          var r$1 = Base_Import[93].call(null, r, 1);
          r$2 = r$1;
          break;
         }
        }
        else{var p = Base_Import[91].call(null, p$1, 1); p$1 = p;}
       else{
        swap(arr, p$1, l$0);
        var
         p$0 = Base_Import[91].call(null, p$1, 1),
         l = Base_Import[91].call(null, l$0, 1);
        l$0 = l;
        p$1 = p$0;
       }
      }
     }
    }
    function sort$1(arr, compare, left, right){
     return intro_sort(arr, 32, compare, left, right);
    }
    var Intro_sort = [0, sort$1, five_element_sort];
    function sort$2(pos, len, arr, compare){
     var
      a = caml_call1(length, arr),
      match = Base_Ordered_collection_common[1].call(null, pos, len, 0, a),
      len$0 = match[2],
      pos$0 = match[1],
      b = Base_Import[91].call(null, pos$0, len$0);
     return sort$1(arr, compare, pos$0, Base_Import[93].call(null, b, 1));
    }
    return [0, , , , , Insertion_sort, Heap_sort, Intro_sort, sort$2];
   }
   function get(b, a){return b[a + 1];}
   function set(c, b, a){c[b + 1] = a; return 0;}
   function length(a){return a.length - 1;}
   var
    Sort = Sorter([0, get, set, length]),
    sort = Sort[8],
    a = [0, cst_src_array_ml, 486, 14],
    b =
      [0,
       [11,
        "length mismatch in ",
        [2, 0, [11, ": ", [4, 0, 0, 0, [11, " <> ", [4, 0, 0, 0, 0]]]]]],
       "length mismatch in %s: %d <> %d"],
    cst_Array_iter2_exn = "Array.iter2_exn",
    cst_Array_map2_exn = "Array.map2_exn",
    cst_Array_fold2_exn = "Array.fold2_exn",
    cst_Array_exists2_exn = "Array.exists2_exn",
    cst_Array_for_all2_exn = "Array.for_all2_exn",
    c = [0, "Array.findi_exn: not found"],
    d = [0, "Array.find_exn: not found"];
   function of_array(t){return t;}
   function to_array(t){return t;}
   function is_empty(t){return 0 === t.length - 1 ? 1 : 0;}
   function is_sorted(t, compare){
    var i = [0, Base_Import[93].call(null, t.length - 1, 1)], result = [0, 1];
    for(;;){
     if(0 < i[1] && result[1]){
      var
       elt_i = t[i[1] + 1],
       elt_i_minus_1 = t[Base_Import[93].call(null, i[1], 1) + 1];
      if(0 < caml_call2(compare, elt_i_minus_1, elt_i)) result[1] = 0;
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function is_sorted_strictly(t, compare){
    var i = [0, Base_Import[93].call(null, t.length - 1, 1)], result = [0, 1];
    for(;;){
     if(0 < i[1] && result[1]){
      var
       elt_i = t[i[1] + 1],
       elt_i_minus_1 = t[Base_Import[93].call(null, i[1], 1) + 1];
      if(0 <= caml_call2(compare, elt_i_minus_1, elt_i)) result[1] = 0;
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function merge(a1, a2, compare){
    var l1 = a1.length - 1, l2 = a2.length - 1;
    if(0 === l1) return copy(a2);
    if(0 === l2) return copy(a1);
    var b = a1[Base_Import[93].call(null, l1, 1) + 1];
    if(0 <= caml_call2(compare, a2[1], b)) return append(a1, a2);
    var c = a2[Base_Import[93].call(null, l2, 1) + 1];
    if(0 < caml_call2(compare, a1[1], c)) return append(a2, a1);
    var
     len = Base_Import[91].call(null, l1, l2),
     merged = create(len, a1[1]),
     a1_index = [0, 0],
     a2_index = [0, 0],
     a = Base_Import[93].call(null, len, 1),
     d = 0;
    if(a >= 0){
     var i = d;
     for(;;){
      var
       use_a1 =
         l1 === a1_index[1]
          ? 0
          : l2
            === a2_index[1]
            ? 1
            : caml_call2
               (compare, a1[a1_index[1] + 1], a2[a2_index[1] + 1])
              <= 0
              ? 1
              : 0;
      if(use_a1){
       merged[i + 1] = a1[a1_index[1] + 1];
       a1_index[1] = Base_Import[91].call(null, a1_index[1], 1);
      }
      else{
       merged[i + 1] = a2[a2_index[1] + 1];
       a2_index[1] = Base_Import[91].call(null, a2_index[1], 1);
      }
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return merged;
   }
   function copy_matrix(a){return map(a, copy);}
   function folding_map(t, init, f){
    var acc = [0, init];
    return map
            (t,
             function(x){
              var
               match = caml_call2(f, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_map(t, init, f){
    var
     acc = [0, init],
     result =
       map
        (t,
         function(x){
          var
           match = caml_call2(f, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function fold_result(t, init, f){
    return Base_Container[8].call(null, fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return Base_Container[9].call(null, fold, init, f, finish, t);
   }
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function extremal_element(t, compare, keep_left_if){
    if(is_empty(t)) return 0;
    var
     result = [0, t[1]],
     a = Base_Import[93].call(null, t.length - 1, 1),
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      var x = t[i + 1], c = result[1];
      result[1] =
       runtime.caml_csel_value
        (caml_call1(keep_left_if, caml_call2(compare, x, result[1])), x, c);
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return [0, result[1]];
   }
   function min_elt(t, compare){
    return extremal_element
            (t,
             compare,
             function(compare_result){return compare_result < 0 ? 1 : 0;});
   }
   function max_elt(t, compare){
    return extremal_element
            (t,
             compare,
             function(compare_result){return 0 < compare_result ? 1 : 0;});
   }
   function foldi(t, init, f){
    var
     acc = [0, init],
     a = Base_Import[93].call(null, t.length - 1, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      acc[1] = caml_call3(f, i, acc[1], t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return acc[1];
   }
   function folding_mapi(t, init, f){
    var acc = [0, init];
    return mapi
            (t,
             function(i, x){
              var
               match = caml_call3(f, i, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_mapi(t, init, f){
    var
     acc = [0, init],
     result =
       mapi
        (t,
         function(i, x){
          var
           match = caml_call3(f, i, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function count(t, f){
    var
     result = [0, 0],
     a = Base_Import[93].call(null, t.length - 1, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = caml_call1(f, t[i + 1]), d = Base_Bool[31].call(null, c);
      result[1] = Base_Import[91].call(null, result[1], d);
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return result[1];
   }
   function counti(t, f){
    var
     result = [0, 0],
     a = Base_Import[93].call(null, t.length - 1, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = caml_call2(f, i, t[i + 1]), d = Base_Bool[31].call(null, c);
      result[1] = Base_Import[91].call(null, result[1], d);
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return result[1];
   }
   function concat_map(t, f){return concat(to_list(map(t, f)));}
   function concat_mapi(t, f){return concat(to_list(mapi(t, f)));}
   function rev_inplace(t){
    var i = [0, 0], j = [0, Base_Import[93].call(null, t.length - 1, 1)];
    for(;;){if(i[1] >= j[1]) return 0; swap(t, i[1], j[1]); i[1]++; j[1]--;}
   }
   function rev(t){var t$0 = copy(t); rev_inplace(t$0); return t$0;}
   function of_list_rev(l){
    if(! l) return [0];
    var
     l$0 = l[2],
     a$0 = l[1],
     c = Base_List[45].call(null, l$0),
     len = Base_Import[91].call(null, 1, c),
     t = create(len, a$0),
     r = [0, l$0],
     b = Base_Import[93].call(null, len, 2);
    if(b >= 0){
     var i = b;
     for(;;){
      var match = r[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
      var l$1 = match[2], a$1 = match[1];
      caml_check_bound(t, i)[i + 1] = a$1;
      r[1] = l$1;
      var d = i - 1 | 0;
      if(0 === i) break;
      i = d;
     }
    }
    return t;
   }
   function of_list_map(xs, f){
    if(! xs) return [0];
    var
     tl = xs[2],
     hd = xs[1],
     b = caml_call1(f, hd),
     c = Base_List[45].call(null, tl),
     a = create(Base_Import[91].call(null, 1, c), b),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[i + 1] = caml_call1(f, hd$0);
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     param = tl$0;
    }
   }
   function of_list_mapi(xs, f){
    if(! xs) return [0];
    var
     tl = xs[2],
     hd = xs[1],
     b = caml_call2(f, 0, hd),
     c = Base_List[45].call(null, tl),
     a = create(Base_Import[91].call(null, 1, c), b),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[i + 1] = caml_call2(f, i, hd$0);
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     param = tl$0;
    }
   }
   function of_list_rev_map(xs, f){
    var t = of_list_map(xs, f);
    rev_inplace(t);
    return t;
   }
   function of_list_rev_mapi(xs, f){
    var t = of_list_mapi(xs, f);
    rev_inplace(t);
    return t;
   }
   function filter_mapi(t, f){
    var
     r = [0, [0]],
     k = [0, 0],
     b = Base_Import[93].call(null, t.length - 1, 1),
     c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      var match = caml_call2(f, i, t[i + 1]);
      if(match){
       var a = match[1];
       if(0 === k[1]) r[1] = create(t.length - 1, a);
       r[1][k[1] + 1] = a;
       k[1]++;
      }
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return k[1] === t.length - 1 ? r[1] : 0 < k[1] ? sub(r[1], 0, k[1]) : [0];
   }
   function filter_map(t, f){
    return filter_mapi(t, function(i, a){return caml_call1(f, a);});
   }
   function filter_opt(t){return filter_map(t, function(a){return a;});}
   function check_length2_exn(name, t1, t2){
    var n1 = t1.length - 1, n2 = t2.length - 1, a = n1 !== n2 ? 1 : 0;
    return a ? caml_call4(invalid_argf(b), name, n1, n2, 0) : a;
   }
   function iter2_exn(t1, t2, f){
    check_length2_exn(cst_Array_iter2_exn, t1, t2);
    return iteri(t1, function(i, x1){return caml_call2(f, x1, t2[i + 1]);});
   }
   function map2_exn(t1, t2, f){
    check_length2_exn(cst_Array_map2_exn, t1, t2);
    return init
            (t1.length - 1,
             function(i){return caml_call2(f, t1[i + 1], t2[i + 1]);});
   }
   function fold2_exn(t1, t2, init, f){
    check_length2_exn(cst_Array_fold2_exn, t1, t2);
    return foldi
            (t1,
             init,
             function(i, ac, x){return caml_call3(f, ac, x, t2[i + 1]);});
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function filteri(t, f){
    return filter_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
   }
   function exists(t, f){
    var i = [0, Base_Import[93].call(null, t.length - 1, 1)], result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call1(f, t[i[1] + 1])){result[1] = 1; continue;}
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function existsi(t, f){
    var i = [0, Base_Import[93].call(null, t.length - 1, 1)], result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call2(f, i[1], t[i[1] + 1])){result[1] = 1; continue;}
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function mem(t, a, equal){return exists(t, caml_call1(equal, a));}
   function for_all(t, f){
    var i = [0, Base_Import[93].call(null, t.length - 1, 1)], result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call1(f, t[i[1] + 1])){i[1]--; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_alli(t, f){
    var
     length = t.length - 1,
     i = [0, Base_Import[93].call(null, length, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call2(f, i[1], t[i[1] + 1])){i[1]--; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function exists2_exn(t1, t2, f){
    check_length2_exn(cst_Array_exists2_exn, t1, t2);
    var
     i = [0, Base_Import[93].call(null, t1.length - 1, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call2(f, t1[i[1] + 1], t2[i[1] + 1])){result[1] = 1; continue;}
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function for_all2_local_exn(t1, t2, f){
    check_length2_exn(cst_Array_for_all2_exn, t1, t2);
    var
     i = [0, Base_Import[93].call(null, t1.length - 1, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call2(f, t1[i[1] + 1], t2[i[1] + 1])){i[1]--; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_all2_exn(t1, t2, f){return for_all2_local_exn(t1, t2, f);}
   function equal_local(equal, t1, t2){
    var a = t1.length - 1 === t2.length - 1 ? 1 : 0;
    return a ? for_all2_local_exn(t1, t2, equal) : a;
   }
   function equal(equal, t1, t2){return equal_local(equal, t1, t2);}
   function map_inplace(t, f){
    var a = Base_Import[93].call(null, t.length - 1, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      t[i + 1] = caml_call1(f, t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function findi_internal(t, f, if_found, if_not_found){
    var length = t.length - 1;
    if(0 === length) return caml_call1(if_not_found, 0);
    var i = [0, 0], found = [0, 0], value_found = [0, t[1]];
    for(;;){
     if(! found[1] && i[1] < length){
      var value = t[i[1] + 1];
      if(caml_call2(f, i[1], value)){
       value_found[1] = value;
       found[1] = 1;
       continue;
      }
      i[1]++;
      continue;
     }
     return found[1]
             ? caml_call2(if_found, i[1], value_found[1])
             : caml_call1(if_not_found, 0);
    }
   }
   function findi(t, f){
    return findi_internal
            (t,
             f,
             function(i, value){return [0, [0, i, value]];},
             function(param){return 0;});
   }
   function findi_exn(t, f){
    return findi_internal
            (t,
             f,
             function(i, value){return [0, i, value];},
             function(param){
              throw caml_maybe_attach_backtrace([0, Base_Import[297], c], 1);
             });
   }
   function find_exn(t, f){
    return findi_internal
            (t,
             function(i, x){return caml_call1(f, x);},
             function(param, value){return value;},
             function(param){
              throw caml_maybe_attach_backtrace([0, Base_Import[297], d], 1);
             });
   }
   function find(t, f){
    var a = findi(t, function(i, x){return caml_call1(f, x);});
    return caml_call2
            (Base_Option[24], a, function(param){var x = param[2]; return x;});
   }
   function find_map(t, f){
    var length = t.length - 1;
    if(0 === length) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(Base_Option[52].call(null, value_found[1]) && i[1] < length){
      var value = t[i[1] + 1];
      value_found[1] = caml_call1(f, value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   var
    not_found = [0, Base_Import[297], [0, "Array.find_map_exn: not found"]];
   function find_map_exn(t, f){
    var match = find_map(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var x = match[1];
    return x;
   }
   function find_mapi(t, f){
    var length = t.length - 1;
    if(0 === length) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(Base_Option[52].call(null, value_found[1]) && i[1] < length){
      var value = t[i[1] + 1];
      value_found[1] = caml_call2(f, i[1], value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   var
    not_found$0 = [0, Base_Import[297], [0, "Array.find_mapi_exn: not found"]],
    cst_Array_reduce_exn = "Array.reduce_exn";
   function find_mapi_exn(t, f){
    var match = find_mapi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$0, 1);
    var x = match[1];
    return x;
   }
   function find_consecutive_duplicate(t, equal){
    var n = t.length - 1;
    if(1 >= n) return 0;
    var result = [0, 0], i = [0, 1], prev = [0, t[1]];
    for(;;){
     if(i[1] >= n) return result[1];
     var cur = t[i[1] + 1];
     if(caml_call2(equal, cur, prev[1])){
      result[1] = [0, [0, prev[1], cur]];
      i[1] = n;
     }
     else{prev[1] = cur; i[1]++;}
    }
   }
   function reduce(t, f){
    if(0 === t.length - 1) return 0;
    var r = [0, t[1]], a = Base_Import[93].call(null, t.length - 1, 1), b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      r[1] = caml_call2(f, r[1], t[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return [0, r[1]];
   }
   function reduce_exn(t, f){
    var match = reduce(t, f);
    if(! match) return Base_Import[126].call(null, cst_Array_reduce_exn);
    var v = match[1];
    return v;
   }
   var
    permute = Base_Array_permute[25],
    cst_Array_random_element_exn_e = "Array.random_element_exn: empty array",
    cst_Array_zip_exn = "Array.zip_exn",
    cst_Array_transpose_exn = "Array.transpose_exn";
   function random_element_exn(opt, t){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    if(is_empty(t))
     return Base_Import[124].call(null, cst_Array_random_element_exn_e);
    var a = caml_call2(Base_Random[19][7], random_state, t.length - 1);
    return caml_check_bound(t, a)[a + 1];
   }
   function random_element(opt, t){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    try{var a = [0, random_element_exn([0, random_state], t)]; return a;}
    catch(exn){return 0;}
   }
   function zip(t1, t2){
    return t1.length - 1 !== t2.length - 1
            ? 0
            : [0, map2_exn(t1, t2, function(x1, x2){return [0, x1, x2];})];
   }
   function zip_exn(t1, t2){
    return t1.length - 1 !== t2.length - 1
            ? Base_Import[124].call(null, cst_Array_zip_exn)
            : map2_exn(t1, t2, function(x1, x2){return [0, x1, x2];});
   }
   function unzip(t){
    var n = t.length - 1;
    if(0 === n) return [0, [0], [0]];
    var
     match = caml_check_bound(t, 0)[1],
     y = match[2],
     x = match[1],
     res1 = create(n, x),
     res2 = create(n, y),
     a = Base_Import[93].call(null, n, 1),
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      var
       match$0 = caml_check_bound(t, i)[i + 1],
       y$0 = match$0[2],
       x$0 = match$0[1];
      caml_check_bound(res1, i)[i + 1] = x$0;
      caml_check_bound(res2, i)[i + 1] = y$0;
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return [0, res1, res2];
   }
   function sorted_copy(t, compare){
    var t1 = copy(t);
    sort(0, 0, t1, compare);
    return t1;
   }
   function partition_mapi(t, f){
    var
     both = mapi(t, f),
     firsts =
       filter_map
        (both,
         function(param){
          if(0 !== param[0]) return 0;
          var x = param[1];
          return [0, x];
         }),
     seconds =
       filter_map
        (both,
         function(param){
          if(0 === param[0]) return 0;
          var x = param[1];
          return [0, x];
         });
    return [0, firsts, seconds];
   }
   function partitioni_tf(t, f){
    return partition_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : [1, x];});
   }
   function partition_map(t, f){
    return partition_mapi(t, function(param, x){return caml_call1(f, x);});
   }
   function partition_tf(t, f){
    return partitioni_tf(t, function(param, x){return caml_call1(f, x);});
   }
   function last(t){
    var a = Base_Import[93].call(null, t.length - 1, 1);
    return caml_check_bound(t, a)[a + 1];
   }
   function to_sequence_mutable(t){
    return Base_Sequence[44].call
            (null,
             0,
             function(i){
              if(t.length - 1 <= i) return 0;
              var a = Base_Import[91].call(null, i, 1);
              return [1, caml_check_bound(t, i)[i + 1], a];
             });
   }
   function to_sequence(t){return to_sequence_mutable(copy(t));}
   function cartesian_product(t1, t2){
    if(! is_empty(t1) && ! is_empty(t2)){
     var
      n1 = t1.length - 1,
      n2 = t2.length - 1,
      d = caml_check_bound(t2, 0)[1],
      e = [0, caml_check_bound(t1, 0)[1], d],
      t = create(Base_Import[88].call(null, n1, n2), e),
      r = [0, 0],
      a = Base_Import[93].call(null, n1, 1),
      f = 0;
     if(a >= 0){
      var i1 = f;
      for(;;){
       var b = Base_Import[93].call(null, n2, 1), g = 0;
       if(b >= 0){
        var i2 = g;
        for(;;){
         var
          i = caml_check_bound(t2, i2)[i2 + 1],
          j = [0, caml_check_bound(t1, i1)[i1 + 1], i],
          c = r[1];
         caml_check_bound(t, c)[c + 1] = j;
         r[1]++;
         var k = i2 + 1 | 0;
         if(b === i2) break;
         i2 = k;
        }
       }
       var h = i1 + 1 | 0;
       if(a === i1) break;
       i1 = h;
      }
     }
     return t;
    }
    return [0];
   }
   function transpose(tt){
    if(0 === tt.length - 1) return [0, [0]];
    var width = tt.length - 1, depth = caml_check_bound(tt, 0)[1].length - 1;
    return exists(tt, function(t){return t.length - 1 !== depth ? 1 : 0;})
            ? 0
            : [0,
              init
               (depth,
                function(d){
                 return init
                         (width,
                          function(w){
                           return caml_check_bound(caml_check_bound(tt, w)[w + 1], d)
                                   [d + 1];
                          });
                })];
   }
   function transpose_exn(tt){
    var match = transpose(tt);
    if(! match) return Base_Import[126].call(null, cst_Array_transpose_exn);
    var tt$0 = match[1];
    return tt$0;
   }
   function get$0(b, a){return caml_check_bound(b, a)[a + 1];}
   function length$0(a){return a.length - 1;}
   var
    include = Base_Binary_searchable[2].call(null, [0, get$0, length$0]),
    binary_search = include[1],
    binary_search_segmented = include[2],
    e = [0, cst_src_array_ml, 917, 6];
   function length$1(a){return a.length - 1;}
   function create_like(len, t){
    if(0 === len) return [0];
    if(0 < t.length - 1) return create(len, caml_check_bound(t, 0)[1]);
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   }
   var
    unsafe_blit = runtime.caml_array_blit,
    include$0 =
      Base_Blit[4].call(null, [0, create_like, length$1, unsafe_blit]),
    blit = include$0[1],
    blito = include$0[2],
    unsafe_blit$0 = include$0[3],
    sub$0 = include$0[4],
    subo = include$0[5];
   function invariant(invariant_a, t){return iter(t, invariant_a);}
   var
    Base_Array =
      [0,
       compare,
       compare_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       binary_search,
       binary_search_segmented,
       of_list,
       of_array,
       append,
       map,
       filter,
       filter_map,
       concat_map,
       partition_tf,
       partition_map,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       invariant,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       make_matrix,
       copy_matrix,
       concat,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit$0,
       sub$0,
       subo,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi_exn,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal,
       equal_local,
       to_sequence,
       to_sequence_mutable,
       [0,
        [0, Sort[5], Sort[6], Sort[7]],
        function(a){return [0, Sorter(a)[8]];}]];
   runtime.caml_register_global(29, Base_Array, "Base__Array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Floatable
//# shape: Base__Floatable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Floatable = [0];
   runtime.caml_register_global(0, Base_Floatable, "Base__Floatable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Float0
//# unitInfo: Requires: Base__Import, Base__Import0, Base__Option, Base__Printf, Ocaml_intrinsics_kernel__Float, Stdlib__Float, Stdlib__Int64
//# shape: Base__Float0:[F(1)*,F(1)*,F(2)*,F(1)*,F(1),F(1),N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(2)*,F(2),F(1)*,F(2)*,F(1)*,F(1)*,F(1),F(1)*,F(2)*,F(1)*,F(1)*,F(1),[F(2),F(2)],F(3),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_float0_ml = "src/float0.ml",
    caml_int64_bits_of_float = runtime.caml_int64_bits_of_float,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Assert_failure = global_data.Assert_failure,
    Base_Option = global_data.Base__Option,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Float = global_data.Stdlib__Float;
   function ceil(a){return Math.ceil(a);}
   function floor(a){return Math.floor(a);}
   function mod_float(b, a){return b % a;}
   var
    modf = runtime.caml_modf_float,
    float_of_string = runtime.caml_float_of_string,
    float_of_string_opt = Base_Import[85][36],
    nan = Base_Import[85][24],
    infinity = Base_Import[85][22],
    neg_infinity = Base_Import[85][23],
    max_finite_value = Base_Import[85][25],
    epsilon_float = Base_Import[85][27],
    classify_float = runtime.caml_classify_float;
   function abs_float(a){return Math.abs(a);}
   var
    is_integer = Stdlib_Float[18],
    a =
      [0,
       [8,
        [0, 0, 0],
        0,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [8,
            [0, 0, 0],
            0,
            0,
            [11, " in float0.ml: modulus should be positive", 0]]]]]],
       "%f %% %f in float0.ml: modulus should be positive"];
   function symbol(b, a){return Math.pow(b, a);}
   function symbol$0(a$0, b){
    if(b < 0.) caml_call3(Base_Printf[7].call(null, a), a$0, b, 0);
    var m = a$0 % b;
    return m < 0. ? Base_Import[92].call(null, m, b) : m;
   }
   var
    frexp = runtime.caml_frexp_float,
    ldexp = runtime.caml_ldexp_float,
    b = [0, caml_int64_create_lo_mi_hi(0, 0, 0)],
    c = caml_int64_create_lo_mi_hi(0, 0, 0),
    d = caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    e = caml_int64_create_lo_mi_hi(1, 0, 0),
    f = [0, cst_src_float0_ml, 190, 4],
    g = [0, cst_src_float0_ml, 186, 4];
   function is_nan(x){return x !== x ? 1 : 0;}
   function to_int64_preserve_order(t){
    return t !== t
            ? 0
            : t
              === 0.
              ? b
              : 0.
                < t
                ? [0, caml_int64_bits_of_float(t)]
                : [0,
                  caml_int64_neg
                   (caml_int64_bits_of_float(Base_Import[114].call(null, t)))];
   }
   function to_int64_preserve_order_exn(x){
    var a = to_int64_preserve_order(x);
    return Base_Option[31].call(null, 0, 0, 0, a);
   }
   function of_int64_preserve_order(x){
    return runtime.caml_greaterequal(x, c)
            ? caml_int64_float_of_bits(x)
            : Base_Import
               [114].call
              (null, caml_int64_float_of_bits(caml_int64_neg(x)));
   }
   function one_ulp(dir, t){
    var match = to_int64_preserve_order(t);
    if(! match) return Base_Import[85][24];
    var x = match[1], a = 759637122 <= dir ? d : e;
    return of_int64_preserve_order(runtime.caml_int64_add(x, a));
   }
   function upper_bound_for_int(num_bits){
    var exp = Base_Import[93].call(null, num_bits, 1);
    return one_ulp(759637122, Math.pow(2., exp));
   }
   function is_x_minus_one_exact(x){
    return 1
           -
            runtime.caml_equal
             (caml_int64_bits_of_float(x),
              caml_int64_bits_of_float(Base_Import[94].call(null, x, 1.)));
   }
   function lower_bound_for_int(num_bits){
    var
     exp = Base_Import[93].call(null, num_bits, 1),
     min_int_as_float = Base_Import[114].call(null, Math.pow(2., exp));
    if(53 <= Base_Import[93].call(null, num_bits, 1)){
     if(is_x_minus_one_exact(min_int_as_float))
      throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
     return min_int_as_float;
    }
    if(is_x_minus_one_exact(min_int_as_float))
     return one_ulp(19067, Base_Import[94].call(null, min_int_as_float, 1.));
    throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
   }
   function min(a, b){return runtime.caml_sse2_float64_min_bytecode(a, b);}
   function max(a, b){return runtime.caml_sse2_float64_max_bytecode(a, b);}
   var Intrinsics_with_weird_nan_beha = [0, min, max];
   function clamp_unchecked
   (to_clamp_maybe_nan, min_which_is_not_nan, max_which_is_not_nan){
    var
     t_maybe_nan =
       runtime.caml_sse2_float64_max_bytecode
        (min_which_is_not_nan, to_clamp_maybe_nan);
    return runtime.caml_sse2_float64_min_bytecode
            (max_which_is_not_nan, t_maybe_nan);
   }
   var x = 0.;
   function box(f){return Base_Import[92].call(null, f, x);}
   var
    include = Base_Import[108],
    ascending = include[1],
    descending = include[2],
    compare_local = include[3],
    equal_local = include[4],
    max$0 = include[5],
    min$0 = include[6],
    Base_Float0 =
      [0,
       ceil,
       floor,
       mod_float,
       modf,
       float_of_string,
       float_of_string_opt,
       nan,
       infinity,
       neg_infinity,
       max_finite_value,
       epsilon_float,
       classify_float,
       abs_float,
       is_integer,
       symbol,
       symbol$0,
       frexp,
       ldexp,
       is_nan,
       to_int64_preserve_order,
       to_int64_preserve_order_exn,
       of_int64_preserve_order,
       one_ulp,
       upper_bound_for_int,
       is_x_minus_one_exact,
       lower_bound_for_int,
       Intrinsics_with_weird_nan_beha,
       clamp_unchecked,
       box,
       ascending,
       descending,
       compare_local,
       equal_local,
       max$0,
       min$0];
   runtime.caml_register_global(21, Base_Float0, "Base__Float0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Intable
//# shape: Base__Intable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Intable = [0];
   runtime.caml_register_global(0, Base_Intable, "Base__Intable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_intf
//# shape: Base__Int_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Int_intf = [0];
   runtime.caml_register_global(0, Base_Int_intf, "Base__Int_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Pow_overflow_bounds
//# unitInfo: Requires: Base__Array0, Base__Import, Base__Int_conversions
//# shape: Base__Pow_overflow_bounds:[N,N,N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_dup = runtime.caml_obj_dup,
    global_data = runtime.caml_get_global_data(),
    overflow_bound_max_int63_on_in =
      caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
    overflow_bound_max_int64_value =
      caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Base_Import = global_data.Base__Import,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Assert_failure = global_data.Assert_failure,
    Base_Array0 = global_data.Base__Array0,
    int32_positive_overflow_bounds =
      caml_obj_dup
       ([0,
         2147483647,
         2147483647,
         46340,
         1290,
         215,
         73,
         35,
         21,
         14,
         10,
         8,
         7,
         5,
         5,
         4,
         4,
         3,
         3,
         3,
         3,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1]),
    overflow_bound_max_int_value = Base_Import[120].call(null, -1, 1),
    switcher = Base_Int_conversions[30] - 31 | 0,
    d = [0, "src/pow_overflow_bounds.ml", 216, 9],
    e =
      [0,
       1073741823,
       1073741823,
       32767,
       1023,
       181,
       63,
       31,
       19,
       13,
       10,
       7,
       6,
       5,
       4,
       4,
       3,
       3,
       3,
       3,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1],
    a =
      [0,
       caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
       caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
       caml_int64_create_lo_mi_hi(16777215, 127, 0),
       caml_int64_create_lo_mi_hi(1664510, 0, 0),
       caml_int64_create_lo_mi_hi(46340, 0, 0),
       caml_int64_create_lo_mi_hi(5404, 0, 0),
       caml_int64_create_lo_mi_hi(1290, 0, 0),
       caml_int64_create_lo_mi_hi(463, 0, 0),
       caml_int64_create_lo_mi_hi(215, 0, 0),
       caml_int64_create_lo_mi_hi(118, 0, 0),
       caml_int64_create_lo_mi_hi(73, 0, 0),
       caml_int64_create_lo_mi_hi(49, 0, 0),
       caml_int64_create_lo_mi_hi(35, 0, 0),
       caml_int64_create_lo_mi_hi(27, 0, 0),
       caml_int64_create_lo_mi_hi(21, 0, 0),
       caml_int64_create_lo_mi_hi(17, 0, 0),
       caml_int64_create_lo_mi_hi(14, 0, 0),
       caml_int64_create_lo_mi_hi(12, 0, 0),
       caml_int64_create_lo_mi_hi(10, 0, 0),
       caml_int64_create_lo_mi_hi(9, 0, 0),
       caml_int64_create_lo_mi_hi(8, 0, 0),
       caml_int64_create_lo_mi_hi(7, 0, 0),
       caml_int64_create_lo_mi_hi(7, 0, 0),
       caml_int64_create_lo_mi_hi(6, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(1, 0, 0),
       caml_int64_create_lo_mi_hi(1, 0, 0)],
    b =
      [0,
       caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
       caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
       caml_int64_create_lo_mi_hi(324403, 181, 0),
       caml_int64_create_lo_mi_hi(2097151, 0, 0),
       caml_int64_create_lo_mi_hi(55108, 0, 0),
       caml_int64_create_lo_mi_hi(6208, 0, 0),
       caml_int64_create_lo_mi_hi(1448, 0, 0),
       caml_int64_create_lo_mi_hi(511, 0, 0),
       caml_int64_create_lo_mi_hi(234, 0, 0),
       caml_int64_create_lo_mi_hi(127, 0, 0),
       caml_int64_create_lo_mi_hi(78, 0, 0),
       caml_int64_create_lo_mi_hi(52, 0, 0),
       caml_int64_create_lo_mi_hi(38, 0, 0),
       caml_int64_create_lo_mi_hi(28, 0, 0),
       caml_int64_create_lo_mi_hi(22, 0, 0),
       caml_int64_create_lo_mi_hi(18, 0, 0),
       caml_int64_create_lo_mi_hi(15, 0, 0),
       caml_int64_create_lo_mi_hi(13, 0, 0),
       caml_int64_create_lo_mi_hi(11, 0, 0),
       caml_int64_create_lo_mi_hi(9, 0, 0),
       caml_int64_create_lo_mi_hi(8, 0, 0),
       caml_int64_create_lo_mi_hi(7, 0, 0),
       caml_int64_create_lo_mi_hi(7, 0, 0),
       caml_int64_create_lo_mi_hi(6, 0, 0),
       caml_int64_create_lo_mi_hi(6, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(5, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(4, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(3, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(2, 0, 0),
       caml_int64_create_lo_mi_hi(1, 0, 0)],
    c =
      [0,
       caml_int64_create_lo_mi_hi(1, 0, 32768),
       caml_int64_create_lo_mi_hi(1, 0, 32768),
       caml_int64_create_lo_mi_hi(16452813, 16777034, 65535),
       caml_int64_create_lo_mi_hi(14680065, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16722108, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16771008, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16775768, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16776705, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16776982, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777089, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777138, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777164, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777178, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777188, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777194, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777198, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777201, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777203, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777205, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777207, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777208, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777209, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777209, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777210, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777210, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       caml_int64_create_lo_mi_hi(16777215, 16777215, 65535)],
    overflow_bound_max_int32_value = 2147483647;
   if(1 < switcher >>> 0){
    if(32 !== switcher)
     throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    var
     int_positive_overflow_bounds =
       [0,
        -1,
        -1,
        2147483647,
        1664510,
        46340,
        5404,
        1290,
        463,
        215,
        118,
        73,
        49,
        35,
        27,
        21,
        17,
        14,
        12,
        10,
        9,
        8,
        7,
        7,
        6,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1];
   }
   else
    var
     int_positive_overflow_bounds =
       switcher
        ? Base_Array0
           [21].call
          (null, int32_positive_overflow_bounds, function(a){return a;})
        : caml_obj_dup(e);
   var
    int63_on_int64_positive_overfl = caml_obj_dup(a),
    int64_positive_overflow_bounds = caml_obj_dup(b),
    int64_negative_overflow_bounds = caml_obj_dup(c),
    Base_Pow_overflow_bounds =
      [0,
       overflow_bound_max_int32_value,
       int32_positive_overflow_bounds,
       overflow_bound_max_int_value,
       int_positive_overflow_bounds,
       overflow_bound_max_int63_on_in,
       int63_on_int64_positive_overfl,
       overflow_bound_max_int64_value,
       int64_positive_overflow_bounds,
       int64_negative_overflow_bounds];
   runtime.caml_register_global
    (16, Base_Pow_overflow_bounds, "Base__Pow_overflow_bounds");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_math
//# unitInfo: Requires: Base__Import, Base__Pow_overflow_bounds, Base__Printf, Stdlib__Int64
//# shape: Base__Int_math:[F(1),[F(2),F(2),F(2)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_exponent_can_not_be_negati = "exponent can not be negative",
    cst_integer_overflow_in_pow = "integer overflow in pow",
    caml_check_bound = runtime.caml_check_bound,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Pow_overflow_bounds = global_data.Base__Pow_overflow_bounds,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    invalid_argf = Base_Printf[7],
    a =
      [0,
       [11, cst_exponent_can_not_be_negati, 0],
       cst_exponent_can_not_be_negati],
    b = [0, [11, cst_integer_overflow_in_pow, 0], cst_integer_overflow_in_pow];
   function negative_exponent(param){
    return caml_call1(Base_Printf[7].call(null, a), 0);
   }
   function overflow(param){
    return caml_call1(Base_Printf[7].call(null, b), 0);
   }
   function int_pow(base, exponent){
    if(exponent < 0) negative_exponent(0);
    var b = 1 < Base_Import[123].call(null, base) ? 1 : 0;
    if(b){
     var c = 63 < exponent ? 1 : 0;
     if(c)
      var a = c;
     else
      var
       d =
         caml_check_bound(Base_Pow_overflow_bounds[4], exponent)[exponent + 1],
       a = d < Base_Import[123].call(null, base) ? 1 : 0;
    }
    else
     var a = b;
    if(a) overflow(0);
    return runtime.Base_int_math_int_pow_stub(base, exponent);
   }
   var
    abs = Stdlib_Int64[8],
    c = caml_int64_create_lo_mi_hi(0, 0, 0),
    d = caml_int64_create_lo_mi_hi(1, 0, 0),
    e = caml_int64_create_lo_mi_hi(63, 0, 0),
    f = caml_int64_create_lo_mi_hi(0, 0, 0),
    g = caml_int64_create_lo_mi_hi(0, 0, 0),
    h = caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    i = caml_int64_create_lo_mi_hi(0, 0, 0),
    j = caml_int64_create_lo_mi_hi(1, 0, 0),
    k = caml_int64_create_lo_mi_hi(63, 0, 0);
   function int64_pow(base, exponent){
    if(caml_lessthan(exponent, c)) negative_exponent(0);
    var o = caml_greaterthan(base, d), i = o || caml_lessthan(base, h);
    if(i){
     var j = caml_greaterthan(exponent, e);
     if(j)
      var a = j;
     else{
      var k = runtime.caml_greaterequal(base, f);
      if(k)
       var
        l = caml_int64_to_int32(exponent),
        b =
          caml_greaterthan
           (base, caml_check_bound(Base_Pow_overflow_bounds[8], l)[l + 1]);
      else
       var b = k;
      if(b)
       var a = b;
      else{
       var m = caml_lessthan(base, g);
       if(m)
        var
         n = caml_int64_to_int32(exponent),
         a =
           caml_lessthan
            (base, caml_check_bound(Base_Pow_overflow_bounds[9], n)[n + 1]);
       else
        var a = m;
      }
     }
    }
    else
     var a = i;
    if(a) overflow(0);
    return runtime.Base_int_math_int64_pow_stub(base, exponent);
   }
   function int63_pow_on_int64(base, exponent){
    if(caml_lessthan(exponent, i)) negative_exponent(0);
    var b = caml_greaterthan(abs(base), j);
    if(b){
     var c = caml_greaterthan(exponent, k);
     if(c)
      var a = c;
     else
      var
       d = caml_int64_to_int32(exponent),
       e = caml_check_bound(Base_Pow_overflow_bounds[6], d)[d + 1],
       a = caml_greaterthan(abs(base), e);
    }
    else
     var a = b;
    if(a) overflow(0);
    return runtime.Base_int_math_int64_pow_stub(base, exponent);
   }
   var
    Private = [0, int_pow, int64_pow, int63_pow_on_int64],
    l =
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: modulus should be positive", 0]]]]]],
       "%s %% %s in core_int.ml: modulus should be positive"],
    m =
      [0,
       [2,
        0,
        [11,
         " /",
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: divisor should be positive", 0]]]]]],
       "%s /%% %s in core_int.ml: divisor should be positive"],
    Base_Int_math =
      [0,
       function(X){
        function symbol(x, y){
         if(caml_call2(X[11], y, X[18])){
          var a = caml_call1(X[4], y), b = caml_call1(X[4], x);
          caml_call3(invalid_argf(l), b, a, 0);
         }
         var rval = caml_call2(X[20], x, y);
         return caml_call2(X[14], rval, X[18])
                 ? caml_call2(X[5], rval, y)
                 : rval;
        }
        var one = caml_call1(X[19], 1);
        function symbol$0(x, y){
         if(caml_call2(X[11], y, X[18])){
          var a = caml_call1(X[4], y), b = caml_call1(X[4], x);
          caml_call3(invalid_argf(m), b, a, 0);
         }
         if(! caml_call2(X[14], x, X[18])) return caml_call2(X[8], x, y);
         var c = caml_call2(X[5], x, one), d = caml_call2(X[8], c, y);
         return caml_call2(X[6], d, one);
        }
        function symbol$1(x, y){
         var a = caml_call1(X[2], y), b = caml_call1(X[2], x);
         return Base_Import[96].call(null, b, a);
        }
        function round_down(i, modulus){
         var a = symbol(i, modulus);
         return caml_call2(X[6], i, a);
        }
        function round_up(i, modulus){
         var remainder = symbol(i, modulus);
         if(caml_call2(X[12], remainder, X[18])) return i;
         var a = caml_call2(X[5], i, modulus);
         return caml_call2(X[6], a, remainder);
        }
        function round_towards_zero(i, to_multiple_of){
         return caml_call2(X[12], i, X[18])
                 ? X[18]
                 : caml_call2
                    (X[13], i, X[18])
                   ? round_down(i, to_multiple_of)
                   : round_up(i, to_multiple_of);
        }
        function round_nearest(i, modulus){
         var
          remainder = symbol(i, modulus),
          modulus_minus_remainder = caml_call2(X[6], modulus, remainder);
         return caml_call2(X[11], modulus_minus_remainder, remainder)
                 ? caml_call2(X[5], i, modulus_minus_remainder)
                 : caml_call2(X[6], i, remainder);
        }
        function round(opt, i, to_multiple_of){
         var dir = opt ? opt[1] : 857423934;
         return 857423934 <= dir
                 ? 1003109192
                   <= dir
                   ? round_towards_zero(i, to_multiple_of)
                   : round_nearest(i, to_multiple_of)
                 : 759637122
                   <= dir
                   ? round_down(i, to_multiple_of)
                   : round_up(i, to_multiple_of);
        }
        return [0,
                symbol,
                symbol$0,
                symbol$1,
                round,
                round_towards_zero,
                round_down,
                round_up,
                round_nearest];
       },
       Private];
   runtime.caml_register_global(17, Base_Int_math, "Base__Int_math");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Staged
//# shape: Base__Staged:[F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function stage(a){return a;}
   function unstage(a){return a;}
   var Base_Staged = [0, stage, unstage];
   runtime.caml_register_global(0, Base_Staged, "Base__Staged");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes_intf
//# shape: Base__Bytes_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Bytes_intf = [0];
   runtime.caml_register_global(0, Base_Bytes_intf, "Base__Bytes_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Char
//# unitInfo: Requires: Base__Array0, Base__Char0, Base__Comparable, Base__Error, Base__Hash, Base__Identifiable, Base__Import, Base__Sexp, Base__String0, Stdlib__Format
//# shape: Base__Char:[N,F(1)*,N,N,N,N,N,N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,N,N,N,N,F(2),N,F(2)*,F(2)*,F(1)*,[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*],F(1)*,F(1)*,F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),N,N,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Char",
    Base_Import = global_data.Base__Import,
    Base_Hash = global_data.Base__Hash,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_String0 = global_data.Base__String0,
    Base_Char0 = global_data.Base__Char0,
    Base_Identifiable = global_data.Base__Identifiable,
    Base_Array0 = global_data.Base__Array0,
    Base_Comparable = global_data.Base__Comparable,
    failwithf = Base_Char0[1],
    escaped = Base_Char0[2],
    lowercase = Base_Char0[3],
    to_int = Base_Char0[4],
    unsafe_of_int = Base_Char0[5],
    uppercase = Base_Char0[6],
    min_value = Base_Char0[8],
    max_value = Base_Char0[9],
    of_int = Base_Char0[10],
    of_int_exn = Base_Char0[11],
    compare = Base_Import[226],
    hash_fold_t = Base_Import[205],
    func = Base_Import[219];
   function hash(x){return caml_call1(func, x);}
   var
    globalize = Base_Import[282],
    t_of_sexp = Base_Import[162],
    sexp_of_t = Base_Import[138],
    t_sexp_grammar = Base_Import[184],
    a = [0, [11, "Char.of_string: ", [3, 0, 0]], "Char.of_string: %S"];
   function to_string(t){return Base_String0[8].call(null, 1, t);}
   function of_string(s){
    return 1 === runtime.caml_ml_string_length(s)
            ? runtime.caml_string_get(s, 0)
            : caml_call2(failwithf(a), s, 0);
   }
   var
    include =
      Base_Identifiable[1].call
       (null,
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = include[1],
    hash$0 = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t$0 = include[4],
    of_string$0 = include[5],
    to_string$0 = include[6],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    hashable = include[24],
    b = [0, [1, 0], "%C"];
   function pp(fmt, c){
    return caml_call1(Stdlib_Format[139].call(null, fmt)(b), c);
   }
   function invariant(param){return 0;}
   var
    c = Base_Array0[12].call(null, 256, unsafe_of_int),
    all = Base_Array0[16].call(null, c),
    d =
      [0,
       [11, "Char.get_digit_exn ", [1, [11, ": not a digit", 0]]],
       "Char.get_digit_exn %C: not a digit"],
    cst_char = "char",
    cst_Char_get_hex_digit_exn_not =
      "Char.get_hex_digit_exn: not a hexadecimal digit";
   function is_lowercase(param){return 25 < param - 97 >>> 0 ? 0 : 1;}
   function is_uppercase(param){return 25 < param - 65 >>> 0 ? 0 : 1;}
   function is_print(param){return 94 < param - 32 >>> 0 ? 0 : 1;}
   function is_whitespace(param){
    a:
    {
     if(14 <= param){if(32 !== param) break a;} else if(9 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function is_alpha(param){
    a:
    {
     if(91 <= param){
      if(25 < param - 97 >>> 0) break a;
     }
     else if(65 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_alphanum(param){
    var a = param - 48 | 0;
    a:
    {
     if(42 < a >>> 0){
      if(25 < a - 49 >>> 0) break a;
     }
     else if(6 >= a - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   function get_digit_unsafe(t){
    var a = to_int(48), b = to_int(t);
    return Base_Import[93].call(null, b, a);
   }
   function get_digit_exn(t){
    return is_digit(t) ? get_digit_unsafe(t) : caml_call2(failwithf(d), t, 0);
   }
   function get_digit(t){return is_digit(t) ? [0, get_digit_unsafe(t)] : 0;}
   function is_hex_digit(param){
    var a = param - 48 | 0;
    a:
    {
     if(22 < a >>> 0){
      if(5 < a - 49 >>> 0) break a;
     }
     else if(6 >= a - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   function is_hex_digit_lower(param){
    a:
    {
     if(58 <= param){
      if(5 < param - 97 >>> 0) break a;
     }
     else if(48 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_hex_digit_upper(param){
    a:
    {
     if(58 <= param){
      if(5 < param - 65 >>> 0) break a;
     }
     else if(48 > param) break a;
     return 1;
    }
    return 0;
   }
   function get_hex_digit_exn(t){
    if(65 <= t){
     if(97 <= t){
      if(103 > t){
       var
        c = to_int(97),
        d = to_int(t),
        e = Base_Import[93].call(null, d, c);
       return Base_Import[91].call(null, e, 10);
      }
     }
     else if(71 > t){
      var f = to_int(65), g = to_int(t), h = Base_Import[93].call(null, g, f);
      return Base_Import[91].call(null, h, 10);
     }
    }
    else if(9 >= t - 48 >>> 0){
     var i = to_int(48), j = to_int(t);
     return Base_Import[93].call(null, j, i);
    }
    var
     a = [0, [0, cst_char, caml_call1(sexp_of_t$0, t)], 0],
     b = Base_Sexp[10].call(null, cst_Char_get_hex_digit_exn_not, a);
    return Base_Error[32].call(null, b);
   }
   function get_hex_digit(t){
    return is_hex_digit(t) ? [0, get_hex_digit_exn(t)] : 0;
   }
   var
    symbol = Base_Import[106][6],
    symbol$0 = Base_Import[106][2],
    symbol$1 = Base_Import[106][4],
    symbol$2 = Base_Import[106][5],
    symbol$3 = Base_Import[106][1],
    symbol$4 = Base_Import[106][3],
    O = [0, symbol, symbol$0, symbol$1, symbol$2, symbol$3, symbol$4],
    t_of_sexp$1 = Base_Import[162],
    sexp_of_t$1 = Base_Import[138],
    t_sexp_grammar$0 = Base_Import[184];
   function compare$0(c1, c2){
    var a = lowercase(c2), b = lowercase(c1);
    return Base_Import[106][9].call(null, b, a);
   }
   function compare_local(c1, c2){return compare$0(c1, c2);}
   function hash_fold_t$1(state, t){
    var a = lowercase(t);
    return caml_call2(Base_Import[205], state, a);
   }
   function hash$1(t){return Base_Hash[14].call(null, 0, hash_fold_t$1, t);}
   var
    include$0 = Base_Comparable[11].call(null, [0, compare$0, sexp_of_t$1]),
    symbol$5 = include$0[1],
    symbol$6 = include$0[2],
    symbol$7 = include$0[3],
    symbol$8 = include$0[4],
    symbol$9 = include$0[5],
    symbol$10 = include$0[6],
    equal = include$0[7],
    compare$1 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between$0 = include$0[13],
    clamp_exn$0 = include$0[14],
    clamp$0 = include$0[15],
    comparator$0 = include$0[16];
   function equal_local(t1, t2){
    var a = compare$0(t1, t2);
    return caml_call2(Base_Import[242], a, 0);
   }
   var
    include$1 = Base_Import[106],
    symbol$11 = include$1[1],
    symbol$12 = include$1[2],
    symbol$13 = include$1[3],
    symbol$14 = include$1[4],
    symbol$15 = include$1[5],
    symbol$16 = include$1[6],
    ascending$0 = include$1[7],
    descending$0 = include$1[8],
    compare$2 = include$1[9],
    compare_local$0 = include$1[10],
    equal$0 = include$1[11],
    equal_local$0 = include$1[12],
    max$0 = include$1[13],
    min$0 = include$1[14],
    Base_Char =
      [0,
       all,
       globalize,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$16,
       symbol$12,
       symbol$14,
       symbol$15,
       symbol$11,
       symbol$13,
       equal$0,
       compare$2,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local$0,
       compare_local$0,
       invariant,
       O,
       to_int,
       of_int,
       of_int_exn,
       unsafe_of_int,
       escaped,
       lowercase,
       uppercase,
       is_digit,
       is_lowercase,
       is_uppercase,
       is_alpha,
       is_alphanum,
       is_print,
       is_whitespace,
       get_digit,
       get_digit_exn,
       is_hex_digit,
       is_hex_digit_lower,
       is_hex_digit_upper,
       get_hex_digit,
       get_hex_digit_exn,
       min_value,
       max_value,
       [0,
        hash_fold_t$1,
        hash$1,
        t_of_sexp$1,
        sexp_of_t$1,
        t_sexp_grammar$0,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        equal,
        compare$1,
        min,
        max,
        ascending,
        descending,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0,
        equal_local,
        compare_local]];
   runtime.caml_register_global(16, Base_Char, "Base__Char");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes_tr
//# unitInfo: Requires: Base__Bytes0, Base__Char, Base__Import0
//# shape: Base__Bytes_tr:[F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    global_data = runtime.caml_get_global_data(),
    Base_Char = global_data.Base__Char,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Import0 = global_data.Base__Import0;
   function tr_create_map(target, replacement){
    var tr_map = Base_Bytes0[7].call(null, 256), i$3 = 0;
    for(;;){
     caml_bytes_unsafe_set(tr_map, i$3, Base_Char[34].call(null, i$3));
     var k = i$3 + 1 | 0;
     if(255 === i$3) break;
     i$3 = k;
    }
    var
     a =
       Base_Import0[97][4].call
        (null,
         caml_ml_string_length(target),
         caml_ml_string_length(replacement))
       - 1
       | 0,
     e = 0;
    if(a >= 0){
     var i$2 = e;
     for(;;){
      var
       index$0 = Base_Char[32].call(null, caml_string_unsafe_get(target, i$2));
      caml_bytes_unsafe_set
       (tr_map, index$0, caml_string_unsafe_get(replacement, i$2));
      var j = i$2 + 1 | 0;
      if(a === i$2) break;
      i$2 = j;
     }
    }
    var
     last_replacement =
       caml_string_unsafe_get
        (replacement, caml_ml_string_length(replacement) - 1 | 0),
     b =
       Base_Import0[97][4].call
        (null,
         caml_ml_string_length(target),
         caml_ml_string_length(replacement)),
     c = caml_ml_string_length(target) - 1 | 0;
    if(c >= b){
     var i$1 = b;
     for(;;){
      var
       index = Base_Char[32].call(null, caml_string_unsafe_get(target, i$1));
      caml_bytes_unsafe_set(tr_map, index, last_replacement);
      var h = i$1 + 1 | 0;
      if(c === i$1) break;
      i$1 = h;
     }
    }
    var
     first_target = runtime.caml_string_get(target, 0),
     g = caml_bytes_unsafe_get(tr_map, Base_Char[32].call(null, first_target));
    if(! Base_Char[15].call(null, g, first_target)){
     var i = 0;
     for(;;){
      if(256 === i)
       var d = 0;
      else{
       var f = Base_Char[34].call(null, i);
       if(! Base_Char[15].call(null, caml_bytes_unsafe_get(tr_map, i), f)){var i$0 = i + 1 | 0; i = i$0; continue;}
       var d = 1;
      }
      if(d) break;
      return 0;
     }
    }
    return [0, runtime.caml_string_of_bytes(tr_map)];
   }
   var Base_Bytes_tr = [0, tr_create_map];
   runtime.caml_register_global(3, Base_Bytes_tr, "Base__Bytes_tr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String_intf
//# shape: Base__String_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_String_intf = [0];
   runtime.caml_register_global(0, Base_String_intf, "Base__String_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String
//# unitInfo: Requires: Base__Array0, Base__Bytes0, Base__Bytes_tr, Base__Char, Base__Comparable, Base__Comparator, Base__Container, Base__Error, Base__Hash, Base__Identifiable, Base__Import, Base__Indexed_container, Base__Int0, Base__List, Base__Option, Base__Or_error, Base__Ordered_collection_common, Base__Printf, Base__Sequence, Base__Sexp, Base__Sexpable, Base__Staged, Base__String0, Base__String_intf, Base__Uchar0, CamlinternalLazy, Stdlib__Format
//# shape: Base__String:[F(1)*,N,F(3),F(3),F(3),F(1),F(1),F(2)*,F(2),F(2),F(2),F(2),F(2),F(1)*,F(2),F(3),F(3),F(4),F(2),F(2),F(2),F(3),F(2),F(2),F(1),F(1),F(1)*->F(1),F(1)*->F(1),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),N,F(1),F(1)*,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2),F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,F(2),N,F(2)*,F(1)*,N,F(2),F(2),F(2)*,F(2),F(1),F(4),F(1),F(1),F(1),F(1),N,F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(1)*,F(1),N,F(3),F(3),F(3),F(3),F(2),F(2),F(3),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(3),F(3),F(2),F(2),F(2),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*,F(2)*,F(1),F(1),F(3),F(3),F(2),N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$15 = "",
    cst_case_sensitive = "case_sensitive",
    cst_char$1 = "char",
    cst_escape_char$1 = "escape_char",
    cst_pattern = "pattern",
    cst_pos$2 = "pos",
    cst_src_string_ml = "src/string.ml",
    cst_str$1 = "str",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$14 = cst$15,
    cst$13 = cst$15,
    cst$12 = cst$15,
    cst$11 = cst$15,
    cst$10 = cst$15,
    cst$8 = cst$15,
    cst$9 = cst$15,
    cst$6 = cst$15,
    cst$7 = cst$15,
    cst$5 = cst$15,
    cst$4 = cst$15,
    cst$3 = cst$15,
    cst$2 = cst$15,
    cst$1 = cst$15,
    cst$0 = cst$15,
    cst = cst$15,
    codec_name = "UTF-8",
    module_name = "Base.String.Utf8",
    codec_name$0 = "UTF-16LE",
    module_name$0 = "Base.String.Utf16le",
    codec_name$1 = "UTF-16BE",
    module_name$1 = "Base.String.Utf16be",
    codec_name$2 = "UTF-32LE",
    module_name$2 = "Base.String.Utf32le",
    codec_name$3 = "UTF-32BE",
    module_name$3 = "Base.String.Utf32be",
    Base_Char = global_data.Base__Char,
    Base_Import = global_data.Base__Import,
    Base_Uchar0 = global_data.Base__Uchar0,
    Base_Bytes0 = global_data.Base__Bytes0,
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base_Sequence = global_data.Base__Sequence,
    Base_Sexp = global_data.Base__Sexp,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Identifiable = global_data.Base__Identifiable,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Or_error = global_data.Base__Or_error,
    Base_Option = global_data.Base__Option,
    Base_Array0 = global_data.Base__Array0,
    Base_Int0 = global_data.Base__Int0,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Bytes_tr = global_data.Base__Bytes_tr,
    Base_Container = global_data.Base__Container,
    Base_Hash = global_data.Base__Hash,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_String0 = global_data.Base__String0,
    Base_Error = global_data.Base__Error,
    Base_Staged = global_data.Base__Staged,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    max_length = Base_String0[2],
    symbol_concat = Base_String0[3],
    capitalize = Base_String0[4],
    compare = Base_String0[5],
    escaped = Base_String0[6],
    lowercase = Base_String0[7],
    make = Base_String0[8],
    uncapitalize = Base_String0[10],
    uppercase = Base_String0[11],
    is_valid_utf_8 = Base_String0[12],
    is_valid_utf_16le = Base_String0[13],
    is_valid_utf_16be = Base_String0[14],
    get_utf_8_uchar = Base_String0[15],
    get_utf_16le_uchar = Base_String0[16],
    get_utf_16be_uchar = Base_String0[17],
    get_utf_32le_uchar = Base_String0[18],
    get_utf_32be_uchar = Base_String0[19],
    concat = Base_String0[20],
    iter = Base_String0[21],
    split_lines = Base_String0[22],
    invalid_argf = Base_Printf[7],
    raise_s = Base_Error[32],
    stage = Base_Staged[1],
    globalize = Base_Import[289],
    hash_fold_t = Base_Import[208],
    func = Base_Import[222];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[160],
    sexp_of_t = Base_Import[136],
    t_sexp_grammar = Base_Import[182],
    hashable = [0, hash, compare, sexp_of_t],
    include = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include[1],
    a = [0, "String.index_exn: not found"],
    b = [0, "String.index_from_exn: not found"],
    cst_String_index_from_exn = "String.index_from_exn",
    c = [0, "String.rindex_exn: not found"],
    d = [0, "String.rindex_from_exn: not found"],
    cst_String_rindex_from_exn = "String.rindex_from_exn",
    e = [0, cst_case_sensitive],
    f = [0, cst_pattern],
    cst_substring = "substring",
    cst_Substring_not_found = "Substring not found",
    g = [0, "kmp_array"],
    h = [0, cst_case_sensitive],
    i = [0, cst_pattern];
   function invariant(param){return 0;}
   function unsafe_sub(src, pos, len){
    if(0 === len) return cst;
    var dst = Base_Bytes0[7].call(null, len);
    caml_blit_string(src, pos, dst, 0, len);
    return caml_string_of_bytes(dst);
   }
   function sub(src, pos, len){
    if(0 === pos && len === caml_ml_string_length(src)) return src;
    Base_Ordered_collection_common[2].call
     (null, pos, len, caml_ml_string_length(src));
    return unsafe_sub(src, pos, len);
   }
   function subo(opt, len, src){
    var pos = opt ? opt[1] : 0;
    if(len)
     var i = len[1], i$0 = i;
    else
     var i$0 = Base_Import[93].call(null, caml_ml_string_length(src), pos);
    return sub(src, pos, i$0);
   }
   function contains(opt, len, t, char){
    var
     pos$1 = opt ? opt[1] : 0,
     total_length = caml_ml_string_length(t),
     d = Base_Import[93].call(null, total_length, pos$1),
     len$0 = Base_Option[30].call(null, len, d);
    Base_Ordered_collection_common[2].call(null, pos$1, len$0, total_length);
    var end = Base_Import[91].call(null, pos$1, len$0), pos = pos$1;
    for(;;){
     var a = pos < end ? 1 : 0;
     if(a){
      var b = Base_Char[16].call(null, caml_string_unsafe_get(t, pos), char);
      if(! b){
       var pos$0 = Base_Import[91].call(null, pos, 1);
       pos = pos$0;
       continue;
      }
      var c = b;
     }
     else
      var c = a;
     return c;
    }
   }
   function is_empty(t){return 0 === caml_ml_string_length(t) ? 1 : 0;}
   function index(string, char){
    var
     found = Base_Option[49],
     len = caml_ml_string_length(string),
     pos$0 = 0;
    for(;;){
     if(len <= pos$0) return 0;
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$0), char))
      return found(pos$0);
     var pos = Base_Import[91].call(null, pos$0, 1);
     pos$0 = pos;
    }
   }
   function index_exn(string, char){
    var len = caml_ml_string_length(string), pos$0 = 0;
    for(;;){
     if(len <= pos$0)
      throw caml_maybe_attach_backtrace([0, Base_Import[297], a], 1);
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$0), char))
      return pos$0;
     var pos = Base_Import[91].call(null, pos$0, 1);
     pos$0 = pos;
    }
   }
   function index_from(string, pos, char){
    var
     found = Base_Option[49],
     len = caml_ml_string_length(string),
     pos$1 = pos;
    for(;;){
     if(len <= pos$1) return 0;
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
      return found(pos$1);
     var pos$0 = Base_Import[91].call(null, pos$1, 1);
     pos$1 = pos$0;
    }
   }
   function index_from_exn(string, pos, char){
    var len = caml_ml_string_length(string);
    if(0 <= pos && len >= pos){
     var pos$1 = pos;
     for(;;){
      if(len <= pos$1)
       throw caml_maybe_attach_backtrace([0, Base_Import[297], b], 1);
      if
       (Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
       return pos$1;
      var pos$0 = Base_Import[91].call(null, pos$1, 1);
      pos$1 = pos$0;
     }
    }
    return Base_Import[126].call(null, cst_String_index_from_exn);
   }
   function rindex(string, char){
    var
     pos = Base_Import[93].call(null, caml_ml_string_length(string), 1),
     found = Base_Option[49],
     pos$1 = pos;
    for(;;){
     if(0 > pos$1) return 0;
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
      return found(pos$1);
     var pos$0 = Base_Import[93].call(null, pos$1, 1);
     pos$1 = pos$0;
    }
   }
   function rindex_exn(string, char){
    var
     pos = Base_Import[93].call(null, caml_ml_string_length(string), 1),
     pos$1 = pos;
    for(;;){
     if(0 > pos$1)
      throw caml_maybe_attach_backtrace([0, Base_Import[297], c], 1);
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
      return pos$1;
     var pos$0 = Base_Import[93].call(null, pos$1, 1);
     pos$1 = pos$0;
    }
   }
   function rindex_from(string, pos, char){
    var found = Base_Option[49], pos$1 = pos;
    for(;;){
     if(0 > pos$1) return 0;
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
      return found(pos$1);
     var pos$0 = Base_Import[93].call(null, pos$1, 1);
     pos$1 = pos$0;
    }
   }
   function rindex_from_exn(string, pos, char){
    if(-1 <= pos && caml_ml_string_length(string) > pos){
     var pos$1 = pos;
     for(;;){
      if(0 > pos$1)
       throw caml_maybe_attach_backtrace([0, Base_Import[297], d], 1);
      if
       (Base_Char[16].call(null, caml_string_unsafe_get(string, pos$1), char))
       return pos$1;
      var pos$0 = Base_Import[93].call(null, pos$1, 1);
      pos$1 = pos$0;
     }
    }
    return Base_Import[126].call(null, cst_String_rindex_from_exn);
   }
   function sexp_of_t$0(param){
    var
     case_sensitive = param[2],
     pattern = param[1],
     a =
       [0,
        [1, [0, e, [0, Base_Import[135].call(null, case_sensitive), 0]]],
        0];
    return [1,
            [0, [1, [0, f, [0, Base_Import[136].call(null, pattern), 0]]], a]];
   }
   function pattern(t){return t[1];}
   function case_sensitive(t){return t[2];}
   function kmp_internal_loop
   (matched_chars, next_text_char, pattern, kmp_array, char_equal){
    var matched_chars$0 = [0, matched_chars];
    for(;;){
     if
      (0 < matched_chars$0[1]
       &&
        !
        caml_call2
         (char_equal,
          next_text_char,
          caml_string_unsafe_get(pattern, matched_chars$0[1]))){
      matched_chars$0[1] =
       kmp_array[Base_Import[93].call(null, matched_chars$0[1], 1) + 1];
      continue;
     }
     if
      (caml_call2
        (char_equal,
         next_text_char,
         caml_string_unsafe_get(pattern, matched_chars$0[1])))
      matched_chars$0[1] = Base_Import[91].call(null, matched_chars$0[1], 1);
     return matched_chars$0[1];
    }
   }
   function get_char_equal(case_sensitive){
    return case_sensitive ? Base_Char[16] : Base_Char[55][12];
   }
   function create(pattern, case_sensitive){
    var
     n = caml_ml_string_length(pattern),
     kmp_array = Base_Array0[4].call(null, n, -1);
    if(0 < n){
     var char_equal = get_char_equal(case_sensitive);
     kmp_array[1] = 0;
     var matched_chars = [0, 0], a = Base_Import[93].call(null, n, 1), b = 1;
     if(a >= 1){
      var i = b;
      for(;;){
       matched_chars[1] =
        kmp_internal_loop
         (matched_chars[1],
          caml_string_unsafe_get(pattern, i),
          pattern,
          kmp_array,
          char_equal);
       kmp_array[i + 1] = matched_chars[1];
       var c = i + 1 | 0;
       if(a === i) break;
       i = c;
      }
     }
    }
    return [0, pattern, case_sensitive, kmp_array];
   }
   function index_internal(opt, param, text){
    var
     pos = opt ? opt[1] : 0,
     kmp_array = param[3],
     case_sensitive = param[2],
     pattern = param[1];
    if
     (0 <= pos
      &&
       Base_Import[93].call
        (null, caml_ml_string_length(text), caml_ml_string_length(pattern))
       >= pos){
     var
      char_equal = get_char_equal(case_sensitive),
      j = [0, pos],
      matched_chars = [0, 0],
      k = caml_ml_string_length(pattern),
      n = caml_ml_string_length(text);
     for(;;){
      if(j[1] < n && matched_chars[1] < k){
       var next_text_char = caml_string_unsafe_get(text, j[1]);
       matched_chars[1] =
        kmp_internal_loop
         (matched_chars[1], next_text_char, pattern, kmp_array, char_equal);
       j[1] = Base_Import[91].call(null, j[1], 1);
       continue;
      }
      return matched_chars[1] === k ? Base_Import[93].call(null, j[1], k) : -1;
     }
    }
    return -1;
   }
   function matches(t, str){return 0 <= index_internal(0, t, str) ? 1 : 0;}
   function index$0(pos, t, in$){
    var p = index_internal(pos, t, in$);
    return 0 <= p ? [0, p] : 0;
   }
   function index_exn$0(pos, t, in$){
    var p = index_internal(pos, t, in$);
    if(0 <= p) return p;
    var a = [0, [0, cst_substring, Base_Import[136].call(null, t[1])], 0];
    return raise_s(Base_Sexp[10].call(null, cst_Substring_not_found, a));
   }
   function index_all(param, may_overlap, text){
    var kmp_array = param[3], case_sensitive = param[2], pattern = param[1];
    if(0 === caml_ml_string_length(pattern)){
     var a = Base_Import[91].call(null, 1, caml_ml_string_length(text));
     return Base_List[40].call(null, a, function(a){return a;});
    }
    var
     char_equal = get_char_equal(case_sensitive),
     matched_chars = [0, 0],
     k = caml_ml_string_length(pattern),
     n = caml_ml_string_length(text),
     found = [0, 0],
     b = 0;
    if(n >= 0){
     var j = b;
     for(;;){
      if(matched_chars[1] === k){
       var c = found[1];
       found[1] = [0, Base_Import[93].call(null, j, k), c];
       matched_chars[1] =
        may_overlap ? kmp_array[Base_Import[93].call(null, k, 1) + 1] : 0;
      }
      if(j < n){
       var next_text_char = caml_string_unsafe_get(text, j);
       matched_chars[1] =
        kmp_internal_loop
         (matched_chars[1], next_text_char, pattern, kmp_array, char_equal);
      }
      var d = j + 1 | 0;
      if(n === j) break;
      j = d;
     }
    }
    return Base_List[63].call(null, found[1]);
   }
   function replace_first(pos, t, s, with$){
    var match = index$0(pos, t, s);
    if(! match) return s;
    var
     i = match[1],
     len_s = caml_ml_string_length(s),
     len_t = caml_ml_string_length(t[1]),
     len_with = caml_ml_string_length(with$),
     a = Base_Import[91].call(null, len_s, len_with),
     b = Base_Import[93].call(null, a, len_t),
     dst = Base_Bytes0[7].call(null, b);
    Base_Bytes0[4].call(null, s, 0, dst, 0, i);
    Base_Bytes0[4].call(null, with$, 0, dst, i, len_with);
    var
     c = Base_Import[93].call(null, len_s, i),
     d = Base_Import[93].call(null, c, len_t),
     e = Base_Import[91].call(null, i, len_with),
     f = Base_Import[91].call(null, i, len_t);
    Base_Bytes0[4].call(null, s, f, dst, e, d);
    return caml_string_of_bytes(dst);
   }
   function replace_all(t, s, with$){
    var matches = index_all(t, 0, s);
    if(! matches) return s;
    var
     len_s = caml_ml_string_length(s),
     len_t = caml_ml_string_length(t[1]),
     len_with = caml_ml_string_length(with$),
     num_matches = Base_List[45].call(null, matches),
     a = Base_Import[93].call(null, len_with, len_t),
     b = Base_Import[88].call(null, a, num_matches),
     c = Base_Import[91].call(null, len_s, b),
     dst = Base_Bytes0[7].call(null, c),
     next_dst_pos = [0, 0],
     next_src_pos = [0, 0];
    Base_List[19].call
     (null,
      matches,
      function(i){
       var len = Base_Import[93].call(null, i, next_src_pos[1]);
       Base_Bytes0[4].call
        (null, s, next_src_pos[1], dst, next_dst_pos[1], len);
       var a = Base_Import[91].call(null, next_dst_pos[1], len);
       Base_Bytes0[4].call(null, with$, 0, dst, a, len_with);
       var b = Base_Import[91].call(null, next_dst_pos[1], len);
       next_dst_pos[1] = Base_Import[91].call(null, b, len_with);
       var c = Base_Import[91].call(null, next_src_pos[1], len);
       next_src_pos[1] = Base_Import[91].call(null, c, len_t);
       return 0;
      });
    var d = Base_Import[93].call(null, len_s, next_src_pos[1]);
    Base_Bytes0[4].call(null, s, next_src_pos[1], dst, next_dst_pos[1], d);
    return caml_string_of_bytes(dst);
   }
   function split_on(t, s){
    var
     pattern_len = caml_ml_string_length(t[1]),
     matches = index_all(t, 0, s),
     a =
       Base_Import[111].call(null, matches, [0, caml_ml_string_length(s), 0]),
     b = [0, Base_Import[113].call(null, pattern_len), matches];
    return Base_List[98].call
            (null,
             b,
             a,
             function(i, j){
              var
               a = Base_Import[93].call(null, j, i),
               b = Base_Import[93].call(null, a, pattern_len);
              return sub(s, Base_Import[91].call(null, i, pattern_len), b);
             });
   }
   function equal_local(a_003, b_004){
    if(a_003 === b_004) return 1;
    var a = caml_call2(Base_Import[274], a_003[1], b_004[1]);
    if(a){
     var b = caml_call2(Base_Import[267], a_003[2], b_004[2]);
     if(b)
      return caml_call3
              (Base_Import[277], Base_Import[270], a_003[3], b_004[3]);
     var c = b;
    }
    else
     var c = a;
    return c;
   }
   function equal(a, b){return equal_local(a, b);}
   function sexp_of_t$1(param){
    var
     kmp_array_012 = param[3],
     case_sensitive_010 = param[2],
     pattern_008 = param[1],
     arg_013 = Base_Import[150].call(null, Base_Import[139], kmp_array_012),
     bnds_007 = [0, [1, [0, g, [0, arg_013, 0]]], 0],
     arg_011 = Base_Import[135].call(null, case_sensitive_010),
     bnds_007$0 = [0, [1, [0, h, [0, arg_011, 0]]], bnds_007],
     arg_009 = Base_Import[136].call(null, pattern_008),
     bnds_007$1 = [0, [1, [0, i, [0, arg_009, 0]]], bnds_007$0];
    return [1, bnds_007$1];
   }
   function representation(a){return a;}
   function substr_index_gen(case_sensitive, pos, t, pattern){return index$0(pos, create(pattern, case_sensitive), t);
   }
   function substr_index_exn_gen(case_sensitive, pos, t, pattern){return index_exn$0(pos, create(pattern, case_sensitive), t);
   }
   function substr_index_all_gen(case_sensitive, t, may_overlap, pattern){return index_all(create(pattern, case_sensitive), may_overlap, t);
   }
   function substr_replace_first_gen(case_sensitive, pos, t, pattern){
    var a = create(pattern, case_sensitive);
    return function(b){return replace_first(pos, a, t, b);};
   }
   function substr_replace_all_gen(case_sensitive, t, pattern){
    var a = create(pattern, case_sensitive);
    return function(b){return replace_all(a, t, b);};
   }
   function is_substring_gen(case_sensitive, t, substring){
    var a = substr_index_gen(case_sensitive, 0, t, substring);
    return Base_Option[53].call(null, a);
   }
   var j = 1;
   function substr_index(a, b, c){return substr_index_gen(j, a, b, c);}
   var k = 1;
   function substr_index_exn(a, b, c){
    return substr_index_exn_gen(k, a, b, c);
   }
   var l = 1;
   function substr_index_all(a, b, c){
    return substr_index_all_gen(l, a, b, c);
   }
   var m = 1;
   function substr_replace_first(a, b, c){
    return substr_replace_first_gen(m, a, b, c);
   }
   var n = 1;
   function substr_replace_all(a, b){return substr_replace_all_gen(n, a, b);}
   var
    o = 1,
    p =
      [0,
       [11,
        "String.is_substring_at: invalid index ",
        [4, 0, 0, 0, [11, " for string of length ", [4, 0, 0, 0, 0]]]],
       "String.is_substring_at: invalid index %d for string of length %d"];
   function is_substring(a, b){return is_substring_gen(o, a, b);}
   function is_substring_at_gen(str, str_pos$1, sub, char_equal){
    var
     str_len = caml_ml_string_length(str),
     sub_len = caml_ml_string_length(sub),
     b = str_pos$1 < 0 ? 1 : 0,
     c = b || (str_len < str_pos$1 ? 1 : 0);
    if(c) caml_call3(invalid_argf(p), str_pos$1, str_len, 0);
    var a = Base_Import[91].call(null, str_pos$1, sub_len) <= str_len ? 1 : 0;
    if(! a) return a;
    var str_pos = str_pos$1, sub_pos = 0;
    for(;;){
     if(sub_pos === sub_len) return 1;
     if
      (!
       caml_call2
        (char_equal,
         caml_string_unsafe_get(str, str_pos),
         caml_string_unsafe_get(sub, sub_pos)))
      return 0;
     var
      sub_pos$0 = Base_Import[91].call(null, sub_pos, 1),
      str_pos$0 = Base_Import[91].call(null, str_pos, 1);
     str_pos = str_pos$0;
     sub_pos = sub_pos$0;
    }
   }
   function is_suffix_gen(string, suffix, char_equal){
    var
     string_len = caml_ml_string_length(string),
     suffix_len = caml_ml_string_length(suffix),
     a = suffix_len <= string_len ? 1 : 0;
    return a
            ? is_substring_at_gen
              (string,
               Base_Import[93].call(null, string_len, suffix_len),
               suffix,
               char_equal)
            : a;
   }
   function is_prefix_gen(string, prefix, char_equal){
    var
     string_len = caml_ml_string_length(string),
     prefix_len = caml_ml_string_length(prefix),
     a = prefix_len <= string_len ? 1 : 0;
    return a ? is_substring_at_gen(string, 0, prefix, char_equal) : a;
   }
   var
    t_of_sexp$0 = Base_Import[160],
    sexp_of_t$2 = Base_Import[136],
    t_sexp_grammar$0 = Base_Import[182];
   function compare_local(string1, string2){
    if(string1 === string2) return 0;
    var
     len2 = caml_ml_string_length(string2),
     len1 = caml_ml_string_length(string1),
     pos = 0;
    for(;;){
     if(pos === len1) return pos === len2 ? 0 : -1;
     if(pos === len2) return 1;
     var
      c2 = caml_string_unsafe_get(string2, pos),
      c1 = caml_string_unsafe_get(string1, pos),
      a = Base_Char[37].call(null, c2),
      b = Base_Char[37].call(null, c1),
      c = Base_Char[17].call(null, b, a);
     if(0 !== c) return c;
     var pos$0 = Base_Import[91].call(null, pos, 1);
     pos = pos$0;
    }
   }
   function compare$0(a, b){return compare_local(a, b);}
   function hash_fold_t$0(state, t){
    var
     len = caml_ml_string_length(t),
     state$0 = [0, caml_call2(Base_Import[206], state, len)],
     a = Base_Import[93].call(null, len, 1),
     b = 0;
    if(a >= 0){
     var pos = b;
     for(;;){
      var c = Base_Char[37].call(null, caml_string_unsafe_get(t, pos));
      state$0[1] = caml_call2(Base_Import[205], state$0[1], c);
      var d = pos + 1 | 0;
      if(a === pos) break;
      pos = d;
     }
    }
    return state$0[1];
   }
   function hash$0(t){return Base_Hash[14].call(null, 0, hash_fold_t$0, t);}
   function is_suffix(s, suffix){
    return is_suffix_gen(s, suffix, Base_Char[55][12]);
   }
   function is_prefix(s, prefix){
    return is_prefix_gen(s, prefix, Base_Char[55][12]);
   }
   var q = 0;
   function substr_index$0(a, b, c){return substr_index_gen(q, a, b, c);}
   var r = 0;
   function substr_index_exn$0(a, b, c){
    return substr_index_exn_gen(r, a, b, c);
   }
   var s = 0;
   function substr_index_all$0(a, b, c){
    return substr_index_all_gen(s, a, b, c);
   }
   var t = 0;
   function substr_replace_first$0(a, b, c){
    return substr_replace_first_gen(t, a, b, c);
   }
   var u = 0;
   function substr_replace_all$0(a, b){
    return substr_replace_all_gen(u, a, b);
   }
   var v = 0;
   function is_substring$0(a, b){return is_substring_gen(v, a, b);}
   var w = Base_Char[55][12];
   function is_substring_at(a){
    return function(c){
     function b(b, d){return is_substring_at_gen(a, c, b, d);}
     return function(a){return b(a, w);};};
   }
   var
    include$0 = Base_Comparable[11].call(null, [0, compare$0, sexp_of_t$2]),
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    equal$0 = include$0[7],
    compare$1 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator$0 = include$0[16],
    x = [0, [11, "String.init ", [4, 0, 0, 0, 0]], "String.init %d"],
    y = [0, "String.lsplit2_exn: not found"],
    z = [0, "String.rsplit2_exn: not found"],
    cst_expecting_nonnegative_argu = " expecting nonnegative argument",
    cst_drop_prefix = "drop_prefix",
    cst_drop_suffix = "drop_suffix",
    cst_prefix = "prefix",
    cst_suffix = "suffix",
    A = [0, cst_src_string_ml, 761, 17],
    cst_tr_multi_replacement_is_em = "tr_multi replacement is empty string",
    B = [0, cst_src_string_ml, 925, 4],
    C =
      [0,
       [11, "String.chop_prefix_exn ", [3, 0, [12, 32, [3, 0, 0]]]],
       "String.chop_prefix_exn %S %S"],
    D =
      [0,
       [11, "String.chop_suffix_exn ", [3, 0, [12, 32, [3, 0, 0]]]],
       "String.chop_suffix_exn %S %S"],
    E = [0, [3, 0, 0], "%S"],
    F = [0, cst$15, cst$15],
    cst_escapeworthy_map = "escapeworthy_map",
    cst_c_to = "c_to",
    cst_c_from = "c_from",
    cst_escapeworthy_map_not_one_t = "escapeworthy_map not one-to-one",
    G = [0, [2, 0, [11, ": out of bounds", 0]], "%s: out of bounds"],
    cst_is_char_escaping = "is_char_escaping",
    cst_is_char_escaped = "is_char_escaped",
    cst_is_char_literal = "is_char_literal",
    cst_index_from = "index_from",
    cst_char = cst_char$1,
    cst_pos = cst_pos$2,
    cst_escape_char = cst_escape_char$1,
    cst_str = cst_str$1,
    cst_index_from_exn_not_found = "index_from_exn: not found",
    cst_rindex_from = "rindex_from",
    cst_char$0 = cst_char$1,
    cst_pos$0 = cst_pos$2,
    cst_escape_char$0 = cst_escape_char$1,
    cst_str$0 = cst_str$1,
    cst_rindex_from_exn_not_found = "rindex_from_exn: not found",
    H = [0, cst_src_string_ml, 1858, 19],
    I = [0, cst_src_string_ml, 1872, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    J =
      [0,
       [2,
        0,
        [11, ".get: invalid ", [2, 0, [11, " encoding at given position", 0]]]],
       "%s.get: invalid %s encoding at given position"],
    cst_pos$1 = cst_pos$2,
    cst_of_string_invalid = ".of_string: invalid ",
    K = [0, cst_src_string_ml, 1996, 4],
    L = [0, cst_src_string_ml, 2006, 4],
    M = [0, cst_src_string_ml, 2020, 4],
    N = [0, cst$15];
   function of_string(a){return a;}
   function to_string(a){return a;}
   function init(n, f){
    if(n < 0) caml_call2(invalid_argf(x), n, 0);
    var
     t = Base_Bytes0[7].call(null, n),
     a = Base_Import[93].call(null, n, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_set(t, i, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return caml_string_of_bytes(t);
   }
   function to_list(s){
    var
     i$1 = Base_Import[93].call(null, caml_ml_string_length(s), 1),
     acc = 0,
     i = i$1;
    for(;;){
     if(0 > i) return acc;
     var
      i$0 = Base_Import[93].call(null, i, 1),
      acc$0 = [0, caml_string_get(s, i), acc];
     acc = acc$0;
     i = i$0;
    }
   }
   function to_list_rev(s){
    var len = caml_ml_string_length(s), acc = 0, i = 0;
    for(;;){
     if(i === len) return acc;
     var
      i$0 = Base_Import[91].call(null, i, 1),
      acc$0 = [0, caml_string_get(s, i), acc];
     acc = acc$0;
     i = i$0;
    }
   }
   function rev(t){
    var
     len = caml_ml_string_length(t),
     res = Base_Bytes0[7].call(null, len),
     a = Base_Import[93].call(null, len, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = Base_Import[93].call(null, len, 1);
      caml_bytes_unsafe_set
       (res, i, caml_string_unsafe_get(t, Base_Import[93].call(null, c, i)));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return caml_string_of_bytes(res);
   }
   function lsplit2_exn(string, delim){
    var len = caml_ml_string_length(string), pos = 0;
    for(;;){
     if(len <= pos)
      throw caml_maybe_attach_backtrace([0, Base_Import[297], y], 1);
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos), delim)){
      var
       a = Base_Import[93].call(null, len, pos),
       b = Base_Import[93].call(null, a, 1),
       c = sub(string, Base_Import[91].call(null, pos, 1), b);
      return [0, sub(string, 0, pos), c];
     }
     var pos$0 = Base_Import[91].call(null, pos, 1);
     pos = pos$0;
    }
   }
   function rsplit2_exn(string, delim){
    var
     len = caml_ml_string_length(string),
     pos$1 = Base_Import[93].call(null, len, 1),
     pos = pos$1;
    for(;;){
     if(0 > pos)
      throw caml_maybe_attach_backtrace([0, Base_Import[297], z], 1);
     if(Base_Char[16].call(null, caml_string_unsafe_get(string, pos), delim)){
      var
       a = Base_Import[93].call(null, len, pos),
       b = Base_Import[93].call(null, a, 1),
       c = sub(string, Base_Import[91].call(null, pos, 1), b);
      return [0, sub(string, 0, pos), c];
     }
     var pos$0 = Base_Import[93].call(null, pos, 1);
     pos = pos$0;
    }
   }
   function lsplit2(line, on){
    try{var a = [0, lsplit2_exn(line, on)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Base_Import[297] && exn !== Base_Import[85][8])
      throw caml_maybe_attach_backtrace(exn, 0);
     return 0;
    }
   }
   function rsplit2(line, on){
    try{var a = [0, rsplit2_exn(line, on)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Base_Import[297] && exn !== Base_Import[85][8])
      throw caml_maybe_attach_backtrace(exn, 0);
     return 0;
    }
   }
   function char_list_mem(l$0, c){
    var l = l$0;
    for(;;){
     if(! l) return 0;
     var tl = l[2], hd = l[1], a = Base_Char[16].call(null, hd, c);
     if(a) return a;
     l = tl;
    }
   }
   function split_gen(str, on){
    var variant = on[1];
    if(552554919 <= variant)
     var l = on[2], is_delim = function(c){return char_list_mem(l, c);};
    else
     var
      c = on[2],
      is_delim = function(c$0){return Base_Char[16].call(null, c$0, c);};
    var
     last_pos = caml_ml_string_length(str),
     last_pos$4 = Base_Import[93].call(null, last_pos, 1),
     acc = 0,
     last_pos$1 = last_pos,
     last_pos$0 = last_pos$4;
    for(;;){
     if(-1 === last_pos$0) return [0, sub(str, 0, last_pos$1), acc];
     if(is_delim(caml_string_get(str, last_pos$0))){
      var
       pos1 = Base_Import[91].call(null, last_pos$0, 1),
       sub_str = sub(str, pos1, Base_Import[93].call(null, last_pos$1, pos1)),
       last_pos$2 = Base_Import[93].call(null, last_pos$0, 1),
       acc$0 = [0, sub_str, acc];
      acc = acc$0;
      last_pos$1 = last_pos$0;
      last_pos$0 = last_pos$2;
     }
     else{
      var last_pos$3 = Base_Import[93].call(null, last_pos$0, 1);
      last_pos$0 = last_pos$3;
     }
    }
   }
   function split(str, on){return split_gen(str, [0, -1044422954, on]);}
   function split_on_chars(str, chars){
    return split_gen(str, [0, 552554919, chars]);
   }
   function is_suffix$0(s, suffix){
    return is_suffix_gen(s, suffix, Base_Char[16]);
   }
   function is_prefix$0(s, prefix){
    return is_prefix_gen(s, prefix, Base_Char[16]);
   }
   function is_substring_at$0(s, pos, substring){
    return is_substring_at_gen(s, pos, substring, Base_Char[16]);
   }
   function wrap_sub_n(t, n, name, pos, len, on_error){
    if(0 <= n)
     try{var a = sub(t, pos, len); return a;}catch(exn){return on_error;}
    var b = symbol_concat(name, cst_expecting_nonnegative_argu);
    return Base_Import[126].call(null, b);
   }
   function drop_prefix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_drop_prefix,
             n,
             Base_Import[93].call(null, caml_ml_string_length(t), n),
             cst$0);
   }
   function drop_suffix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_drop_suffix,
             0,
             Base_Import[93].call(null, caml_ml_string_length(t), n),
             cst$1);
   }
   function prefix(t, n){return wrap_sub_n(t, n, cst_prefix, 0, n, t);}
   function suffix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_suffix,
             Base_Import[93].call(null, caml_ml_string_length(t), n),
             n,
             t);
   }
   function lfindi(opt, t, f){
    var pos = opt ? opt[1] : 0, n = caml_ml_string_length(t), i = pos;
    for(;;){
     if(i === n) return 0;
     if(caml_call2(f, i, caml_string_get(t, i))) return [0, i];
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
    }
   }
   function find(t, f){
    var match = lfindi(0, t, function(param, c){return caml_call1(f, c);});
    if(! match) return 0;
    var i = match[1];
    return [0, caml_string_get(t, i)];
   }
   function find_map(t, f){
    var n = caml_ml_string_length(t), i = 0;
    for(;;){
     if(i === n) return 0;
     var res = caml_call1(f, caml_string_get(t, i));
     if(res) return res;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
    }
   }
   function rfindi(pos, t, f){
    if(pos)
     var pos$0 = pos[1], i = pos$0;
    else
     var i = Base_Import[93].call(null, caml_ml_string_length(t), 1);
    for(;;){
     if(0 > i) return 0;
     if(caml_call2(f, i, caml_string_get(t, i))) return [0, i];
     var i$0 = Base_Import[93].call(null, i, 1);
     i = i$0;
    }
   }
   function last_non_drop(drop, t){
    return rfindi(0, t, function(param, c){return 1 - caml_call1(drop, c);});
   }
   function rstrip(opt, t){
    var drop = opt ? opt[1] : Base_Char[45], match = last_non_drop(drop, t);
    if(! match) return cst$2;
    var i = match[1];
    return i === Base_Import[93].call(null, caml_ml_string_length(t), 1)
            ? t
            : prefix(t, Base_Import[91].call(null, i, 1));
   }
   function first_non_drop(drop, t){
    return lfindi(0, t, function(param, c){return 1 - caml_call1(drop, c);});
   }
   function lstrip(opt, t){
    var drop = opt ? opt[1] : Base_Char[45], match = first_non_drop(drop, t);
    if(! match) return cst$3;
    var n = match[1];
    return 0 === n ? t : drop_prefix(t, n);
   }
   function strip(opt, t){
    var
     drop = opt ? opt[1] : Base_Char[45],
     length = caml_ml_string_length(t);
    a:
    if(0 !== length){
     if
      (!
       caml_call1(drop, caml_string_get(t, 0))
       &&
        !
        caml_call1
         (drop, caml_string_get(t, Base_Import[93].call(null, length, 1))))
      break a;
     var match = first_non_drop(drop, t);
     if(! match) return cst$4;
     var first = match[1], match$0 = last_non_drop(drop, t);
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
     var last = match$0[1], a = Base_Import[93].call(null, last, first);
     return sub(t, first, Base_Import[91].call(null, a, 1));
    }
    return t;
   }
   function mapi(t, f){
    var
     l = caml_ml_string_length(t),
     t$0 = Base_Bytes0[7].call(null, l),
     a = Base_Import[93].call(null, l, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set(t$0, i, caml_call2(f, i, caml_string_get(t, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return caml_string_of_bytes(t$0);
   }
   function map(t, f){
    var
     l = caml_ml_string_length(t),
     t$0 = Base_Bytes0[7].call(null, l),
     a = Base_Import[93].call(null, l, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set(t$0, i, caml_call1(f, caml_string_get(t, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return caml_string_of_bytes(t$0);
   }
   function to_array(s){
    return Base_Array0[12].call
            (null,
             caml_ml_string_length(s),
             function(i){return caml_string_get(s, i);});
   }
   function exists(s, f){
    var len = caml_ml_string_length(s), i = 0;
    for(;;){
     var a = i < len ? 1 : 0;
     if(a){
      var b = caml_call1(f, caml_string_get(s, i));
      if(! b){var i$0 = Base_Import[91].call(null, i, 1); i = i$0; continue;}
      var c = b;
     }
     else
      var c = a;
     return c;
    }
   }
   function for_all(s, f){
    var len = caml_ml_string_length(s), i = 0;
    for(;;){
     var a = i === len ? 1 : 0;
     if(a)
      var b = a;
     else{
      var c = caml_call1(f, caml_string_get(s, i));
      if(c){var i$0 = Base_Import[91].call(null, i, 1); i = i$0; continue;}
      var b = c;
     }
     return b;
    }
   }
   function fold(t, init, f){
    var len = caml_ml_string_length(t), i = 0, ac = init;
    for(;;){
     if(i === len) return ac;
     var
      ac$0 = caml_call2(f, ac, caml_string_get(t, i)),
      i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     ac = ac$0;
    }
   }
   function foldi(t, init, f){
    var len = caml_ml_string_length(t), i = 0, ac = init;
    for(;;){
     if(i === len) return ac;
     var
      ac$0 = caml_call3(f, i, ac, caml_string_get(t, i)),
      i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
     ac = ac$0;
    }
   }
   function iteri(t, f){
    var a = Base_Import[93].call(null, caml_ml_string_length(t), 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(t, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function count(t, f){return Base_Container[2].call(null, fold, t, f);}
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function min_elt(t){
    var a = Base_Container[3];
    return function(b){return a(fold, t, b);};
   }
   function max_elt(t){
    var a = Base_Container[4];
    return function(b){return a(fold, t, b);};
   }
   function fold_result(t, init, f){
    return Base_Container[8].call(null, fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return Base_Container[9].call(null, fold, init, f, finish, t);
   }
   function find_mapi(t, f){
    return Base_Indexed_container[7].call(null, iteri, t, f);
   }
   function findi(t, f){
    return Base_Indexed_container[6].call(null, iteri, t, f);
   }
   function counti(t, f){
    return Base_Indexed_container[3].call(null, foldi, t, f);
   }
   function for_alli(t, f){
    return Base_Indexed_container[5].call(null, iteri, t, f);
   }
   function existsi(t, f){
    return Base_Indexed_container[4].call(null, iteri, t, f);
   }
   function mem(t, c){
    var len = caml_ml_string_length(t), i = 0;
    for(;;){
     var a = i < len ? 1 : 0;
     if(a){
      var b = Base_Char[16].call(null, c, caml_string_unsafe_get(t, i));
      if(! b){var i$0 = Base_Import[91].call(null, i, 1); i = i$0; continue;}
      var d = b;
     }
     else
      var d = a;
     return d;
    }
   }
   function tr(target, replacement, s){
    return Base_Char[16].call(null, target, replacement)
            ? s
            : mem
               (s, target)
              ? map
                (s,
                 function(c){
                  return Base_Char[16].call(null, c, target) ? replacement : c;
                 })
              : s;
   }
   function tr_multi(target, replacement){
    if(is_empty(target)) return stage(function(a){return a;});
    if(is_empty(replacement))
     return Base_Import[126].call(null, cst_tr_multi_replacement_is_em);
    var match = Base_Bytes_tr[1].call(null, target, replacement);
    if(! match) return stage(function(a){return a;});
    var tr_map = match[1];
    return stage
            (function(s){
              var len = caml_ml_string_length(s), i$0 = 0;
              for(;;){
               var d = i$0 < len ? 1 : 0;
               if(! d){var b = d; break;}
               var
                c = caml_string_get(s, i$0),
                e =
                  caml_string_unsafe_get(tr_map, Base_Char[32].call(null, c)),
                a = Base_Char[15].call(null, c, e);
               if(a){var b = a; break;}
               var i = Base_Import[91].call(null, i$0, 1);
               i$0 = i;
              }
              return b
                      ? map
                        (s,
                         function(c){
                          return caml_string_unsafe_get
                                  (tr_map, Base_Char[32].call(null, c));
                         })
                      : s;
             });
   }
   function concat_array(sep, ar){
    return concat(sep, Base_Array0[16].call(null, ar));
   }
   function concat_map(sep, s, f){
    var a = to_array(s);
    return concat_array(sep, Base_Array0[21].call(null, a, f));
   }
   function concat_mapi(sep, t, f){
    var a = to_array(t);
    return concat_array(sep, Base_Array0[22].call(null, a, f));
   }
   function concat_lines(opt, lines$3){
    var
     crlf = opt ? opt[1] : 0,
     newline_len = crlf ? 2 : 1,
     lines = lines$3,
     sum = 0;
    for(;;){
     if(! lines) break;
     var
      lines$0 = lines[2],
      line = lines[1],
      a = Base_Import[91].call(null, sum, caml_ml_string_length(line)),
      sum$0 = Base_Import[91].call(null, a, newline_len);
     lines = lines$0;
     sum = sum$0;
    }
    var buf = Base_Bytes0[7].call(null, sum), lines$1 = lines$3, written = 0;
    for(;;){
     if(! lines$1){
      if(written === sum) return caml_string_of_bytes(buf);
      throw caml_maybe_attach_backtrace([0, Assert_failure, B], 1);
     }
     var lines$2 = lines$1[2], line$0 = lines$1[1];
     caml_blit_string(line$0, 0, buf, written, caml_ml_string_length(line$0));
     var
      pos = Base_Import[91].call(null, written, caml_ml_string_length(line$0)),
      pos$0 =
        crlf
         ? (caml_bytes_unsafe_set
            (buf, pos, 13),
           Base_Import[91].call(null, pos, 1))
         : pos;
     caml_bytes_unsafe_set(buf, pos$0, 10);
     var pos$1 = Base_Import[91].call(null, pos$0, 1);
     lines$1 = lines$2;
     written = pos$1;
    }
   }
   function filter(t, f){
    var n = caml_ml_string_length(t), i = [0, 0];
    for(;;){
     if(i[1] >= n) break;
     if(! caml_call1(f, caml_string_get(t, i[1]))) break;
     i[1]++;
    }
    if(i[1] === n) return t;
    var
     a = Base_Import[93].call(null, n, 1),
     out = Base_Bytes0[7].call(null, a);
    Base_Bytes0[4].call(null, t, 0, out, 0, i[1]);
    var out_pos = [0, i[1]];
    i[1]++;
    for(;;){
     if(i[1] >= n){
      var
       out$0 = caml_string_of_bytes(out),
       b = Base_Import[93].call(null, n, 1);
      return out_pos[1] === b ? out$0 : sub(out$0, 0, out_pos[1]);
     }
     var c = caml_string_get(t, i[1]);
     if(caml_call1(f, c)){caml_bytes_set(out, out_pos[1], c); out_pos[1]++;}
     i[1]++;
    }
   }
   function filteri(t, f){
    var n = caml_ml_string_length(t), i = [0, 0];
    for(;;){
     if(i[1] >= n) break;
     var a = caml_string_get(t, i[1]);
     if(! caml_call2(f, i[1], a)) break;
     i[1]++;
    }
    if(i[1] === n) return t;
    var
     b = Base_Import[93].call(null, n, 1),
     out = Base_Bytes0[7].call(null, b);
    Base_Bytes0[4].call(null, t, 0, out, 0, i[1]);
    var out_pos = [0, i[1]];
    i[1]++;
    for(;;){
     if(i[1] >= n){
      var
       out$0 = caml_string_of_bytes(out),
       d = Base_Import[93].call(null, n, 1);
      return out_pos[1] === d ? out$0 : sub(out$0, 0, out_pos[1]);
     }
     var c = caml_string_get(t, i[1]);
     if(caml_call2(f, i[1], c)){
      caml_bytes_set(out, out_pos[1], c);
      out_pos[1]++;
     }
     i[1]++;
    }
   }
   function chop_prefix(s, prefix){
    return is_prefix$0(s, prefix)
            ? [0, drop_prefix(s, caml_ml_string_length(prefix))]
            : 0;
   }
   function chop_prefix_if_exists(s, prefix){
    return is_prefix$0(s, prefix)
            ? drop_prefix(s, caml_ml_string_length(prefix))
            : s;
   }
   function chop_prefix_exn(s, prefix){
    var match = chop_prefix(s, prefix);
    if(! match) return caml_call3(invalid_argf(C), s, prefix, 0);
    var str = match[1];
    return str;
   }
   function chop_suffix(s, suffix){
    return is_suffix$0(s, suffix)
            ? [0, drop_suffix(s, caml_ml_string_length(suffix))]
            : 0;
   }
   function chop_suffix_if_exists(s, suffix){
    return is_suffix$0(s, suffix)
            ? drop_suffix(s, caml_ml_string_length(suffix))
            : s;
   }
   function chop_suffix_exn(s, suffix){
    var match = chop_suffix(s, suffix);
    if(! match) return caml_call3(invalid_argf(D), s, suffix, 0);
    var str = match[1];
    return str;
   }
   function shorter(a, b){
    return caml_ml_string_length(a) <= caml_ml_string_length(b) ? a : b;
   }
   function shortest(list){
    if(! list) return cst$5;
    var rest = list[2], first = list[1];
    return Base_List[20].call(null, rest, first, shorter);
   }
   function pos_from_left(param, i){return i;}
   function pos_from_right(t, i){
    var a = Base_Import[93].call(null, caml_ml_string_length(t), i);
    return Base_Import[93].call(null, a, 1);
   }
   function common_generic2_length_loop(a, b, get_pos, max_len, len_so_far$1){
    var len_so_far = len_so_far$1;
    for(;;){
     if(max_len <= len_so_far) return max_len;
     var
      c = caml_string_unsafe_get(b, caml_call2(get_pos, b, len_so_far)),
      d = caml_string_unsafe_get(a, caml_call2(get_pos, a, len_so_far));
     if(! Base_Char[16].call(null, d, c)) return len_so_far;
     var len_so_far$0 = Base_Import[91].call(null, len_so_far, 1);
     len_so_far = len_so_far$0;
    }
   }
   function common_generic2_length(a, b, get_pos){
    var
     max_len =
       Base_Import[101].call
        (null, caml_ml_string_length(a), caml_ml_string_length(b));
    return common_generic2_length_loop(a, b, get_pos, max_len, 0);
   }
   function common_generic_length_loop(first$0, list$0, get_pos, max_len$1){
    var first = first$0, list = list$0, max_len = max_len$1;
    for(;;){
     if(! list) return max_len;
     var
      rest = list[2],
      second = list[1],
      max_len$0 =
        common_generic2_length_loop(first, second, get_pos, max_len, 0);
     first = second;
     list = rest;
     max_len = max_len$0;
    }
   }
   function common_generic_length(list, get_pos){
    if(! list) return 0;
    var
     rest = list[2],
     first = list[1],
     max_len = caml_ml_string_length(shortest(list));
    return common_generic_length_loop(first, rest, get_pos, max_len);
   }
   function common_generic2(a, b, get_pos, take){
    var len = common_generic2_length(a, b, get_pos);
    return caml_call2(take, shorter(a, b), len);
   }
   function common_generic(list, get_pos, take){
    if(! list) return cst$7;
    var
     rest = list[2],
     first = list[1],
     s = shortest(list),
     max_len = caml_ml_string_length(s);
    if(0 === max_len) return cst$6;
    var len = common_generic_length_loop(first, rest, get_pos, max_len);
    return caml_call2(take, s, len);
   }
   function common_prefix(list){
    return common_generic(list, pos_from_left, prefix);
   }
   function common_suffix(list){
    return common_generic(list, pos_from_right, suffix);
   }
   function common_prefix2(a, b){
    return common_generic2(a, b, pos_from_left, prefix);
   }
   function common_suffix2(a, b){
    return common_generic2(a, b, pos_from_right, suffix);
   }
   function common_prefix_length(list){
    return common_generic_length(list, pos_from_left);
   }
   function common_suffix_length(list){
    return common_generic_length(list, pos_from_right);
   }
   function common_prefix2_length(a, b){
    return common_generic2_length(a, b, pos_from_left);
   }
   function common_suffix2_length(a, b){
    return common_generic2_length(a, b, pos_from_right);
   }
   function pp(ppf, string){
    return caml_call1(Stdlib_Format[139].call(null, ppf)(E), string);
   }
   function of_char(c){return make(1, c);}
   function of_char_list(l){
    var a = Base_List[45].call(null, l), t = Base_Bytes0[7].call(null, a);
    Base_List[34].call
     (null, l, function(i, c){return caml_bytes_set(t, i, c);});
    return caml_string_of_bytes(t);
   }
   function of_array(a){
    return init
            (a.length - 1, function(b){return caml_check_bound(a, b)[b + 1];});
   }
   function to_sequence(t){
    var len = caml_ml_string_length(t);
    return Base_Sequence[44].call
            (null,
             0,
             function(pos){
              return len <= pos
                      ? 0
                      : [1,
                        caml_string_unsafe_get(t, pos),
                        Base_Import[91].call(null, pos, 1)];
             });
   }
   function of_sequence(s){
    return of_char_list(Base_Sequence[20].call(null, s));
   }
   function pad_right(opt, s, len){
    var char = opt ? opt[1] : 32, src_len = caml_ml_string_length(s);
    if(len <= src_len) return s;
    var res = Base_Bytes0[7].call(null, len);
    Base_Bytes0[4].call(null, s, 0, res, 0, src_len);
    var a = Base_Import[93].call(null, len, src_len);
    Base_Bytes0[15].call(null, res, src_len, a, char);
    return caml_string_of_bytes(res);
   }
   function pad_left(opt, s, len){
    var char = opt ? opt[1] : 32, src_len = caml_ml_string_length(s);
    if(len <= src_len) return s;
    var
     res = Base_Bytes0[7].call(null, len),
     a = Base_Import[93].call(null, len, src_len);
    Base_Bytes0[4].call(null, s, 0, res, a, src_len);
    var b = Base_Import[93].call(null, len, src_len);
    Base_Bytes0[15].call(null, res, 0, b, char);
    return caml_string_of_bytes(res);
   }
   function local_copy_prefix(src, prefix_len, buffer_len){
    var dst = Base_Bytes0[14].call(null, buffer_len);
    caml_blit_string(src, 0, dst, 0, prefix_len);
    return dst;
   }
   function local_copy_to_string(buf, pos){
    var str = caml_string_of_bytes(buf);
    return unsafe_sub(str, 0, pos);
   }
   function filter_mapi(src, f){
    var src_len = caml_ml_string_length(src), pos = 0;
    for(;;){
     if(pos === src_len) return src;
     var
      c1 = caml_string_unsafe_get(src, pos),
      src_pos$0 = Base_Int0[8].call(null, pos),
      option = caml_call2(f, pos, c1);
     if(! option) break;
     var c2 = option[1];
     if(! Base_Char[16].call(null, c1, c2)) break;
     pos = src_pos$0;
    }
    var copy = local_copy_prefix(src, pos, src_len);
    if(option){
     var c$0 = option[1];
     caml_bytes_unsafe_set(copy, pos, c$0);
     var dst_pos$0 = src_pos$0;
    }
    else
     var dst_pos$0 = pos;
    var dst_pos = [0, dst_pos$0], a = Base_Import[93].call(null, src_len, 1);
    if(a >= src_pos$0){
     var src_pos = src_pos$0;
     for(;;){
      var
       match = caml_call2(f, src_pos, caml_string_unsafe_get(src, src_pos));
      if(match){
       var c = match[1];
       caml_bytes_unsafe_set(copy, dst_pos[1], c);
       dst_pos[1]++;
      }
      var b = src_pos + 1 | 0;
      if(a === src_pos) break;
      src_pos = b;
     }
    }
    return local_copy_to_string(copy, dst_pos[1]);
   }
   function filter_map(t, f){
    return filter_mapi(t, function(param, c){return caml_call1(f, c);});
   }
   function partition_map_difference
   (src, f, len, src_pos$0, fst_pos$0, snd_pos$0, either){
    var
     fsts = local_copy_prefix(src, fst_pos$0, len),
     snds = local_copy_prefix(src, snd_pos$0, len);
    if(0 === either[0]){
     var c$1 = either[1];
     caml_bytes_unsafe_set(fsts, fst_pos$0, c$1);
     var
      snd_pos$1 = snd_pos$0,
      fst_pos$1 = Base_Import[91].call(null, fst_pos$0, 1);
    }
    else{
     var c$2 = either[1];
     caml_bytes_unsafe_set(snds, snd_pos$0, c$2);
     var
      snd_pos$2 = Base_Import[91].call(null, snd_pos$0, 1),
      snd_pos$1 = snd_pos$2,
      fst_pos$1 = fst_pos$0;
    }
    var
     src_pos$1 = Base_Import[91].call(null, src_pos$0, 1),
     fst_pos = [0, fst_pos$1],
     snd_pos = [0, snd_pos$1],
     a = Base_Import[93].call(null, len, 1);
    if(a >= src_pos$1){
     var src_pos = src_pos$1;
     for(;;){
      var match = caml_call1(f, caml_string_unsafe_get(src, src_pos));
      if(0 === match[0]){
       var c = match[1];
       caml_bytes_unsafe_set(fsts, fst_pos[1], c);
       fst_pos[1]++;
      }
      else{
       var c$0 = match[1];
       caml_bytes_unsafe_set(snds, snd_pos[1], c$0);
       snd_pos[1]++;
      }
      var d = src_pos + 1 | 0;
      if(a === src_pos) break;
      src_pos = d;
     }
    }
    var b = local_copy_to_string(snds, snd_pos[1]);
    return [0, local_copy_to_string(fsts, fst_pos[1]), b];
   }
   function partition_map(src, f){
    var len = caml_ml_string_length(src);
    if(0 === len) return F;
    var c1$1 = caml_string_unsafe_get(src, 0), either$1 = caml_call1(f, c1$1);
    if(0 === either$1[0]){
     var c2$1 = either$1[1];
     if(Base_Char[16].call(null, c1$1, c2$1)){
      var pos = 1;
      for(;;){
       if(pos === len) return [0, src, cst$8];
       var c1 = caml_string_unsafe_get(src, pos), either = caml_call1(f, c1);
       if(0 === either[0]){
        var c2 = either[1];
        if(Base_Char[16].call(null, c1, c2)){
         var pos$0 = Base_Import[91].call(null, pos, 1);
         pos = pos$0;
         continue;
        }
       }
       return partition_map_difference(src, f, len, pos, pos, 0, either);
      }
     }
    }
    else{
     var c2$2 = either$1[1];
     if(Base_Char[16].call(null, c1$1, c2$2)){
      var pos$1 = 1;
      for(;;){
       if(pos$1 === len) return [0, cst$9, src];
       var
        c1$0 = caml_string_unsafe_get(src, pos$1),
        either$0 = caml_call1(f, c1$0);
       if(0 !== either$0[0]){
        var c2$0 = either$0[1];
        if(Base_Char[16].call(null, c1$0, c2$0)){
         var pos$2 = Base_Import[91].call(null, pos$1, 1);
         pos$1 = pos$2;
         continue;
        }
       }
       return partition_map_difference(src, f, len, pos$1, 0, pos$1, either$0);
      }
     }
    }
    return partition_map_difference(src, f, len, 0, 0, 0, either$1);
   }
   function partition_tf(t, f){
    return partition_map
            (t, function(c){return caml_call1(f, c) ? [0, c] : [1, c];});
   }
   function edit_distance(s2, s1){
    if(caml_ml_string_length(s2) <= caml_ml_string_length(s1))
     var s2$0 = s1, s1$0 = s2;
    else
     var s2$0 = s2, s1$0 = s1;
    var
     o = Base_Import[91].call(null, 1, caml_ml_string_length(s1$0)),
     p = Base_Import[88].call(null, 2, o),
     table = Base_Array0[5].call(null, p, 0);
    function at(i, j){
     var
      a = Base_Import[122].call(null, j, 2),
      b = Base_Import[88].call(null, i, 2);
     return Base_Import[91].call(null, b, a);
    }
    var a = caml_ml_string_length(s1$0), q = 1;
    if(a >= 1){
     var i$0 = q;
     for(;;){
      var n = at(i$0, 0);
      caml_check_bound(table, n)[n + 1] = i$0;
      var D = i$0 + 1 | 0;
      if(a === i$0) break;
      i$0 = D;
     }
    }
    var b = caml_ml_string_length(s2$0), r = 1;
    if(b >= 1){
     var j = r;
     for(;;){
      var d = at(0, j);
      caml_check_bound(table, d)[d + 1] = j;
      var e = caml_ml_string_length(s1$0), s = 1;
      if(e >= 1){
       var i = s;
       for(;;){
        var
         u = caml_string_get(s2$0, Base_Import[93].call(null, j, 1)),
         v = caml_string_get(s1$0, Base_Import[93].call(null, i, 1));
        if(Base_Char[16].call(null, v, u)){
         var
          w = Base_Import[93].call(null, j, 1),
          f = at(Base_Import[93].call(null, i, 1), w),
          x = caml_check_bound(table, f)[f + 1],
          g = at(i, j);
         caml_check_bound(table, g)[g + 1] = x;
        }
        else{
         var
          z = Base_Import[93].call(null, j, 1),
          h = at(Base_Import[93].call(null, i, 1), z),
          sub = caml_check_bound(table, h)[h + 1],
          k = at(Base_Import[93].call(null, i, 1), j),
          add = caml_check_bound(table, k)[k + 1],
          l = at(i, Base_Import[93].call(null, j, 1)),
          del = caml_check_bound(table, l)[l + 1],
          A = Base_Import[101].call(null, add, del),
          B = Base_Import[101].call(null, sub, A),
          C = Base_Import[91].call(null, 1, B),
          m = at(i, j);
         caml_check_bound(table, m)[m + 1] = C;
        }
        var y = i + 1 | 0;
        if(e === i) break;
        i = y;
       }
      }
      var t = j + 1 | 0;
      if(b === j) break;
      j = t;
     }
    }
    var c = at(caml_ml_string_length(s1$0), caml_ml_string_length(s2$0));
    return caml_check_bound(table, c)[c + 1];
   }
   function build_and_validate_escapeworth
   (escapeworthy_map, escape_char, func){
    var
     escapeworthy_map$0 =
       caml_call3
         (Base_List[137][7], escapeworthy_map, Base_Char[16], escape_char)
        ? escapeworthy_map
        : [0, [0, escape_char, escape_char], escapeworthy_map],
     arr = Base_Array0[4].call(null, 256, -1),
     vals = Base_Array0[4].call(null, 256, 0),
     param = escapeworthy_map$0;
    for(;;){
     if(! param) return [0, arr];
     var l = param[2], match = param[1], c_to = match[2], c_from = match[1];
     if(919809722 <= func)
      var v = c_from, k = Base_Char[32].call(null, c_to);
     else
      var k$0 = Base_Char[32].call(null, c_from), v = c_to, k = k$0;
     if(-1 !== caml_check_bound(arr, k)[k + 1]) break;
     var a = Base_Char[32].call(null, v);
     if(caml_check_bound(vals, a)[a + 1]) break;
     var j = Base_Char[32].call(null, v);
     caml_check_bound(arr, k)[k + 1] = j;
     var b = Base_Char[32].call(null, v);
     caml_check_bound(vals, b)[b + 1] = 1;
     param = l;
    }
    var
     c = Base_Import[138],
     d = Base_Import[138],
     e = Base_Import[147],
     f =
       [0,
        [0,
         cst_escapeworthy_map,
         Base_Import[149].call
          (null, function(a){return e(d, c, a);}, escapeworthy_map$0)],
        0],
     g = [0, [0, cst_c_to, Base_Import[138].call(null, c_to)], f],
     h = [0, [0, cst_c_from, Base_Import[138].call(null, c_from)], g],
     i = Base_Sexp[10].call(null, cst_escapeworthy_map_not_one_t, h);
    return Base_Or_error[39].call(null, i);
   }
   function escape_gen(escapeworthy_map, escape_char){
    var
     x =
       build_and_validate_escapeworth
        (escapeworthy_map, escape_char, 258914209);
    if(0 !== x[0]) return x;
    var escapeworthy = x[1];
    return [0,
            function(src){
             var
              to_escape_len = [0, 0],
              len$0 = caml_ml_string_length(src),
              to_escape$0 = 0,
              i$0 = 0;
             for(;;){
              if(i$0 === len$0) break;
              var
               c = caml_string_get(src, i$0),
               a = Base_Char[32].call(null, c),
               n = caml_check_bound(escapeworthy, a)[a + 1],
               ac =
                 -1 === n
                  ? to_escape$0
                  : (to_escape_len
                     [1]++,
                    [0, [0, i$0, Base_Char[35].call(null, n)], to_escape$0]),
               i = Base_Import[91].call(null, i$0, 1);
              to_escape$0 = ac;
              i$0 = i;
             }
             if(! to_escape$0) return src;
             var
              last_idx = caml_ml_string_length(src),
              last_dst_pos =
                Base_Import[91].call(null, last_idx, to_escape_len[1]),
              dst = Base_Bytes0[7].call(null, last_dst_pos),
              last_idx$0 = last_idx,
              last_dst_pos$0 = last_dst_pos,
              param = to_escape$0;
             for(;;){
              if(! param){
               Base_Bytes0[4].call(null, src, 0, dst, 0, last_idx$0);
               return caml_string_of_bytes(dst);
              }
              var
               to_escape = param[2],
               match = param[1],
               escaped_char = match[2],
               last_idx$1 = match[1],
               b = Base_Import[93].call(null, last_idx$0, last_idx$1),
               len = Base_Import[93].call(null, b, 1),
               dst_pos = Base_Import[93].call(null, last_dst_pos$0, len),
               d = Base_Import[91].call(null, last_idx$1, 1);
              Base_Bytes0[4].call(null, src, d, dst, dst_pos, len);
              var last_dst_pos$1 = Base_Import[93].call(null, dst_pos, 2);
              caml_bytes_set(dst, last_dst_pos$1, escape_char);
              caml_bytes_set
               (dst,
                Base_Import[91].call(null, last_dst_pos$1, 1),
                escaped_char);
              last_idx$0 = last_idx$1;
              last_dst_pos$0 = last_dst_pos$1;
              param = to_escape;
             }
            }];
   }
   function escape_gen_exn(escapeworthy_map, escape_char){
    var a = escape_gen(escapeworthy_map, escape_char);
    return stage(Base_Or_error[34].call(null, a));
   }
   function escape(escapeworthy, escape_char){
    var
     a = Base_List[126].call(null, escapeworthy, Base_Char[17]),
     escapeworthy_map =
       Base_List[53].call(null, a, function(c){return [0, c, c];});
    return escape_gen_exn(escapeworthy_map, escape_char);
   }
   function unescape_gen(escapeworthy_map, escape_char){
    var
     x =
       build_and_validate_escapeworth
        (escapeworthy_map, escape_char, 919809722);
    if(0 !== x[0]) return x;
    var escapeworthy = x[1];
    return [0,
            function(src){
             var i = 0, status = -512962225, to_unescape = 0;
             for(;;){
              if(caml_ml_string_length(src) <= i) break;
              if(-512962225 <= status)
               var
                a = caml_string_get(src, i),
                status$0 =
                  Base_Char[16].call(null, a, escape_char)
                   ? -767030498
                   : -512962225;
              else
               var status$0 = -244189789;
              var
               acc =
                 -512962225 <= status$0 ? to_unescape : [0, i, to_unescape],
               i$0 = Base_Import[91].call(null, i, 1);
              i = i$0;
              status = status$0;
              to_unescape = acc;
             }
             if(! to_unescape) return src;
             var
              to_unescape$0 = to_unescape[2],
              idx = to_unescape[1],
              b = Base_List[45].call(null, to_unescape),
              c = Base_Import[93].call(null, caml_ml_string_length(src), b),
              dst = Base_Bytes0[7].call(null, c);
             function loop(last_idx$1, last_dst_pos$1, param$0){
              var
               last_idx = last_idx$1,
               last_dst_pos = last_dst_pos$1,
               param = param$0;
              for(;;){
               if(! param)
                return Base_Bytes0[4].call(null, src, 0, dst, 0, last_idx);
               var
                to_unescape = param[2],
                last_idx$0 = param[1],
                b = Base_Import[93].call(null, last_idx, last_idx$0),
                len = Base_Import[93].call(null, b, 2),
                dst_pos = Base_Import[93].call(null, last_dst_pos, len),
                c = Base_Import[91].call(null, last_idx$0, 2);
               Base_Bytes0[4].call(null, src, c, dst, dst_pos, len);
               var
                last_dst_pos$0 = Base_Import[93].call(null, dst_pos, 1),
                d =
                  caml_string_get
                   (src, Base_Import[91].call(null, last_idx$0, 1)),
                a = Base_Char[32].call(null, d),
                n = caml_check_bound(escapeworthy, a)[a + 1],
                e =
                  -1 === n
                   ? caml_string_get
                     (src, Base_Import[91].call(null, last_idx$0, 1))
                   : Base_Char[35].call(null, n);
               caml_bytes_set(dst, last_dst_pos$0, e);
               last_idx = last_idx$0;
               last_dst_pos = last_dst_pos$0;
               param = to_unescape;
              }
             }
             if
              (idx < Base_Import[93].call(null, caml_ml_string_length(src), 1))
              loop
               (caml_ml_string_length(src),
                caml_ml_bytes_length(dst),
                to_unescape);
             else
              loop
               (Base_Import[93].call(null, caml_ml_string_length(src), 1),
                caml_ml_bytes_length(dst),
                to_unescape$0);
             return caml_string_of_bytes(dst);
            }];
   }
   function unescape_gen_exn(escapeworthy_map, escape_char){
    var a = unescape_gen(escapeworthy_map, escape_char);
    return stage(Base_Or_error[34].call(null, a));
   }
   function unescape(escape_char){return unescape_gen_exn(0, escape_char);}
   function preceding_escape_chars(str, escape_char, pos){
    var p$1 = Base_Import[93].call(null, pos, 1), p = p$1, cnt = 0;
    for(;;){
     if(0 <= p){
      var a = caml_string_get(str, p);
      if(! Base_Char[15].call(null, a, escape_char)){
       var
        cnt$0 = Base_Import[91].call(null, cnt, 1),
        p$0 = Base_Import[93].call(null, p, 1);
       p = p$0;
       cnt = cnt$0;
       continue;
      }
     }
     return cnt;
    }
   }
   function update_escape_status(str, escape_char, i, param){
    if(-512962225 > param) return -244189789;
    var a = caml_string_get(str, i);
    return Base_Char[16].call(null, a, escape_char) ? -767030498 : -512962225;
   }
   function escape_status(str, escape_char, pos){
    var
     a = preceding_escape_chars(str, escape_char, pos),
     odd = 1 === Base_Import[122].call(null, a, 2) ? 1 : 0,
     b = caml_string_get(str, pos),
     match = Base_Char[16].call(null, b, escape_char);
    return odd ? -244189789 : match ? -767030498 : -512962225;
   }
   function check_bound(str, pos, function_name){
    var
     b = caml_ml_string_length(str) <= pos ? 1 : 0,
     a = b || (pos < 0 ? 1 : 0);
    return a ? caml_call2(invalid_argf(G), function_name, 0) : a;
   }
   function is_char_escaping(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_escaping);
    return -512962225 <= escape_status(str, escape_char, pos) ? 0 : 1;
   }
   function is_char_escaped(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_escaped);
    return -244189789 <= escape_status(str, escape_char, pos) ? 1 : 0;
   }
   function is_char_literal(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_literal);
    return -512962225 === escape_status(str, escape_char, pos) ? 1 : 0;
   }
   function index_from$0(str, escape_char, pos, char){
    check_bound(str, pos, cst_index_from);
    var
     status$1 = escape_status(str, escape_char, pos),
     i = pos,
     status = status$1;
    for(;;){
     if(pos <= i){
      var a = -512962225 === status ? 1 : 0;
      if(a){
       var b = caml_string_get(str, i);
       if(Base_Char[16].call(null, b, char)) return [0, i];
      }
     }
     var i$0 = Base_Import[91].call(null, i, 1);
     if(caml_ml_string_length(str) <= i$0) return 0;
     var status$0 = update_escape_status(str, escape_char, i$0, status);
     i = i$0;
     status = status$0;
    }
   }
   function index_from_exn$0(str, escape_char, pos, char){
    var match = index_from$0(str, escape_char, pos, char);
    if(match){var pos$0 = match[1]; return pos$0;}
    var
     a = [0, [0, cst_char, Base_Import[138].call(null, char)], 0],
     b = [0, [0, cst_pos, Base_Import[139].call(null, pos)], a],
     c =
       [0, [0, cst_escape_char, Base_Import[138].call(null, escape_char)], b],
     d = [0, [0, cst_str, sexp_of_t(str)], c];
    return raise_s(Base_Sexp[10].call(null, cst_index_from_exn_not_found, d));
   }
   function index$1(str, escape_char, char){
    return index_from$0(str, escape_char, 0, char);
   }
   function index_exn$1(str, escape_char, char){
    return index_from_exn$0(str, escape_char, 0, char);
   }
   function rindex_from$0(str, escape_char, pos, char){
    check_bound(str, pos, cst_rindex_from);
    if(Base_Char[16].call(null, char, escape_char)) return 0;
    var pos$0 = pos;
    for(;;){
     if(0 > pos$0) return 0;
     var escape_chars = preceding_escape_chars(str, escape_char, pos$0);
     if(0 === Base_Import[122].call(null, escape_chars, 2)){
      var a = caml_string_get(str, pos$0);
      if(Base_Char[16].call(null, a, char)) return [0, pos$0];
     }
     var
      b = Base_Import[93].call(null, pos$0, escape_chars),
      pos$1 = Base_Import[93].call(null, b, 1);
     pos$0 = pos$1;
    }
   }
   function rindex_from_exn$0(str, escape_char, pos, char){
    var match = rindex_from$0(str, escape_char, pos, char);
    if(match){var pos$0 = match[1]; return pos$0;}
    var
     a = [0, [0, cst_char$0, Base_Import[138].call(null, char)], 0],
     b = [0, [0, cst_pos$0, Base_Import[139].call(null, pos)], a],
     c =
       [0,
        [0, cst_escape_char$0, Base_Import[138].call(null, escape_char)],
        b],
     d = [0, [0, cst_str$0, sexp_of_t(str)], c];
    return raise_s(Base_Sexp[10].call(null, cst_rindex_from_exn_not_found, d));
   }
   function rindex$0(str, escape_char, char){
    return is_empty(str)
            ? 0
            : rindex_from$0
              (str,
               escape_char,
               Base_Import[93].call(null, caml_ml_string_length(str), 1),
               char);
   }
   function rindex_exn$0(str, escape_char, char){
    return rindex_from_exn$0
            (str,
             escape_char,
             Base_Import[93].call(null, caml_ml_string_length(str), 1),
             char);
   }
   function split_gen$0(str, escape_char, on){
    var variant = on[1];
    if(552554919 <= variant)
     var l = on[2], is_delim = function(c){return char_list_mem(l, c);};
    else
     var
      c = on[2],
      is_delim = function(c$0){return Base_Char[16].call(null, c$0, c);};
    var
     len = caml_ml_string_length(str),
     acc = 0,
     status = -512962225,
     last_pos = 0,
     pos = 0;
    for(;;){
     if(pos === len){
      var
       a =
         [0,
          sub(str, last_pos, Base_Import[93].call(null, len, last_pos)),
          acc];
      return Base_List[63].call(null, a);
     }
     var
      status$0 = update_escape_status(str, escape_char, pos, status),
      b = -512962225 === status$0 ? 1 : 0;
     if(b && is_delim(caml_string_get(str, pos))){
      var
       sub_str = sub(str, last_pos, Base_Import[93].call(null, pos, last_pos)),
       pos$0 = Base_Import[91].call(null, pos, 1),
       last_pos$0 = Base_Import[91].call(null, pos, 1),
       acc$0 = [0, sub_str, acc];
      acc = acc$0;
      status = status$0;
      last_pos = last_pos$0;
      pos = pos$0;
      continue;
     }
     var pos$1 = Base_Import[91].call(null, pos, 1);
     status = status$0;
     pos = pos$1;
    }
   }
   function split$0(str, on){
    var a = [0, -1044422954, on];
    return function(b){return split_gen$0(str, b, a);};
   }
   function split_on_chars$0(str, chars){
    var a = [0, 552554919, chars];
    return function(b){return split_gen$0(str, b, a);};
   }
   function split_at(str, pos){
    var
     a = Base_Import[93].call(null, caml_ml_string_length(str), pos),
     b = Base_Import[93].call(null, a, 1),
     c = sub(str, Base_Import[91].call(null, pos, 1), b);
    return [0, sub(str, 0, pos), c];
   }
   function lsplit2$0(str, on, escape_char){
    var a = index$1(str, escape_char, on);
    return caml_call2
            (Base_Option[24], a, function(x){return split_at(str, x);});
   }
   function rsplit2$0(str, on, escape_char){
    var a = rindex$0(str, escape_char, on);
    return caml_call2
            (Base_Option[24], a, function(x){return split_at(str, x);});
   }
   function lsplit2_exn$0(str, on, escape_char){
    return split_at(str, index_exn$1(str, escape_char, on));
   }
   function rsplit2_exn$0(str, on, escape_char){
    return split_at(str, rindex_exn$0(str, escape_char, on));
   }
   function last_non_drop_literal(drop, escape_char, t){
    return rfindi
            (0,
             t,
             function(i, c){
              var a = 1 - caml_call1(drop, c);
              if(a)
               var b = a;
              else{
               var d = is_char_escaping(t, escape_char, i);
               if(! d) return is_char_escaped(t, escape_char, i);
               var b = d;
              }
              return b;
             });
   }
   function first_non_drop_literal(drop, escape_char, t){
    return lfindi
            (0,
             t,
             function(i, c){
              var a = 1 - caml_call1(drop, c);
              if(a)
               var b = a;
              else{
               var d = is_char_escaping(t, escape_char, i);
               if(! d) return is_char_escaped(t, escape_char, i);
               var b = d;
              }
              return b;
             });
   }
   function rstrip_literal(opt, t, escape_char){
    var
     drop = opt ? opt[1] : Base_Char[45],
     match = last_non_drop_literal(drop, escape_char, t);
    if(! match) return cst$10;
    var i = match[1];
    return i === Base_Import[93].call(null, caml_ml_string_length(t), 1)
            ? t
            : prefix(t, Base_Import[91].call(null, i, 1));
   }
   function lstrip_literal(opt, t, escape_char){
    var
     drop = opt ? opt[1] : Base_Char[45],
     match = first_non_drop_literal(drop, escape_char, t);
    if(! match) return cst$11;
    var n = match[1];
    return 0 === n ? t : drop_prefix(t, n);
   }
   function strip_literal(opt, t, escape_char){
    var
     drop = opt ? opt[1] : Base_Char[45],
     length = caml_ml_string_length(t);
    a:
    if(0 !== length){
     if
      (!
       caml_call1(drop, caml_string_get(t, 0))
       &&
        !
        caml_call1
         (drop, caml_string_get(t, Base_Import[93].call(null, length, 1))))
      break a;
     var match = first_non_drop_literal(drop, escape_char, t);
     if(! match) return cst$12;
     var
      first = match[1],
      match$0 = last_non_drop_literal(drop, escape_char, t);
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, H], 1);
     var last = match$0[1], a = Base_Import[93].call(null, last, first);
     return sub(t, first, Base_Import[91].call(null, a, 1));
    }
    return t;
   }
   function between$0(t, low, high){
    var a = Base_Import[109][2].call(null, low, t);
    return a ? Base_Import[109][2].call(null, t, high) : a;
   }
   function clamp_unchecked(t, min, max){
    return Base_Import[109][1].call(null, t, min)
            ? min
            : Base_Import[109][2].call(null, t, max) ? t : max;
   }
   function clamp_exn$0(t, min, max){
    if(Base_Import[109][2].call(null, min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, I], 1);
   }
   function clamp$0(t, min, max){
    if(! Base_Import[109][5].call(null, min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function create$0(opt, pattern){
    var case_sensitive = opt ? opt[1] : 1;
    return create(pattern, case_sensitive);
   }
   function Make_utf(Format){
    var
     codec_name = Format[1],
     is_valid = Format[3],
     raise_get_message =
       [246,
        function(c){
         var a = Format[1], b = Format[2];
         return caml_call2(Base_Printf[2].call(null, J), b, a);
        }];
    function raise_get(t, pos){
     var
      c =
        [0,
         [0, cst$13, [0, t]],
         [0, [0, cst_pos$1, Base_Import[139].call(null, pos)], 0]],
      a = runtime.caml_obj_tag(raise_get_message);
     a:
     if(250 === a)
      var b = raise_get_message[1];
     else{
      if(246 !== a && 244 !== a){var b = raise_get_message; break a;}
      var b = CamlinternalLazy[2].call(null, raise_get_message);
     }
     return raise_s(Base_Sexp[10].call(null, b, c));
    }
    function get(t, byte_pos){
     var decode = caml_call2(Format[5], t, byte_pos);
     return Base_Uchar0[18].call(null, decode)
             ? Base_Uchar0[19].call(null, decode)
             : raise_get(t, byte_pos);
    }
    function to_string(a){return a;}
    function of_string_unchecked(a){return a;}
    var
     raise_of_string_message =
       concat
        (0, [0, Format[2], [0, cst_of_string_invalid, [0, codec_name, 0]]]);
    function raise_of_string(string){
     return raise_s
             (Base_Sexp[10].call
               (null,
                raise_of_string_message,
                [0, [0, cst$14, [0, string]], 0]));
    }
    function of_string(string){
     return caml_call1(is_valid, string) ? string : raise_of_string(string);
    }
    var
     include = Base_Sexpable[5].call(null, [0, of_string, to_string]),
     t_sexp_grammar = include[1],
     t_of_sexp = include[2],
     sexp_of_t = include[3],
     compare = Base_Import[109][9];
    function hash(a){return runtime.Base_hash_string(a);}
    var
     module_name = Format[2],
     include$0 =
       Base_Identifiable[1].call
        (null,
         [0,
          compare,
          hash_fold_t,
          hash,
          t_of_sexp,
          sexp_of_t,
          of_string,
          to_string,
          module_name]),
     hash_fold_t$0 = include$0[1],
     hash$0 = include$0[2],
     t_of_sexp$0 = include$0[3],
     sexp_of_t$0 = include$0[4],
     of_string$0 = include$0[5],
     to_string$0 = include$0[6],
     symbol = include$0[7],
     symbol$0 = include$0[8],
     symbol$1 = include$0[9],
     symbol$2 = include$0[10],
     symbol$3 = include$0[11],
     symbol$4 = include$0[12],
     equal = include$0[13],
     compare$0 = include$0[14],
     min = include$0[15],
     max = include$0[16],
     ascending = include$0[17],
     descending = include$0[18],
     between = include$0[19],
     clamp_exn = include$0[20],
     clamp = include$0[21],
     comparator = include$0[22],
     pp = include$0[23],
     hashable = include$0[24];
    function to_sequence(t){
     var len = caml_ml_string_length(t);
     return Base_Sequence[45].call
             (null,
              0,
              function(byte_pos){
               if(len <= byte_pos) return 0;
               var
                decode = caml_call2(Format[5], t, byte_pos),
                a = Base_Uchar0[20].call(null, decode),
                b = Base_Import[91].call(null, byte_pos, a);
               return [0, [0, Base_Uchar0[19].call(null, decode), b]];
              });
    }
    function fold(t, acc, f){
     var len = caml_ml_string_length(t), byte_pos = 0, acc$0 = acc;
     for(;;){
      if(byte_pos === len) return acc$0;
      var
       decode = caml_call2(Format[5], t, byte_pos),
       acc$1 = caml_call2(f, acc$0, Base_Uchar0[19].call(null, decode)),
       a = Base_Uchar0[20].call(null, decode),
       byte_pos$0 = Base_Import[91].call(null, byte_pos, a);
      byte_pos = byte_pos$0;
      acc$0 = acc$1;
     }
    }
    function sanitize(t){
     var len$0 = caml_ml_string_length(t), acc$2 = 0, byte_pos$2 = 0;
     for(;;){
      if(byte_pos$2 === len$0) break;
      var
       decode$0 = caml_call2(Format[5], t, byte_pos$2),
       uchar$0 = Base_Uchar0[19].call(null, decode$0),
       a = caml_call1(Format[4], uchar$0),
       acc = Base_Import[91].call(null, acc$2, a),
       d = Base_Uchar0[20].call(null, decode$0),
       byte_pos$1 = Base_Import[91].call(null, byte_pos$2, d);
      acc$2 = acc;
      byte_pos$2 = byte_pos$1;
     }
     var
      bytes = Base_Bytes0[7].call(null, acc$2),
      len = caml_ml_string_length(t),
      acc$1 = 0,
      byte_pos$0 = 0;
     for(;;){
      if(byte_pos$0 === len){
       if(acc$1 === acc$2) return caml_string_of_bytes(bytes);
       throw caml_maybe_attach_backtrace([0, Assert_failure, K], 1);
      }
      var
       decode = caml_call2(Format[5], t, byte_pos$0),
       uchar = Base_Uchar0[19].call(null, decode),
       b = caml_call3(Format[6], bytes, acc$1, uchar),
       acc$0 = Base_Import[91].call(null, acc$1, b),
       c = Base_Uchar0[20].call(null, decode),
       byte_pos = Base_Import[91].call(null, byte_pos$0, c);
      acc$1 = acc$0;
      byte_pos$0 = byte_pos;
     }
    }
    function of_list(uchars){
     var
      len =
        Base_List[20].call
         (null,
          uchars,
          0,
          function(n, u){
           var a = caml_call1(Format[4], u);
           return Base_Import[91].call(null, n, a);
          }),
      bytes = Base_Bytes0[7].call(null, len),
      pos =
        Base_List[20].call
         (null,
          uchars,
          0,
          function(pos, uchar){
           var a = caml_call3(Format[6], bytes, pos, uchar);
           return Base_Import[91].call(null, pos, a);
          });
     if(pos === len) return caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, L], 1);
    }
    function of_array(uchars){
     var
      len = [0, 0],
      a = Base_Import[93].call(null, uchars.length - 1, 1),
      c = 0;
     if(a >= 0){
      var i$0 = c;
      for(;;){
       var
        h = caml_check_bound(uchars, i$0)[i$0 + 1],
        j = caml_call1(Format[4], h);
       len[1] = Base_Import[91].call(null, len[1], j);
       var k = i$0 + 1 | 0;
       if(a === i$0) break;
       i$0 = k;
      }
     }
     var
      bytes = Base_Bytes0[7].call(null, len[1]),
      pos = [0, 0],
      b = Base_Import[93].call(null, uchars.length - 1, 1),
      d = 0;
     if(b >= 0){
      var i = d;
      for(;;){
       var
        e = caml_check_bound(uchars, i)[i + 1],
        f = caml_call3(Format[6], bytes, pos[1], e);
       pos[1] = Base_Import[91].call(null, pos[1], f);
       var g = i + 1 | 0;
       if(b === i) break;
       i = g;
      }
     }
     if(pos[1] === len[1]) return caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, M], 1);
    }
    function concat$0(list){return concat(N, list);}
    function split(t, on){
     var len = caml_ml_string_length(t), start$1 = 0, until = 0;
     for(;;){
      if(until === len)
       return [0,
               sub(t, start$1, Base_Import[93].call(null, until, start$1)),
               0];
      var
       uchar = get(t, until),
       a = caml_call1(Format[4], uchar),
       until$0 = Base_Import[91].call(null, until, a);
      if(Base_Uchar0[11].call(null, uchar, on)) break;
      until = until$0;
     }
     var
      block =
        [0,
         sub(t, start$1, Base_Import[93].call(null, until, start$1)),
         24029],
      dst = block,
      offset = 1,
      start = until$0,
      until$1 = until$0;
     for(;;){
      if(until$1 === len){
       dst[offset + 1] =
        [0, sub(t, start, Base_Import[93].call(null, until$1, start)), 0];
       return block;
      }
      var
       uchar$0 = get(t, until$1),
       b = caml_call1(Format[4], uchar$0),
       start$0 = Base_Import[91].call(null, until$1, b);
      if(Base_Uchar0[11].call(null, uchar$0, on)){
       var
        dst$0 =
          [0,
           sub(t, start, Base_Import[93].call(null, until$1, start)),
           24029];
       dst[offset + 1] = dst$0;
       dst = dst$0;
       offset = 1;
       start = start$0;
       until$1 = start$0;
      }
      else
       until$1 = start$0;
     }
    }
    var
     C =
       Base_Indexed_container[12].call
        (null,
         [0,
          [0, Base_Uchar0[11]],
          of_list,
          of_array,
          concat$0,
          fold,
          -304398144,
          -304398144,
          -304398144,
          -304398144,
          348729712,
          -637740141]),
     append = C[3],
     concat_map = C[8],
     concat_mapi = C[39],
     count = C[20],
     counti = C[32],
     exists = C[18],
     existsi = C[30],
     filter = C[6],
     filter_map = C[7],
     filter_mapi = C[38],
     filteri = C[37],
     find = C[22],
     find_map = C[23],
     find_mapi = C[34],
     findi = C[33],
     fold_result = C[16],
     fold_until = C[17],
     foldi = C[28],
     for_all = C[19],
     for_alli = C[31],
     init = C[35],
     is_empty = C[13],
     iter = C[14],
     iteri = C[29],
     length = C[12],
     map = C[5],
     mapi = C[36],
     max_elt = C[27],
     mem = C[11],
     min_elt = C[26],
     partition_map = C[10],
     partition_tf = C[9],
     sum = C[21],
     to_array = C[25],
     to_list = C[24];
    return [0,
            codec_name,
            is_valid,
            ,
            ,
            get,
            of_string_unchecked,
            ,
            ,
            t_sexp_grammar,
            hash_fold_t$0,
            hash$0,
            t_of_sexp$0,
            sexp_of_t$0,
            of_string$0,
            to_string$0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare$0,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator,
            pp,
            hashable,
            to_sequence,
            fold,
            sanitize,
            of_list,
            of_array,
            concat$0,
            split,
            ,
            append,
            concat_map,
            concat_mapi,
            count,
            counti,
            exists,
            existsi,
            filter,
            filter_map,
            filter_mapi,
            filteri,
            find,
            find_map,
            find_mapi,
            findi,
            fold_result,
            fold_until,
            foldi,
            for_all,
            for_alli,
            init,
            is_empty,
            iter,
            iteri,
            length,
            map,
            mapi,
            max_elt,
            mem,
            min_elt,
            partition_map,
            partition_tf,
            sum,
            to_array,
            to_list,
            length];
   }
   var
    byte_length = Base_Uchar0[16],
    set = Base_Bytes0[8],
    Utf8 =
      Make_utf
       ([0,
         codec_name,
         module_name,
         is_valid_utf_8,
         byte_length,
         get_utf_8_uchar,
         set]),
    byte_length$0 = Base_Uchar0[17],
    set$0 = Base_Bytes0[9],
    Utf16le =
      Make_utf
       ([0,
         codec_name$0,
         module_name$0,
         is_valid_utf_16le,
         byte_length$0,
         get_utf_16le_uchar,
         set$0]),
    byte_length$1 = Base_Uchar0[17],
    set$1 = Base_Bytes0[10],
    Utf16be =
      Make_utf
       ([0,
         codec_name$1,
         module_name$1,
         is_valid_utf_16be,
         byte_length$1,
         get_utf_16be_uchar,
         set$1]);
   function Make_utf32(Format){
    function byte_length(param){return 4;}
    var
     codec_name = Format[1],
     module_name = Format[2],
     set = Format[4],
     get_decode_result = Format[3];
    function is_valid(t){
     var len = caml_ml_string_length(t);
     if(0 !== Base_Import[122].call(null, len, 4)) return 0;
     var byte_pos = 0;
     for(;;){
      if(byte_pos >= len) return 1;
      var
       result = caml_call2(Format[3], t, byte_pos),
       a = Base_Uchar0[18].call(null, result);
      if(! a) return a;
      var byte_pos$0 = Base_Import[91].call(null, byte_pos, 4);
      byte_pos = byte_pos$0;
     }
    }
    return Make_utf
            ([0,
              codec_name,
              module_name,
              is_valid,
              byte_length,
              get_decode_result,
              set]);
   }
   var
    set$2 = Base_Bytes0[12],
    Utf32le =
      Make_utf32([0, codec_name$2, module_name$2, get_utf_32le_uchar, set$2]),
    set$3 = Base_Bytes0[13],
    Utf32be =
      Make_utf32([0, codec_name$3, module_name$3, get_utf_32be_uchar, set$3]),
    include$1 = Base_Import[109],
    symbol$5 = include$1[1],
    symbol$6 = include$1[2],
    symbol$7 = include$1[3],
    symbol$8 = include$1[4],
    symbol$9 = include$1[5],
    symbol$10 = include$1[6],
    ascending$0 = include$1[7],
    descending$0 = include$1[8],
    compare$2 = include$1[9],
    compare_local$0 = include$1[10],
    equal$1 = include$1[11],
    equal_local$0 = include$1[12],
    max$0 = include$1[13],
    min$0 = include$1[14],
    Base_String =
      [0,
       globalize,
       t_sexp_grammar,
       sub,
       unsafe_sub,
       subo,
       of_char_list,
       of_array,
       symbol_concat,
       map,
       filter,
       filter_map,
       partition_tf,
       partition_map,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol$10,
       symbol$6,
       symbol$8,
       symbol$9,
       symbol$5,
       symbol$7,
       compare$2,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator,
       pp,
       hashable,
       compare_local$0,
       invariant,
       max_length,
       mem,
       make,
       symbol_concat,
       concat,
       escaped,
       contains,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       [0,
        hash_fold_t$0,
        hash$0,
        t_of_sexp$0,
        sexp_of_t$2,
        t_sexp_grammar$0,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal$0,
        compare$1,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator$0,
        compare_local,
        is_suffix,
        is_prefix,
        is_substring$0,
        is_substring_at,
        substr_index$0,
        substr_index_exn$0,
        substr_index_all$0,
        substr_replace_first$0,
        substr_replace_all$0],
       index,
       index_exn,
       index_from,
       index_from_exn,
       rindex,
       rindex_exn,
       rindex_from,
       rindex_from_exn,
       to_sequence,
       of_sequence,
       [0,
        sexp_of_t$0,
        create$0,
        pattern,
        case_sensitive,
        matches,
        index$0,
        index_exn$0,
        index_all,
        replace_first,
        replace_all,
        split_on,
        [0, equal, equal_local, sexp_of_t$1, representation]],
       substr_index,
       substr_index_exn,
       substr_index_all,
       substr_replace_first,
       substr_replace_all,
       is_substring,
       is_substring_at$0,
       to_list_rev,
       rev,
       is_suffix$0,
       is_prefix$0,
       lsplit2_exn,
       rsplit2_exn,
       lsplit2,
       rsplit2,
       split,
       split_on_chars,
       split_lines,
       lfindi,
       rfindi,
       lstrip,
       rstrip,
       strip,
       concat_map,
       concat_mapi,
       tr,
       tr_multi,
       chop_suffix_exn,
       chop_prefix_exn,
       chop_suffix,
       chop_prefix,
       chop_suffix_if_exists,
       chop_prefix_if_exists,
       suffix,
       prefix,
       drop_suffix,
       drop_prefix,
       common_suffix,
       common_prefix,
       common_suffix_length,
       common_prefix_length,
       common_suffix2,
       common_prefix2,
       common_suffix2_length,
       common_prefix2_length,
       concat_array,
       concat_lines,
       equal$1,
       equal_local$0,
       of_char,
       of_char_list,
       pad_left,
       pad_right,
       edit_distance,
       [0,
        escape_gen_exn,
        escape_gen,
        escape,
        unescape_gen_exn,
        unescape_gen,
        unescape,
        is_char_escaping,
        is_char_escaped,
        is_char_literal,
        index$1,
        index_exn$1,
        rindex$0,
        rindex_exn$0,
        index_from$0,
        index_from_exn$0,
        rindex_from$0,
        rindex_from_exn$0,
        split$0,
        split_on_chars$0,
        lsplit2$0,
        lsplit2_exn$0,
        rsplit2$0,
        rsplit2_exn$0,
        lstrip_literal,
        rstrip_literal,
        strip_literal],
       [0,
        Utf8[9],
        Utf8[10],
        Utf8[11],
        Utf8[12],
        Utf8[13],
        Utf8[14],
        Utf8[15],
        Utf8[16],
        Utf8[17],
        Utf8[18],
        Utf8[19],
        Utf8[20],
        Utf8[21],
        Utf8[22],
        Utf8[23],
        Utf8[24],
        Utf8[25],
        Utf8[26],
        Utf8[27],
        Utf8[28],
        Utf8[29],
        Utf8[30],
        Utf8[31],
        Utf8[32],
        Utf8[33],
        Utf8[37],
        Utf8[38],
        Utf8[42],
        Utf8[39],
        Utf8[67],
        Utf8[49],
        Utf8[50],
        Utf8[43],
        Utf8[73],
        Utf8[72],
        Utf8[70],
        Utf8[63],
        Utf8[64],
        Utf8[35],
        Utf8[57],
        Utf8[58],
        Utf8[47],
        Utf8[60],
        Utf8[45],
        Utf8[74],
        Utf8[53],
        Utf8[54],
        Utf8[76],
        Utf8[75],
        Utf8[71],
        Utf8[69],
        Utf8[59],
        Utf8[65],
        Utf8[48],
        Utf8[61],
        Utf8[46],
        Utf8[56],
        Utf8[55],
        Utf8[62],
        Utf8[68],
        Utf8[52],
        Utf8[51],
        Utf8[44],
        Utf8[34],
        Utf8[2],
        Utf8[36],
        Utf8[5],
        Utf8[6],
        Utf8[40],
        Utf8[1],
        Utf8[77],
        Utf8[66]],
       [0,
        Utf16le[9],
        Utf16le[10],
        Utf16le[11],
        Utf16le[12],
        Utf16le[13],
        Utf16le[14],
        Utf16le[15],
        Utf16le[16],
        Utf16le[17],
        Utf16le[18],
        Utf16le[19],
        Utf16le[20],
        Utf16le[21],
        Utf16le[22],
        Utf16le[23],
        Utf16le[24],
        Utf16le[25],
        Utf16le[26],
        Utf16le[27],
        Utf16le[28],
        Utf16le[29],
        Utf16le[30],
        Utf16le[31],
        Utf16le[32],
        Utf16le[33],
        Utf16le[37],
        Utf16le[38],
        Utf16le[42],
        Utf16le[39],
        Utf16le[67],
        Utf16le[49],
        Utf16le[50],
        Utf16le[43],
        Utf16le[73],
        Utf16le[72],
        Utf16le[70],
        Utf16le[63],
        Utf16le[64],
        Utf16le[35],
        Utf16le[57],
        Utf16le[58],
        Utf16le[47],
        Utf16le[60],
        Utf16le[45],
        Utf16le[74],
        Utf16le[53],
        Utf16le[54],
        Utf16le[76],
        Utf16le[75],
        Utf16le[71],
        Utf16le[69],
        Utf16le[59],
        Utf16le[65],
        Utf16le[48],
        Utf16le[61],
        Utf16le[46],
        Utf16le[56],
        Utf16le[55],
        Utf16le[62],
        Utf16le[68],
        Utf16le[52],
        Utf16le[51],
        Utf16le[44],
        Utf16le[34],
        Utf16le[2],
        Utf16le[36],
        Utf16le[5],
        Utf16le[6],
        Utf16le[40],
        Utf16le[1],
        Utf16le[77],
        Utf16le[66]],
       [0,
        Utf16be[9],
        Utf16be[10],
        Utf16be[11],
        Utf16be[12],
        Utf16be[13],
        Utf16be[14],
        Utf16be[15],
        Utf16be[16],
        Utf16be[17],
        Utf16be[18],
        Utf16be[19],
        Utf16be[20],
        Utf16be[21],
        Utf16be[22],
        Utf16be[23],
        Utf16be[24],
        Utf16be[25],
        Utf16be[26],
        Utf16be[27],
        Utf16be[28],
        Utf16be[29],
        Utf16be[30],
        Utf16be[31],
        Utf16be[32],
        Utf16be[33],
        Utf16be[37],
        Utf16be[38],
        Utf16be[42],
        Utf16be[39],
        Utf16be[67],
        Utf16be[49],
        Utf16be[50],
        Utf16be[43],
        Utf16be[73],
        Utf16be[72],
        Utf16be[70],
        Utf16be[63],
        Utf16be[64],
        Utf16be[35],
        Utf16be[57],
        Utf16be[58],
        Utf16be[47],
        Utf16be[60],
        Utf16be[45],
        Utf16be[74],
        Utf16be[53],
        Utf16be[54],
        Utf16be[76],
        Utf16be[75],
        Utf16be[71],
        Utf16be[69],
        Utf16be[59],
        Utf16be[65],
        Utf16be[48],
        Utf16be[61],
        Utf16be[46],
        Utf16be[56],
        Utf16be[55],
        Utf16be[62],
        Utf16be[68],
        Utf16be[52],
        Utf16be[51],
        Utf16be[44],
        Utf16be[34],
        Utf16be[2],
        Utf16be[36],
        Utf16be[5],
        Utf16be[6],
        Utf16be[40],
        Utf16be[1],
        Utf16be[77],
        Utf16be[66]],
       [0,
        Utf32le[9],
        Utf32le[10],
        Utf32le[11],
        Utf32le[12],
        Utf32le[13],
        Utf32le[14],
        Utf32le[15],
        Utf32le[16],
        Utf32le[17],
        Utf32le[18],
        Utf32le[19],
        Utf32le[20],
        Utf32le[21],
        Utf32le[22],
        Utf32le[23],
        Utf32le[24],
        Utf32le[25],
        Utf32le[26],
        Utf32le[27],
        Utf32le[28],
        Utf32le[29],
        Utf32le[30],
        Utf32le[31],
        Utf32le[32],
        Utf32le[33],
        Utf32le[37],
        Utf32le[38],
        Utf32le[42],
        Utf32le[39],
        Utf32le[67],
        Utf32le[49],
        Utf32le[50],
        Utf32le[43],
        Utf32le[73],
        Utf32le[72],
        Utf32le[70],
        Utf32le[63],
        Utf32le[64],
        Utf32le[35],
        Utf32le[57],
        Utf32le[58],
        Utf32le[47],
        Utf32le[60],
        Utf32le[45],
        Utf32le[74],
        Utf32le[53],
        Utf32le[54],
        Utf32le[76],
        Utf32le[75],
        Utf32le[71],
        Utf32le[69],
        Utf32le[59],
        Utf32le[65],
        Utf32le[48],
        Utf32le[61],
        Utf32le[46],
        Utf32le[56],
        Utf32le[55],
        Utf32le[62],
        Utf32le[68],
        Utf32le[52],
        Utf32le[51],
        Utf32le[44],
        Utf32le[34],
        Utf32le[2],
        Utf32le[36],
        Utf32le[5],
        Utf32le[6],
        Utf32le[40],
        Utf32le[1],
        Utf32le[77],
        Utf32le[66]],
       [0,
        Utf32be[9],
        Utf32be[10],
        Utf32be[11],
        Utf32be[12],
        Utf32be[13],
        Utf32be[14],
        Utf32be[15],
        Utf32be[16],
        Utf32be[17],
        Utf32be[18],
        Utf32be[19],
        Utf32be[20],
        Utf32be[21],
        Utf32be[22],
        Utf32be[23],
        Utf32be[24],
        Utf32be[25],
        Utf32be[26],
        Utf32be[27],
        Utf32be[28],
        Utf32be[29],
        Utf32be[30],
        Utf32be[31],
        Utf32be[32],
        Utf32be[33],
        Utf32be[37],
        Utf32be[38],
        Utf32be[42],
        Utf32be[39],
        Utf32be[67],
        Utf32be[49],
        Utf32be[50],
        Utf32be[43],
        Utf32be[73],
        Utf32be[72],
        Utf32be[70],
        Utf32be[63],
        Utf32be[64],
        Utf32be[35],
        Utf32be[57],
        Utf32be[58],
        Utf32be[47],
        Utf32be[60],
        Utf32be[45],
        Utf32be[74],
        Utf32be[53],
        Utf32be[54],
        Utf32be[76],
        Utf32be[75],
        Utf32be[71],
        Utf32be[69],
        Utf32be[59],
        Utf32be[65],
        Utf32be[48],
        Utf32be[61],
        Utf32be[46],
        Utf32be[56],
        Utf32be[55],
        Utf32be[62],
        Utf32be[68],
        Utf32be[52],
        Utf32be[51],
        Utf32be[44],
        Utf32be[34],
        Utf32be[2],
        Utf32be[36],
        Utf32be[5],
        Utf32be[6],
        Utf32be[40],
        Utf32be[1],
        Utf32be[77],
        Utf32be[66]]];
   runtime.caml_register_global(114, Base_String, "Base__String");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes
//# unitInfo: Requires: Base__Array0, Base__Blit, Base__Bytes0, Base__Bytes_intf, Base__Bytes_tr, Base__Char, Base__Comparator, Base__Import, Base__List, Base__Or_error, Base__Ordered_collection_common, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Staged, Stdlib__Format
//# shape: Base__Bytes:[F(1)*,F(1),F(1),N,N,N,N,N,N,F(2),F(2)*,F(2)*,F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,F(2)*,F(2)*,F(1),F(1),N,F(1)*,N,N,F(1)*,F(1),F(2),F(2),F(2),F(1),F(2),F(1),F(2),F(4),F(3),F(2),F(1),F(1),F(3),F(3),F(4),N,[F(3)],[F(3)],[F(3)],[F(3)],[F(3)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Bytes",
    Base_Char = global_data.Base__Char,
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Bytes_tr = global_data.Base__Bytes_tr,
    Base_Array0 = global_data.Base__Array0,
    Base_List = global_data.Base__List,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Staged = global_data.Base__Staged,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Blit = global_data.Base__Blit,
    Base_Comparator = global_data.Base__Comparator,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    stage = Base_Staged[1],
    globalize = Base_Import[288],
    t_of_sexp = Base_Import[161],
    sexp_of_t = Base_Import[137],
    t_sexp_grammar = Base_Import[183],
    max_length = Base_Bytes0[2],
    compare = Base_Bytes0[5],
    copy = Base_Bytes0[6],
    create = Base_Bytes0[7],
    set_uchar_utf_8 = Base_Bytes0[8],
    set_uchar_utf_16le = Base_Bytes0[9],
    set_uchar_utf_16be = Base_Bytes0[10],
    set_uchar_utf_32le = Base_Bytes0[12],
    set_uchar_utf_32be = Base_Bytes0[13],
    create_local = Base_Bytes0[14],
    fill = Base_Bytes0[15],
    make = Base_Bytes0[16],
    map = Base_Bytes0[17],
    mapi = Base_Bytes0[18],
    to_string = Base_Bytes0[20],
    of_string = Base_Bytes0[21],
    a = [0, [3, 0, 0], "%S"];
   function pp(fmt, t){
    var b = to_string(t);
    return caml_call1(Stdlib_Format[139].call(null, fmt)(a), b);
   }
   function create$0(len){return create(len);}
   var
    To_bytes =
      Base_Blit[1].call
       (null, [0, caml_ml_bytes_length, create$0, runtime.caml_blit_bytes]),
    blit = To_bytes[1],
    blito = To_bytes[2],
    unsafe_blit = To_bytes[3],
    sub = To_bytes[4],
    subo = To_bytes[5],
    comparator = Base_Comparator[7].call(null, [0, compare, sexp_of_t])[1],
    include = Base_Pretty_printer[3].call(null, [0, pp, module_name]),
    pp$0 = include[1],
    To_string = Base_Blit[3].call(null, [0], To_bytes);
   function create$1(len){return create(len);}
   var
    length = caml_ml_bytes_length,
    unsafe_blit$0 = runtime.caml_blit_string,
    length$0 = caml_ml_string_length,
    From_string =
      Base_Blit[2].call
       (null, [0, length$0], [0, length, create$1, unsafe_blit$0]),
    b = [0, [11, "Bytes.init ", [4, 0, 0, 0, 0]], "Bytes.init %d"],
    cst_tr_multi_replacement_is_th =
      "tr_multi: replacement is the empty string",
    c = [0, "src/bytes.ml", 130, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function invariant(param){return 0;}
   function init(n, f){
    if(n < 0) caml_call2(Base_Printf[7].call(null, b), n, 0);
    var t = create(n), a = Base_Import[93].call(null, n, 1), c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      caml_bytes_unsafe_set(t, i, caml_call1(f, i));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return t;
   }
   function of_char_list(l){
    var t = create(Base_List[45].call(null, l));
    Base_List[34].call
     (null, l, function(i, c){return runtime.caml_bytes_set(t, i, c);});
    return t;
   }
   function to_list(t){
    var
     i$1 = Base_Import[93].call(null, caml_ml_bytes_length(t), 1),
     i = i$1,
     acc = 0;
    for(;;){
     if(0 > i) return acc;
     var
      acc$0 = [0, caml_bytes_unsafe_get(t, i), acc],
      i$0 = Base_Import[93].call(null, i, 1);
     i = i$0;
     acc = acc$0;
    }
   }
   function to_array(t){
    return Base_Array0[12].call
            (null,
             caml_ml_bytes_length(t),
             function(i){return caml_bytes_unsafe_get(t, i);});
   }
   function map$0(t, f){return map(t, f);}
   function mapi$0(t, f){return mapi(t, f);}
   function fold(t, init, f){
    var len = caml_ml_bytes_length(t), pos = 0, acc = init;
    for(;;){
     if(pos === len) return acc;
     var
      acc$0 = caml_call2(f, acc, caml_bytes_unsafe_get(t, pos)),
      pos$0 = Base_Import[91].call(null, pos, 1);
     pos = pos$0;
     acc = acc$0;
    }
   }
   function foldi(t, init, f){
    var len = caml_ml_bytes_length(t), pos = 0, acc = init;
    for(;;){
     if(pos === len) return acc;
     var
      acc$0 = caml_call3(f, pos, acc, caml_bytes_unsafe_get(t, pos)),
      pos$0 = Base_Import[91].call(null, pos, 1);
     pos = pos$0;
     acc = acc$0;
    }
   }
   function tr(target, replacement, s){
    var a = Base_Import[93].call(null, caml_ml_bytes_length(s), 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      if(Base_Char[16].call(null, caml_bytes_unsafe_get(s, i), target))
       caml_bytes_unsafe_set(s, i, replacement);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function tr_multi(target, replacement){
    if(0 === caml_ml_string_length(target))
     return stage(function(a){return 0;});
    if(0 === caml_ml_string_length(replacement))
     return Base_Import[126].call(null, cst_tr_multi_replacement_is_th);
    var match = Base_Bytes_tr[1].call(null, target, replacement);
    if(! match) return stage(function(a){return 0;});
    var tr_map = match[1];
    return stage
            (function(s){
              var
               a = Base_Import[93].call(null, caml_ml_bytes_length(s), 1),
               b = 0;
              if(a >= 0){
               var i = b;
               for(;;){
                caml_bytes_unsafe_set
                 (s,
                  i,
                  runtime.caml_string_unsafe_get
                   (tr_map,
                    Base_Char[32].call(null, caml_bytes_unsafe_get(s, i))));
                var c = i + 1 | 0;
                if(a === i) break;
                i = c;
               }
              }
              return 0;
             });
   }
   function between(t, low, high){
    var a = Base_Import[110][2].call(null, low, t);
    return a ? Base_Import[110][2].call(null, t, high) : a;
   }
   function clamp_unchecked(t, min, max){
    return Base_Import[110][1].call(null, t, min)
            ? min
            : Base_Import[110][2].call(null, t, max) ? t : max;
   }
   function clamp_exn(t, min, max){
    if(Base_Import[110][2].call(null, min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
   }
   function clamp(t, min, max){
    if(! Base_Import[110][5].call(null, min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function contains(pos, len, t, char){
    var
     match =
       Base_Ordered_collection_common[1].call
        (null, pos, len, 0, caml_ml_bytes_length(t)),
     len$0 = match[2],
     pos$0 = match[1],
     last = Base_Import[91].call(null, pos$0, len$0),
     i = pos$0;
    for(;;){
     var a = i < last ? 1 : 0;
     if(a){
      var d = caml_bytes_get(t, i), b = Base_Char[16].call(null, d, char);
      if(! b){var i$0 = Base_Import[91].call(null, i, 1); i = i$0; continue;}
      var c = b;
     }
     else
      var c = a;
     return c;
    }
   }
   var
    Utf8 = [0, set_uchar_utf_8],
    Utf16le = [0, set_uchar_utf_16le],
    Utf16be = [0, set_uchar_utf_16be],
    Utf32le = [0, set_uchar_utf_32le],
    Utf32be = [0, set_uchar_utf_32be],
    include$0 = Base_Import[110],
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    ascending = include$0[7],
    descending = include$0[8],
    compare$0 = include$0[9],
    compare_local = include$0[10],
    equal = include$0[11],
    equal_local = include$0[12],
    max = include$0[13],
    min = include$0[14],
    Base_Bytes =
      [0,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local,
       of_string,
       to_string,
       pp$0,
       invariant,
       To_string,
       From_string,
       create,
       create_local,
       make,
       map$0,
       mapi$0,
       copy,
       init,
       of_char_list,
       caml_bytes_get,
       fill,
       tr,
       tr_multi,
       to_list,
       to_array,
       fold,
       foldi,
       contains,
       max_length,
       Utf8,
       Utf16le,
       Utf16be,
       Utf32le,
       Utf32be];
   runtime.caml_register_global(24, Base_Bytes, "Base__Bytes");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hex_lexer
//# unitInfo: Requires: Stdlib__Lexing
//# shape: Base__Hex_lexer:[F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\0\0\x01\0\x01\0\x02\0\x1b\0R\0i\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x01\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\x01\0\x03\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\x06\0\x04\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x04\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\x02\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\x01\0\x03\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x03\0\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing;
   function parse_hex(lexbuf){
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        Stdlib_Lexing[20].call
         (null, ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0){
      var
       body =
         Stdlib_Lexing[16].call(null, lexbuf, lexbuf[5] + 3 | 0, lexbuf[6]);
      return [0, body];
     }
     if(1 === ocaml_lex_state$0){
      var
       body$0 =
         Stdlib_Lexing[16].call(null, lexbuf, lexbuf[5] + 2 | 0, lexbuf[6]);
      return [1, body$0];
     }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   var Base_Hex_lexer = [0, parse_hex];
   runtime.caml_register_global(2, Base_Hex_lexer, "Base__Hex_lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_string_conversions
//# unitInfo: Requires: Base__Bytes, Base__Char, Base__Hex_lexer, Base__Import, Base__Option, Base__Printf, Base__Sexp, Base__Sexpable, Base__String, Stdlib__Lexing
//# shape: Base__Int_string_conversions:[F(1)*,F(1)*,F(1)*,N,F(3),F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_0b$1 = "0b",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Base_Hex_lexer = global_data.Base__Hex_lexer,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Base_Option = global_data.Base__Option,
    Base_Printf = global_data.Base__Printf,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Bytes = global_data.Base__Bytes,
    Base_Sexp = global_data.Base__Sexp;
   function insert_delimiter_every(input, delimiter, chars_per_delimiter){
    var input_length = runtime.caml_ml_string_length(input);
    if(input_length <= chars_per_delimiter) return input;
    var match = caml_string_get(input, 0);
    a:
    {
     if(43 !== match && 45 !== match){var has_sign = 0; break a;}
     var has_sign = 1;
    }
    var
     num_digits =
       has_sign ? Base_Import[93].call(null, input_length, 1) : input_length,
     a = Base_Import[93].call(null, num_digits, 1),
     num_delimiters = Base_Import[95].call(null, a, chars_per_delimiter),
     output_length = Base_Import[91].call(null, input_length, num_delimiters),
     output = Base_Bytes[34].call(null, output_length),
     input_pos = [0, Base_Import[93].call(null, input_length, 1)],
     output_pos = [0, Base_Import[93].call(null, output_length, 1)],
     num_chars_until_delimiter = [0, chars_per_delimiter],
     first_digit_pos = has_sign ? 1 : 0;
    for(;;){
     if(first_digit_pos > input_pos[1]){
      if(has_sign) caml_bytes_set(output, 0, caml_string_get(input, 0));
      return runtime.caml_string_of_bytes(output);
     }
     if(0 === num_chars_until_delimiter[1]){
      caml_bytes_set(output, output_pos[1], delimiter);
      output_pos[1]--;
      num_chars_until_delimiter[1] = chars_per_delimiter;
     }
     var b = caml_string_get(input, input_pos[1]);
     caml_bytes_set(output, output_pos[1], b);
     input_pos[1]--;
     output_pos[1]--;
     num_chars_until_delimiter[1]--;
    }
   }
   function insert_delimiter(input, delimiter){
    return insert_delimiter_every(input, delimiter, 3);
   }
   function insert_underscores(input){return insert_delimiter(input, 95);}
   var
    sexp_of_int_style = Base_Sexp[20],
    cst_0x = "-0x",
    cst_0x$0 = "0x",
    a =
      [0,
       [2, 0, [11, ".of_string: invalid input ", [3, 0, 0]]],
       "%s.of_string: invalid input %S"],
    cst_0 = "0",
    cst_0b = cst_0b$1,
    cst_0b$0 = cst_0b$1,
    Base_Int_string_conversions =
      [0,
       function(I){
        var chars_per_delimiter = 3;
        function to_string_hum(opt, t){
         var delimiter = opt ? opt[1] : 95;
         return insert_delimiter_every
                 (caml_call1(I[1], t), delimiter, chars_per_delimiter);
        }
        function sexp_of_t(t){
         var
          s = caml_call1(I[1], t),
          s$0 =
            1009018843 <= sexp_of_int_style[1]
             ? s
             : insert_delimiter_every(s, 95, chars_per_delimiter);
         return [0, s$0];
        }
        return [0, to_string_hum, sexp_of_t];
       },
       function(I){
        var compare_local = I[2];
        function compare(a, b){return caml_call2(compare_local, a, b);}
        var hash_fold_t = I[3], func = I[4];
        function hash(x){return caml_call1(func, x);}
        var chars_per_delimiter = 4;
        function to_string(delimiter, t){
         if(delimiter)
          var
           delimiter$0 = delimiter[1],
           make_suffix =
             function(t){
              return insert_delimiter_every
                      (caml_call1(I[5], t), delimiter$0, chars_per_delimiter);
             };
         else
          var make_suffix = I[5];
         if(caml_call2(I[8], t, I[7])){
          var a = caml_call1(make_suffix, caml_call1(I[9], t));
          return Base_Import[112].call(null, cst_0x, a);
         }
         var b = caml_call1(make_suffix, t);
         return Base_Import[112].call(null, cst_0x$0, b);
        }
        function to_string$0(t){return to_string(0, t);}
        function to_string_hum(opt, t){
         var delimiter = opt ? opt[1] : 95;
         return to_string([0, delimiter], t);
        }
        function invalid(str){
         var b = I[10];
         return caml_call3(Base_Printf[6].call(null, a), b, str, 0);
        }
        function of_string_with_delimiter(str){
         var
          a =
            Base_String[10].call
             (null, str, function(c){return Base_Char[15].call(null, c, 95);});
         return caml_call1(I[6], a);
        }
        function of_string(str){
         var
          lex = Stdlib_Lexing[3].call(null, 0, str),
          result =
            Base_Option[47].call
             (null,
              function(param){return Base_Hex_lexer[1].call(null, lex);});
         if(lex[6] !== lex[3]) return invalid(str);
         if(! result) return invalid(str);
         var match = result[1];
         if(0 === match[0]){
          var body = match[1], a = of_string_with_delimiter(body);
          return caml_call1(I[9], a);
         }
         var body$0 = match[1];
         return of_string_with_delimiter(body$0);
        }
        var
         include = Base_Sexpable[5].call(null, [0, of_string, to_string$0]),
         t_sexp_grammar = include[1],
         t_of_sexp = include[2],
         sexp_of_t = include[3];
        return [0,
                [0,
                 t_of_sexp,
                 sexp_of_t,
                 t_sexp_grammar,
                 compare,
                 compare_local,
                 hash_fold_t,
                 hash,
                 of_string,
                 to_string$0,
                 to_string_hum]];
       },
       function(a){
        var
         func = a[6],
         hash_fold_t = a[5],
         compare_local = a[2],
         b = a[12],
         c = a[13],
         d = a[11],
         e = a[10],
         f = a[9],
         g = a[8],
         h = a[7],
         i = a[4];
        function compare(a, b){return caml_call2(compare_local, a, b);}
        function hash(x){return caml_call1(func, x);}
        function to_string_suffix(t){
         if(caml_call2(i, t, c))
          var bits = 0;
         else
          var a = caml_call1(h, t), bits = Base_Import[93].call(null, d, a);
         return 0 === bits
                 ? cst_0
                 : Base_String
                    [36].call
                   (null,
                    bits,
                    function(char_index){
                     var
                      a = Base_Import[93].call(null, bits, char_index),
                      bit_index = Base_Import[93].call(null, a, 1),
                      bit = caml_call2(f, caml_call2(g, t, bit_index), b),
                      c = caml_call1(e, bit),
                      d = Base_Char[32].call(null, 48),
                      h = Base_Import[91].call(null, d, c);
                     return Base_Char[35].call(null, h);
                    });
        }
        function to_string(t){
         var a = to_string_suffix(t);
         return Base_Import[112].call(null, cst_0b, a);
        }
        function to_string_hum(opt, t){
         var
          delimiter = opt ? opt[1] : 95,
          a = insert_delimiter_every(to_string_suffix(t), delimiter, 4);
         return Base_Import[112].call(null, cst_0b$0, a);
        }
        function sexp_of_t(t){return [0, to_string_hum(0, t)];}
        return [0,
                [0,
                 sexp_of_t,
                 compare,
                 compare_local,
                 hash_fold_t,
                 hash,
                 to_string,
                 to_string_hum]];
       },
       sexp_of_int_style,
       insert_delimiter_every,
       insert_delimiter,
       insert_underscores];
   runtime.caml_register_global
    (16, Base_Int_string_conversions, "Base__Int_string_conversions");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Popcount
//# unitInfo: Requires: Stdlib__Nativeint
//# shape: Base__Popcount:[F(1),F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    m1 = caml_int64_create_lo_mi_hi(5592405, 5592405, 21845),
    m2 = caml_int64_create_lo_mi_hi(3355443, 3355443, 13107),
    m4 = caml_int64_create_lo_mi_hi(986895, 986895, 3855),
    h01 = caml_int64_create_lo_mi_hi(65793, 65793, 257),
    mask = caml_int64_create_lo_mi_hi(16777215, 255, 0),
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Assert_failure = global_data.Assert_failure;
   function int64_popcount(x$1){
    var
     x$0 =
       runtime.caml_int64_sub
        (x$1, caml_int64_and(caml_int64_shift_right_unsigne(x$1, 1), m1)),
     x =
       caml_int64_add
        (caml_int64_and(x$0, m2),
         caml_int64_and(caml_int64_shift_right_unsigne(x$0, 2), m2)),
     x$2 =
       caml_int64_and
        (caml_int64_add(x, caml_int64_shift_right_unsigne(x, 4)), m4);
    return runtime.caml_int64_to_int32
            (caml_int64_shift_right_unsigne
              (runtime.caml_int64_mul(x$2, h01), 56));
   }
   function int32_popcount(x){
    return int64_popcount(caml_int64_and(caml_int64_of_int32(x), mask));
   }
   var match = Stdlib_Nativeint[9], a = [0, "src/popcount.ml", 45, 9];
   if(32 === match)
    var nativeint_popcount = function(x){return int32_popcount(x);};
   else{
    if(64 !== match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    var
     nativeint_popcount =
       function(x){return int64_popcount(caml_int64_of_int32(x));};
   }
   var
    Base_Popcount =
      [0,
       function(a){return runtime.Base_int_math_int_popcount(a);},
       int32_popcount,
       int64_popcount,
       nativeint_popcount];
   runtime.caml_register_global(8, Base_Popcount, "Base__Popcount");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign
//# unitInfo: Requires: Base__Identifiable, Base__Import, Base__Sign0
//# shape: Base__Sign:[N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Sign0 = global_data.Base__Sign0,
    Base_Identifiable = global_data.Base__Identifiable,
    t_sexp_grammar = Base_Sign0[3],
    compare_local = Base_Sign0[4],
    all = Base_Sign0[7],
    Replace_polymorphic_compare = Base_Sign0[8],
    to_int = Base_Sign0[11],
    of_int = Base_Sign0[14],
    a =
      Base_Identifiable[1].call
       (null,
        [0,
         Base_Sign0[5],
         Base_Sign0[6],
         Base_Sign0[12],
         Base_Sign0[1],
         Base_Sign0[2],
         Base_Sign0[9],
         Base_Sign0[10],
         Base_Sign0[13]]),
    hash_fold_t = a[1],
    hash = a[2],
    t_of_sexp = a[3],
    sexp_of_t = a[4],
    of_string = a[5],
    to_string = a[6],
    between = a[19],
    clamp_exn = a[20],
    clamp = a[21],
    comparator = a[22],
    pp = a[23],
    hashable = a[24],
    cst_negative = "negative",
    cst_zero = "zero",
    cst_positive = "positive";
   function to_string_hum(param){
    switch(param){
      case 0:
       return cst_negative;
      case 1:
       return cst_zero;
      default: return cst_positive;
    }
   }
   function to_float(param){
    switch(param){case 0: return -1.;case 1: return 0.;default: return 1.;
    }
   }
   function flip(param){
    switch(param){case 0: return 2;case 1: return 1;default: return 0;
    }
   }
   function symbol(t$0, t){
    var a = to_int(t), b = to_int(t$0);
    return of_int(Base_Import[88].call(null, b, a));
   }
   var
    symbol$0 = Replace_polymorphic_compare[1],
    symbol$1 = Replace_polymorphic_compare[2],
    symbol$2 = Replace_polymorphic_compare[3],
    symbol$3 = Replace_polymorphic_compare[4],
    symbol$4 = Replace_polymorphic_compare[5],
    symbol$5 = Replace_polymorphic_compare[6],
    ascending = Replace_polymorphic_compare[7],
    descending = Replace_polymorphic_compare[8],
    compare = Replace_polymorphic_compare[9],
    equal = Replace_polymorphic_compare[10],
    equal_local = Replace_polymorphic_compare[11],
    max = Replace_polymorphic_compare[12],
    min = Replace_polymorphic_compare[13],
    Base_Sign =
      [0,
       all,
       t_sexp_grammar,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol$5,
       symbol$1,
       symbol$3,
       symbol$4,
       symbol$0,
       symbol$2,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       compare_local,
       equal_local,
       to_string_hum,
       of_int,
       to_int,
       to_float,
       flip,
       symbol];
   runtime.caml_register_global(9, Base_Sign, "Base__Sign");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int0, Base__Int_conversions, Base__Int_intf, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Sign, Stdlib__Scanf
//# shape: Base__Int:[F(1)*,N,F(1),F(1)*,F(1)*,F(1)*,N,F(1),F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,F(1)*,F(2)*,F(2)*,F(1)*,N,N,F(1),N,N,N,F(2),N,N,N,N,N,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1),F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,N,N,N,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(2),F(1)*,F(1)*,N,F(2),F(2),F(2)*,N,F(1)*,F(1)*,F(1),F(1),F(1),F(1),F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_x = "%x",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_div = runtime.caml_div,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int.Hex",
    module_name$0 = "Base.Int",
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Float0 = global_data.Base__Float0,
    Base_Int0 = global_data.Base__Int0,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Int_math = global_data.Base__Int_math,
    Base_Error = global_data.Base__Error,
    Base_Sign = global_data.Base__Sign,
    Base_Popcount = global_data.Base__Popcount,
    to_string = Base_Int0[1],
    of_string = Base_Int0[2],
    of_string_opt = Base_Int0[3],
    globalize = Base_Import[284],
    hash_fold_t = Base_Import[206],
    func = Base_Import[220];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[163],
    sexp_of_t = Base_Import[139],
    t_sexp_grammar = Base_Import[185],
    hashable = [0, hash, caml_int_compare, sexp_of_t],
    compare = caml_int_compare,
    b = [0, [11, "Int.of_string: ", [3, 0, 0]], "Int.of_string: %S"];
   function of_string$0(s){
    try{var a = of_string(s); return a;}
    catch(exn){return caml_call2(Base_Printf[6].call(null, b), s, 0);}
   }
   var
    num_bits = Base_Int_conversions[30],
    float_lower_bound = Base_Float0[26].call(null, num_bits),
    float_upper_bound = Base_Float0[24].call(null, num_bits),
    c =
      [0,
       [11,
        "Int.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int.of_float: argument (%f) is out of range or NaN"];
   function to_float(a){return a;}
   function of_float_unchecked(a){return a | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var a = Base_Float0[29].call(null, f);
    return caml_call2(Base_Printf[7].call(null, c), a, 0);
   }
   var
    zero = 0,
    one = 1,
    comparator = Base_Comparator[7].call(null, [0, compare, sexp_of_t])[1],
    a = Base_Comparable[14].call(null, [0, compare, sexp_of_t, zero]),
    is_positive = a[1],
    is_non_negative = a[2],
    is_negative = a[3],
    is_non_positive = a[4],
    include = Base_Int_string_conversions[1].call(null, [0, to_string]),
    to_string_hum = include[1],
    sexp_of_t$0 = include[2],
    compare_local = Base_Import[256];
   function compare$0(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[206], func$0 = Base_Import[220];
   function hash$0(x){return caml_call1(func$0, x);}
   var
    neg = Base_Import[113],
    d = [0, [4, 6, 0, 0, 0], cst_x],
    e = [0, [4, 6, 0, 0, 0], cst_x];
   function symbol(b, a){return b < a ? 1 : 0;}
   function to_string$0(i){
    return caml_call1(Base_Printf[2].call(null, d), i);
   }
   function of_string$1(s){
    return caml_call1
            (Stdlib_Scanf[5].call(null, s, e), function(a){return a;});
   }
   var
    include$0 =
      Base_Int_string_conversions[2].call
       (null,
        [0,
         compare$0,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$1,
         zero,
         symbol,
         neg,
         module_name]),
    Hex = include$0[1],
    include$1 =
      Base_Pretty_printer[2].call(null, [0, module_name$0, to_string]),
    pp = include$1[1],
    f = [0, "src/int.ml", 111, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function invariant(param){return 0;}
   function between(t, low, high){
    var a = low <= t ? 1 : 0, b = a ? t <= high ? 1 : 0 : a;
    return b;
   }
   function clamp_unchecked(t, min, max){
    var a = Base_Import[97][4].call(null, t, max);
    return Base_Import[97][3].call(null, min, a);
   }
   function clamp_exn(t, min, max){
    if(min <= max) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
   }
   function clamp(t, min, max){
    if(max >= min) return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function pred(i){return Base_Import[93].call(null, i, 1);}
   function succ(i){return Base_Import[91].call(null, i, 1);}
   function to_int(i){return i;}
   function of_int_exn(i){return i;}
   var
    max_value = Base_Import[85][19],
    min_value = Base_Import[85][20],
    of_int32 = Base_Int_conversions[6],
    of_int32_exn = Base_Int_conversions[7],
    to_int32 = Base_Int_conversions[1],
    to_int32_exn = Base_Int_conversions[2],
    of_int64 = Base_Int_conversions[12],
    of_int64_exn = Base_Int_conversions[13],
    to_int64 = Base_Int_conversions[4],
    of_nativeint = Base_Int_conversions[23],
    of_nativeint_exn = Base_Int_conversions[24],
    to_nativeint = Base_Int_conversions[5];
   function abs(x){return Base_Import[123].call(null, x);}
   function rem(a, b){return Base_Import[122].call(null, a, b);}
   function incr(a){a[1]++; return 0;}
   function decr(a){a[1]--; return 0;}
   function shift_right(a, b){return Base_Import[115].call(null, a, b);}
   function shift_right_logical(a, b){
    return Base_Import[120].call(null, a, b);
   }
   function shift_left(a, b){return Base_Import[119].call(null, a, b);}
   function bit_not(a){return Base_Import[117].call(null, a);}
   function bit_or(a, b){return Base_Import[118].call(null, a, b);}
   function bit_and(a, b){return Base_Import[116].call(null, a, b);}
   function bit_xor(a, b){return Base_Import[121].call(null, a, b);}
   var pow = Base_Int_math[2][1];
   function symbol$0(b, e){return pow(b, e);}
   var
    raise_s = Base_Error[32],
    g =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_Int_floor_log2_got_invalid = "[Int.floor_log2] got invalid input",
    cst_Int_ceil_log2_got_invalid_ = "[Int.ceil_log2] got invalid input";
   function non_positive_argument(param){
    return caml_call1(Base_Printf[7].call(null, g), 0);
   }
   function ceil_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var
     x$0 = Base_Import[93].call(null, x, 1),
     a = Base_Import[120].call(null, x$0, 1),
     x$1 = Base_Import[118].call(null, x$0, a),
     b = Base_Import[120].call(null, x$1, 2),
     x$2 = Base_Import[118].call(null, x$1, b),
     c = Base_Import[120].call(null, x$2, 4),
     x$3 = Base_Import[118].call(null, x$2, c),
     d = Base_Import[120].call(null, x$3, 8),
     x$4 = Base_Import[118].call(null, x$3, d),
     e = Base_Import[120].call(null, x$4, 16),
     x$5 = Base_Import[118].call(null, x$4, e),
     f = Base_Import[120].call(null, x$5, 32),
     x$6 = Base_Import[118].call(null, x$5, f);
    return Base_Import[91].call(null, x$6, 1);
   }
   function floor_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var
     a = Base_Import[120].call(null, x, 1),
     x$0 = Base_Import[118].call(null, x, a),
     b = Base_Import[120].call(null, x$0, 2),
     x$1 = Base_Import[118].call(null, x$0, b),
     c = Base_Import[120].call(null, x$1, 4),
     x$2 = Base_Import[118].call(null, x$1, c),
     d = Base_Import[120].call(null, x$2, 8),
     x$3 = Base_Import[118].call(null, x$2, d),
     e = Base_Import[120].call(null, x$3, 16),
     x$4 = Base_Import[118].call(null, x$3, e),
     f = Base_Import[120].call(null, x$4, 32),
     x$5 = Base_Import[118].call(null, x$4, f),
     g = Base_Import[120].call(null, x$5, 1);
    return Base_Import[93].call(null, x$5, g);
   }
   function is_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var a = Base_Import[93].call(null, x, 1);
    return 0 === Base_Import[116].call(null, x, a) ? 1 : 0;
   }
   function floor_log2(i){
    if(i <= 0){
     var a = [0, [0, cst, Base_Import[139].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int_floor_log2_got_invalid, a));
    }
    var
     b = runtime.Base_int_math_int_clz(i),
     c = Base_Import[93].call(null, num_bits, 1);
    return Base_Import[93].call(null, c, b);
   }
   function ceil_log2(i){
    if(i <= 0){
     var a = [0, [0, cst$0, Base_Import[139].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int_ceil_log2_got_invalid_, a));
    }
    if(1 === i) return 0;
    var b = runtime.Base_int_math_int_clz(Base_Import[93].call(null, i, 1));
    return Base_Import[93].call(null, num_bits, b);
   }
   var
    sign = Base_Sign[30],
    popcount = Base_Popcount[1],
    compare_local$0 = Base_Import[256];
   function compare$1(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[270];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[206], func$1 = Base_Import[220];
   function hash$1(x){return caml_call1(func$1, x);}
   var land = Base_Import[116], lsr = Base_Import[120];
   function clz(a){return runtime.Base_int_math_int_clz(a);}
   var
    Binary =
      Base_Int_string_conversions[3].call
        (null,
         [0,
          compare$1,
          compare_local$0,
          equal,
          equal_local,
          hash_fold_t$1,
          hash$1,
          clz,
          lsr,
          land,
          to_int,
          num_bits,
          one,
          zero])
       [1],
    F =
      Base_Int_math[1].call
       (null,
        [0,
         of_float,
         to_float,
         of_string$0,
         to_string,
         function(b, a){return b + a | 0;},
         function(b, a){return b - a | 0;},
         runtime.caml_mul,
         caml_div,
         function(a){return - a | 0;},
         function(b, a){return a <= b ? 1 : 0;},
         function(b, a){return b <= a ? 1 : 0;},
         function(b, a){return b === a ? 1 : 0;},
         function(b, a){return a < b ? 1 : 0;},
         function(b, a){return b < a ? 1 : 0;},
         function(b, a){return b !== a ? 1 : 0;},
         abs,
         function(a){return - a | 0;},
         zero,
         of_int_exn,
         rem]),
    round = F[4],
    round_towards_zero = F[5],
    round_down = F[6],
    round_up = F[7],
    round_nearest = F[8],
    h =
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: modulus should be positive", 0]]]]]],
       "%s %% %s in core_int.ml: modulus should be positive"],
    i =
      [0,
       [2,
        0,
        [11,
         " /",
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: divisor should be positive", 0]]]]]],
       "%s /%% %s in core_int.ml: divisor should be positive"];
   function symbol$1(x, y){
    if(y <= 0){
     var a = to_string(y), b = to_string(x);
     caml_call3(Base_Printf[7].call(null, h), b, a, 0);
    }
    var rval = rem(x, y);
    return rval < 0 ? rval + y | 0 : rval;
   }
   function symbol$2(x, y){
    if(y <= 0){
     var a = to_string(y), b = to_string(x);
     caml_call3(Base_Printf[7].call(null, i), b, a, 0);
    }
    return x < 0 ? caml_div(x + 1 | 0, y) - 1 | 0 : caml_div(x, y);
   }
   function symbol$3(x, y){return Base_Import[96].call(null, x, y);}
   var
    lnot = Base_Import[117],
    include$2 = Base_Import[97],
    ascending = include$2[1],
    descending = include$2[2],
    max = include$2[3],
    min = include$2[4],
    Base_Int =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string$0,
       to_string,
       function(b, a){return b === a ? 1 : 0;},
       caml_int_compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       caml_int_compare,
       function(b, a){return b === a ? 1 : 0;},
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       one,
       -1,
       rem,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(a){return runtime.Base_int_math_int_clz(a);},
       function(a){return runtime.Base_int_math_int_ctz(a);},
       [0, symbol$0, lnot, abs, zero, symbol$1, symbol$2, symbol$3],
       symbol$0,
       lnot,
       abs,
       zero,
       symbol$1,
       symbol$2,
       symbol$3,
       1073741823,
       of_int_exn,
       to_int,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       [0, [0, F[1], F[2], F[3]]]];
   runtime.caml_register_global(34, Base_Int, "Base__Int");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sys
//# unitInfo: Requires: Base__Sys0
//# shape: Base__Sys:[F(1),N,N,N,N,N,N,[N],N,N,N,N,N,F(1),F(1),N,F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Sys0 = global_data.Base__Sys0,
    backend_type = Base_Sys0[1],
    interactive = Base_Sys0[2],
    os_type = Base_Sys0[3],
    unix = Base_Sys0[4],
    win32 = Base_Sys0[5],
    cygwin = Base_Sys0[6],
    word_size_in_bits = Base_Sys0[7],
    int_size_in_bits = Base_Sys0[8],
    big_endian = Base_Sys0[9],
    max_string_length = Base_Sys0[10],
    max_array_length = Base_Sys0[11],
    runtime_variant = Base_Sys0[12],
    runtime_parameters = Base_Sys0[13],
    argv = Base_Sys0[14],
    get_argv = Base_Sys0[15],
    ocaml_version = Base_Sys0[16],
    enable_runtime_warnings = Base_Sys0[17],
    runtime_warnings_enabled = Base_Sys0[18],
    getenv_exn = Base_Sys0[20],
    getenv = Base_Sys0[21],
    Base_Sys =
      [0,
       get_argv,
       argv,
       interactive,
       os_type,
       unix,
       win32,
       cygwin,
       backend_type,
       word_size_in_bits,
       int_size_in_bits,
       big_endian,
       max_string_length,
       max_array_length,
       runtime_variant,
       runtime_parameters,
       ocaml_version,
       enable_runtime_warnings,
       runtime_warnings_enabled,
       getenv,
       getenv_exn];
   runtime.caml_register_global(1, Base_Sys, "Base__Sys");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Obj_local
//# unitInfo: Requires: Base__Sys, Sexplib0__Sexp_conv_error
//# shape: Base__Obj_local:[F(1)*,F(1)*,F(1),F(2)*,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Heap = "Heap",
    cst_Immediate = "Immediate",
    cst_Stack = "Stack",
    cst_heap = "heap",
    cst_immediate = "immediate",
    cst_stack = "stack",
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "obj_local.ml.stack_or_heap",
    Base_Sys = global_data.Base__Sys,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    a = [0, cst_Immediate],
    b = [0, cst_Stack],
    c = [0, cst_Heap];
   function size(t){return t.length - 1;}
   function stack_or_heap_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var a = sexp_004[1];
      b:
      if(a !== cst_Heap){
       c:
       if(a !== cst_Immediate){
        if(a !== cst_Stack){
         if(a === cst_heap) break b;
         if(a === cst_immediate) break c;
         if(a !== cst_stack) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var match = sexp_004[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_003, sexp_004);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_003, sexp_004);
     var b = match$0[1];
     b:
     if(b !== cst_Heap){
      c:
      if(b !== cst_Immediate){
       if(b !== cst_Stack){
        if(b === cst_heap) break b;
        if(b === cst_immediate) break c;
        if(b !== cst_stack) break a;
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_003, sexp_004);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_003, sexp_004);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_003, sexp_004);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_003, sexp_004);
   }
   function sexp_of_stack_or_heap(param){
    switch(param){case 0: return a;case 1: return b;default: return c;
    }
   }
   var compare_stack_or_heap = runtime.caml_int_compare;
   function stack_or_heap(repr){
    if(typeof repr === "number") return 0;
    var match = Base_Sys[8];
    return typeof match === "number"
            ? match ? 2 : runtime.caml_dummy_obj_is_stack(repr) ? 1 : 2
            : 2;
   }
   var
    Base_Obj_local =
      [0,
       size,
       sexp_of_stack_or_heap,
       stack_or_heap_of_sexp,
       compare_stack_or_heap,
       stack_or_heap];
   runtime.caml_register_global(18, Base_Obj_local, "Base__Obj_local");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Obj_array
//# unitInfo: Requires: Base__Array0, Base__Blit, Base__Import, Base__Int0, Base__String0, Stdlib__Obj
//# shape: Base__Obj_array:[F(1),N,N,N,N,F(1),F(2),F(1)*,F(1),F(1),N,F(1)*,F(2),F(2)*,F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Array0 = global_data.Base__Array0,
    Base_Int0 = global_data.Base__Int0,
    Base_String0 = global_data.Base__String0,
    Assert_failure = global_data.Assert_failure,
    Base_Blit = global_data.Base__Blit,
    a = [0, "src/obj_array.ml", 12, 2],
    b = [0, ">", 0],
    cst_Obj_array_t_of_length = "<Obj_array.t of length ",
    c = [0, ""];
   function invariant(t){
    var b = Stdlib_Obj[17];
    if(caml_obj_tag(t) !== b) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   function length(a){return a.length - 1;}
   function sexp_of_t(t){
    var
     a =
       [0,
        cst_Obj_array_t_of_length,
        [0, Base_Int0[1].call(null, t.length - 1), b]];
    return [0, Base_String0[20].call(null, c, a)];
   }
   var zero_obj = 0;
   function create_zero(len){return Base_Array0[4].call(null, len, zero_obj);}
   var empty = [0];
   function get(t, i){return caml_check_bound(t, i)[i + 1];}
   function unsafe_get(t, i){return t[i + 1];}
   function unsafe_set_with_caml_modify(t, i, obj){t[i + 1] = obj; return 0;}
   function set_with_caml_modify(t, i, obj){
    caml_check_bound(t, i)[i + 1] = obj;
    return 0;
   }
   function unsafe_set_int_assuming_curren(t, i, int){t[i + 1] = int; return 0;
   }
   function set(t, i, obj){
    var old_obj = get(t, i);
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    var a = 1 - (old_obj === obj ? 1 : 0);
    return a ? unsafe_set_with_caml_modify(t, i, obj) : a;
   }
   function unsafe_set(t, i, obj){
    var old_obj = t[i + 1];
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    var a = 1 - (old_obj === obj ? 1 : 0);
    return a ? unsafe_set_with_caml_modify(t, i, obj) : a;
   }
   function unsafe_set_omit_phys_equal_che(t, i, obj){
    var old_obj = t[i + 1];
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    return unsafe_set_with_caml_modify(t, i, obj);
   }
   function swap(t, i, j){
    var a = get(t, i), b = get(t, j);
    unsafe_set(t, i, b);
    return unsafe_set(t, j, a);
   }
   function create(len, x){
    if(typeof x !== "number"){
     var b = Stdlib_Obj[16];
     if(caml_obj_tag(x) === b){
      var t = create_zero(len), a = Base_Import[93].call(null, len, 1), c = 0;
      if(a >= 0){
       var i = c;
       for(;;){
        unsafe_set_with_caml_modify(t, i, x);
        var d = i + 1 | 0;
        if(a === i) break;
        i = d;
       }
      }
      return t;
     }
    }
    return Base_Array0[4].call(null, len, x);
   }
   function singleton(obj){return create(1, obj);}
   function unsafe_set_assuming_currently_(t, i, obj){
    return typeof obj === "number"
            ? unsafe_set_int_assuming_curren(t, i, obj)
            : unsafe_set_with_caml_modify(t, i, obj);
   }
   function unsafe_set_int(t, i, int){
    var old_obj = t[i + 1];
    return typeof old_obj === "number"
            ? unsafe_set_int_assuming_curren(t, i, int)
            : unsafe_set_with_caml_modify(t, i, int);
   }
   function unsafe_clear_if_pointer(t, i){
    var old_obj = t[i + 1], a = 1 - (typeof old_obj === "number" ? 1 : 0);
    return a ? unsafe_set_with_caml_modify(t, i, 0) : a;
   }
   function unsafe_blit(src, src_pos, dst, dst_pos, len){
    if(dst_pos < src_pos){
     var a = Base_Import[93].call(null, len, 1), c = 0;
     if(a >= 0){
      var i = c;
      for(;;){
       var i$0 = Base_Import[91].call(null, src_pos, i), f = src[i$0 + 1];
       unsafe_set(dst, Base_Import[91].call(null, dst_pos, i), f);
       var d = i + 1 | 0;
       if(a === i) break;
       i = d;
      }
     }
     return 0;
    }
    var b = Base_Import[93].call(null, len, 1);
    if(b >= 0){
     var i$1 = b;
     for(;;){
      var i$2 = Base_Import[91].call(null, src_pos, i$1), g = src[i$2 + 1];
      unsafe_set(dst, Base_Import[91].call(null, dst_pos, i$1), g);
      var e = i$1 - 1 | 0;
      if(0 === i$1) break;
      i$1 = e;
     }
    }
    return 0;
   }
   var
    include = Base_Blit[1].call(null, [0, length, create_zero, unsafe_blit]),
    blit = include[1],
    blito = include[2],
    unsafe_blit$0 = include[3],
    subo = include[5];
   function copy(src){
    var dst = create_zero(src.length - 1);
    caml_call6(blito, src, 0, 0, dst, 0, 0);
    return dst;
   }
   var
    sub = Base_Array0[15],
    Base_Obj_array =
      [0,
       sexp_of_t,
       blit,
       blito,
       unsafe_blit$0,
       subo,
       invariant,
       create,
       create_zero,
       copy,
       singleton,
       empty,
       length,
       get,
       unsafe_get,
       set,
       unsafe_set,
       swap,
       set_with_caml_modify,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       unsafe_clear_if_pointer,
       sub];
   runtime.caml_register_global(12, Base_Obj_array, "Base__Obj_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uniform_array
//# unitInfo: Requires: Base__Array, Base__Binary_searchable, Base__Blit, Base__Container, Base__Import, Base__Int, Base__List, Base__Obj_array, Base__Option, Base__Sexpable, Sexplib0__Sexp_grammar, Stdlib__Obj
//# shape: Base__Uniform_array:[N,N,F(1)*,F(3),F(3),F(1),N,F(2),F(1),F(2),F(1)*,F(2),F(2)*,F(2)*,F(3),F(3),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(3),F(3),F(1)*,F(1),F(1),F(1),F(1),F(1),N,N,N,N,N,F(1),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(4),F(2),F(2),N,N,N,F(1)*,F(1)*,F(3),F(3),F(3),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_uniform_array_ml = "src/uniform_array.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Container = global_data.Base__Container,
    Assert_failure = global_data.Assert_failure,
    Base_Array = global_data.Base__Array,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Int = global_data.Base__Int,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Obj_array = global_data.Base__Obj_array,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Blit = global_data.Base__Blit,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    empty = Base_Obj_array[11];
   function unsafe_create_uninitialized(len){
    return Base_Obj_array[8].call(null, len);
   }
   function create_obj_array(len){return Base_Obj_array[8].call(null, len);}
   function create(len, x){return Base_Obj_array[7].call(null, len, x);}
   function singleton(x){return Base_Obj_array[10].call(null, x);}
   function swap(t, i, j){return Base_Obj_array[17].call(null, t, i, j);}
   function get(arr, i){return Base_Obj_array[13].call(null, arr, i);}
   function set(arr, i, x){return Base_Obj_array[15].call(null, arr, i, x);}
   function unsafe_get_local(arr, i){
    return Base_Obj_array[14].call(null, arr, i);
   }
   function unsafe_get(arr, i){return unsafe_get_local(arr, i);}
   function unsafe_set(arr, i, x){
    return Base_Obj_array[16].call(null, arr, i, x);
   }
   function unsafe_set_int(arr, i, x){
    return Base_Obj_array[21].call(null, arr, i, x);
   }
   function unsafe_set_int_assuming_curren(arr, i, x){return Base_Obj_array[20].call(null, arr, i, x);
   }
   function unsafe_set_assuming_currently_(arr, i, x){return Base_Obj_array[19].call(null, arr, i, x);
   }
   function unsafe_to_array_inplace_promis(arr){return arr;}
   var
    length = Base_Obj_array[12],
    unsafe_blit = Base_Obj_array[4],
    copy = Base_Obj_array[9];
   function unsafe_set_omit_phys_equal_che(t, i, x){return Base_Obj_array[22].call(null, t, i, x);
   }
   function unsafe_set_with_caml_modify(t, i, x){
    return Base_Obj_array[23].call(null, t, i, x);
   }
   function set_with_caml_modify(t, i, x){
    return Base_Obj_array[18].call(null, t, i, x);
   }
   var
    unsafe_clear_if_pointer = Base_Obj_array[24],
    sub = Base_Obj_array[25],
    a = [0, cst_src_uniform_array_ml, 80, 2],
    cst_Uniform_array_init = "Uniform_array.init",
    cst_Array_fold2_exn = "Array.fold2_exn",
    cst_Array_map2_exn = "Array.map2_exn",
    dummy = 0;
   function invariant(t){
    var b = Stdlib_Obj[17];
    if(runtime.caml_obj_tag(t) !== b) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   function init(l, f){
    if(0 > l) return Base_Import[126].call(null, cst_Uniform_array_init);
    var
     res = unsafe_create_uninitialized(l),
     a = Base_Import[93].call(null, l, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      unsafe_set(res, i, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return res;
   }
   function of_array(arr){
    return init(arr.length - 1, function(a){return arr[a + 1];});
   }
   function map(arr, f){
    return init
            (length(arr),
             function(i){return caml_call1(f, unsafe_get_local(arr, i));});
   }
   function mapi(arr, f){
    return init
            (length(arr),
             function(i){return caml_call2(f, i, unsafe_get_local(arr, i));});
   }
   function iter(arr, f){
    var c = length(arr), a = Base_Import[93].call(null, c, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call1(f, unsafe_get_local(arr, i));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return 0;
   }
   function iteri(arr, f){
    var c = length(arr), a = Base_Import[93].call(null, c, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i, unsafe_get_local(arr, i));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return 0;
   }
   function foldi(arr, init, f){
    var
     acc = [0, init],
     c = length(arr),
     a = Base_Import[93].call(null, c, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var e = unsafe_get_local(arr, i);
      acc[1] = caml_call3(f, i, acc[1], e);
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return acc[1];
   }
   function fold(arr, init, f){
    var
     r = [0, init],
     c = length(arr),
     a = Base_Import[93].call(null, c, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var e = unsafe_get_local(arr, i);
      r[1] = caml_call2(f, r[1], e);
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return r[1];
   }
   function to_list(t){
    var a = length(t);
    return Base_List[40].call(null, a, function(a){return get(t, a);});
   }
   function of_list(l){
    var
     len = Base_List[45].call(null, l),
     res = unsafe_create_uninitialized(len);
    Base_List[34].call(null, l, function(i, x){return set(res, i, x);});
    return res;
   }
   function of_list_rev(l){
    var
     len = Base_List[45].call(null, l),
     res = unsafe_create_uninitialized(len);
    Base_List[34].call
     (null,
      l,
      function(i, x){
       var a = Base_Import[93].call(null, len, i);
       return set(res, Base_Import[93].call(null, a, 1), x);
      });
    return res;
   }
   function to_array(arr){
    var a = length(arr);
    return Base_Array[41].call
            (null, a, function(i){return unsafe_get_local(arr, i);});
   }
   function exists(arr, f){
    var
     a = length(arr),
     i = [0, Base_Import[93].call(null, a, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      var i$0 = i[1];
      if(caml_call1(f, unsafe_get_local(arr, i$0))){result[1] = 1; continue;}
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function existsi(arr, f){
    var
     a = length(arr),
     i = [0, Base_Import[93].call(null, a, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      var i$0 = i[1], b = unsafe_get_local(arr, i$0);
      if(caml_call2(f, i[1], b)){result[1] = 1; continue;}
      i[1]--;
      continue;
     }
     return result[1];
    }
   }
   function for_all(arr, f){
    var
     a = length(arr),
     i = [0, Base_Import[93].call(null, a, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      var i$0 = i[1];
      if(caml_call1(f, unsafe_get_local(arr, i$0))){i[1]--; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_alli(arr, f){
    var
     length$0 = length(arr),
     i = [0, Base_Import[93].call(null, length$0, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      var i$0 = i[1], a = unsafe_get_local(arr, i$0);
      if(caml_call2(f, i[1], a)){i[1]--; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function filter_mapi(arr, f){
    var
     r = [0, empty],
     k = [0, 0],
     d = length(arr),
     b = Base_Import[93].call(null, d, 1),
     c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      var match = caml_call2(f, i, unsafe_get_local(arr, i));
      if(match){
       var a = match[1];
       if(0 === k[1]) r[1] = create(length(arr), a);
       unsafe_set(r[1], k[1], a);
       k[1]++;
      }
      var g = i + 1 | 0;
      if(b === i) break;
      i = g;
     }
    }
    var e = length(arr);
    return k[1] === e ? r[1] : 0 < k[1] ? sub(r[1], 0, k[1]) : empty;
   }
   function filteri(t, f){
    return filter_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
   }
   function filter_map(t, f){
    return filter_mapi(t, function(i, a){return caml_call1(f, a);});
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function fold2_exn(arr$0, arr, init, f){
    var len = length(arr$0);
    if(length(arr) !== len) Base_Import[126].call(null, cst_Array_fold2_exn);
    var acc = [0, init], a = Base_Import[93].call(null, len, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var e = unsafe_get_local(arr, i), d = unsafe_get_local(arr$0, i);
      acc[1] = caml_call3(f, acc[1], d, e);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return acc[1];
   }
   function map2_exn(arr$0, arr, f){
    var len = length(arr$0);
    if(length(arr) !== len) Base_Import[126].call(null, cst_Array_map2_exn);
    return init
            (len,
             function(i){
              var a = unsafe_get_local(arr, i);
              return caml_call2(f, unsafe_get_local(arr$0, i), a);
             });
   }
   function concat(ts){
    var
     total_len =
       Base_List[26].call
        (null,
         [0, Base_Int[79], function(b, a){return b + a | 0;}],
         ts,
         function(t){return length(t);}),
     res = unsafe_create_uninitialized(total_len);
    Base_List[20].call
     (null,
      ts,
      0,
      function(so_far, t){
       var len = length(t), a = Base_Import[93].call(null, len, 1), b = 0;
       if(a >= 0){
        var i = b;
        for(;;){
         var c = get(t, i);
         set(res, Base_Import[91].call(null, so_far, i), c);
         var d = i + 1 | 0;
         if(a === i) break;
         i = d;
        }
       }
       return Base_Import[91].call(null, so_far, len);
      });
    return res;
   }
   function concat_mapi(t, f){
    var a = to_list(t);
    return concat(Base_List[41].call(null, a, f));
   }
   function concat_map(t, f){
    var a = to_list(t);
    return concat(Base_List[53].call(null, a, f));
   }
   function partition_map(arr, f){
    var
     right = [0, empty],
     left = [0, empty],
     right_idx = [0, 0],
     left_idx = [0, 0];
    function append(data, idx, value){
     if(0 === idx[1]) data[1] = create(length(arr), value);
     unsafe_set(data[1], idx[1], value);
     idx[1]++;
    }
    var d = length(arr), b = Base_Import[93].call(null, d, 1), c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      var match = caml_call1(f, unsafe_get_local(arr, i));
      if(0 === match[0]){
       var a = match[1];
       append(left, left_idx, a);
      }
      else{var a$0 = match[1]; append(right, right_idx, a$0);}
      var g = i + 1 | 0;
      if(b === i) break;
      i = g;
     }
    }
    function trim(data, idx){
     var a = length(arr);
     return idx[1] === a
             ? data[1]
             : 0 < idx[1] ? sub(data[1], 0, idx[1]) : empty;
    }
    var e = trim(right, right_idx);
    return [0, trim(left, left_idx), e];
   }
   function find_map(arr, f){
    var length$0 = length(arr);
    if(0 === length$0) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(Base_Option[52].call(null, value_found[1]) && i[1] < length$0){
      var i$0 = i[1], value = unsafe_get_local(arr, i$0);
      value_found[1] = caml_call1(f, value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   function find_mapi(arr, f){
    var length$0 = length(arr);
    if(0 === length$0) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(Base_Option[52].call(null, value_found[1]) && i[1] < length$0){
      var i$0 = i[1], value = unsafe_get_local(arr, i$0);
      value_found[1] = caml_call2(f, i[1], value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   function find(arr, f){
    var length$0 = length(arr);
    function b(param){var x = param[2]; return x;}
    if(0 === length$0)
     var a = 0;
    else{
     var
      i = [0, 0],
      found = [0, 0],
      value_found = [0, unsafe_get_local(arr, 0)];
     for(;;){
      if(! found[1] && i[1] < length$0){
       var i$0 = i[1], value = unsafe_get_local(arr, i$0);
       if(caml_call1(f, value)){
        value_found[1] = value;
        found[1] = 1;
        continue;
       }
       i[1]++;
       continue;
      }
      if(found[1]){var a = [0, [0, i[1], value_found[1]]]; break;}
      var a = 0;
      break;
     }
    }
    return caml_call2(Base_Option[24], a, b);
   }
   function findi(arr, f){
    var len = length(arr), i = 0;
    for(;;){
     if(len <= i) return 0;
     var x = unsafe_get_local(arr, i);
     if(caml_call2(f, i, x)) return [0, [0, i, x]];
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
    }
   }
   function t_sexp_grammar(grammar){
    var a = Base_Array[6].call(null, grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   var
    include$1 =
      Base_Sexpable[2].call
       (null, [0, Base_Array[4], Base_Array[5]], [0, to_array, of_array]),
    t_of_sexp = include$1[1],
    sexp_of_t = include$1[2],
    b = [0, cst_src_uniform_array_ml, 347, 6];
   function create_like(len, t){
    if(0 === len) return empty;
    if(0 < length(t)) return create(len, get(t, 0));
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   var
    include = Base_Blit[4].call(null, [0, create_like, length, unsafe_blit]),
    blit = include[1],
    blito = include[2],
    unsafe_blit$0 = include[3],
    sub$0 = include[4],
    subo = include[5];
   function min_elt(t, compare){
    return Base_Container[3].call(null, fold, t, compare);
   }
   function max_elt(t, compare){
    return Base_Container[4].call(null, fold, t, compare);
   }
   function compare_local(compare_elt, a, b){
    if(a === b) return 0;
    var
     len_a = length(a),
     len_b = length(b),
     ret = runtime.caml_int_compare(len_a, len_b);
    if(0 !== ret) return ret;
    var i = 0;
    for(;;){
     if(i === len_a) return 0;
     var
      l = unsafe_get_local(a, i),
      r = unsafe_get_local(b, i),
      res = caml_call2(compare_elt, l, r);
     if(0 !== res) return res;
     var i$0 = Base_Import[91].call(null, i, 1);
     i = i$0;
    }
   }
   function compare(compare_elt, a, b){
    return compare_local(compare_elt, a, b);
   }
   var
    Sort = caml_call1(Base_Array[109][2], [0, unsafe_get, unsafe_set, length]),
    sort = Sort[1],
    include$0 = Base_Binary_searchable[2].call(null, [0, unsafe_get, length]),
    binary_search = include$0[1],
    binary_search_segmented = include$0[2],
    Base_Uniform_array =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare,
       compare_local,
       invariant,
       empty,
       create,
       singleton,
       init,
       length,
       get,
       unsafe_get,
       unsafe_get_local,
       set,
       unsafe_set,
       swap,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map,
       mapi,
       iter,
       iteri,
       fold,
       foldi,
       unsafe_to_array_inplace_promis,
       of_array,
       to_array,
       of_list,
       of_list_rev,
       to_list,
       blit,
       blito,
       unsafe_blit$0,
       sub$0,
       subo,
       copy,
       exists,
       existsi,
       for_all,
       for_alli,
       concat,
       concat_map,
       concat_mapi,
       partition_map,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       find,
       findi,
       find_map,
       find_mapi,
       map2_exn,
       fold2_exn,
       min_elt,
       max_elt,
       sort,
       binary_search,
       binary_search_segmented,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer];
   runtime.caml_register_global(18, Base_Uniform_array, "Base__Uniform_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar_intf
//# shape: Base__Uchar_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Uchar_intf = [0];
   runtime.caml_register_global(0, Base_Uchar_intf, "Base__Uchar_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar
//# unitInfo: Requires: Base__Bytes0, Base__Comparable, Base__Error, Base__Hash, Base__Hashable, Base__Import, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String0, Base__Uchar0, Base__Uchar_intf, Sexplib0__Sexp_grammar, Stdlib, Stdlib__Scanf
//# shape: Base__Uchar:[F(2),F(1),F(1),F(1),N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,N,N,N,N,F(2)*,F(2)*,N,F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),N,N,N,N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_U = "U+",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Uchar",
    codec_name = "UTF-8",
    module_name$0 = "Base.Uchar.Utf8",
    codec_name$0 = "UTF-16LE",
    module_name$1 = "Base.Uchar.Utf16le",
    codec_name$1 = "UTF-16BE",
    module_name$2 = "Base.Uchar.Utf16be",
    codec_name$2 = "UTF-32LE",
    module_name$3 = "Base.Uchar.Utf32le",
    codec_name$3 = "UTF-32BE",
    module_name$4 = "Base.Uchar.Utf32be",
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Base_Bytes0 = global_data.Base__Bytes0,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Hashable = global_data.Base__Hashable,
    Base_Uchar0 = global_data.Base__Uchar0,
    Stdlib = global_data.Stdlib,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Comparable = global_data.Base__Comparable,
    Base_String0 = global_data.Base__String0,
    failwithf = Base_Printf[6],
    is_valid = Base_Uchar0[3],
    is_char = Base_Uchar0[4],
    unsafe_to_char = Base_Uchar0[5],
    unsafe_of_int = Base_Uchar0[6],
    to_int = Base_Uchar0[8],
    of_char = Base_Uchar0[9],
    compare = Base_Uchar0[10],
    min_value = Base_Uchar0[12],
    max_value = Base_Uchar0[13],
    byte_order_mark = Base_Uchar0[14],
    replacement_char = Base_Uchar0[15],
    utf_8_byte_length = Base_Uchar0[16],
    utf_16_byte_length = Base_Uchar0[17],
    a = [0, [11, cst_U, [4, 8, [0, 2, 4], 0, 0]], "U+%04X"],
    cst_Uchar_t_of_sexp_atom_of_th =
      "Uchar.t_of_sexp: atom of the form U+XXXX needed",
    b = [0, [11, cst_U, [4, 8, 0, 0, 0]], "U+%X"],
    cst_Uchar_t_of_sexp_atom_neede = "Uchar.t_of_sexp: atom needed";
   function hash_fold_t(state, t){
    var a = to_int(t);
    return Base_Hash[3].call(null, state, a);
   }
   function hash(t){return Base_Hash[14].call(null, 0, hash_fold_t, t);}
   function to_string_internal(t){
    var b = to_int(t);
    return caml_call1(Base_Printf[2].call(null, a), b);
   }
   function sexp_of_t(t){return [0, to_string_internal(t)];}
   function t_of_sexp(sexp){
    if(0 !== sexp[0])
     return Base_Import[156].call(null, cst_Uchar_t_of_sexp_atom_neede, sexp);
    var s = sexp[1];
    try{
     var
      a =
        caml_call1
         (Stdlib_Scanf[5].call(null, s, b),
          function(i){return Base_Uchar0[7].call(null, i);});
     return a;
    }
    catch(exn){
     return Base_Import[156].call(null, cst_Uchar_t_of_sexp_atom_of_th, sexp);
    }
   }
   var
    t_sexp_grammar = Sexplib0_Sexp_grammar[1].call(null, Base_Import[182]),
    include =
      Base_Pretty_printer[2].call(null, [0, module_name, to_string_internal]),
    pp = include[1],
    include$0 = Base_Comparable[11].call(null, [0, compare, sexp_of_t]),
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator = include$0[16],
    c = [0, [11, "Uchar.succ_exn: ", [2, 0, 0]], "Uchar.succ_exn: %s"],
    d = [0, [11, "Uchar.pred_exn: ", [2, 0, 0]], "Uchar.pred_exn: %s"],
    e =
      [0,
       [11,
        "Uchar.of_int_exn got a invalid Unicode scalar value: ",
        [4, 8, [0, 2, 4], 0, 0]],
       "Uchar.of_int_exn got a invalid Unicode scalar value: %04X"],
    f =
      [0,
       [11,
        "Uchar.to_char_exn got a non latin-1 character: U+",
        [4, 8, [0, 2, 4], 0, 0]],
       "Uchar.to_char_exn got a non latin-1 character: U+%04X"];
   function invariant(param){return 0;}
   function succ_exn(c$0){
    try{var a = Base_Uchar0[1].call(null, c$0); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return caml_call2(failwithf(c), msg, 0);
    }
   }
   function succ(c){
    try{var a = [0, Base_Uchar0[1].call(null, c)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function pred_exn(c){
    try{var a = Base_Uchar0[2].call(null, c); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return caml_call2(failwithf(d), msg, 0);
    }
   }
   function pred(c){
    try{var a = [0, Base_Uchar0[2].call(null, c)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function of_scalar(i){return is_valid(i) ? [0, unsafe_of_int(i)] : 0;}
   function of_scalar_exn(i){
    return is_valid(i) ? unsafe_of_int(i) : caml_call2(failwithf(e), i, 0);
   }
   function to_scalar(t){return Base_Uchar0[8].call(null, t);}
   function to_char(c){return is_char(c) ? [0, unsafe_to_char(c)] : 0;}
   function to_char_exn(c){
    if(is_char(c)) return unsafe_to_char(c);
    var a = to_int(c);
    return caml_call2(failwithf(f), a, 0);
   }
   var compare$0 = runtime.caml_int_compare;
   function equal(b, a){return b === a ? 1 : 0;}
   function hash_fold_t$0(state, t){
    var a = Base_Hashable[6].call(null, t);
    return caml_call2(Base_Import[206], state, a);
   }
   var
    hash$0 = Base_Hashable[6],
    is_valid$0 = Base_Uchar0[18],
    bytes_consumed = Base_Uchar0[20],
    uchar_or_replacement_char = Base_Uchar0[19],
    g =
      [0,
       "Uchar.Decode_result.uchar_exn was called on an invalid decode result"],
    h = [0, "src/uchar.ml", 134, 4],
    cst_of_string_expected_a_singl =
      ".of_string: expected a single Unicode character",
    cst_string = "string";
   function sexp_of_t$0(t){return sexp_of_t(uchar_or_replacement_char(t));}
   function uchar(t){
    return is_valid$0(t) ? [0, uchar_or_replacement_char(t)] : 0;
   }
   function uchar_exn(t){
    return is_valid$0(t)
            ? uchar_or_replacement_char(t)
            : Base_Error[32].call(null, g);
   }
   function Make_utf(Format){
    var codec_name = Format[1], byte_length = Format[3];
    function to_string(t){
     var
      len = caml_call1(byte_length, t),
      bytes = Base_Bytes0[7].call(null, len),
      pos = caml_call3(Format[5], bytes, 0, t);
     if(pos === len) return runtime.caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
    }
    var
     of_string_message =
       Base_Import[112].call(null, Format[2], cst_of_string_expected_a_singl);
    function of_string(string){
     var
      decode = caml_call2(Format[4], string, 0),
      string_len = runtime.caml_ml_string_length(string),
      decode_len = bytes_consumed(decode);
     if(string_len === decode_len && is_valid$0(decode))
      return uchar_or_replacement_char(decode);
     var
      a =
        Base_Sexp[10].call
         (null, of_string_message, [0, [0, cst_string, [0, string]], 0]);
     return Base_Error[32].call(null, a);
    }
    return [0, of_string, to_string, byte_length, codec_name];
   }
   var
    get_decode_result = Base_String0[15],
    set = Base_Bytes0[8],
    Utf8 =
      Make_utf
       ([0,
         codec_name,
         module_name$0,
         utf_8_byte_length,
         get_decode_result,
         set]),
    get_decode_result$0 = Base_String0[16],
    set$0 = Base_Bytes0[9],
    Utf16le =
      Make_utf
       ([0,
         codec_name$0,
         module_name$1,
         utf_16_byte_length,
         get_decode_result$0,
         set$0]),
    get_decode_result$1 = Base_String0[17],
    set$1 = Base_Bytes0[10],
    Utf16be =
      Make_utf
       ([0,
         codec_name$1,
         module_name$2,
         utf_16_byte_length,
         get_decode_result$1,
         set$1]);
   function byte_length(param){return 4;}
   var
    get_decode_result$2 = Base_String0[18],
    set$2 = Base_Bytes0[12],
    Utf32le =
      Make_utf
       ([0,
         codec_name$2,
         module_name$3,
         byte_length,
         get_decode_result$2,
         set$2]);
   function byte_length$0(param){return 4;}
   var
    get_decode_result$3 = Base_String0[19],
    set$3 = Base_Bytes0[13],
    Utf32be =
      Make_utf
       ([0,
         codec_name$3,
         module_name$4,
         byte_length$0,
         get_decode_result$3,
         set$3]),
    include$1 = Base_Import[107],
    symbol = include$1[1],
    symbol$0 = include$1[2],
    symbol$1 = include$1[3],
    symbol$2 = include$1[4],
    symbol$3 = include$1[5],
    symbol$4 = include$1[6],
    ascending = include$1[7],
    descending = include$1[8],
    compare$1 = include$1[9],
    equal$0 = include$1[10],
    compare_local = include$1[11],
    equal_local = include$1[12],
    max = include$1[13],
    min = include$1[14],
    Base_Uchar =
      [0,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal$0,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local,
       pp,
       invariant,
       succ,
       succ_exn,
       pred,
       pred_exn,
       is_char,
       to_char,
       to_char_exn,
       of_char,
       is_valid,
       of_scalar,
       of_scalar_exn,
       to_scalar,
       utf_8_byte_length,
       utf_16_byte_length,
       min_value,
       max_value,
       byte_order_mark,
       replacement_char,
       [0,
        compare$0,
        equal,
        hash_fold_t$0,
        hash$0,
        sexp_of_t$0,
        is_valid$0,
        bytes_consumed,
        uchar,
        uchar_exn,
        uchar_or_replacement_char],
       Utf8,
       Utf16le,
       Utf16be,
       Utf32le,
       Utf32be];
   runtime.caml_register_global(38, Base_Uchar, "Base__Uchar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Type_equal_intf
//# shape: Base__Type_equal_intf:[F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function Type_equal_defns(Type_equal){
    function Composition_preserves_injectiv(M1, M2){
     function strip(e){
      var a = caml_call1(M2[1], e);
      return caml_call1(M1[1], a);
     }
     return [0, strip];
    }
    return [0, Composition_preserves_injectiv];
   }
   function Type_equal_id_defns(Id){return [0];}
   var Base_Type_equal_intf = [0, Type_equal_defns, Type_equal_id_defns];
   runtime.caml_register_global
    (0, Base_Type_equal_intf, "Base__Type_equal_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Type_equal
//# unitInfo: Requires: Base__Comparable, Base__Error, Base__Hash, Base__Import, Base__Sexp, Base__Type_equal_intf, Stdlib__Obj
//# shape: Base__Type_equal:[F(3)*,N,N,F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_T = "T",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hash = global_data.Base__Hash,
    Base_Type_equal_intf = global_data.Base__Type_equal_intf,
    Base_Comparable = global_data.Base__Comparable,
    a = [0, cst_T];
   function sexp_of_t(of_a_001, of_b_002, param){return a;}
   var
    include = Base_Type_equal_intf[1].call(null, [0]),
    Composition_preserves_injectiv = include[1],
    b = [0, 0, 0];
   function sym(param){return 0;}
   function trans(a, param){return 0;}
   function conv(param, a){return a;}
   function Lift(X){function lift(param){return 0;} return [0, lift];}
   function Lift2(X){function lift(a, param){return 0;} return [0, lift];}
   function Lift3(X){function lift(b, a, param){return 0;} return [0, lift];}
   function detuple2(param){return b;}
   function tuple2(a, param){return 0;}
   function compare(a_005, b_006){
    if(a_005 === b_006) return 0;
    var
     b_010 = b_006[2],
     b_008 = b_006[1],
     a_009 = a_005[2],
     a_007 = a_005[1],
     n = caml_call2(Base_Import[228], a_007, b_008);
    return 0 === n ? caml_call3(Base_Import[236], compare, a_009, b_010) : n;
   }
   var letrec_function_context = [];
   function hash_fold_t(hsv, arg){
    var
     a1 = arg[2],
     a0 = arg[1],
     hsv$0 = caml_call2(Base_Import[206], hsv, a0);
    return caml_call3(Base_Import[212], hash_fold_t, hsv$0, a1);
   }
   function hash(x){return caml_call1(letrec_function_context[1], x);}
   function func(arg){
    var hsv = Base_Hash[11].call(null, 0, 0), a = hash_fold_t(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   runtime.caml_update_dummy(letrec_function_context, [0, func]);
   var c = [0, cst_T];
   function sexp_of_t$0(param){
    var
     arg1_014 = param[2],
     arg0_013 = param[1],
     res0_015 = Base_Import[139].call(null, arg0_013),
     res1_016 = Base_Import[149].call(null, sexp_of_t$0, arg1_014);
    return [1, [0, c, [0, res0_015, [0, res1_016, 0]]]];
   }
   var
    include$0 = Base_Comparable[11].call(null, [0, compare, sexp_of_t$0]),
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    equal = include$0[7],
    compare$0 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator = include$0[16],
    cst_Type_equal_Id_same_witness =
      "Type_equal.Id.same_witness_exn got different ids",
    cst_Base_Type_equal_Id_Create0 = "Base__Type_equal.Id.Create0(T).T0",
    d = [0, 0],
    cst_Base_Type_equal_Id_Create1 = "Base__Type_equal.Id.Create1(T).T1",
    e = [0, 0],
    cst_Base_Type_equal_Id_Create2 = "Base__Type_equal.Id.Create2(T).T2",
    f = [0, 0],
    cst_Base_Type_equal_Id_Create3 = "Base__Type_equal.Id.Create3(T).T3",
    g = [0, 0],
    dummy = 0;
   function create(key, args){
    var
     a = Stdlib_Obj[22][1].call(null, key),
     tag = Stdlib_Obj[22][3].call(null, a);
    return [0, tag, args];
   }
   function uid(A){return A[2];}
   function name(A){return A[3];}
   function sexp_of_t$1(param, A){return A[4];}
   function to_sexp(A){return A[1];}
   function hash$0(t){return hash(t[2]);}
   function hash_fold_t$0(state, t){return hash_fold_t(state, t[2]);}
   function same_witness(A, B){return caml_call1(A[6], B[5]);}
   function same_witness_exn(t1, t2){
    var match = same_witness(t1, t2);
    if(match){var equal = match[1]; return equal;}
    var
     a =
       [0,
        [0,
         cst,
         Base_Import[147].call
          (null,
           function(A){return A[4];},
           function(A){return A[4];},
           [0, t1, t2])],
        0],
     b = Base_Sexp[10].call(null, cst_Type_equal_Id_same_witness, a);
    return Base_Error[32].call(null, b);
   }
   function same(t1, t2){return same_witness(t1, t2) ? 1 : 0;}
   function Create0(T){
    var
     T0 = [248, cst_Base_Type_equal_Id_Create0, caml_fresh_oo_id(0)],
     id_name = T[2],
     id_sexp = [0, id_name],
     sexp_of_t = T[1],
     uid = create(T0, 0);
    function type_equal(otherkey){return otherkey === T0 ? d : 0;}
    var type_equal_id = [0, sexp_of_t, uid, id_name, id_sexp, T0, type_equal];
    return [0, , type_equal_id];
   }
   function create$0(name, sexp_of_t){
    return Create0([0, sexp_of_t, name])[2];
   }
   var
    Base_Type_equal =
      [0,
       sexp_of_t,
       Composition_preserves_injectiv,
       0,
       sym,
       trans,
       conv,
       Lift,
       Lift2,
       Lift3,
       detuple2,
       tuple2,
       [0,
        sexp_of_t$1,
        [0,
         hash_fold_t,
         hash,
         sexp_of_t$0,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         equal,
         compare$0,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator],
        uid,
        create$0,
        hash$0,
        name,
        to_sexp,
        hash_fold_t$0,
        same,
        same_witness,
        same_witness_exn,
        function(a){return [0, Create0(a)[2]];},
        function(T){
         var T1 = [248, cst_Base_Type_equal_Id_Create1, caml_fresh_oo_id(0)];
         function type_equal_id(A){
          var id_name = T[2], id_sexp = [1, [0, [0, id_name], [0, A[4], 0]]];
          function sexp_of_t(t){return caml_call2(T[1], A[1], t);}
          var type_key = [0, T1, A[5]], uid = create(type_key, [0, A[2], 0]);
          function type_equal(otherkey){
           var tag = otherkey[1];
           if(tag !== T1) return 0;
           var akey = otherkey[2];
           return caml_call1(A[6], akey) ? e : 0;
          }
          return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
         }
         return [0, type_equal_id];
        },
        function(T){
         var T2 = [248, cst_Base_Type_equal_Id_Create2, caml_fresh_oo_id(0)];
         function type_equal_id(A, B){
          var
           id_name = T[2],
           id_sexp = [1, [0, [0, id_name], [0, A[4], [0, B[4], 0]]]];
          function sexp_of_t(t){return caml_call3(T[1], A[1], B[1], t);}
          var
           type_key = [0, T2, A[5], B[5]],
           uid = create(type_key, [0, A[2], [0, B[2], 0]]);
          function type_equal(otherkey){
           var tag = otherkey[1];
           if(tag !== T2) return 0;
           var
            bkey = otherkey[3],
            akey = otherkey[2],
            match = caml_call1(A[6], akey),
            match$0 = caml_call1(B[6], bkey);
           if(match && match$0) return f;
           return 0;
          }
          return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
         }
         return [0, type_equal_id];
        },
        function(T){
         var T3 = [248, cst_Base_Type_equal_Id_Create3, caml_fresh_oo_id(0)];
         function type_equal_id(A, B, C){
          var
           id_name = T[2],
           id_sexp =
             [1, [0, [0, id_name], [0, A[4], [0, B[4], [0, C[4], 0]]]]];
          function sexp_of_t(t){return caml_call4(T[1], A[1], B[1], C[1], t);}
          var
           type_key = [0, T3, A[5], B[5], C[5]],
           uid = create(type_key, [0, A[2], [0, B[2], [0, C[2], 0]]]);
          function type_equal(otherkey){
           var tag = otherkey[1];
           if(tag !== T3) return 0;
           var
            ckey = otherkey[4],
            bkey = otherkey[3],
            akey = otherkey[2],
            match = caml_call1(A[6], akey),
            match$0 = caml_call1(B[6], bkey),
            match$1 = caml_call1(C[6], ckey);
           if(match && match$0 && match$1) return g;
           return 0;
          }
          return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
         }
         return [0, type_equal_id];
        }]];
   runtime.caml_register_global(20, Base_Type_equal, "Base__Type_equal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stack_intf
//# shape: Base__Stack_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Stack_intf = [0];
   runtime.caml_register_global(0, Base_Stack_intf, "Base__Stack_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Option_array
//# unitInfo: Requires: Base__Array, Base__Blit, Base__Import, Base__Indexed_container, Base__Option, Base__Sexpable, Base__Uniform_array, Sexplib0__Sexp_grammar, Stdlib__Obj
//# shape: Base__Option_array:[F(2),F(2),F(1)*,N,F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(2),F(2),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2)*,F(2),F(2)*,F(2)*,F(3),F(3),F(2),F(3),F(1),F(2),F(2),F(3),F(3),F(2),N,N,N,N,N,F(1),N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array = global_data.Base__Array,
    Base_Import = global_data.Base__Import,
    Base_Uniform_array = global_data.Base__Uniform_array,
    Base_Option = global_data.Base__Option,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Blit = global_data.Base__Blit,
    none_substitute = runtime.caml_obj_block(Stdlib_Obj[14], 1),
    none = 24791911,
    cst_Option_array_get_some_exn_ =
      "Option_array.get_some_exn: the element is [None]";
   function is_none(x){return x === 24791911 ? 1 : 0;}
   function is_some(x){return 1 - (x === 24791911 ? 1 : 0);}
   function some(x){return x === 24791911 ? none_substitute : x;}
   function value_unsafe(x){return x === none_substitute ? none : x;}
   function value_exn(x){
    return is_some(x)
            ? value_unsafe(x)
            : Base_Import[124].call(null, cst_Option_array_get_some_exn_);
   }
   function of_sexpable(param){
    if(! param) return none;
    var x = param[1];
    return some(x);
   }
   function to_sexpable(x){return is_some(x) ? [0, value_unsafe(x)] : 0;}
   var
    include$1 =
      Base_Sexpable[2].call
       (null,
        [0, Base_Option[9], Base_Option[10]],
        [0, to_sexpable, of_sexpable]),
    t_of_sexp = include$1[1],
    sexp_of_t = include$1[2];
   function t_of_sexp$0(of_a_001, x_003){
    var a = caml_call1(t_of_sexp, of_a_001);
    return caml_call2(Base_Uniform_array[1], a, x_003);
   }
   function sexp_of_t$0(of_a_004, x_005){
    var a = caml_call1(sexp_of_t, of_a_004);
    return caml_call2(Base_Uniform_array[2], a, x_005);
   }
   function t_sexp_grammar(a_sexp_grammar){
    var
     a = Base_Option[5].call(null, a_sexp_grammar),
     b = Sexplib0_Sexp_grammar[1].call(null, a);
    return Base_Uniform_array[3].call(null, b);
   }
   var empty = Base_Uniform_array[7];
   function create(len){return Base_Uniform_array[8].call(null, len, none);}
   function init(n, f){
    return Base_Uniform_array[10].call
            (null, n, function(i){return of_sexpable(caml_call1(f, i));});
   }
   function init_some(n, f){
    return Base_Uniform_array[10].call
            (null, n, function(i){return some(caml_call1(f, i));});
   }
   var a = Base_Uniform_array[11];
   function get(t, i){
    return to_sexpable(Base_Uniform_array[12].call(null, t, i));
   }
   function get_local(t, i){
    var x = Base_Uniform_array[12].call(null, t, i);
    return is_some(x) ? [0, value_unsafe(x)] : 0;
   }
   function get_some_exn(t, i){
    return value_exn(Base_Uniform_array[12].call(null, t, i));
   }
   function is_none$0(t, i){
    var x = Base_Uniform_array[12].call(null, t, i);
    return x === 24791911 ? 1 : 0;
   }
   function is_some$0(t, i){
    return is_some(Base_Uniform_array[12].call(null, t, i));
   }
   function set(t, i, x){
    var a = of_sexpable(x);
    return Base_Uniform_array[15].call(null, t, i, a);
   }
   function set_some(t, i, x){
    var a = some(x);
    return Base_Uniform_array[15].call(null, t, i, a);
   }
   function set_none(t, i){
    return Base_Uniform_array[15].call(null, t, i, none);
   }
   function swap(t, i, j){return Base_Uniform_array[17].call(null, t, i, j);}
   function unsafe_get(t, i){
    return to_sexpable(Base_Uniform_array[13].call(null, t, i));
   }
   function unsafe_get_some_exn(t, i){
    return value_exn(Base_Uniform_array[13].call(null, t, i));
   }
   function unsafe_get_some_assuming_some(t, i){
    return value_unsafe(Base_Uniform_array[13].call(null, t, i));
   }
   function unsafe_is_some(t, i){
    return is_some(Base_Uniform_array[13].call(null, t, i));
   }
   function unsafe_set(t, i, x){
    var a = of_sexpable(x);
    return Base_Uniform_array[16].call(null, t, i, a);
   }
   function unsafe_set_some(t, i, x){
    var a = some(x);
    return Base_Uniform_array[16].call(null, t, i, a);
   }
   function unsafe_set_none(t, i){
    return Base_Uniform_array[16].call(null, t, i, none);
   }
   function clear(t){
    var d = a(t), b = Base_Import[93].call(null, d, 1), c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      unsafe_set_none(t, i);
      var e = i + 1 | 0;
      if(b === i) break;
      i = e;
     }
    }
    return 0;
   }
   function b(input, init, f){
    var
     acc = [0, init],
     e = a(input),
     b = Base_Import[93].call(null, e, 1),
     d = 0;
    if(b >= 0){
     var i = d;
     for(;;){
      var elem = unsafe_get(input, i);
      acc[1] = caml_call3(f, i, acc[1], elem);
      var c = i + 1 | 0;
      if(b === i) break;
      i = c;
     }
    }
    return acc[1];
   }
   function fold(input, init, f){
    return b
            (input,
             init,
             function(param, acc, x){return caml_call2(f, acc, x);});
   }
   var
    foldi = [0, -198771759, b],
    iter =
      [0,
       -198771759,
       function(input, f){
        var e = a(input), b = Base_Import[93].call(null, e, 1), d = 0;
        if(b >= 0){
         var i = d;
         for(;;){
          var x = unsafe_get(input, i);
          caml_call1(f, x);
          var c = i + 1 | 0;
          if(b === i) break;
          i = c;
         }
        }
        return 0;
       }],
    iteri =
      [0,
       -198771759,
       function(input, f){
        var d = a(input), b = Base_Import[93].call(null, d, 1), c = 0;
        if(b >= 0){
         var i = c;
         for(;;){
          caml_call2(f, i, unsafe_get(input, i));
          var e = i + 1 | 0;
          if(b === i) break;
          i = e;
         }
        }
        return 0;
       }],
    length = [0, -198771759, a],
    include =
      Base_Indexed_container[10].call
       (null, [0, fold, iter, length, iteri, foldi]),
    is_empty = include[2],
    mem = include[3],
    iter$0 = include[4],
    fold$0 = include[5],
    fold_result = include[6],
    fold_until = include[7],
    exists = include[8],
    for_all = include[9],
    count = include[10],
    sum = include[11],
    find = include[12],
    find_map = include[13],
    to_list = include[14],
    min_elt = include[16],
    max_elt = include[17],
    foldi$0 = include[18],
    iteri$0 = include[19],
    existsi = include[20],
    for_alli = include[21],
    counti = include[22],
    findi = include[23],
    find_mapi = include[24],
    length$0 = Base_Uniform_array[11];
   function map(input, f){
    var output = create(length$0(input));
    caml_call2
     (iteri$0,
      input,
      function(i, elem){return unsafe_set(output, i, caml_call1(f, elem));});
    return output;
   }
   function map_some(input, f){
    var
     len = length$0(input),
     output = create(len),
     a = Base_Import[93].call(null, len, 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var opt = Base_Uniform_array[13].call(null, input, i);
      if(is_some(opt)){
       var x = value_unsafe(opt);
       unsafe_set_some(output, i, caml_call1(f, x));
      }
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return output;
   }
   function of_array(array){
    return init(array.length - 1, function(i){return array[i + 1];});
   }
   function of_array_some(array){
    return init_some(array.length - 1, function(i){return array[i + 1];});
   }
   function to_array(t){
    var a = length$0(t);
    return Base_Array[41].call(null, a, function(i){return unsafe_get(t, i);});
   }
   function create_like(len, param){return create(len);}
   var
    unsafe_blit = Base_Uniform_array[35],
    include$0 =
      Base_Blit[5].call(null, [0, create_like, length$0, unsafe_blit]),
    blit = include$0[1],
    blito = include$0[2],
    unsafe_blit$0 = include$0[3],
    sub = include$0[4],
    subo = include$0[5],
    copy = Base_Uniform_array[38],
    Base_Option_array =
      [0,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       empty,
       create,
       is_empty,
       mem,
       iter$0,
       fold$0,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       min_elt,
       max_elt,
       foldi$0,
       iteri$0,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       length$0,
       init_some,
       init,
       of_array,
       of_array_some,
       to_array,
       get,
       get_local,
       get_some_exn,
       is_none$0,
       is_some$0,
       unsafe_get,
       unsafe_get_some_exn,
       unsafe_get_some_assuming_some,
       unsafe_is_some,
       set,
       set_some,
       set_none,
       swap,
       clear,
       map,
       map_some,
       unsafe_set,
       unsafe_set_some,
       unsafe_set_none,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       copy,
       [0,
        [0,
         t_of_sexp,
         sexp_of_t,
         none,
         some,
         is_none,
         is_some,
         value_exn,
         value_unsafe,
         to_sexpable,
         of_sexpable]]];
   runtime.caml_register_global(10, Base_Option_array, "Base__Option_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stack
//# unitInfo: Requires: Base__Container, Base__Error, Base__Exn, Base__Import, Base__List, Base__Option_array, Base__Sexp, Base__Stack_intf, Sexplib0__Sexp_grammar
//# shape: Base__Stack:[F(2),F(2),F(1)*,F(2),N,F(1)*,F(1)*,F(2),F(3),N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_stack_ml = "src/stack.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Option_array = global_data.Base__Option_array,
    Base_Exn = global_data.Base__Exn,
    Base_Error = global_data.Base__Error,
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Assert_failure = global_data.Assert_failure,
    Base_Sexp = global_data.Base__Sexp,
    Base_Container = global_data.Base__Container,
    raise_s = Base_Error[32],
    a = [0, "elts"],
    b = [0, "length"],
    cst_stack = "stack",
    cst_exn = "exn",
    cst_Stack_invariant_failed = "Stack.invariant failed",
    c = [0, cst_src_stack_ml, 48, 6],
    d = [0, cst_src_stack_ml, 41, 4];
   function capacity(t){return Base_Option_array[28].call(null, t[2]);}
   function invariant(invariant_a, t){
    var length = t[1], elts = t[2];
    try{
     if(0 <= length && length <= Base_Option_array[28].call(null, elts)){
      var e = Base_Import[93].call(null, length, 1), h = 0;
      if(e >= 0){
       var i$0 = h;
       for(;;){
        caml_call1(invariant_a, Base_Option_array[36].call(null, elts, i$0));
        var m = i$0 + 1 | 0;
        if(e === i$0) break;
        i$0 = m;
       }
      }
      var
       j = Base_Option_array[28].call(null, elts),
       f = Base_Import[93].call(null, j, 1);
      if(f >= length){
       var i = length;
       for(;;){
        if(Base_Option_array[38].call(null, elts, i))
         throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
        var l = i + 1 | 0;
        if(f === i) break;
        i = l;
       }
      }
      var k = 0;
      return k;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      of_a_001 = Base_Import[152],
      length_003 = t[1],
      elts_005 = t[2],
      arg_006 = Base_Option_array[2].call(null, of_a_001, elts_005),
      bnds_002 = [0, [1, [0, a, [0, arg_006, 0]]], 0],
      arg_004 = Base_Import[139].call(null, length_003),
      bnds_002$0 = [0, [1, [0, b, [0, arg_004, 0]]], bnds_002],
      g =
        [0,
         [0, cst_exn, Base_Exn[1].call(null, exn)],
         [0, [0, cst_stack, [1, bnds_002$0]], 0]];
     return raise_s(Base_Sexp[10].call(null, cst_Stack_invariant_failed, g));
    }
   }
   function create(param){return [0, 0, Base_Option_array[4]];}
   function length(t){return t[1];}
   function is_empty(t){return 0 === t[1] ? 1 : 0;}
   function fold(t, init, f){
    var r = [0, init], a = Base_Import[93].call(null, t[1], 1);
    if(a >= 0){
     var i = a;
     for(;;){
      var b = Base_Option_array[36].call(null, t[2], i);
      r[1] = caml_call2(f, r[1], b);
      var c = i - 1 | 0;
      if(0 === i) break;
      i = c;
     }
    }
    return r[1];
   }
   function iter(t, f){
    var a = Base_Import[93].call(null, t[1], 1);
    if(a >= 0){
     var i = a;
     for(;;){
      caml_call1(f, Base_Option_array[36].call(null, t[2], i));
      var b = i - 1 | 0;
      if(0 === i) break;
      i = b;
     }
    }
    return 0;
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    C = Base_Container[17].call(null, [0, fold, iter$0, length$0]),
    mem = C[1],
    exists = C[8],
    for_all = C[9],
    count = C[10],
    sum = C[11],
    find = C[12],
    find_map = C[13],
    to_list = C[14],
    to_array = C[15],
    min_elt = C[16],
    max_elt = C[17],
    fold_result = C[6],
    fold_until = C[7],
    e = [0, cst_src_stack_ml, 109, 14];
   function of_list(l){
    if(Base_List[18].call(null, l)) return create(0);
    var
     length = Base_List[45].call(null, l),
     c = Base_Import[88].call(null, 2, length),
     elts = Base_Option_array[5].call(null, c),
     r = [0, l],
     b = Base_Import[93].call(null, length, 1);
    if(b >= 0){
     var i = b;
     for(;;){
      var match = r[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
      var l$0 = match[2], a = match[1];
      Base_Option_array[44].call(null, elts, i, a);
      r[1] = l$0;
      var d = i - 1 | 0;
      if(0 === i) break;
      i = d;
     }
    }
    return [0, length, elts];
   }
   function sexp_of_t(sexp_of_a, t){
    var a = caml_call1(to_list, t);
    return Base_List[6].call(null, sexp_of_a, a);
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(Base_List[5].call(null, a_of_sexp, sexp));
   }
   function t_sexp_grammar(grammar){
    var a = Base_List[7].call(null, grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function resize(t, size){
    var arr = Base_Option_array[5].call(null, size);
    caml_call5(Base_Option_array[53], t[2], 0, arr, 0, t[1]);
    t[2] = arr;
    return 0;
   }
   function set_capacity(t, new_capacity){
    var
     new_capacity$0 = Base_Import[100].call(null, new_capacity, t[1]),
     a = new_capacity$0 !== capacity(t) ? 1 : 0;
    return a ? resize(t, new_capacity$0) : a;
   }
   function push(t, a){
    var b = Base_Option_array[28].call(null, t[2]);
    if(t[1] === b){
     var c = Base_Import[91].call(null, t[1], 1);
     resize(t, Base_Import[88].call(null, 2, c));
    }
    Base_Option_array[44].call(null, t[2], t[1], a);
    t[1] = Base_Import[91].call(null, t[1], 1);
    return 0;
   }
   function pop_nonempty(t){
    var
     i = Base_Import[93].call(null, t[1], 1),
     result = Base_Option_array[36].call(null, t[2], i);
    Base_Option_array[45].call(null, t[2], i);
    t[1] = i;
    return result;
   }
   var pop_error = Base_Error[14].call(null, "Stack.pop of empty stack");
   function pop(t){return is_empty(t) ? 0 : [0, pop_nonempty(t)];}
   function pop_exn(t){
    return is_empty(t)
            ? Base_Error[31].call(null, pop_error)
            : pop_nonempty(t);
   }
   function top_nonempty(t){
    var a = Base_Import[93].call(null, t[1], 1);
    return Base_Option_array[36].call(null, t[2], a);
   }
   var top_error = Base_Error[14].call(null, "Stack.top of empty stack");
   function top(t){return is_empty(t) ? 0 : [0, top_nonempty(t)];}
   function top_exn(t){
    return is_empty(t)
            ? Base_Error[31].call(null, top_error)
            : top_nonempty(t);
   }
   function copy(param){
    var length = param[1], elts = param[2];
    return [0, length, Base_Option_array[58].call(null, elts)];
   }
   function clear(t){
    var a = 0 < t[1] ? 1 : 0;
    if(a){
     var b = Base_Import[93].call(null, t[1], 1), d = 0;
     if(b >= 0){
      var i = d;
      for(;;){
       Base_Option_array[45].call(null, t[2], i);
       var e = i + 1 | 0;
       if(b === i) break;
       i = e;
      }
     }
     t[1] = 0;
     var c = 0;
    }
    else
     var c = a;
    return c;
   }
   function until_empty(t, f){
    for(;;){
     var a = 0 < t[1] ? 1 : 0;
     if(! a) return a;
     caml_call1(f, pop_nonempty(t));
    }
   }
   function filter_map(t, f){
    var t_result = create(0), a = Base_Import[93].call(null, t[1], 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var match = caml_call1(f, Base_Option_array[36].call(null, t[2], i));
      if(match){var x = match[1]; push(t_result, x);}
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return t_result;
   }
   function filter(t, f){
    var t_result = create(0), a = Base_Import[93].call(null, t[1], 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var x = Base_Option_array[36].call(null, t[2], i);
      if(caml_call1(f, x)) push(t_result, x);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return t_result;
   }
   function filter_inplace(t, f){
    var write_index = [0, 0];
    return Base_Exn[13].call
            (null,
             function(param){
              var a = Base_Import[93].call(null, t[1], 1), b = 0;
              if(a >= 0){
               var read_index = b;
               for(;;){
                var x = Base_Option_array[41].call(null, t[2], read_index);
                if(caml_call1(f, x)){
                 if(write_index[1] < read_index)
                  Base_Option_array[51].call(null, t[2], write_index[1], x);
                 write_index[1]++;
                }
                var c = read_index + 1 | 0;
                if(a === read_index) break;
                read_index = c;
               }
              }
              return 0;
             },
             function(param){
              var a = write_index[1], b = Base_Import[93].call(null, t[1], 1);
              if(b >= a){
               var i = a;
               for(;;){
                Base_Option_array[52].call(null, t[2], i);
                var c = i + 1 | 0;
                if(b === i) break;
                i = c;
               }
              }
              t[1] = write_index[1];
              return 0;
             });
   }
   function singleton(x){var t = create(0); push(t, x); return t;}
   var
    Base_Stack =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       of_list,
       create,
       singleton,
       push,
       pop,
       pop_exn,
       top,
       top_exn,
       clear,
       copy,
       until_empty,
       filter_map,
       filter,
       filter_inplace,
       capacity,
       set_capacity];
   runtime.caml_register_global(19, Base_Stack, "Base__Stack");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Source_code_position
//# unitInfo: Requires: Base__Comparable, Base__Import, Base__Int, Base__Source_code_position0, Base__String
//# shape: Base__Source_code_position:[F(2),F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),F(1),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Int = global_data.Base__Int,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Comparable = global_data.Base__Comparable;
   function hash_override(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1],
     a = Base_Int[8].call(null, pos_cnum),
     b = Base_Int[8].call(null, pos_bol),
     c = Base_Int[8].call(null, pos_lnum),
     d = runtime.Base_hash_string(pos_fname),
     e = Base_Import[121].call(null, d, c),
     f = Base_Import[121].call(null, e, b);
    return Base_Import[121].call(null, f, a);
   }
   var
    compare_local = Base_Source_code_position0[2],
    hash_fold_t = Base_Source_code_position0[4],
    comparator = Base_Source_code_position0[6],
    to_string = Base_Source_code_position0[8],
    sexp_of_t = Base_Source_code_position0[9],
    include = Base_Comparable[12].call(null, [0, sexp_of_t, comparator]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator$0 = include[16];
   function equal_local(a, b){
    var c = compare_local(a, b);
    return caml_call2(Base_Import[242], c, 0);
   }
   function of_pos(param){
    var pos_cnum = param[3], pos_lnum = param[2], pos_fname = param[1];
    return [0, pos_fname, pos_lnum, 0, pos_cnum];
   }
   var
    Base_Source_code_position =
      [0,
       hash_fold_t,
       hash_override,
       sexp_of_t,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator$0,
       equal_local,
       compare_local,
       to_string,
       of_pos];
   runtime.caml_register_global
    (4, Base_Source_code_position, "Base__Source_code_position");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign_or_nan
//# unitInfo: Requires: Base__Hash, Base__Identifiable, Base__Import, Base__Poly0, Base__Sign, Sexplib0__Sexp_conv_error
//# shape: Base__Sign_or_nan:[N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,F(1)*,F(1),F(1)*,F(1),F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Nan = "Nan",
    cst_Neg = "Neg",
    cst_Pos = "Pos",
    cst_Zero = "Zero",
    cst_nan = "nan",
    cst_neg = "neg",
    cst_pos = "pos",
    cst_zero$0 = "zero",
    caml_int_compare = runtime.caml_int_compare,
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "sign_or_nan.ml.T.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Neg, 0]],
         [0,
          [1, [0, cst_Zero, 0]],
          [0, [1, [0, cst_Pos, 0]], [0, [1, [0, cst_Nan, 0]], 0]]]]]],
    all = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    module_name = "Base.Sign_or_nan",
    Base_Sign = global_data.Base__Sign,
    Base_Import = global_data.Base__Import,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Identifiable = global_data.Base__Identifiable,
    b = [0, cst_Neg],
    c = [0, cst_Zero],
    d = [0, cst_Pos],
    e = [0, cst_Nan];
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var a = sexp_004[1];
      b:
      if(a !== cst_Nan){
       c:
       if(a !== cst_Neg){
        d:
        if(a !== cst_Pos){
         if(a !== cst_Zero){
          if(a === cst_nan) break b;
          if(a === cst_neg) break c;
          if(a === cst_pos) break d;
          if(a !== cst_zero$0) break a;
         }
         return 1;
        }
        return 2;
       }
       return 0;
      }
      return 3;
     }
     var match = sexp_004[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_003, sexp_004);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_003, sexp_004);
     var b = match$0[1];
     b:
     if(b !== cst_Nan){
      c:
      if(b !== cst_Neg){
       d:
       if(b !== cst_Pos){
        if(b !== cst_Zero){
         if(b === cst_nan) break b;
         if(b === cst_neg) break c;
         if(b === cst_pos) break d;
         if(b !== cst_zero$0) break a;
        }
        return Sexplib0_Sexp_conv_error[7].call
                (null, error_source_003, sexp_004);
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_003, sexp_004);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_003, sexp_004);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_003, sexp_004);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return b;
      case 1:
       return c;
      case 2:
       return d;
      default: return e;
    }
   }
   var compare = caml_int_compare;
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var a = 0; break;
      case 1:
       var a = 1; break;
      case 2:
       var a = 2; break;
      default: var a = 3;
    }
    return Base_Hash[3].call(null, hsv, a);
   }
   function hash(arg){
    var hsv = Base_Hash[11].call(null, 0, 0), a = hash_fold_t(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   function of_string(s){return t_of_sexp(Base_Import[136].call(null, s));}
   function to_string(t){
    var a = sexp_of_t(t);
    return Base_Import[160].call(null, a);
   }
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   function ascending(x, y){return Base_Poly0[1].call(null, x, y);}
   function descending(x, y){return Base_Poly0[2].call(null, x, y);}
   var compare$0 = caml_int_compare, compare_local = caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function equal_local(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    a =
      Base_Identifiable[1].call
       (null,
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = a[1],
    hash$0 = a[2],
    t_of_sexp$0 = a[3],
    sexp_of_t$0 = a[4],
    of_string$0 = a[5],
    to_string$0 = a[6],
    between = a[19],
    clamp_exn = a[20],
    clamp = a[21],
    comparator = a[22],
    pp = a[23],
    hashable = a[24],
    cst_Base_Sign_or_nan_to_sign_e = "Base.Sign_or_nan.to_sign_exn: Nan",
    cst_negative = "negative",
    cst_zero = cst_zero$0,
    cst_positive = "positive",
    cst_not_a_number = "not-a-number";
   function of_sign(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function to_sign_exn(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default:
       return Base_Import[126].call(null, cst_Base_Sign_or_nan_to_sign_e);
    }
   }
   function of_int(n){return of_sign(Base_Sign[30].call(null, n));}
   function to_int_exn(t){
    var a = to_sign_exn(t);
    return Base_Sign[31].call(null, a);
   }
   function flip(param){
    switch(param){
      case 0:
       return 2;
      case 1:
       return 1;
      case 2:
       return 0;
      default: return 3;
    }
   }
   function symbol$5(t$0, t){
    if(3 > t$0 && 3 > t){
     var a = to_sign_exn(t), b = to_sign_exn(t$0);
     return of_sign(Base_Sign[34].call(null, b, a));
    }
    return 3;
   }
   function to_string_hum(param){
    switch(param){
      case 0:
       return cst_negative;
      case 1:
       return cst_zero;
      case 2:
       return cst_positive;
      default: return cst_not_a_number;
    }
   }
   var
    Base_Sign_or_nan =
      [0,
       all,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       compare_local,
       equal_local,
       to_string_hum,
       of_int,
       to_int_exn,
       of_sign,
       to_sign_exn,
       flip,
       symbol$5];
   runtime.caml_register_global(35, Base_Sign_or_nan, "Base__Sign_or_nan");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexp_with_comparable
//# unitInfo: Requires: Base__Comparable, Base__Sexp
//# shape: Base__Sexp_with_comparable:[F(1),F(2),F(1),F(1)*,F(1)*,N,N,F(2),N,F(2),F(3),F(2),F(2),F(2),F(1),F(1),N,N,N,F(1)*,N,N,N,N,N,N,N,F(2),F(2),N,N,N,N,N,N,N,N,F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Sexp = global_data.Base__Sexp,
    Base_Comparable = global_data.Base__Comparable,
    a = Base_Comparable[11].call(null, [0, Base_Sexp[7], Base_Sexp[5]]),
    symbol = a[1],
    symbol$0 = a[2],
    symbol$1 = a[3],
    symbol$2 = a[4],
    symbol$3 = a[5],
    symbol$4 = a[6],
    min = a[9],
    max = a[10],
    ascending = a[11],
    descending = a[12],
    between = a[13],
    clamp_exn = a[14],
    clamp = a[15],
    comparator = a[16],
    globalize = Base_Sexp[1],
    hash_fold_t = Base_Sexp[2],
    hash = Base_Sexp[3],
    t_of_sexp = Base_Sexp[4],
    sexp_of_t = Base_Sexp[5],
    equal = Base_Sexp[6],
    compare = Base_Sexp[7],
    Not_found_s = Base_Sexp[8],
    Of_sexp_error = Base_Sexp[9],
    message = Base_Sexp[10],
    default_indent = Base_Sexp[11],
    pp_hum = Base_Sexp[12],
    pp_hum_indent = Base_Sexp[13],
    pp_mach = Base_Sexp[14],
    pp = Base_Sexp[15],
    to_string_hum = Base_Sexp[16],
    to_string_mach = Base_Sexp[17],
    to_string = Base_Sexp[18],
    of_float_style = Base_Sexp[19],
    of_int_style = Base_Sexp[20],
    equal_local = Base_Sexp[22],
    compare_local = Base_Sexp[23],
    t_sexp_grammar = Base_Sexp[24],
    invariant = Base_Sexp[25],
    of_string = Base_Sexp[26],
    Base_Sexp_with_comparable =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       t_sexp_grammar,
       invariant,
       of_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local];
   runtime.caml_register_global
    (2, Base_Sexp_with_comparable, "Base__Sexp_with_comparable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_immutable_intf
//# shape: Base__Dictionary_immutable_intf:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Definitions = [0],
    Base_Dictionary_immutable_intf = [0, Definitions];
   runtime.caml_register_global
    (0, Base_Dictionary_immutable_intf, "Base__Dictionary_immutable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_immutable
//# unitInfo: Requires: Base__Dictionary_immutable_intf
//# shape: Base__Dictionary_immutable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Dictionary_immutable = [0];
   runtime.caml_register_global
    (0, Base_Dictionary_immutable, "Base__Dictionary_immutable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hasher
//# shape: Base__Hasher:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hasher = [0];
   runtime.caml_register_global(0, Base_Hasher, "Base__Hasher");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Maybe_bound
//# unitInfo: Requires: Base__Hash, Base__Import, Base__List, Sexplib0__Sexp_conv_error
//# shape: Base__Maybe_bound:[F(1),F(2),F(2),F(1)*,F(2),F(2),F(3),F(3),F(4),F(3),F(1)*,F(1),N,F(2)*,F(2)*,F(2),F(1),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Above_upper_bound = "Above_upper_bound",
    cst_Below_lower_bound = "Below_lower_bound",
    cst_Excl$0 = "Excl",
    cst_In_range = "In_range",
    cst_Incl$0 = "Incl",
    cst_Unbounded = "Unbounded",
    cst_above_upper_bound = "above_upper_bound",
    cst_below_lower_bound = "below_lower_bound",
    cst_excl = "excl",
    cst_in_range = "in_range",
    cst_incl = "incl",
    cst_unbounded = "unbounded",
    caml_int_compare = runtime.caml_int_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = "maybe_bound.ml.t",
    error_source_033 = "maybe_bound.ml.interval_comparison",
    interval_comparison_sexp_gramm =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Below_lower_bound, 0]],
         [0,
          [1, [0, cst_In_range, 0]],
          [0, [1, [0, cst_Above_upper_bound, 0]], 0]]]]],
    Base_Import = global_data.Base__Import,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_List = global_data.Base__List,
    a = [0, 0, 0],
    b = [0, cst_Unbounded],
    c = [0, cst_Incl$0],
    d = [0, cst_Excl$0],
    e = [0, [1, [0, cst_Unbounded, 0]], 0],
    cst_Excl = cst_Excl$0,
    cst_Incl = cst_Incl$0,
    f = [0, cst_Below_lower_bound],
    g = [0, cst_In_range],
    h = [0, cst_Above_upper_bound];
   function all(all_of_a){
    var l = all_of_a, acc = 0;
    for(;;){
     if(! l) break;
     var
      l$0 = l[2],
      enumerate_002 = l[1],
      acc$0 = [0, [1, enumerate_002], acc];
     l = l$0;
     acc = acc$0;
    }
    var
     b = Base_List[63].call(null, acc),
     l$1 = all_of_a,
     acc$1 = 0,
     c = Base_List[10].call(null, b, a);
    for(;;){
     if(! l$1){
      var d = Base_List[63].call(null, acc$1);
      return Base_List[10].call(null, d, c);
     }
     var
      l$2 = l$1[2],
      enumerate_001 = l$1[1],
      acc$2 = [0, [0, enumerate_001], acc$1];
     l$1 = l$2;
     acc$1 = acc$2;
    }
   }
   function t_of_sexp(of_a_003, sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var a = sexp_008[1];
      b:
      if(a !== cst_Excl$0){
       c:
       if(a !== cst_Incl$0){
        if(a !== cst_Unbounded){
         if(a === cst_excl) break b;
         if(a === cst_incl) break c;
         if(a !== cst_unbounded) break a;
        }
        return 0;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_006, sexp_008);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_006, sexp_008);
     }
     var match = sexp_008[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_006, sexp_008);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_006, sexp_008);
     var tag_009 = match$0[1];
     b:
     if(tag_009 !== cst_Excl$0){
      c:
      if(tag_009 !== cst_Incl$0){
       if(tag_009 !== cst_Unbounded){
        if(tag_009 === cst_excl) break b;
        if(tag_009 === cst_incl) break c;
        if(tag_009 !== cst_unbounded) break a;
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_006, sexp_008);
      }
      var sexp_args_010 = match[2];
      if(sexp_args_010 && ! sexp_args_010[2]){
       var
        arg0_011 = sexp_args_010[1],
        res0_012 = caml_call1(of_a_003, arg0_011);
       return [0, res0_012];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_006, tag_009, sexp_008);
     }
     var sexp_args_015 = match[2];
     if(sexp_args_015 && ! sexp_args_015[2]){
      var
       arg0_016 = sexp_args_015[1],
       res0_017 = caml_call1(of_a_003, arg0_016);
      return [1, res0_017];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_006, tag_009, sexp_008);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_006, sexp_008);
   }
   function sexp_of_t(of_a_019, param){
    if(typeof param === "number") return b;
    if(0 === param[0]){
     var arg0_020 = param[1], res0_021 = caml_call1(of_a_019, arg0_020);
     return [1, [0, c, [0, res0_021, 0]]];
    }
    var arg0_022 = param[1], res0_023 = caml_call1(of_a_019, arg0_022);
    return [1, [0, d, [0, res0_023, 0]]];
   }
   function t_sexp_grammar(a_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Incl, [0, [0, a_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Excl, [0, [0, a_sexp_grammar, 0]]]], e]]]];
   }
   function globalize(globalize_a_026, x_027){
    if(typeof x_027 === "number") return x_027;
    if(0 === x_027[0]){
     var arg_029 = x_027[1];
     return [0, caml_call1(globalize_a_026, arg_029)];
    }
    var arg_030 = x_027[1];
    return [1, caml_call1(globalize_a_026, arg_030)];
   }
   function interval_comparison_of_sexp(sexp_034){
    a:
    {
     if(0 === sexp_034[0]){
      var a = sexp_034[1];
      b:
      if(a !== cst_Above_upper_bound){
       c:
       if(a !== cst_Below_lower_bound){
        if(a !== cst_In_range){
         if(a === cst_above_upper_bound) break b;
         if(a === cst_below_lower_bound) break c;
         if(a !== cst_in_range) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var match = sexp_034[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_033, sexp_034);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_033, sexp_034);
     var b = match$0[1];
     b:
     if(b !== cst_Above_upper_bound){
      c:
      if(b !== cst_Below_lower_bound){
       if(b !== cst_In_range){
        if(b === cst_above_upper_bound) break b;
        if(b === cst_below_lower_bound) break c;
        if(b !== cst_in_range) break a;
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_033, sexp_034);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_033, sexp_034);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_033, sexp_034);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_033, sexp_034);
   }
   function sexp_of_interval_comparison(param){
    switch(param){case 0: return f;case 1: return g;default: return h;
    }
   }
   var
    compare_interval_comparison_lo = caml_int_compare,
    compare_interval_comparison = caml_int_compare,
    cst_Maybe_bound_compare_to_int =
      "Maybe_bound.compare_to_interval_exn: lower bound > upper bound";
   function hash_fold_interval_comparison(hsv, arg){
    switch(arg){
      case 0:
       var a = 0; break;
      case 1:
       var a = 1; break;
      default: var a = 2;
    }
    return Base_Hash[3].call(null, hsv, a);
   }
   function hash_interval_comparison(arg){
    var
     hsv = Base_Hash[11].call(null, 0, 0),
     a = hash_fold_interval_comparison(hsv, arg);
    return Base_Hash[9].call(null, a);
   }
   function map(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var incl = t[1]; return [0, caml_call1(f, incl)];}
    var excl = t[1];
    return [1, caml_call1(f, excl)];
   }
   function is_lower_bound(t, a, compare){
    if(typeof t === "number") return 1;
    if(0 === t[0]){
     var incl = t[1];
     return caml_call2(compare, incl, a) <= 0 ? 1 : 0;
    }
    var excl = t[1];
    return caml_call2(compare, excl, a) < 0 ? 1 : 0;
   }
   function is_upper_bound(t, a, compare){
    if(typeof t === "number") return 1;
    if(0 === t[0]){
     var incl = t[1];
     return caml_call2(compare, a, incl) <= 0 ? 1 : 0;
    }
    var excl = t[1];
    return caml_call2(compare, a, excl) < 0 ? 1 : 0;
   }
   function bounds_crossed(lower, upper, compare){
    if(typeof lower === "number") return 0;
    var lower$0 = lower[1];
    if(typeof upper === "number") return 0;
    var upper$0 = upper[1];
    return 0 < caml_call2(compare, lower$0, upper$0) ? 1 : 0;
   }
   function compare_to_interval_exn(lower, upper, a, compare){
    if(bounds_crossed(lower, upper, compare))
     Base_Import[124].call(null, cst_Maybe_bound_compare_to_int);
    return is_lower_bound(lower, a, compare)
            ? is_upper_bound(upper, a, compare) ? 1 : 2
            : 0;
   }
   function interval_contains_exn(lower, upper, a, compare){
    return 1 === compare_to_interval_exn(lower, upper, a, compare) ? 1 : 0;
   }
   var
    Base_Maybe_bound =
      [0,
       all,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       globalize,
       map,
       is_lower_bound,
       is_upper_bound,
       interval_contains_exn,
       bounds_crossed,
       sexp_of_interval_comparison,
       interval_comparison_of_sexp,
       interval_comparison_sexp_gramm,
       compare_interval_comparison,
       compare_interval_comparison_lo,
       hash_fold_interval_comparison,
       hash_interval_comparison,
       compare_to_interval_exn];
   runtime.caml_register_global(42, Base_Maybe_bound, "Base__Maybe_bound");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Map_intf
//# unitInfo: Requires: Sexplib0__Sexp_conv_error
//# shape: Base__Map_intf:[[F(3),F(3),F(2)],[],[],[],[F(4),F(4),F(3),F(3),F(2)*],[F(4),F(4),F(3)],[F(2)*,N,F(2)*,F(1)*],[F(2)*,N,F(2)*,F(1)*]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Left$0 = "Left",
    cst_Right$0 = "Right",
    cst_Unequal$0 = "Unequal",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_057 = "map_intf.ml.Symmetric_diff_element.t",
    all = [0, 0, [0, 1, 0]],
    all$0 = [0, 0, [0, 1, 0]],
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    a = [0, "Duplicate"],
    b = [0, "Ok"];
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    if(typeof a_001 === "number"){
     if(typeof b_002 === "number" && -1024851605 === b_002) return 0;
    }
    else if(typeof b_002 !== "number"){
     var variant = b_002[1];
     if(17724 === variant){
      var right_004 = b_002[2], left_003 = a_001[2];
      return caml_call2(cmp_a, left_003, right_004);
     }
    }
    return caml_compare(a_001, b_002);
   }
   function equal(cmp_a, a_005, b_006){
    if(a_005 === b_006) return 1;
    if(typeof a_005 === "number"){
     if(typeof b_006 === "number" && -1024851605 === b_006) return 1;
    }
    else if(typeof b_006 !== "number"){
     var variant = b_006[1];
     if(17724 === variant){
      var right_008 = b_006[2], left_007 = a_005[2];
      return caml_call2(cmp_a, left_007, right_008);
     }
    }
    return caml_equal(a_005, b_006);
   }
   function sexp_of_t(of_a_009, param){
    if(typeof param === "number") return a;
    var v_010 = param[2];
    return [1, [0, b, [0, caml_call1(of_a_009, v_010), 0]]];
   }
   var
    Or_duplicate = [0, compare, equal, sexp_of_t],
    Without_comparator = [0],
    With_comparator = [0],
    With_first_class_module = [0],
    c = [0, cst_Left$0],
    d = [0, cst_Unequal$0],
    e = [0, cst_Right$0],
    cst_Unequal = cst_Unequal$0,
    cst_Right = cst_Right$0,
    cst_Left = cst_Left$0;
   function compare$0(cmp_k, cmp_v, a_011, b_012){
    var
     t_014 = a_011[2],
     t_013 = a_011[1],
     t_016 = b_012[2],
     t_015 = b_012[1],
     n = caml_call2(cmp_k, t_013, t_015);
    if(0 !== n) return n;
    if(t_014 === t_016) return 0;
    var a = t_014[1];
    if(847852583 === a){
     if(typeof t_016 !== "number"){
      var variant = t_016[1];
      if(847852583 === variant){
       var right_018 = t_016[2], left_017 = t_014[2];
       return caml_call2(cmp_v, left_017, right_018);
      }
     }
    }
    else
     if(1013247643 <= a){
      if(typeof t_016 !== "number"){
       var variant$0 = t_016[1];
       if(1013247643 === variant$0){
        var
         right_022 = t_016[2],
         left_021 = t_014[2],
         t_024 = left_021[2],
         t_023 = left_021[1],
         t_026 = right_022[2],
         t_025 = right_022[1],
         n$0 = caml_call2(cmp_v, t_023, t_025);
        return 0 === n$0 ? caml_call2(cmp_v, t_024, t_026) : n$0;
       }
      }
     }
     else if(typeof t_016 !== "number"){
      var variant$1 = t_016[1];
      if(-57574468 === variant$1){
       var right_020 = t_016[2], left_019 = t_014[2];
       return caml_call2(cmp_v, left_019, right_020);
      }
     }
    return caml_compare(t_014, t_016);
   }
   function equal$0(cmp_k, cmp_v, a_027, b_028){
    var
     t_030 = a_027[2],
     t_029 = a_027[1],
     t_032 = b_028[2],
     t_031 = b_028[1],
     a = caml_call2(cmp_k, t_029, t_031);
    if(a){
     if(t_030 === t_032) return 1;
     var b = t_030[1];
     if(847852583 === b){
      if(typeof t_032 !== "number"){
       var variant = t_032[1];
       if(847852583 === variant){
        var right_034 = t_032[2], left_033 = t_030[2];
        return caml_call2(cmp_v, left_033, right_034);
       }
      }
     }
     else
      if(1013247643 <= b){
       if(typeof t_032 !== "number"){
        var variant$0 = t_032[1];
        if(1013247643 === variant$0){
         var
          right_038 = t_032[2],
          left_037 = t_030[2],
          t_040 = left_037[2],
          t_039 = left_037[1],
          t_042 = right_038[2],
          t_041 = right_038[1],
          d = caml_call2(cmp_v, t_039, t_041);
         return d ? caml_call2(cmp_v, t_040, t_042) : d;
        }
       }
      }
      else if(typeof t_032 !== "number"){
       var variant$1 = t_032[1];
       if(-57574468 === variant$1){
        var right_036 = t_032[2], left_035 = t_030[2];
        return caml_call2(cmp_v, left_035, right_036);
       }
      }
     var c = caml_equal(t_030, t_032);
    }
    else
     var c = a;
    return c;
   }
   function t_of_sexp(of_k_043, of_v_044, sexp_071){
    if(0 !== sexp_071[0]){
     var b = sexp_071[1];
     if(b){
      var c = b[2];
      if(c && ! c[2]){
       var
        arg1_068 = c[1],
        arg0_067 = b[1],
        res0_069 = caml_call1(of_k_043, arg0_067);
       try{
        a:
        if(0 === arg1_068[0])
         var
          atom_047 = arg1_068[1],
          a =
            atom_047 !== cst_Left$0
             ? atom_047
               !== cst_Right$0
               ? atom_047
                 !== cst_Unequal$0
                 ? Sexplib0_Sexp_conv_error[23].call(null, 0)
                 : Sexplib0_Sexp_conv_error
                    [27].call
                   (null, error_source_057, arg1_068)
               : Sexplib0_Sexp_conv_error
                  [27].call
                 (null, error_source_057, arg1_068)
             : Sexplib0_Sexp_conv_error
                [27].call
               (null, error_source_057, arg1_068);
        else{
         var match = arg1_068[1];
         if(match){
          var match$0 = match[1];
          if(0 === match$0[0]){
           var sexp_args_050 = match[2], atom_047$0 = match$0[1];
           if(atom_047$0 !== cst_Left$0)
            if(atom_047$0 !== cst_Right$0)
             if(atom_047$0 !== cst_Unequal$0)
              var a = Sexplib0_Sexp_conv_error[23].call(null, 0);
             else{
              if(sexp_args_050 && ! sexp_args_050[2]){
               var arg0_058 = sexp_args_050[1];
               b:
               {
                if(0 !== arg0_058[0]){
                 var d = arg0_058[1];
                 if(d){
                  var e = d[2];
                  if(e && ! e[2]){
                   var
                    arg1_053 = e[1],
                    arg0_052 = d[1],
                    res0_054 = caml_call1(of_v_044, arg0_052),
                    res1_055 = caml_call1(of_v_044, arg1_053),
                    res0_059 = [0, res0_054, res1_055];
                   break b;
                  }
                 }
                }
                var
                 res0_059 =
                   Sexplib0_Sexp_conv_error[4].call
                    (null, error_source_057, 2, arg0_058);
               }
               var a = [0, 1013247643, res0_059];
               break a;
              }
              var
               a =
                 Sexplib0_Sexp_conv_error[26].call
                  (null, error_source_057, atom_047$0, arg1_068);
             }
            else{
             if(sexp_args_050 && ! sexp_args_050[2]){
              var
               arg0_061 = sexp_args_050[1],
               res0_062 = caml_call1(of_v_044, arg0_061),
               a = [0, -57574468, res0_062];
              break a;
             }
             var
              a =
                Sexplib0_Sexp_conv_error[26].call
                 (null, error_source_057, atom_047$0, arg1_068);
            }
           else{
            if(sexp_args_050 && ! sexp_args_050[2]){
             var
              arg0_064 = sexp_args_050[1],
              res0_065 = caml_call1(of_v_044, arg0_064),
              a = [0, 847852583, res0_065];
             break a;
            }
            var
             a =
               Sexplib0_Sexp_conv_error[26].call
                (null, error_source_057, atom_047$0, arg1_068);
           }
          }
          else
           var
            a =
              Sexplib0_Sexp_conv_error[28].call
               (null, error_source_057, arg1_068);
         }
         else
          var
           a =
             Sexplib0_Sexp_conv_error[29].call
              (null, error_source_057, arg1_068);
        }
        var res1_070 = a;
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Sexplib0_Sexp_conv_error[22])
         throw caml_maybe_attach_backtrace(exn, 0);
        var
         res1_070 =
           Sexplib0_Sexp_conv_error[24].call(null, error_source_057, arg1_068);
       }
       return [0, res0_069, res1_070];
      }
     }
    }
    return Sexplib0_Sexp_conv_error[4].call
            (null, error_source_057, 2, sexp_071);
   }
   function sexp_of_t$0(of_k_072, of_v_073, param){
    var
     arg1_082 = param[2],
     arg0_081 = param[1],
     res0_083 = caml_call1(of_k_072, arg0_081),
     variant = arg1_082[1];
    if(847852583 === variant)
     var
      v_074 = arg1_082[2],
      res1_084 = [1, [0, c, [0, caml_call1(of_v_073, v_074), 0]]];
    else if(1013247643 <= variant)
     var
      v_076 = arg1_082[2],
      arg1_078 = v_076[2],
      arg0_077 = v_076[1],
      res0_079 = caml_call1(of_v_073, arg0_077),
      res1_080 = caml_call1(of_v_073, arg1_078),
      res1_084 = [1, [0, d, [0, [1, [0, res0_079, [0, res1_080, 0]]], 0]]];
    else
     var
      v_075 = arg1_082[2],
      res1_084 = [1, [0, e, [0, caml_call1(of_v_073, v_075), 0]]];
    return [1, [0, res0_083, [0, res1_084, 0]]];
   }
   function t_sexp_grammar(k_sexp_grammar, v_sexp_grammar){
    return [2,
            [0,
             k_sexp_grammar,
             [0,
              [3,
               [0,
                1,
                [0,
                 [1, [0, cst_Left, [0, [0, v_sexp_grammar, 0]]]],
                 [0,
                  [1, [0, cst_Right, [0, [0, v_sexp_grammar, 0]]]],
                  [0,
                   [1,
                    [0,
                     cst_Unequal,
                     [0,
                      [0, [2, [0, v_sexp_grammar, [0, v_sexp_grammar, 0]]], 0]]]],
                   0]]]]],
              0]]];
   }
   var
    Symmetric_diff_element =
      [0, compare$0, equal$0, t_of_sexp, sexp_of_t$0, t_sexp_grammar],
    f = [0, "Both"],
    g = [0, cst_Left$0],
    h = [0, cst_Right$0];
   function compare$1(cmp_left, cmp_right, a_085, b_086){
    if(a_085 === b_086) return 0;
    var a = a_085[1];
    if(737457313 === a){
     if(typeof b_086 !== "number"){
      var variant = b_086[1];
      if(737457313 === variant){
       var
        right_092 = b_086[2],
        left_091 = a_085[2],
        t_094 = left_091[2],
        t_093 = left_091[1],
        t_096 = right_092[2],
        t_095 = right_092[1],
        n = caml_call2(cmp_left, t_093, t_095);
       return 0 === n ? caml_call2(cmp_right, t_094, t_096) : n;
      }
     }
    }
    else
     if(847852583 <= a){
      if(typeof b_086 !== "number"){
       var variant$0 = b_086[1];
       if(847852583 === variant$0){
        var right_088 = b_086[2], left_087 = a_085[2];
        return caml_call2(cmp_left, left_087, right_088);
       }
      }
     }
     else if(typeof b_086 !== "number"){
      var variant$1 = b_086[1];
      if(-57574468 === variant$1){
       var right_090 = b_086[2], left_089 = a_085[2];
       return caml_call2(cmp_right, left_089, right_090);
      }
     }
    return caml_compare(a_085, b_086);
   }
   function equal$1(cmp_left, cmp_right, a_097, b_098){
    if(a_097 === b_098) return 1;
    var a = a_097[1];
    if(737457313 === a){
     if(typeof b_098 !== "number"){
      var variant = b_098[1];
      if(737457313 === variant){
       var
        right_104 = b_098[2],
        left_103 = a_097[2],
        t_106 = left_103[2],
        t_105 = left_103[1],
        t_108 = right_104[2],
        t_107 = right_104[1],
        b = caml_call2(cmp_left, t_105, t_107);
       return b ? caml_call2(cmp_right, t_106, t_108) : b;
      }
     }
    }
    else
     if(847852583 <= a){
      if(typeof b_098 !== "number"){
       var variant$0 = b_098[1];
       if(847852583 === variant$0){
        var right_100 = b_098[2], left_099 = a_097[2];
        return caml_call2(cmp_left, left_099, right_100);
       }
      }
     }
     else if(typeof b_098 !== "number"){
      var variant$1 = b_098[1];
      if(-57574468 === variant$1){
       var right_102 = b_098[2], left_101 = a_097[2];
       return caml_call2(cmp_right, left_101, right_102);
      }
     }
    return caml_equal(a_097, b_098);
   }
   function sexp_of_t$1(of_left_109, of_right_110, param){
    var variant = param[1];
    if(737457313 === variant){
     var
      v_113 = param[2],
      arg1_115 = v_113[2],
      arg0_114 = v_113[1],
      res0_116 = caml_call1(of_left_109, arg0_114),
      res1_117 = caml_call1(of_right_110, arg1_115);
     return [1, [0, f, [0, [1, [0, res0_116, [0, res1_117, 0]]], 0]]];
    }
    if(847852583 <= variant){
     var v_111 = param[2];
     return [1, [0, g, [0, caml_call1(of_left_109, v_111), 0]]];
    }
    var v_112 = param[2];
    return [1, [0, h, [0, caml_call1(of_right_110, v_112), 0]]];
   }
   var
    Merge_element = [0, compare$1, equal$1, sexp_of_t$1],
    compare$2 = caml_int_compare,
    i = [0, "Stop"],
    j = [0, "Continue"];
   function equal$2(b, a){return b === a ? 1 : 0;}
   function sexp_of_t$2(param){return param ? i : j;}
   var
    Continue_or_stop = [0, compare$2, all, equal$2, sexp_of_t$2],
    compare$3 = caml_int_compare,
    k = [0, "Unfinished"],
    l = [0, "Finished"];
   function equal$3(b, a){return b === a ? 1 : 0;}
   function sexp_of_t$3(param){return param ? k : l;}
   var
    Finished_or_unfinished = [0, compare$3, all$0, equal$3, sexp_of_t$3],
    Base_Map_intf =
      [0,
       Or_duplicate,
       Without_comparator,
       With_comparator,
       With_first_class_module,
       Symmetric_diff_element,
       Merge_element,
       Continue_or_stop,
       Finished_or_unfinished];
   runtime.caml_register_global(25, Base_Map_intf, "Base__Map_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Set_intf
//# shape: Base__Set_intf:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Named = [0],
    Base_Set_intf = [0, Named];
   runtime.caml_register_global(0, Base_Set_intf, "Base__Set_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Set
//# unitInfo: Requires: Base__Array, Base__Comparator, Base__Container, Base__Exn, Base__Fn, Base__Hash, Base__Import, Base__List, Base__Option, Base__Or_error, Base__Sequence, Base__Set_intf, Base__Sexp, Base__With_return, Sexplib0__Sexp_conv, Sexplib0__Sexp_grammar
//# shape: Base__Set:[F(4),F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(1)*,F(1)*,F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),N,F(2),F(2),F(2),F(1),F(1),F(2),F(2),F(3),F(2),F(3),F(3),F(2),F(3),F(3),F(4),F(3),F(2),F(3),F(2),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(2),F(2),F(2),F(2),F(4),F(4),F(3),N,F(5),F(1)*,F(2),F(2),F(1)*,F(3),F(3),F(2)*->F(1),F(2),N,F(1)*,F(2)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_of_sorted_array_duplicated$1 = "of_sorted_array: duplicated elements",
    cst_src_set_ml = "src/set.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_Hash = global_data.Base__Hash,
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Or_error = global_data.Base__Or_error,
    Base_Container = global_data.Base__Container,
    Base_List = global_data.Base__List,
    Base_Comparator = global_data.Base__Comparator,
    Base_Sexp = global_data.Base__Sexp,
    Assert_failure = global_data.Assert_failure,
    Base_Array = global_data.Base__Array,
    Base_Sequence = global_data.Base__Sequence,
    Base_Fn = global_data.Base__Fn,
    Base_Option = global_data.Base__Option,
    Base_Exn = global_data.Base__Exn,
    Base_With_return = global_data.Base__With_return,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    with_return = Base_With_return[1],
    cst_of_sorted_array_duplicated = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_duplicated$0 = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_elements_a =
      "of_sorted_array: elements are not ordered",
    b = [0, cst_src_set_ml, 169, 17],
    c = [0, cst_src_set_ml, 170, 28],
    d = [0, cst_src_set_ml, 176, 21],
    e = [0, cst_src_set_ml, 178, 12],
    f = [0, cst_src_set_ml, 185, 17],
    g = [0, cst_src_set_ml, 186, 28],
    h = [0, cst_src_set_ml, 192, 21],
    i = [0, cst_src_set_ml, 194, 12];
   function height(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var h = param[4];
    return h;
   }
   function length(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var s = param[5];
    return s;
   }
   function in_range(lower, upper, compare_elt, v){
    if(lower)
     var
      lower$0 = lower[1],
      a = caml_call2(compare_elt, lower$0, v) < 0 ? 1 : 0;
    else
     var a = 1;
    if(a){
     if(upper){
      var upper$0 = upper[1];
      return caml_call2(compare_elt, v, upper$0) < 0 ? 1 : 0;
     }
     var b = 1;
    }
    else
     var b = a;
    return b;
   }
   function loop(lower$1, upper, compare_elt, t$0){
    var lower = lower$1, t = t$0;
    for(;;){
     if(typeof t === "number") return 1;
     if(0 === t[0]){
      var v = t[1];
      return in_range(lower, upper, compare_elt, v);
     }
     var
      n = t[5],
      h = t[4],
      r = t[3],
      v$0 = t[2],
      l = t[1],
      hl = height(l),
      hr = height(r),
      g = Base_Import[93].call(null, hl, hr),
      b = Base_Import[123].call(null, g) <= 2 ? 1 : 0;
     if(b){
      var
       i = Base_Import[100].call(null, hl, hr),
       c = h === Base_Import[91].call(null, i, 1) ? 1 : 0;
      if(c){
       var
        j = length(r),
        k = length(l),
        m = Base_Import[91].call(null, k, j),
        d = n === Base_Import[91].call(null, m, 1) ? 1 : 0;
       if(d){
        var e = in_range(lower, upper, compare_elt, v$0);
        if(e){
         var f = loop(lower, [0, v$0], compare_elt, l);
         if(f){var lower$0 = [0, v$0]; lower = lower$0; t = r; continue;}
         var a = f;
        }
        else
         var a = e;
       }
       else
        var a = d;
      }
      else
       var a = c;
     }
     else
      var a = b;
     return a;
    }
   }
   function invariants(t, compare_elt){return loop(0, 0, compare_elt, t);}
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function create(l, v, r){
    var
     hl = height(l),
     hr = height(r),
     h =
       hr <= hl
        ? Base_Import[91].call(null, hl, 1)
        : Base_Import[91].call(null, hr, 1);
    if(1 === h) return [0, v];
    var
     sl = length(l),
     sr = length(r),
     a = Base_Import[91].call(null, sl, sr);
    return [1, l, v, r, h, Base_Import[91].call(null, a, 1)];
   }
   function of_increasing_iterator_uncheck(len, f){
    function loop(n, f, i){
     if(3 >= n >>> 0)
      switch(n){
        case 0:
         return 0;
        case 1:
         var k$0 = caml_call1(f, i); return [0, k$0];
        case 2:
         var
          kl = caml_call1(f, i),
          k$1 = caml_call1(f, Base_Import[91].call(null, i, 1));
         return create([0, kl], k$1, 0);
        default:
         var
          kl$0 = caml_call1(f, i),
          k$2 = caml_call1(f, Base_Import[91].call(null, i, 1)),
          kr = caml_call1(f, Base_Import[91].call(null, i, 2));
         return create([0, kl$0], k$2, [0, kr]);
      }
     var
      left_length = Base_Import[120].call(null, n, 1),
      a = Base_Import[93].call(null, n, left_length),
      right_length = Base_Import[93].call(null, a, 1),
      left = loop(left_length, f, i),
      k = caml_call1(f, Base_Import[91].call(null, i, left_length)),
      b = Base_Import[91].call(null, i, left_length),
      right = loop(right_length, f, Base_Import[91].call(null, b, 1));
     return create(left, k, right);
    }
    return loop(len, f, 0);
   }
   function of_sorted_array_unchecked(array, compare_elt){
    var array_length = array.length - 1;
    a:
    {
     if(2 <= array_length){
      var a = caml_check_bound(array, 1)[2];
      if(0 <= caml_call2(compare_elt, caml_check_bound(array, 0)[1], a)){
       var
        next =
          function(i){
           var
            b = Base_Import[93].call(null, array_length, 1),
            a = Base_Import[93].call(null, b, i);
           return caml_check_bound(array, a)[a + 1];
          };
       break a;
      }
     }
     var next = function(i){return caml_check_bound(array, i)[i + 1];};
    }
    return of_increasing_iterator_uncheck(array_length, next);
   }
   function of_sorted_array(array, compare_elt){
    var len = array.length - 1;
    if(1 !== len && len)
     return with_return
             (function(r){
               var
                c = caml_check_bound(array, 1)[2],
                i = caml_call2(compare_elt, caml_check_bound(array, 0)[1], c),
                increasing =
                  0 === i
                   ? caml_call1
                     (r,
                      Base_Or_error[40].call(null, cst_of_sorted_array_duplicated))
                   : i < 0 ? 1 : 0,
                a = Base_Import[93].call(null, array.length - 1, 2),
                d = 1;
               if(a >= 1){
                var i$0 = d;
                for(;;){
                 var
                  b = Base_Import[91].call(null, i$0, 1),
                  e = caml_check_bound(array, b)[b + 1],
                  i$1 =
                    caml_call2
                     (compare_elt, caml_check_bound(array, i$0)[i$0 + 1], e);
                 if(0 === i$1)
                  caml_call1
                   (r,
                    Base_Or_error[40].call
                     (null, cst_of_sorted_array_duplicated$0));
                 else if((i$1 < 0 ? 1 : 0) !== increasing)
                  caml_call1
                   (r,
                    Base_Or_error[40].call(null, cst_of_sorted_array_elements_a));
                 var f = i$0 + 1 | 0;
                 if(a === i$0) break;
                 i$0 = f;
                }
               }
               return [0, of_sorted_array_unchecked(array, compare_elt)];
              });
    return [0, of_sorted_array_unchecked(array, compare_elt)];
   }
   function bal(l, v, r){
    var hl = height(l), hr = height(r);
    if(Base_Import[91].call(null, hr, 2) < hl){
     if(typeof l === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
     if(0 === l[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
     var lr = l[3], lv = l[2], ll = l[1], a = height(lr);
     if(a <= height(ll)) return create(ll, lv, create(lr, v, r));
     if(typeof lr === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
     if(0 !== lr[0]){
      var lrr = lr[3], lrv$0 = lr[2], lrl = lr[1], k = create(lrr, v, r);
      return create(create(ll, lv, lrl), lrv$0, k);
     }
     var lrv = lr[1];
     if(! is_empty(ll))
      throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
     var j = create(0, v, r);
     return create(create(ll, lv, 0), lrv, j);
    }
    if(Base_Import[91].call(null, hl, 2) >= hr) return create(l, v, r);
    if(typeof r === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
    if(0 === r[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
    var rr = r[3], rv = r[2], rl = r[1], m = height(rl);
    if(m <= height(rr)) return create(create(l, v, rl), rv, rr);
    if(typeof rl === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
    if(0 !== rl[0]){
     var rlr = rl[3], rlv$0 = rl[2], rll = rl[1], o = create(rlr, rv, rr);
     return create(create(l, v, rll), rlv$0, o);
    }
    var rlv = rl[1];
    if(! is_empty(rr))
     throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
    var n = create(0, rv, rr);
    return create(create(l, v, 0), rlv, n);
   }
   var Same = [248, "Base__Set.Tree0.Same", caml_fresh_oo_id(0)];
   function add(t, x, compare_elt){
    function aux(param){
     if(typeof param === "number") return [0, x];
     if(0 === param[0]){
      var v = param[1], c = caml_call2(compare_elt, x, v);
      return 0 === c
              ? Base_Exn[6].call(null, Same)
              : 0 <= c ? create(0, v, [0, x]) : create([0, x], v, 0);
     }
     var
      r = param[3],
      v$0 = param[2],
      l = param[1],
      c$0 = caml_call2(compare_elt, x, v$0);
     return 0 === c$0
             ? Base_Exn[6].call(null, Same)
             : 0 <= c$0 ? bal(l, v$0, aux(r)) : bal(aux(l), v$0, r);
    }
    try{var a = aux(t); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Same) return t;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function add_min(x, t){
    if(typeof t === "number") return [0, x];
    if(0 === t[0]) return [1, 0, x, t, 2, 2];
    var r = t[3], v = t[2], l = t[1];
    return bal(add_min(x, l), v, r);
   }
   function add_max(t, x){
    if(typeof t === "number") return [0, x];
    if(0 === t[0]) return [1, t, x, 0, 2, 2];
    var r = t[3], v = t[2], l = t[1];
    return bal(l, v, add_max(r, x));
   }
   function join(l, v, r){
    if(typeof l === "number") return add_min(v, r);
    if(0 !== l[0]){
     var lh = l[4], lr = l[3], lv$0 = l[2], ll = l[1];
     if(typeof r !== "number"){
      if(0 === r[0]){var rv = r[1]; return add_max(add_max(l, v), rv);}
      var rh = r[4], rr = r[3], rv$0 = r[2], rl = r[1];
      return Base_Import[91].call(null, rh, 2) < lh
              ? bal(ll, lv$0, join(lr, v, r))
              : Base_Import
                  [91].call
                 (null, lh, 2)
                < rh
                ? bal(join(l, v, rl), rv$0, rr)
                : create(l, v, r);
     }
    }
    if(typeof r === "number") return add_max(l, v);
    var lv = l[1];
    return add_min(lv, add_min(v, r));
   }
   function min_elt(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0])
      var v = param[1];
     else{
      var l = param[1];
      if(typeof l !== "number"){param = l; continue;}
      var v = param[2];
     }
     return [0, v];
    }
   }
   var
    Set_min_elt_exn_of_empty_set =
      [248,
       "Base__Set.Tree0.Set_min_elt_exn_of_empty_set",
       caml_fresh_oo_id(0)],
    j = [0, "set.ml.Tree0.Set_min_elt_exn_of_empty_set"],
    k = [0, cst_src_set_ml, 276, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Set_min_elt_exn_of_empty_set,
     function(param){
      if(param === Set_min_elt_exn_of_empty_set) return j;
      throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
     });
   var
    Set_max_elt_exn_of_empty_set =
      [248,
       "Base__Set.Tree0.Set_max_elt_exn_of_empty_set",
       caml_fresh_oo_id(0)],
    l = [0, "set.ml.Tree0.Set_max_elt_exn_of_empty_set"],
    m = [0, cst_src_set_ml, 289, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Set_max_elt_exn_of_empty_set,
     function(param){
      if(param === Set_max_elt_exn_of_empty_set) return l;
      throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
     });
   var
    cst_Set_remove_min_elt = "Set.remove_min_elt",
    n = [0, 0, 0, 0],
    o = [0, 0, 0],
    p = [0, 0, 0];
   function min_elt_exn(t){
    var match = min_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Set_min_elt_exn_of_empty_set, 1);
    var v = match[1];
    return v;
   }
   function fold_until(t, init, f, finish){
    function fold_until_helper(f, t$0, acc$2){
     var t = t$0, acc = acc$2;
     for(;;){
      if(typeof t === "number") return [0, acc];
      if(0 === t[0]){var value = t[1]; return caml_call2(f, acc, value);}
      var
       right = t[3],
       value$0 = t[2],
       left = t[1],
       x = fold_until_helper(f, left, acc);
      if(0 !== x[0]) return x;
      var acc$0 = x[1], x$0 = caml_call2(f, acc$0, value$0);
      if(0 !== x$0[0]) return x$0;
      var acc$1 = x$0[1];
      t = right;
      acc = acc$1;
     }
    }
    var match = fold_until_helper(f, t, init);
    if(0 === match[0]){var x = match[1]; return caml_call1(finish, x);}
    var x$0 = match[1];
    return x$0;
   }
   function max_elt(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0])
      var v = param[1];
     else{
      if(typeof param[3] !== "number"){var r = param[3]; param = r; continue;}
      var v = param[2];
     }
     return [0, v];
    }
   }
   function max_elt_exn(t){
    var match = max_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Set_max_elt_exn_of_empty_set, 1);
    var v = match[1];
    return v;
   }
   function remove_min_elt(param){
    if(typeof param === "number")
     return Base_Import[126].call(null, cst_Set_remove_min_elt);
    if(0 === param[0]) return 0;
    var l = param[1];
    if(typeof l === "number"){var r = param[3]; return r;}
    var r$0 = param[3], v = param[2];
    return bal(remove_min_elt(l), v, r$0);
   }
   function merge(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var a = remove_min_elt(t2);
    return bal(t1, min_elt_exn(t2), a);
   }
   function concat(t1, t2){
    if(typeof t1 === "number")
     var t = t2;
    else{
     if(typeof t2 !== "number"){
      var a = remove_min_elt(t2);
      return join(t1, min_elt_exn(t2), a);
     }
     var t = t1;
    }
    return t;
   }
   function split(t, x, compare_elt){
    function split(t){
     if(typeof t === "number") return n;
     if(0 === t[0]){
      var v = t[1], c = caml_call2(compare_elt, x, v);
      return 0 === c
              ? [0, 0, [0, v], 0]
              : 0 <= c ? [0, [0, v], 0, 0] : [0, 0, 0, [0, v]];
     }
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      c$0 = caml_call2(compare_elt, x, v$0);
     if(0 === c$0) return [0, l, [0, v$0], r];
     if(0 <= c$0){
      var
       match = split(r),
       rr = match[3],
       maybe_elt = match[2],
       lr = match[1];
      return [0, join(l, v$0, lr), maybe_elt, rr];
     }
     var
      match$0 = split(l),
      rl = match$0[3],
      maybe_elt$0 = match$0[2],
      ll = match$0[1];
     return [0, ll, maybe_elt$0, join(rl, v$0, r)];
    }
    return split(t);
   }
   function split_le_gt(t, x, compare_elt){
    if(typeof t === "number") return o;
    if(0 === t[0]){
     var v = t[1];
     return 0 <= caml_call2(compare_elt, x, v)
             ? [0, [0, v], 0]
             : [0, 0, [0, v]];
    }
    var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
    if(0 === c) return [0, add_max(l, v$0), r];
    if(0 <= c){
     var match = split_le_gt(r, x, compare_elt), rr = match[2], lr = match[1];
     return [0, join(l, v$0, lr), rr];
    }
    var
     match$0 = split_le_gt(l, x, compare_elt),
     rl = match$0[2],
     ll = match$0[1];
    return [0, ll, join(rl, v$0, r)];
   }
   function split_lt_ge(t, x, compare_elt){
    if(typeof t === "number") return p;
    if(0 === t[0]){
     var v = t[1];
     return 0 < caml_call2(compare_elt, x, v)
             ? [0, [0, v], 0]
             : [0, 0, [0, v]];
    }
    var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
    if(0 === c) return [0, l, add_min(v$0, r)];
    if(0 <= c){
     var match = split_lt_ge(r, x, compare_elt), rr = match[2], lr = match[1];
     return [0, join(l, v$0, lr), rr];
    }
    var
     match$0 = split_lt_ge(l, x, compare_elt),
     rl = match$0[2],
     ll = match$0[1];
    return [0, ll, join(rl, v$0, r)];
   }
   var empty_without_value_restrictio = 0, q = [0, 0, 0];
   function mem(t$0, x, compare_elt){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var v = t[1], c = caml_call2(compare_elt, x, v);
      return 0 === c ? 1 : 0;
     }
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      c$0 = caml_call2(compare_elt, x, v$0),
      a = 0 === c$0 ? 1 : 0;
     if(a) return a;
     t = 0 <= c$0 ? r : l;
    }
   }
   function remove(t, x, compare_elt){
    function aux(t){
     if(typeof t === "number") return Base_Exn[6].call(null, Same);
     if(0 === t[0]){
      var v = t[1];
      return 0 === caml_call2(compare_elt, x, v)
              ? 0
              : Base_Exn[6].call(null, Same);
     }
     var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
     return 0 === c
             ? merge(l, r)
             : 0 <= c ? bal(l, v$0, aux(r)) : bal(aux(l), v$0, r);
    }
    try{var a = aux(t); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Same) return t;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function remove_index(t, i, param){
    function aux(t, i){
     if(typeof t === "number") return Base_Exn[6].call(null, Same);
     if(0 === t[0]) return 0 === i ? 0 : Base_Exn[6].call(null, Same);
     var
      r = t[3],
      v = t[2],
      l = t[1],
      l_size = length(l),
      c = caml_int_compare(i, l_size);
     if(0 === c) return merge(l, r);
     if(0 > c) return bal(aux(l, i), v, r);
     var a = Base_Import[93].call(null, i, l_size);
     return bal(l, v, aux(r, Base_Import[93].call(null, a, 1)));
    }
    try{var a = aux(t, i); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Same) return t;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function union(s1, s2, compare_elt){
    function union(s1$1, s2$1){
     var s1 = s1$1, s2 = s2$1;
     for(;;){
      if(s1 === s2) return s1;
      if(typeof s1 === "number")
       var t = s2;
      else{
       if(0 !== s1[0]){
        var h1 = s1[4], r1 = s1[3], v1$0 = s1[2], l1 = s1[1];
        if(typeof s2 !== "number"){
         if(0 !== s2[0]) break;
         var v2 = s2[1], s2$0 = [1, 0, v2, 0, 1, 1];
         s2 = s2$0;
         continue;
        }
       }
       if(typeof s2 !== "number"){
        var v1 = s1[1], s1$0 = [1, 0, v1, 0, 1, 1];
        s1 = s1$0;
        continue;
       }
       var t = s1;
      }
      return t;
     }
     var h2 = s2[4], r2 = s2[3], v2$0 = s2[2], l2 = s2[1];
     if(h2 <= h1){
      if(1 === h2) return add(s1, v2$0, compare_elt);
      var
       match = split(s2, v1$0, compare_elt),
       r2$0 = match[3],
       l2$0 = match[1],
       a = union(r1, r2$0);
      return join(union(l1, l2$0), v1$0, a);
     }
     if(1 === h1) return add(s2, v1$0, compare_elt);
     var
      match$0 = split(s1, v2$0, compare_elt),
      r1$0 = match$0[3],
      l1$0 = match$0[1],
      b = union(r1$0, r2);
     return join(union(l1$0, l2), v2$0, b);
    }
    return union(s1, s2);
   }
   function union_list(comparator, to_tree, xs){
    var compare_elt = comparator[1];
    return Base_List[20].call
            (null,
             xs,
             empty_without_value_restrictio,
             function(ac, x){
              return union(ac, caml_call1(to_tree, x), compare_elt);
             });
   }
   function inter(s1, s2, compare_elt){
    function inter(s1, s2){
     if(s1 === s2) return s1;
     if(typeof s1 !== "number" && typeof s2 !== "number"){
      a:
      {
       if(typeof s1 !== "number" && 0 !== s1[0]){
        if(typeof s2 !== "number" && 0 !== s2[0]){
         var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
          a = split(s2, v1, compare_elt),
          match = a[2],
          l2 = a[1];
         if(match){
          var r2 = a[3], v1$0 = match[1], b = inter(r1, r2);
          return join(inter(l1, l2), v1$0, b);
         }
         var r2$0 = a[3], c = inter(r1, r2$0);
         return concat(inter(l1, l2), c);
        }
        var other_set = s1, singleton = s2, elt = s2[1];
        break a;
       }
       var other_set = s2, singleton = s1, elt = s1[1];
      }
      return mem(other_set, elt, compare_elt) ? singleton : 0;
     }
     return 0;
    }
    return inter(s1, s2);
   }
   function diff(s1, s2, compare_elt){
    function diff(s1$1, s2){
     var s1 = s1$1;
     for(;;){
      if(s1 === s2) return 0;
      if(typeof s1 === "number") return 0;
      if(typeof s2 === "number") return s1;
      if(typeof s1 !== "number" && 0 !== s1[0]){
       var
        r1 = s1[3],
        v1$0 = s1[2],
        l1 = s1[1],
        a = split(s2, v1$0, compare_elt),
        l2 = a[1];
       if(a[2]){
        var r2 = a[3], b = diff(r1, r2);
        return concat(diff(l1, l2), b);
       }
       var r2$0 = a[3], c = diff(r1, r2$0);
       return join(diff(l1, l2), v1$0, c);
      }
      var v1 = s1[1], s1$0 = [1, 0, v1, 0, 1, 1];
      s1 = s1$0;
     }
    }
    return diff(s1, s2);
   }
   function cons(s$0, e$1){
    var s = s$0, e = e$1;
    for(;;){
     if(typeof s === "number") return e;
     if(0 === s[0]){var v = s[1]; return [0, v, 0, e];}
     var r = s[3], v$0 = s[2], l = s[1], e$0 = [0, v$0, r, e];
     s = l;
     e = e$0;
    }
   }
   function cons_right(s$0, e$1){
    var s = s$0, e = e$1;
    for(;;){
     if(typeof s === "number") return e;
     if(0 === s[0]){var v = s[1]; return [0, v, 0, e];}
     var r = s[3], v$0 = s[2], l = s[1], e$0 = [0, v$0, l, e];
     s = r;
     e = e$0;
    }
   }
   function of_set(s){return cons(s, 0);}
   function symmetric_diff(t1, t2, compare_elt){
    function step(state){
     var left = state[1];
     if(! left){
      var match = state[2];
      if(! match) return 0;
      var enum$0 = match[3], tree$0 = match[2], elt$0 = match[1];
      return [1, [1, elt$0], [0, 0, cons(tree$0, enum$0)]];
     }
     var right = state[2], enum$ = left[3], tree = left[2], elt = left[1];
     if(! right) return [1, [0, elt], [0, cons(tree, enum$), 0]];
     var
      enum2 = right[3],
      tree2 = right[2],
      a2 = right[1],
      compare_result = caml_call2(compare_elt, elt, a2);
     if(0 !== compare_result)
      return 0 <= compare_result
              ? [1, [1, a2], [0, left, cons(tree2, enum2)]]
              : [1, [0, elt], [0, cons(tree, enum$), right]];
     if(tree === tree2)
      var next_state = [0, enum$, enum2];
     else
      var a = cons(tree2, enum2), next_state = [0, cons(tree, enum$), a];
     return [0, next_state];
    }
    var a = of_set(t2), b = [0, of_set(t1), a];
    return Base_Sequence[44].call(null, b, step);
   }
   function to_sequence
   (comparator, opt, greater_or_equal_to, less_or_equal_to, t$3){
    var order = opt ? opt[1] : 608542111;
    function inclusive_bound(side, t, bound){
     var
      compare_elt = comparator[1],
      match = split(t, bound, compare_elt),
      r = match[3],
      maybe = match[2],
      l = match[1],
      t$0 = caml_call1(side, [0, l, r]);
     if(! maybe) return t$0;
     var elt = maybe[1];
     return add(t$0, elt, compare_elt);
    }
    if(608542111 <= order){
     var
      a = Base_Import[125],
      t$4 =
        Base_Option[34].call
         (null,
          less_or_equal_to,
          t$3,
          function(b, c){return inclusive_bound(a, b, c);}),
      next =
        function(enum$){
         if(! enum$) return 0;
         var e = enum$[3], t = enum$[2], k = enum$[1];
         return [1, k, cons(t, e)];
        };
     if(greater_or_equal_to){
      var
       key = greater_or_equal_to[1],
       compare = comparator[1],
       t = t$4,
       e = 0;
      for(;;){
       if(typeof t === "number"){var init = e; break;}
       if(0 === t[0]){
        var v = t[1], t$0 = [1, 0, v, 0, 1, 1];
        t = t$0;
       }
       else{
        var l = t[1], r = t[3], v$0 = t[2];
        if(0 <= caml_call2(compare, v$0, key)){
         var r$0 = t[3], v$1 = t[2], e$0 = [0, v$1, r$0, e];
         t = l;
         e = e$0;
        }
        else
         t = r;
       }
      }
     }
     else
      var init = of_set(t$4);
     return Base_Sequence[44].call(null, init, next);
    }
    var
     b = Base_Import[127],
     t$5 =
       Base_Option[34].call
        (null,
         greater_or_equal_to,
         t$3,
         function(a, c){return inclusive_bound(b, a, c);});
    function next$0(enum$){
     if(! enum$) return 0;
     var e = enum$[3], t = enum$[2], k = enum$[1];
     return [1, k, cons_right(t, e)];
    }
    if(less_or_equal_to){
     var
      key$0 = less_or_equal_to[1],
      compare$0 = comparator[1],
      t$1 = t$5,
      e$1 = 0;
     for(;;){
      if(typeof t$1 === "number"){var init$0 = e$1; break;}
      if(0 === t$1[0]){
       var v$2 = t$1[1], t$2 = [1, 0, v$2, 0, 1, 1];
       t$1 = t$2;
      }
      else{
       var l$0 = t$1[1], v$3 = t$1[2];
       if(0 < caml_call2(compare$0, v$3, key$0))
        t$1 = l$0;
       else{
        var r$1 = t$1[3], v$4 = t$1[2], e$2 = [0, v$4, l$0, e$1];
        t$1 = r$1;
        e$1 = e$2;
       }
      }
     }
    }
    else
     var init$0 = cons_right(t$5, 0);
    return Base_Sequence[44].call(null, init$0, next$0);
   }
   function find_first_satisfying(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t[3], v$0 = t[2], l = t[1];
     if(caml_call1(f, v$0)){
      var x = find_first_satisfying(l, f);
      return x ? x : [0, v$0];
     }
     t = r;
    }
   }
   function find_last_satisfying(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t[3], v$0 = t[2], l = t[1];
     if(caml_call1(f, v$0)){
      var x = find_last_satisfying(r, f);
      return x ? x : [0, v$0];
     }
     t = l;
    }
   }
   function binary_search(t, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (t,
                  function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;})
               : find_last_satisfying
                 (t,
                  function(x){return caml_call2(compare, x, v) < 0 ? 1 : 0;})
             : -253007807
               <= how
               ? find_last_satisfying
                 (t,
                  function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;})
               : find_first_satisfying
                 (t,
                  function(x){return 0 < caml_call2(compare, x, v) ? 1 : 0;});
    if(-1055410545 <= how){
     var
      elt =
        find_last_satisfying
         (t, function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;});
     if(elt){var x = elt[1]; if(0 === caml_call2(compare, x, v)) return elt;}
     return 0;
    }
    var
     elt$0 =
       find_first_satisfying
        (t, function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;});
    if(elt$0){
     var x$0 = elt$0[1];
     if(0 === caml_call2(compare, x$0, v)) return elt$0;
    }
    return 0;
   }
   function binary_search_segmented(t, segment_of, how){
    function is_left(x){
     return 847852583 <= caml_call1(segment_of, x) ? 1 : 0;
    }
    function is_right(x){return 1 - is_left(x);}
    return 125585502 <= how
            ? find_last_satisfying(t, is_left)
            : find_first_satisfying(t, is_right);
   }
   function merge_to_sequence
   (comparator, opt, greater_or_equal_to, less_or_equal_to, t$0, t){
    var order = opt ? opt[1] : 608542111;
    if(608542111 <= order)
     var a = comparator[1];
    else
     var
      d = comparator[1],
      e = Base_Fn[6],
      a = function(a, b){return e(d, a, b);};
    var
     b =
       to_sequence
        (comparator, [0, order], greater_or_equal_to, less_or_equal_to, t),
     c =
       to_sequence
        (comparator, [0, order], greater_or_equal_to, less_or_equal_to, t$0);
    return Base_Sequence[58].call(null, c, b, a);
   }
   function compare(compare_elt, s1, s2){
    var e2$2 = of_set(s2), e1$2 = of_set(s1), e1 = e1$2, e2 = e2$2;
    for(;;){
     if(! e1) return e2 ? -1 : 0;
     if(! e2) return 1;
     var
      e2$0 = e2[3],
      r2 = e2[2],
      v2 = e2[1],
      e1$0 = e1[3],
      r1 = e1[2],
      v1 = e1[1],
      c = caml_call2(compare_elt, v1, v2);
     if(0 !== c) return c;
     if(r1 === r2){
      e1 = e1$0;
      e2 = e2$0;
     }
     else{
      var e2$1 = cons(r2, e2$0), e1$1 = cons(r1, e1$0);
      e1 = e1$1;
      e2 = e2$1;
     }
    }
   }
   function iter2(s1, s2, compare_elt, f){
    var t2$2 = of_set(s2), t1$2 = of_set(s1);
    a:
    {
     var t1 = t1$2, t2 = t2$2;
     for(;;){
      if(! t1) break;
      if(! t2){var param$0 = t1; break a;}
      var
       enum2 = t2[3],
       tree2 = t2[2],
       a2 = t2[1],
       enum1 = t1[3],
       tree1 = t1[2],
       a1 = t1[1],
       compare_result = caml_call2(compare_elt, a1, a2);
      if(0 === compare_result){
       caml_call1(f, [0, 737457313, [0, a1, a2]]);
       var t2$0 = cons(tree2, enum2), t1$0 = cons(tree1, enum1);
       t1 = t1$0;
       t2 = t2$0;
      }
      else if(0 <= compare_result){
       caml_call1(f, [0, -57574468, a2]);
       var t2$1 = cons(tree2, enum2);
       t2 = t2$1;
      }
      else{
       caml_call1(f, [0, 847852583, a1]);
       var t1$1 = cons(tree1, enum1);
       t1 = t1$1;
      }
     }
     if(! t2) return 0;
     var param = t2;
     for(;;){
      if(! param) return 0;
      var enum$ = param[3], tree = param[2], a = param[1];
      caml_call1(f, [0, -57574468, a]);
      param = cons(tree, enum$);
     }
    }
    for(;;){
     if(! param$0) return 0;
     var enum$0 = param$0[3], tree$0 = param$0[2], a$0 = param$0[1];
     caml_call1(f, [0, 847852583, a$0]);
     param$0 = cons(tree$0, enum$0);
    }
   }
   function equal(s1, s2, compare_elt){
    return 0 === compare(compare_elt, s1, s2) ? 1 : 0;
   }
   function is_subset(s1, s2, compare_elt){
    function is_subset(s1$0, s2$0){
     var s1 = s1$0, s2 = s2$0;
     for(;;){
      if(typeof s1 === "number") return 1;
      if(0 !== s1[0]){
       var r1 = s1[3], v1$0 = s1[2], l1 = s1[1];
       if(typeof s2 !== "number"){
        if(0 === s2[0]){
         var v2 = s2[1];
         if(typeof l1 === "number" && typeof r1 === "number")
          return 0 === caml_call2(compare_elt, v1$0, v2) ? 1 : 0;
         return 0;
        }
        var
         r2 = s2[3],
         v2$0 = s2[2],
         l2 = s2[1],
         c = caml_call2(compare_elt, v1$0, v2$0);
        if(0 !== c){
         if(0 <= c){
          var e = is_subset([1, 0, v1$0, r1, 0, 0], r2);
          if(! e) return e;
          s1 = l1;
          continue;
         }
         var f = is_subset([1, l1, v1$0, 0, 0, 0], l2);
         if(! f) return f;
         s1 = r1;
         continue;
        }
        var a = s1 === s2 ? 1 : 0;
        if(a)
         var b = a;
        else{
         var d = is_subset(l1, l2);
         if(d){s1 = r1; s2 = r2; continue;}
         var b = d;
        }
        return b;
       }
      }
      if(typeof s2 === "number") return 0;
      var v1 = s1[1];
      return mem(s2, v1, compare_elt);
     }
    }
    return is_subset(s1, s2);
   }
   function are_disjoint(s1$0, s2$0, compare_elt){
    var s1 = s1$0, s2 = s2$0;
    for(;;){
     if(typeof s1 !== "number" && typeof s2 !== "number"){
      a:
      {
       if(typeof s1 !== "number" && 0 !== s1[0]){
        if(typeof s2 !== "number" && 0 !== s2[0]){
         var r1 = s1[3], v1 = s1[2], l1 = s1[1];
         if(s1 === s2) return 0;
         var a = split(s2, v1, compare_elt), l2 = a[1];
         if(a[2]) return 0;
         var r2 = a[3], b = are_disjoint(l1, l2, compare_elt);
         if(! b) return b;
         s1 = r1;
         s2 = r2;
         continue;
        }
        var other_set = s1, elt = s2[1];
        break a;
       }
       var other_set = s2, elt = s1[1];
      }
      return 1 - mem(other_set, elt, compare_elt);
     }
     return 1;
    }
   }
   function iter(t, f){
    function iter(param$0){
     var param = param$0;
     for(;;){
      if(typeof param === "number") return 0;
      if(0 === param[0]){var v = param[1]; return caml_call1(f, v);}
      var r = param[3], v$0 = param[2], l = param[1];
      iter(l);
      caml_call1(f, v$0);
      param = r;
     }
    }
    return iter(t);
   }
   function fold(s$0, accu$1, f){
    var s = s$0, accu = accu$1;
    for(;;){
     if(typeof s === "number") return accu;
     if(0 === s[0]){var v = s[1]; return caml_call2(f, accu, v);}
     var
      r = s[3],
      v$0 = s[2],
      l = s[1],
      accu$0 = caml_call2(f, fold(l, accu, f), v$0);
     s = r;
     accu = accu$0;
    }
   }
   function count(t, f){return Base_Container[2].call(null, fold, t, f);}
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function fold_right(s$0, accu$1, f){
    var s = s$0, accu = accu$1;
    for(;;){
     if(typeof s === "number") return accu;
     if(0 === s[0]){var v = s[1]; return caml_call2(f, v, accu);}
     var
      r = s[3],
      v$0 = s[2],
      l = s[1],
      accu$0 = caml_call2(f, v$0, fold_right(r, accu, f));
     s = l;
     accu = accu$0;
    }
   }
   function for_all(t$0, p){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 1;
     if(0 === t[0]){var v = t[1]; return caml_call1(p, v);}
     var r = t[3], v$0 = t[2], l = t[1], a = caml_call1(p, v$0);
     if(a){
      var b = for_all(l, p);
      if(b){t = r; continue;}
      var c = b;
     }
     else
      var c = a;
     return c;
    }
   }
   function exists(t$0, p){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(p, v);}
     var r = t[3], v$0 = t[2], l = t[1], a = caml_call1(p, v$0);
     if(a)
      var b = a;
     else{var c = exists(l, p); if(! c){t = r; continue;} var b = c;}
     return b;
    }
   }
   function filter(s, p){
    function filt(t){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(p, v) ? t : 0;}
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      l$0 = filt(l),
      keep_v = caml_call1(p, v$0),
      r$0 = filt(r);
     if(keep_v && l === l$0 && r === r$0) return t;
     return keep_v ? join(l$0, v$0, r$0) : concat(l$0, r$0);
    }
    return filt(s);
   }
   function filter_map(s, p, compare_elt){
    function filt(accu$1, param$0){
     var accu = accu$1, param = param$0;
     for(;;){
      if(typeof param === "number") return accu;
      if(0 === param[0]){
       var v = param[1], match = caml_call1(p, v);
       if(! match) return accu;
       var v$0 = match[1];
       return add(accu, v$0, compare_elt);
      }
      var
       r = param[3],
       v$1 = param[2],
       l = param[1],
       match$0 = caml_call1(p, v$1);
      if(match$0)
       var v$2 = match$0[1], a = add(accu, v$2, compare_elt);
      else
       var a = accu;
      var accu$0 = filt(a, l);
      accu = accu$0;
      param = r;
     }
    }
    return filt(0, s);
   }
   function partition_tf(s, p){
    function loop(t){
     if(typeof t === "number") return q;
     if(0 === t[0]){
      var v = t[1];
      return caml_call1(p, v) ? [0, t, 0] : [0, 0, t];
     }
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      match = loop(l),
      l_f = match[2],
      l_t = match[1],
      keep_v_t = caml_call1(p, v$0),
      match$0 = loop(r),
      r_f = match$0[2],
      r_t = match$0[1];
     function mk(keep_v, l$0, r$0){
      if(keep_v && l === l$0 && r === r$0) return t;
      return keep_v ? join(l$0, v$0, r$0) : concat(l$0, r$0);
     }
     var a = mk(1 - keep_v_t, l_f, r_f);
     return [0, mk(keep_v_t, l_t, r_t), a];
    }
    return loop(s);
   }
   function elements_aux(accu$1, param$0){
    var accu = accu$1, param = param$0;
    for(;;){
     if(typeof param === "number") return accu;
     if(0 === param[0]){var v = param[1]; return [0, v, accu];}
     var
      r = param[3],
      v$0 = param[2],
      l = param[1],
      accu$0 = [0, v$0, elements_aux(accu, r)];
     accu = accu$0;
     param = l;
    }
   }
   function elements(s){return elements_aux(0, s);}
   function choose(t){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var v = t[1]; return [0, v];}
    var v$0 = t[2];
    return [0, v$0];
   }
   var
    not_found = [0, Base_Import[297], [0, "Set.choose_exn: empty set"]],
    cst_Set_find_exn_failed_to_fin =
      "Set.find_exn failed to find a matching element",
    cst_Set_t_of_sexp_list_needed = "Set.t_of_sexp: list needed",
    cst_Set_t_of_sexp_duplicate_el = "Set.t_of_sexp: duplicate element in set",
    r = [0, cst_src_set_ml, 1120, 8],
    s = [0, 0],
    cst_invalid_elements = "invalid_elements",
    cst_is_not_a_subset_of = " is not a subset of ";
   function choose_exn(t){
    var match = choose(t);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var v = match[1];
    return v;
   }
   function of_list(lst, compare_elt){
    return Base_List[20].call
            (null,
             lst,
             empty_without_value_restrictio,
             function(t, x){return add(t, x, compare_elt);});
   }
   function of_sequence(sequence, compare_elt){
    return Base_Sequence[11].call
            (null,
             sequence,
             empty_without_value_restrictio,
             function(t, x){return add(t, x, compare_elt);});
   }
   function of_array(a, compare_elt){
    return Base_Array[21].call
            (null,
             a,
             empty_without_value_restrictio,
             function(t, x){return add(t, x, compare_elt);});
   }
   function to_array(param){
    if(typeof param === "number") return [0];
    if(0 === param[0]){var v = param[1]; return [0, v];}
    var
     s = param[5],
     r = param[3],
     v$0 = param[2],
     l = param[1],
     res = Base_Array[48].call(null, s, v$0),
     pos_ref = [0, 0];
    function loop(param$0){
     var param = param$0;
     for(;;){
      if(typeof param === "number") return;
      if(0 === param[0]){
       var v = param[1], a = pos_ref[1];
       caml_check_bound(res, a)[a + 1] = v;
       pos_ref[1]++;
       return;
      }
      var r = param[3], v$0 = param[2], l = param[1];
      loop(l);
      var b = pos_ref[1];
      caml_check_bound(res, b)[b + 1] = v$0;
      pos_ref[1]++;
      param = r;
     }
    }
    loop(l);
    pos_ref[1]++;
    loop(r);
    return res;
   }
   function map(t, f, compare_elt){
    return fold
            (t,
             empty_without_value_restrictio,
             function(t, x){return add(t, caml_call1(f, x), compare_elt);});
   }
   function group_by(set, equiv){
    var set$0 = set, equiv_classes = 0;
    for(;;){
     if(is_empty(set$0)) return equiv_classes;
     var x = choose_exn(set$0);
     let x$0 = x;
     var
      match =
        partition_tf
         (set$0,
          function(elt){
           var a = x$0 === elt ? 1 : 0;
           return a ? a : caml_call2(equiv, x$0, elt);
          }),
      not_equiv_x = match[2],
      equiv_x = match[1],
      equiv_classes$0 = [0, equiv_x, equiv_classes];
     set$0 = not_equiv_x;
     equiv_classes = equiv_classes$0;
    }
   }
   function find(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t[3], v$0 = t[2], l = t[1];
     if(caml_call1(f, v$0)) return [0, v$0];
     var r$0 = find(l, f);
     if(r$0) return r$0;
     t = r;
    }
   }
   function find_map(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(f, v);}
     var r = t[3], v$0 = t[2], l = t[1], r$0 = caml_call1(f, v$0);
     if(r$0) return r$0;
     var r$1 = find_map(l, f);
     if(r$1) return r$1;
     t = r;
    }
   }
   function find_exn(t, f){
    var match = find(t, f);
    if(! match)
     return Base_Import[124].call(null, cst_Set_find_exn_failed_to_fin);
    var e = match[1];
    return e;
   }
   function nth(t$0, i$1){
    var t = t$0, i = i$1;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return 0 === i ? [0, v] : 0;}
     var s = t[5], r = t[3], v$0 = t[2], l = t[1];
     if(s <= i) return 0;
     var l_size = length(l), c = caml_int_compare(i, l_size);
     if(0 <= c){
      if(0 === c) return [0, v$0];
      var
       a = Base_Import[93].call(null, i, l_size),
       i$0 = Base_Import[93].call(null, a, 1);
      t = r;
      i = i$0;
     }
     else
      t = l;
    }
   }
   function stable_dedup_list(xs, compare_elt){
    var
     xs$0 = xs,
     leftovers = 0,
     already_seen = empty_without_value_restrictio;
    for(;;){
     if(! xs$0) return Base_List[63].call(null, leftovers);
     var tl = xs$0[2], hd = xs$0[1];
     if(mem(already_seen, hd, compare_elt))
      xs$0 = tl;
     else{
      var
       already_seen$0 = add(already_seen, hd, compare_elt),
       leftovers$0 = [0, hd, leftovers];
      xs$0 = tl;
      leftovers = leftovers$0;
      already_seen = already_seen$0;
     }
    }
   }
   function t_of_sexp_direct(a_of_sexp, sexp, compare_elt){
    if(0 === sexp[0])
     return Base_Import[156].call(null, cst_Set_t_of_sexp_list_needed, sexp);
    var
     lst = sexp[1],
     elt_lst = Base_List[53].call(null, lst, a_of_sexp),
     set = of_list(elt_lst, compare_elt),
     a = Base_List[45].call(null, lst);
    if(length(set) === a) return set;
    var set$0 = [0, empty_without_value_restrictio];
    Base_List[67].call
     (null,
      lst,
      elt_lst,
      function(el_sexp, el){
       return mem(set$0[1], el, compare_elt)
               ? Base_Import
                  [156].call
                 (null, cst_Set_t_of_sexp_duplicate_el, el_sexp)
               : (set$0[1] = add(set$0[1], el, compare_elt), 0);
      });
    throw caml_maybe_attach_backtrace([0, Assert_failure, r], 1);
   }
   function sexp_of_t(sexp_of_a, t){
    return [1,
            fold_right
             (t,
              0,
              function(el, acc){return [0, caml_call1(sexp_of_a, el), acc];})];
   }
   function is_subset$0(subset, superset, sexp_of_elt, compare_elt){
    var invalid_elements = diff(subset[1], superset[1], compare_elt);
    if(is_empty(invalid_elements)) return s;
    var
     invalid_elements_sexp = sexp_of_t(sexp_of_elt, invalid_elements),
     a = Base_Import[112].call(null, cst_is_not_a_subset_of, superset[2]),
     b = Base_Import[112].call(null, subset[2], a),
     c =
       Base_Sexp[10].call
        (null, b, [0, [0, cst_invalid_elements, invalid_elements_sexp], 0]);
    return Base_Or_error[39].call(null, c);
   }
   function like(param, tree){
    var comparator = param[1];
    return [0, comparator, tree];
   }
   function like_maybe_no_op(old_t, tree){
    var old_tree = old_t[2], comparator = old_t[1];
    return old_tree === tree ? old_t : [0, comparator, tree];
   }
   function compare_elt(t){return t[1][1];}
   function comparator(t){return t[1];}
   function comparator_s(t){return Base_Comparator[5].call(null, t[1]);}
   function invariants$0(t){
    var a = compare_elt(t);
    return invariants(t[2], a);
   }
   function length$0(t){return length(t[2]);}
   function is_empty$0(t){return is_empty(t[2]);}
   function elements$0(t){return elements(t[2]);}
   function min_elt$0(t){return min_elt(t[2]);}
   function min_elt_exn$0(t){return min_elt_exn(t[2]);}
   function max_elt$0(t){return max_elt(t[2]);}
   function max_elt_exn$0(t){return max_elt_exn(t[2]);}
   function choose$0(t){return choose(t[2]);}
   function choose_exn$0(t){return choose_exn(t[2]);}
   function to_list(t){var s = t[2]; return elements(s);}
   function to_array$0(t){return to_array(t[2]);}
   function fold$0(t, init, f){return fold(t[2], init, f);}
   function fold_until$0(t, init, f, finish){
    return fold_until(t[2], init, f, finish);
   }
   function fold_right$0(t, init, f){return fold_right(t[2], init, f);}
   function fold_result(t, init, f){
    return Base_Container[8].call(null, fold$0, init, f, t);
   }
   function iter$0(t, f){return iter(t[2], f);}
   function iter2$0(a, b, f){
    var c = compare_elt(a);
    return iter2(a[2], b[2], c, f);
   }
   function exists$0(t, f){return exists(t[2], f);}
   function for_all$0(t, f){return for_all(t[2], f);}
   function count$0(t, f){return count(t[2], f);}
   function sum$0(m, t, f){return sum(m, t[2], f);}
   function find$0(t, f){return find(t[2], f);}
   function find_exn$0(t, f){return find_exn(t[2], f);}
   function find_map$0(t, f){return find_map(t[2], f);}
   function mem$0(t, a){var b = compare_elt(t); return mem(t[2], a, b);}
   function filter$0(t, f){return like_maybe_no_op(t, filter(t[2], f));}
   function add$0(t, a){
    var b = compare_elt(t);
    return like(t, add(t[2], a, b));
   }
   function remove$0(t, a){
    var b = compare_elt(t);
    return like(t, remove(t[2], a, b));
   }
   function union$0(t1, t2){
    var a = compare_elt(t1);
    return like(t1, union(t1[2], t2[2], a));
   }
   function inter$0(t1, t2){
    var a = compare_elt(t1);
    return like(t1, inter(t1[2], t2[2], a));
   }
   function diff$0(t1, t2){
    var a = compare_elt(t1);
    return like(t1, diff(t1[2], t2[2], a));
   }
   function symmetric_diff$0(t1, t2){
    var a = compare_elt(t1);
    return symmetric_diff(t1[2], t2[2], a);
   }
   function compare_direct(t1, t2){
    var a = t2[2], b = t1[2];
    return compare(compare_elt(t1), b, a);
   }
   function equal$0(t1, t2){
    var a = compare_elt(t1);
    return equal(t1[2], t2[2], a);
   }
   function is_subset$1(t, of){
    var a = compare_elt(t);
    return is_subset(t[2], of[2], a);
   }
   function are_disjoint$0(t1, t2){
    var a = compare_elt(t1);
    return are_disjoint(t1[2], t2[2], a);
   }
   function to_named_tree(named){return [0, named[1][2], named[2]];}
   function is_subset$2(subset, superset){
    var
     a = compare_elt(subset[1]),
     b = subset[1][1][2],
     c = to_named_tree(superset);
    return is_subset$0(to_named_tree(subset), c, b, a);
   }
   function equal$1(t1, t2){
    var a = [0, is_subset$2(t2, t1), 0], b = [0, is_subset$2(t1, t2), a];
    return Base_Or_error[51].call(null, b);
   }
   function partition_tf$0(t, f){
    var
     match = partition_tf(t[2], f),
     tree_f = match[2],
     tree_t = match[1],
     a = like_maybe_no_op(t, tree_f);
    return [0, like_maybe_no_op(t, tree_t), a];
   }
   function split$0(t, a){
    var
     c = compare_elt(t),
     match = split(t[2], a, c),
     tree2 = match[3],
     b = match[2],
     tree1 = match[1],
     d = like(t, tree2);
    return [0, like(t, tree1), b, d];
   }
   function split_le_gt$0(t, a){
    var
     b = compare_elt(t),
     match = split_le_gt(t[2], a, b),
     tree2 = match[2],
     tree1 = match[1],
     c = like(t, tree2);
    return [0, like(t, tree1), c];
   }
   function split_lt_ge$0(t, a){
    var
     b = compare_elt(t),
     match = split_lt_ge(t[2], a, b),
     tree2 = match[2],
     tree1 = match[1],
     c = like(t, tree2);
    return [0, like(t, tree1), c];
   }
   function group_by$0(t, equiv){
    var a = group_by(t[2], equiv);
    return Base_List[53].call(null, a, function(a){return like(t, a);});
   }
   function nth$0(t, i){return nth(t[2], i);}
   function remove_index$0(t, i){
    var a = compare_elt(t);
    return like(t, remove_index(t[2], i, a));
   }
   function sexp_of_t$0(sexp_of_a, param, t){return sexp_of_t(sexp_of_a, t[2]);
   }
   function to_sequence$0(order, greater_or_equal_to, less_or_equal_to, t){
    return to_sequence
            (t[1], order, greater_or_equal_to, less_or_equal_to, t[2]);
   }
   function binary_search$0(t, compare, how, v){
    return binary_search(t[2], compare, how, v);
   }
   function binary_search_segmented$0(t, segment_of, how){
    return binary_search_segmented(t[2], segment_of, how);
   }
   function merge_to_sequence$0
   (order, greater_or_equal_to, less_or_equal_to, t$0, t){
    return merge_to_sequence
            (t$0[1],
             order,
             greater_or_equal_to,
             less_or_equal_to,
             t$0[2],
             t[2]);
   }
   function hash_fold_direct(hash_fold_elem, state, t){
    var t$0 = t[2], a = length(t$0);
    return fold(t$0, caml_call2(Base_Import[206], state, a), hash_fold_elem);
   }
   function compare$0(a, param, t1, t2){return compare_direct(t1, t2);}
   function t_of_sexp_direct$0(comparator, a_of_sexp, sexp){
    return t_of_sexp_direct(a_of_sexp, sexp, comparator[1]);
   }
   function empty(param){return empty_without_value_restrictio;}
   function singleton(param, e){return [0, e];}
   function length$1(t){return length(t);}
   function invariants$1(comparator, t){return invariants(t, comparator[1]);}
   function is_empty$1(t){return is_empty(t);}
   function elements$1(t){return elements(t);}
   function min_elt$1(t){return min_elt(t);}
   function min_elt_exn$1(t){return min_elt_exn(t);}
   function max_elt$1(t){return max_elt(t);}
   function max_elt_exn$1(t){return max_elt_exn(t);}
   function choose$1(t){return choose(t);}
   function choose_exn$1(t){return choose_exn(t);}
   function to_list$0(t){return elements(t);}
   function to_array$1(t){return to_array(t);}
   function iter$1(t, f){return iter(t, f);}
   function exists$1(t, f){return exists(t, f);}
   function for_all$1(t, f){return for_all(t, f);}
   function count$1(t, f){return count(t, f);}
   function sum$1(m, t, f){return sum(m, t, f);}
   function find$1(t, f){return find(t, f);}
   function find_exn$1(t, f){return find_exn(t, f);}
   function find_map$1(t, f){return find_map(t, f);}
   function fold$1(t, init, f){return fold(t, init, f);}
   function fold_until$1(t, init, f, finish){return fold_until(t, init, f, finish);
   }
   function fold_right$1(t, init, f){return fold_right(t, init, f);}
   function map$0(comparator, t, f){return map(t, f, comparator[1]);}
   function filter$1(t, f){return filter(t, f);}
   function filter_map$0(comparator, t, f){
    return filter_map(t, f, comparator[1]);
   }
   function partition_tf$1(t, f){return partition_tf(t, f);}
   function iter2$1(comparator, a, b, f){
    return iter2(a, b, comparator[1], f);
   }
   function mem$1(comparator, t, a){return mem(t, a, comparator[1]);}
   function add$1(comparator, t, a){return add(t, a, comparator[1]);}
   function remove$1(comparator, t, a){return remove(t, a, comparator[1]);}
   function union$1(comparator, t1, t2){return union(t1, t2, comparator[1]);}
   function inter$1(comparator, t1, t2){return inter(t1, t2, comparator[1]);}
   function diff$1(comparator, t1, t2){return diff(t1, t2, comparator[1]);}
   function symmetric_diff$1(comparator, t1, t2){
    return symmetric_diff(t1, t2, comparator[1]);
   }
   function compare_direct$0(comparator, t1, t2){return compare(comparator[1], t1, t2);
   }
   function equal$2(comparator, t1, t2){return equal(t1, t2, comparator[1]);}
   function is_subset$3(comparator, t, of){
    return is_subset(t, of, comparator[1]);
   }
   function are_disjoint$1(comparator, t1, t2){
    return are_disjoint(t1, t2, comparator[1]);
   }
   function of_list$0(comparator, l){return of_list(l, comparator[1]);}
   function of_sequence$0(comparator, s){
    return of_sequence(s, comparator[1]);
   }
   function of_array$0(comparator, a){return of_array(a, comparator[1]);}
   function of_sorted_array_unchecked$0(comparator, a){
    return of_sorted_array_unchecked(a, comparator[1]);
   }
   function of_increasing_iterator_uncheck$0(param, len, f){return of_increasing_iterator_uncheck(len, f);
   }
   function of_sorted_array$0(comparator, a){
    return of_sorted_array(a, comparator[1]);
   }
   function union_list$0(comparator, l){
    return union_list(comparator, function(a){return a;}, l);
   }
   function stable_dedup_list$0(comparator, xs){
    return stable_dedup_list(xs, comparator[1]);
   }
   function group_by$1(t, equiv){return group_by(t, equiv);}
   function split$1(comparator, t, a){return split(t, a, comparator[1]);}
   function split_le_gt$1(comparator, t, a){
    return split_le_gt(t, a, comparator[1]);
   }
   function split_lt_ge$1(comparator, t, a){
    return split_lt_ge(t, a, comparator[1]);
   }
   function nth$1(t, i){return nth(t, i);}
   function remove_index$1(comparator, t, i){
    return remove_index(t, i, comparator[1]);
   }
   function sexp_of_t$1(sexp_of_a, param, t){return sexp_of_t(sexp_of_a, t);}
   function to_tree(t){return t;}
   function of_tree(param, t){return t;}
   function to_sequence$1
   (comparator, order, greater_or_equal_to, less_or_equal_to, t){
    return to_sequence
            (comparator, order, greater_or_equal_to, less_or_equal_to, t);
   }
   function binary_search$1(param, t, compare, how, v){return binary_search(t, compare, how, v);
   }
   function binary_search_segmented$1(param, t, segment_of, how){return binary_search_segmented(t, segment_of, how);
   }
   function merge_to_sequence$1
   (comparator, order, greater_or_equal_to, less_or_equal_to, t$0, t){
    return merge_to_sequence
            (comparator, order, greater_or_equal_to, less_or_equal_to, t$0, t);
   }
   function fold_result$0(t, init, f){
    return Base_Container[8].call(null, fold$1, init, f, t);
   }
   function is_subset$4(comparator, t1, t2){
    return is_subset$0(t1, t2, comparator[2], comparator[1]);
   }
   function equal$3(comparator, t1, t2){
    var
     compare_elt = comparator[1],
     sexp_of_elt = comparator[2],
     a = [0, is_subset$0(t2, t1, sexp_of_elt, compare_elt), 0],
     b = [0, is_subset$0(t1, t2, sexp_of_elt, compare_elt), a];
    return Base_Or_error[51].call(null, b);
   }
   var Named = [0, is_subset$4, equal$3];
   function to_tree$0(t){return t[2];}
   function of_tree$0(comparator, tree){return [0, comparator, tree];}
   function t_of_sexp_direct$1(comparator, a_of_sexp, sexp){
    var tree = t_of_sexp_direct(a_of_sexp, sexp, comparator[1]);
    return [0, comparator, tree];
   }
   function empty$0(comparator){
    return [0, comparator, empty_without_value_restrictio];
   }
   function Empty_without_value_restrictio(Elt){
    var empty = [0, Elt[1], empty_without_value_restrictio];
    return [0, empty];
   }
   function singleton$0(comparator, e){return [0, comparator, [0, e]];}
   function union_list$1(comparator, l){
    var tree = union_list(comparator, to_tree$0, l);
    return [0, comparator, tree];
   }
   function of_sorted_array_unchecked$1(comparator, array){
    var tree = of_sorted_array_unchecked(array, comparator[1]);
    return [0, comparator, tree];
   }
   function of_increasing_iterator_uncheck$1(comparator, len, f){
    var tree = of_increasing_iterator_uncheck(len, f);
    return [0, comparator, tree];
   }
   function of_sorted_array$1(comparator, array){
    var a = of_sorted_array(array, comparator[1]);
    return caml_call2
            (Base_Or_error[21][2],
             a,
             function(tree){return [0, comparator, tree];});
   }
   function of_list$1(comparator, l){
    return [0, comparator, of_list(l, comparator[1])];
   }
   function of_sequence$1(comparator, s){
    return [0, comparator, of_sequence(s, comparator[1])];
   }
   function of_array$1(comparator, a){
    return [0, comparator, of_array(a, comparator[1])];
   }
   function stable_dedup_list$1(comparator, xs){
    return stable_dedup_list(xs, comparator[1]);
   }
   function map$1(comparator, t, f){
    return [0, comparator, map(t[2], f, comparator[1])];
   }
   function filter_map$1(comparator, t, f){
    return [0, comparator, filter_map(t[2], f, comparator[1])];
   }
   var to_comparator = Base_Comparator[4], t = [0, "_"];
   function empty$1(m){
    var comparator = to_comparator(m);
    return [0, comparator, empty_without_value_restrictio];
   }
   function singleton$1(m, a){return singleton$0(to_comparator(m), a);}
   function union_list$2(m, a){return union_list$1(to_comparator(m), a);}
   function of_sorted_array_unchecked$2(m, a){
    return of_sorted_array_unchecked$1(to_comparator(m), a);
   }
   function of_increasing_iterator_uncheck$2(m, len, f){
    return of_increasing_iterator_uncheck$1(to_comparator(m), len, f);
   }
   function of_sorted_array$2(m, a){
    return of_sorted_array$1(to_comparator(m), a);
   }
   function of_list$2(m, a){return of_list$1(to_comparator(m), a);}
   function of_sequence$2(m, a){return of_sequence$1(to_comparator(m), a);}
   function of_array$2(m, a){return of_array$1(to_comparator(m), a);}
   function stable_dedup_list$2(m, a){
    return stable_dedup_list$1(to_comparator(m), a);
   }
   function map$2(m, a, f){return map$1(to_comparator(m), a, f);}
   function filter_map$2(m, a, f){
    return filter_map$1(to_comparator(m), a, f);
   }
   function of_tree$1(m, tree){
    var comparator = to_comparator(m);
    return [0, comparator, tree];
   }
   function M(Elt){return [0];}
   function sexp_of_m_t(Elt, t$0){
    return sexp_of_t$0(Elt[1], function(param){return t;}, t$0);
   }
   function m_t_of_sexp(Elt, sexp){
    return t_of_sexp_direct$1(Elt[2], Elt[1], sexp);
   }
   function m_t_sexp_grammar(Elt){
    var a = Base_Import[194].call(null, Elt[1]);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function compare_m_t(param, t1, t2){return compare_direct(t1, t2);}
   function equal_m_t(param, t1, t2){return equal$0(t1, t2);}
   function hash_fold_m_t(Elt, state){
    var a = Elt[1];
    return function(b){return hash_fold_direct(a, state, b);};
   }
   function hash_m_t(folder, t){
    var state = hash_fold_m_t(folder, Base_Hash[11].call(null, 0, 0))(t);
    return Base_Hash[9].call(null, state);
   }
   var
    comparator$0 = Base_Comparator[2][1],
    include = Empty_without_value_restrictio(Base_Comparator[2]),
    empty$2 = include[1];
   function singleton$2(a){return singleton$0(comparator$0, a);}
   function union_list$3(a){return union_list$1(comparator$0, a);}
   function of_sorted_array_unchecked$3(a){
    return of_sorted_array_unchecked$1(comparator$0, a);
   }
   function of_increasing_iterator_uncheck$3(len, f){
    return of_increasing_iterator_uncheck$1(comparator$0, len, f);
   }
   function of_sorted_array$3(a){return of_sorted_array$1(comparator$0, a);}
   function of_list$3(a){return of_list$1(comparator$0, a);}
   function of_sequence$3(a){return of_sequence$1(comparator$0, a);}
   function of_array$3(a){return of_array$1(comparator$0, a);}
   function stable_dedup_list$3(a){
    return stable_dedup_list$1(comparator$0, a);
   }
   function map$3(a, f){return map$1(comparator$0, a, f);}
   function filter_map$3(a, f){return filter_map$1(comparator$0, a, f);}
   function of_tree$2(tree){return [0, comparator$0, tree];}
   function to_tree$1(t){return t[2];}
   var
    a = Base_Sequence[57],
    Base_Set =
      [0,
       compare$0,
       invariants$0,
       comparator_s,
       comparator,
       empty$1,
       singleton$1,
       length$0,
       is_empty$0,
       mem$0,
       add$0,
       remove$0,
       union$0,
       union_list$2,
       inter$0,
       diff$0,
       symmetric_diff$0,
       compare_direct,
       hash_fold_direct,
       equal$0,
       exists$0,
       for_all$0,
       count$0,
       sum$0,
       find$0,
       find_map$0,
       find_exn$0,
       nth$0,
       remove_index$0,
       is_subset$1,
       are_disjoint$0,
       [0, is_subset$2, equal$1],
       of_list$2,
       of_sequence$2,
       of_array$2,
       to_list,
       to_array$0,
       of_sorted_array$2,
       of_sorted_array_unchecked$2,
       of_increasing_iterator_uncheck$2,
       stable_dedup_list$2,
       map$2,
       filter_map$2,
       filter$0,
       fold$0,
       fold_result,
       fold_until$0,
       fold_right$0,
       iter$0,
       iter2$0,
       partition_tf$0,
       elements$0,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       choose$0,
       choose_exn$0,
       split$0,
       split_le_gt$0,
       split_lt_ge$0,
       group_by$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       [0, a[1], a[6], a[7]],
       merge_to_sequence$0,
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       hash_m_t,
       [0,
        sexp_of_t$0,
        t_of_sexp_direct$1,
        [0,
         sexp_of_t$1,
         t_of_sexp_direct$0,
         length$1,
         is_empty$1,
         iter$1,
         fold$1,
         fold_result$0,
         exists$1,
         for_all$1,
         count$1,
         sum$1,
         find$1,
         find_map$1,
         to_list$0,
         to_array$1,
         invariants$1,
         mem$1,
         add$1,
         remove$1,
         union$1,
         inter$1,
         diff$1,
         symmetric_diff$1,
         compare_direct$0,
         equal$2,
         is_subset$3,
         are_disjoint$1,
         Named,
         fold_until$1,
         fold_right$1,
         iter2$1,
         filter$1,
         partition_tf$1,
         elements$1,
         min_elt$1,
         min_elt_exn$1,
         max_elt$1,
         max_elt_exn$1,
         choose$1,
         choose_exn$1,
         split$1,
         split_le_gt$1,
         split_lt_ge$1,
         group_by$1,
         find_exn$1,
         nth$1,
         remove_index$1,
         to_tree,
         to_sequence$1,
         binary_search$1,
         binary_search_segmented$1,
         merge_to_sequence$1,
         empty,
         singleton,
         union_list$0,
         of_list$0,
         of_sequence$0,
         of_array$0,
         of_sorted_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_uncheck$0,
         stable_dedup_list$0,
         map$0,
         filter_map$0,
         of_tree,
         empty_without_value_restrictio],
        length$0,
        is_empty$0,
        iter$0,
        fold$0,
        fold_result,
        exists$0,
        for_all$0,
        count$0,
        sum$0,
        find$0,
        find_map$0,
        to_list,
        to_array$0,
        invariants$0,
        mem$0,
        add$0,
        remove$0,
        union$0,
        inter$0,
        diff$0,
        symmetric_diff$0,
        compare_direct,
        equal$0,
        is_subset$1,
        are_disjoint$0,
        [0, is_subset$2, equal$1],
        fold_until$0,
        fold_right$0,
        iter2$0,
        filter$0,
        partition_tf$0,
        elements$0,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        choose$0,
        choose_exn$0,
        split$0,
        split_le_gt$0,
        split_lt_ge$0,
        group_by$0,
        find_exn$0,
        nth$0,
        remove_index$0,
        to_tree$0,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        merge_to_sequence$0,
        empty$0,
        singleton$0,
        union_list$1,
        of_list$1,
        of_sequence$1,
        of_array$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_uncheck$1,
        stable_dedup_list$1,
        map$1,
        filter_map$1,
        of_tree$0,
        comparator_s,
        comparator,
        hash_fold_direct,
        Empty_without_value_restrictio],
       to_tree$0,
       of_tree$1,
       [0,
        length$0,
        is_empty$0,
        iter$0,
        fold$0,
        fold_result,
        exists$0,
        for_all$0,
        count$0,
        sum$0,
        find$0,
        find_map$0,
        to_list,
        to_array$0,
        invariants$0,
        mem$0,
        add$0,
        remove$0,
        union$0,
        inter$0,
        diff$0,
        symmetric_diff$0,
        compare_direct,
        equal$0,
        is_subset$1,
        are_disjoint$0,
        [0, is_subset$2, equal$1],
        fold_until$0,
        fold_right$0,
        iter2$0,
        filter$0,
        partition_tf$0,
        elements$0,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        choose$0,
        choose_exn$0,
        split$0,
        split_le_gt$0,
        split_lt_ge$0,
        group_by$0,
        find_exn$0,
        nth$0,
        remove_index$0,
        to_tree$1,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        merge_to_sequence$0,
        empty$2,
        singleton$2,
        union_list$3,
        of_list$3,
        of_sequence$3,
        of_array$3,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_uncheck$3,
        stable_dedup_list$3,
        map$3,
        filter_map$3,
        of_tree$2]];
   runtime.caml_register_global(48, Base_Set, "Base__Set");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ref
//# unitInfo: Requires: Base__Exn, Base__Import, Base__List
//# shape: Base__Ref:[N,N,N,N,F(2)*,F(2),F(2),F(1)*,F(2),F(2),F(3),N,F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Exn = global_data.Base__Exn,
    Base_List = global_data.Base__List,
    Base_Import = global_data.Base__Import,
    compare_local = Base_Import[266],
    compare = Base_Import[238],
    equal_local = Base_Import[280],
    equal = Base_Import[252],
    globalize = Base_Import[296],
    t_of_sexp = Base_Import[168],
    sexp_of_t = Base_Import[144];
   function t_sexp_grammar(a_sexp_grammar){
    return Base_Import[191].call(null, a_sexp_grammar);
   }
   function swap(t1, t2){
    var tmp = t1[1];
    t1[1] = t2[1];
    t2[1] = tmp;
    return 0;
   }
   function replace(t, f){t[1] = caml_call1(f, t[1]); return 0;}
   function set_temporarily(t, a, f){
    var restore_to = t[1];
    t[1] = a;
    return Base_Exn[13].call
            (null, f, function(param){t[1] = restore_to; return 0;});
   }
   function set(param){var a = param[2], r = param[1]; r[1] = a; return 0;}
   function sets(ts){return Base_List[19].call(null, ts, set);}
   function snapshot(param){var r = param[1]; return [0, r, r[1]];}
   function sets_temporarily(and_values, f){
    var restore_to = Base_List[53].call(null, and_values, snapshot);
    sets(and_values);
    return Base_Exn[13].call
            (null, f, function(param){return sets(restore_to);});
   }
   var
    Base_Ref =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       swap,
       replace,
       set_temporarily,
       [0, set, sets, snapshot],
       sets_temporarily];
   runtime.caml_register_global(3, Base_Ref, "Base__Ref");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Queue_intf
//# shape: Base__Queue_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Queue_intf = [0];
   runtime.caml_register_global(0, Base_Queue_intf, "Base__Queue_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Queue
//# unitInfo: Requires: Base__Array, Base__Error, Base__Import, Base__Indexed_container, Base__Int, Base__List, Base__Option_array, Base__Sexp, Sexplib0__Sexp_grammar, Stdlib__Queue
//# shape: Base__Queue:[F(3),F(3),F(2),F(2),F(2),F(1)*,N,F(1)*,F(1)*,F(2),F(3),N,N,N,N,N,N,N,N,F(1),F(1),N,N,F(3),F(2),N,N,N,N,N,F(1),F(1),F(1),F(2),F(2),F(2),F(1),F(1),F(1),F(3),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(4),F(2),F(3),F(1)*,F(2),[F(1)*,F(2)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_length$2 = "length",
    cst_src_queue_ml = "src/queue.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Import = global_data.Base__Import,
    Base_Option_array = global_data.Base__Option_array,
    Base_Array = global_data.Base__Array,
    Base_Int = global_data.Base__Int,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Base_Indexed_container = global_data.Base__Indexed_container,
    a = [0, "elts"],
    b = [0, cst_length$2],
    c = [0, "mask"],
    d = [0, "front"],
    e = [0, "num_mutations"],
    cst_length = cst_length$2,
    cst_index = "index",
    cst_Queue_index_out_of_bounds = "Queue index out of bounds",
    f = [0, "_"],
    cst_mutation_of_queue_during_i = "mutation of queue during iteration",
    g = [0, cst_src_queue_ml, 184, 9],
    h = [0, cst_src_queue_ml, 178, 2],
    i = [0, cst_src_queue_ml, 177, 2],
    j = [0, cst_src_queue_ml, 176, 2],
    k = [0, cst_src_queue_ml, 175, 2],
    l = [0, cst_src_queue_ml, 174, 2],
    m = [0, cst_src_queue_ml, 172, 2],
    n = [0, cst_src_queue_ml, 171, 2],
    cst_capacity = "capacity",
    cst_cannot_have_queue_with_neg =
      "cannot have queue with negative capacity",
    o = [0, cst_src_queue_ml, 212, 2],
    cst_length$0 = cst_length$2,
    cst_Queue_blit_transfer_negati = "Queue.blit_transfer: negative length",
    dummy = 0;
   function globalize(param, t){
    var a = Base_Option_array[58].call(null, t[5]);
    return [0, t[1], t[2], t[3], t[4], a];
   }
   function inc_num_mutations(t){t[1] = Base_Import[91].call(null, t[1], 1);}
   function capacity(t){return Base_Import[91].call(null, t[3], 1);}
   function elts_index(t, i){
    var a = t[3], b = Base_Import[91].call(null, t[2], i);
    return Base_Import[116].call(null, b, a);
   }
   function unsafe_get(t, i){
    var a = elts_index(t, i);
    return Base_Option_array[40].call(null, t[5], a);
   }
   function unsafe_set(t, i, a){
    var b = elts_index(t, i);
    return Base_Option_array[51].call(null, t[5], b, a);
   }
   function check_index_exn(t, i){
    var b = i < 0 ? 1 : 0, a = b || (t[4] <= i ? 1 : 0);
    if(! a) return a;
    var
     c = [0, [0, cst_length, caml_call1(Base_Int[10], t[4])], 0],
     d = [0, [0, cst_index, caml_call1(Base_Int[10], i)], c],
     e = Base_Sexp[10].call(null, cst_Queue_index_out_of_bounds, d);
    return Base_Error[32].call(null, e);
   }
   function get(t, i){check_index_exn(t, i); return unsafe_get(t, i);}
   function set(t, i, a){
    check_index_exn(t, i);
    inc_num_mutations(t);
    return unsafe_set(t, i, a);
   }
   function is_empty(t){return 0 === t[4] ? 1 : 0;}
   function length(param){var length = param[4]; return length;}
   function ensure_no_mutation(t, num_mutations){
    var g = t[1] !== num_mutations ? 1 : 0;
    if(! g) return g;
    var param = globalize(0, t);
    function of_a_001(param){return f;}
    var
     num_mutations_003 = param[1],
     front_005 = param[2],
     mask_007 = param[3],
     length_009 = param[4],
     elts_011 = param[5],
     arg_012 = Base_Option_array[2].call(null, of_a_001, elts_011),
     bnds_002 = [0, [1, [0, a, [0, arg_012, 0]]], 0],
     arg_010 = Base_Import[139].call(null, length_009),
     bnds_002$0 = [0, [1, [0, b, [0, arg_010, 0]]], bnds_002],
     arg_008 = Base_Import[139].call(null, mask_007),
     bnds_002$1 = [0, [1, [0, c, [0, arg_008, 0]]], bnds_002$0],
     arg_006 = Base_Import[139].call(null, front_005),
     bnds_002$2 = [0, [1, [0, d, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = Base_Import[139].call(null, num_mutations_003),
     bnds_002$3 = [0, [1, [0, e, [0, arg_004, 0]]], bnds_002$2],
     h =
       Base_Sexp[10].call
        (null,
         cst_mutation_of_queue_during_i,
         [0, [0, cst, [1, bnds_002$3]], 0]);
    return Base_Error[32].call(null, h);
   }
   function compare_local(compare_elt, t1, t2){
    if(t1 === t2) return 0;
    var mut2 = t2[1], mut1 = t1[1], len2 = t2[4], len1 = t1[4], pos = 0;
    for(;;){
     var match = pos === len2 ? 1 : 0;
     if(pos === len1) return match ? 0 : -1;
     if(match) return 1;
     var
      a = unsafe_get(t2, pos),
      x = caml_call2(compare_elt, unsafe_get(t1, pos), a);
     ensure_no_mutation(t1, mut1);
     ensure_no_mutation(t2, mut2);
     if(0 !== x) return x;
     var pos$0 = Base_Import[91].call(null, pos, 1);
     pos = pos$0;
    }
   }
   function compare(compare_elt, t1, t2){
    return compare_local(compare_elt, t1, t2);
   }
   function equal_local(equal_elt, t1, t2){
    var d = t1 === t2 ? 1 : 0;
    if(d)
     var e = d;
    else{
     var len1 = t1[4], len2 = t2[4], f = len1 === len2 ? 1 : 0;
     if(f){
      var mut2 = t2[1], mut1 = t1[1], pos = 0;
      for(;;){
       var a = pos === len1 ? 1 : 0;
       if(a)
        var c = a;
       else{
        var
         g = unsafe_get(t2, pos),
         b = caml_call2(equal_elt, unsafe_get(t1, pos), g);
        ensure_no_mutation(t1, mut1);
        ensure_no_mutation(t2, mut2);
        if(b){
         var pos$0 = Base_Import[91].call(null, pos, 1);
         pos = pos$0;
         continue;
        }
        var c = b;
       }
       return c;
      }
     }
     var e = f;
    }
    return e;
   }
   function equal(equal_elt, t1, t2){return equal_local(equal_elt, t1, t2);}
   function invariant(invariant_a, t){
    var num_mutations = t[1], front = t[2], length = t[4], elts = t[5];
    if(0 > front)
     throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
    if(front >= capacity(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
    var capacity$0 = capacity(t);
    if(capacity$0 !== Base_Option_array[28].call(null, elts))
     throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
    if(1 > capacity$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
    if(! Base_Int[72].call(null, capacity$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
    if(0 > length)
     throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
    if(length > capacity$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
    var a = Base_Import[93].call(null, capacity$0, 1), c = 0;
    if(a >= 0){
     var i$0 = c;
     for(;;){
      if(i$0 < t[4]){
       caml_call1(invariant_a, unsafe_get(t, i$0));
       ensure_no_mutation(t, num_mutations);
      }
      else{
       var b = elts_index(t, i$0);
       if(Base_Option_array[42].call(null, t[5], b))
        throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
      }
      var d = i$0 + 1 | 0;
      if(a === i$0) break;
      i$0 = d;
     }
    }
    return 0;
   }
   function create(capacity, param){
    if(capacity){
     var capacity$0 = capacity[1];
     if(0 <= capacity$0)
      var
       capacity$1 = 0 === capacity$0 ? 1 : Base_Int[68].call(null, capacity$0);
     else
      var
       b = [0, [0, cst_capacity, caml_call1(Base_Int[10], capacity$0)], 0],
       c = Base_Sexp[10].call(null, cst_cannot_have_queue_with_neg, b),
       capacity$1 = Base_Error[32].call(null, c);
    }
    else
     var capacity$1 = 2;
    var a = Base_Option_array[5].call(null, capacity$1);
    return [0, 0, 0, Base_Import[93].call(null, capacity$1, 1), 0, a];
   }
   function blit_to_array(src, dst){
    var a = Base_Option_array[28].call(null, dst);
    if(src[4] > a)
     throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
    var
     b = src[2],
     c = capacity(src),
     d = Base_Import[93].call(null, c, b),
     front_len = Base_Int[15].call(null, src[4], d),
     rest_len = Base_Import[93].call(null, src[4], front_len);
    caml_call5(Base_Option_array[53], src[5], src[2], dst, 0, front_len);
    return caml_call5
            (Base_Option_array[53], src[5], 0, dst, front_len, rest_len);
   }
   function set_capacity_internal(t, new_capacity){
    var dst = Base_Option_array[5].call(null, new_capacity);
    blit_to_array(t, dst);
    t[2] = 0;
    t[3] = Base_Import[93].call(null, new_capacity, 1);
    t[5] = dst;
    return 0;
   }
   function set_capacity(t, desired_capacity){
    inc_num_mutations(t);
    var
     b = Base_Import[100].call(null, desired_capacity, t[4]),
     c = Base_Import[100].call(null, 1, b),
     new_capacity = Base_Int[68].call(null, c),
     a = new_capacity !== capacity(t) ? 1 : 0;
    return a ? set_capacity_internal(t, new_capacity) : a;
   }
   function enqueue(t, a){
    inc_num_mutations(t);
    var b = capacity(t);
    if(t[4] === b)
     set_capacity_internal(t, Base_Import[88].call(null, 2, t[4]));
    unsafe_set(t, t[4], a);
    t[4] = Base_Import[91].call(null, t[4], 1);
    return 0;
   }
   function enqueue_front(t, a){
    inc_num_mutations(t);
    var b = capacity(t);
    if(t[4] === b)
     set_capacity_internal(t, Base_Import[88].call(null, 2, t[4]));
    var
     c = t[3],
     d = Base_Import[93].call(null, t[2], 1),
     front = Base_Import[116].call(null, d, c);
    t[2] = front;
    t[4] = Base_Import[91].call(null, t[4], 1);
    return unsafe_set(t, 0, a);
   }
   function dequeue_nonempty(t){
    inc_num_mutations(t);
    var
     elts = t[5],
     front = t[2],
     res = Base_Option_array[36].call(null, elts, front);
    Base_Option_array[45].call(null, elts, front);
    t[2] = elts_index(t, 1);
    t[4] = Base_Import[93].call(null, t[4], 1);
    return res;
   }
   function back_index(t){
    return elts_index(t, Base_Import[93].call(null, t[4], 1));
   }
   function dequeue_back_nonempty(t){
    inc_num_mutations(t);
    var
     elts = t[5],
     back = back_index(t),
     res = Base_Option_array[36].call(null, elts, back);
    Base_Option_array[45].call(null, elts, back);
    t[4] = Base_Import[93].call(null, t[4], 1);
    return res;
   }
   function dequeue_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return dequeue_nonempty(t);
   }
   function dequeue(t){return is_empty(t) ? 0 : [0, dequeue_nonempty(t)];}
   function dequeue_and_ignore_exn(t){dequeue_exn(t); return 0;}
   function dequeue_back_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return dequeue_back_nonempty(t);
   }
   function dequeue_back(t){
    return is_empty(t) ? 0 : [0, dequeue_back_nonempty(t)];
   }
   function front_nonempty(t){
    return Base_Option_array[40].call(null, t[5], t[2]);
   }
   function back_nonempty(t){
    var a = back_index(t);
    return Base_Option_array[40].call(null, t[5], a);
   }
   function last_nonempty(t){
    return unsafe_get(t, Base_Import[93].call(null, t[4], 1));
   }
   function peek(t){return is_empty(t) ? 0 : [0, front_nonempty(t)];}
   function peek_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return front_nonempty(t);
   }
   function peek_back(t){return is_empty(t) ? 0 : [0, back_nonempty(t)];}
   function peek_back_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return back_nonempty(t);
   }
   function last(t){return is_empty(t) ? 0 : [0, last_nonempty(t)];}
   function last_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return last_nonempty(t);
   }
   function drain(t, f, while$){
    for(;;){
     if(! is_empty(t) && caml_call1(while$, front_nonempty(t))){caml_call1(f, dequeue_nonempty(t)); continue;}
     return 0;
    }
   }
   function clear(t){
    inc_num_mutations(t);
    var a = 0 < t[4] ? 1 : 0;
    if(a){
     var b = Base_Import[93].call(null, t[4], 1), e = 0;
     if(b >= 0){
      var i = e;
      for(;;){
       var d = elts_index(t, i);
       Base_Option_array[52].call(null, t[5], d);
       var f = i + 1 | 0;
       if(b === i) break;
       i = f;
      }
     }
     t[4] = 0;
     t[2] = 0;
     var c = 0;
    }
    else
     var c = a;
    return c;
   }
   function blit_transfer(src, dst, len, param){
    inc_num_mutations(src);
    inc_num_mutations(dst);
    if(len){
     var len$0 = len[1];
     if(len$0 < 0){
      var
       d = [0, [0, cst_length$0, caml_call1(Base_Int[10], len$0)], 0],
       e = Base_Sexp[10].call(null, cst_Queue_blit_transfer_negati, d);
      Base_Error[32].call(null, e);
     }
     var len$1 = Base_Import[101].call(null, len$0, src[4]);
    }
    else
     var len$1 = src[4];
    var a = 0 < len$1 ? 1 : 0;
    if(a){
     var f = Base_Import[91].call(null, dst[4], len$1), g = capacity(dst);
     set_capacity(dst, Base_Import[100].call(null, g, f));
     var
      dst_start = Base_Import[91].call(null, dst[2], dst[4]),
      b = Base_Import[93].call(null, len$1, 1),
      h = 0;
     if(b >= 0){
      var i = h;
      for(;;){
       var
        l = src[3],
        m = Base_Import[91].call(null, src[2], i),
        src_i = Base_Import[116].call(null, m, l),
        n = dst[3],
        o = Base_Import[91].call(null, dst_start, i),
        dst_i = Base_Import[116].call(null, o, n),
        p = Base_Option_array[40].call(null, src[5], src_i);
       Base_Option_array[51].call(null, dst[5], dst_i, p);
       Base_Option_array[52].call(null, src[5], src_i);
       var q = i + 1 | 0;
       if(b === i) break;
       i = q;
      }
     }
     dst[4] = Base_Import[91].call(null, dst[4], len$1);
     var j = src[3], k = Base_Import[91].call(null, src[2], len$1);
     src[2] = Base_Import[116].call(null, k, j);
     src[4] = Base_Import[93].call(null, src[4], len$1);
     var c = 0;
    }
    else
     var c = a;
    return c;
   }
   function enqueue_all(t, l){
    var
     a = Base_List[45].call(null, l),
     b = Base_Import[91].call(null, t[4], a),
     c = capacity(t);
    set_capacity(t, Base_Int[16].call(null, c, b));
    return Base_List[19].call(null, l, function(x){return enqueue(t, x);});
   }
   function fold(t, init, f){
    if(0 === t[4]) return init;
    var
     num_mutations = t[1],
     r = [0, init],
     a = Base_Import[93].call(null, t[4], 1),
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = unsafe_get(t, i);
      r[1] = caml_call2(f, r[1], c);
      ensure_no_mutation(t, num_mutations);
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return r[1];
   }
   function foldi(t, init, f){
    var i = [0, 0];
    return fold
            (t,
             init,
             function(acc, a){
              var acc$0 = caml_call3(f, i[1], acc, a);
              i[1] = Base_Import[91].call(null, i[1], 1);
              return acc$0;
             });
   }
   function iter(t, f){
    var num_mutations = t[1], a = Base_Import[93].call(null, t[4], 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call1(f, unsafe_get(t, i));
      ensure_no_mutation(t, num_mutations);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function iteri(t, f){
    var num_mutations = t[1], a = Base_Import[93].call(null, t[4], 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i, unsafe_get(t, i));
      ensure_no_mutation(t, num_mutations);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function to_list(t){
    var result = [0, 0], a = Base_Import[93].call(null, t[4], 1);
    if(a >= 0){
     var i = a;
     for(;;){
      var b = result[1];
      result[1] = [0, unsafe_get(t, i), b];
      var c = i - 1 | 0;
      if(0 === i) break;
      i = c;
     }
    }
    return result[1];
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    foldi$0 = [0, -198771759, foldi],
    iteri$0 = [0, -198771759, iteri],
    C =
      Base_Indexed_container[8].call
       (null, [0, fold, iter$0, length$0, iteri$0, foldi$0]),
    count = C[10],
    exists = C[8],
    find = C[12],
    find_map = C[13],
    fold_result = C[6],
    fold_until = C[7],
    for_all = C[9],
    max_elt = C[17],
    mem = C[1],
    min_elt = C[16],
    sum = C[11],
    counti = C[22],
    existsi = C[20],
    find_mapi = C[24],
    findi = C[23],
    for_alli = C[21],
    cst_length$1 = cst_length$2,
    cst_Queue_init_negative_length = "Queue.init: negative length",
    p = [0, cst_src_queue_ml, 507, 2],
    q = [0, 1];
   function concat_map(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       var b = caml_call1(f, a);
       return Base_List[19].call
               (null, b, function(b){return enqueue(t_result, b);});
      });
    return t_result;
   }
   function concat_mapi(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       var b = caml_call2(f, i, a);
       return Base_List[19].call
               (null, b, function(b){return enqueue(t_result, b);});
      });
    return t_result;
   }
   function filter_map(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       var match = caml_call1(f, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(t_result, b);
      });
    return t_result;
   }
   function filter_mapi(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       var match = caml_call2(f, i, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(t_result, b);
      });
    return t_result;
   }
   function filter(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       var b = caml_call1(f, a);
       return b ? enqueue(t_result, a) : b;
      });
    return t_result;
   }
   function filteri(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       var b = caml_call2(f, i, a);
       return b ? enqueue(t_result, a) : b;
      });
    return t_result;
   }
   function filter_inplace(t, f){
    var t2 = filter(t, f);
    clear(t);
    return blit_transfer(t2, t, 0, 0);
   }
   function filteri_inplace(t, f){
    var t2 = filteri(t, f);
    clear(t);
    return blit_transfer(t2, t, 0, 0);
   }
   function copy(src){
    var dst = create([0, src[4]], 0);
    blit_to_array(src, dst[5]);
    dst[4] = src[4];
    return dst;
   }
   function of_list(l){
    var t = create([0, Base_List[45].call(null, l)], 0);
    Base_List[19].call(null, l, function(x){return enqueue(t, x);});
    return t;
   }
   function init(len, f){
    if(len < 0){
     var
      b = [0, [0, cst_length$1, caml_call1(Base_Int[10], len)], 0],
      c = Base_Sexp[10].call(null, cst_Queue_init_negative_length, b);
     Base_Error[32].call(null, c);
    }
    var t = create([0, len], 0);
    if(len > Base_Option_array[28].call(null, t[5]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
    var a = Base_Import[93].call(null, len, 1), d = 0;
    if(a >= 0){
     var i = d;
     for(;;){
      var e = caml_call1(f, i);
      Base_Option_array[51].call(null, t[5], i, e);
      var g = i + 1 | 0;
      if(a === i) break;
      i = g;
     }
    }
    t[4] = len;
    return t;
   }
   function of_array(a){
    return init(a.length - 1, function(b){return a[b + 1];});
   }
   function to_array(t){
    return Base_Array[41].call
            (null, t[4], function(i){return unsafe_get(t, i);});
   }
   function map(ta, f){
    var num_mutations = ta[1], tb = create([0, ta[4]], 0);
    tb[4] = ta[4];
    var a = Base_Import[93].call(null, ta[4], 1), c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var b = caml_call1(f, unsafe_get(ta, i));
      ensure_no_mutation(ta, num_mutations);
      Base_Option_array[51].call(null, tb[5], i, b);
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return tb;
   }
   function mapi(t, f){
    var i = [0, 0];
    return map
            (t,
             function(a){
              var result = caml_call2(f, i[1], a);
              i[1] = Base_Import[91].call(null, i[1], 1);
              return result;
             });
   }
   function singleton(x){var t = create(q, 0); enqueue(t, x); return t;}
   function sexp_of_t(sexp_of_a, t){
    var a = to_list(t);
    return Base_List[6].call(null, sexp_of_a, a);
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(Base_List[5].call(null, a_of_sexp, sexp));
   }
   function t_sexp_grammar(grammar){
    var a = Base_List[7].call(null, grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function start(q){return q[1];}
   function assert_no_mutation_since_start(t, q){return ensure_no_mutation(q, t);
   }
   var
    Iteration = [0, start, assert_no_mutation_since_start],
    Base_Queue =
      [0,
       compare,
       compare_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       singleton,
       of_list,
       of_array,
       init,
       enqueue,
       enqueue_all,
       dequeue,
       dequeue_exn,
       dequeue_and_ignore_exn,
       drain,
       peek,
       peek_exn,
       clear,
       copy,
       map,
       mapi,
       concat_map,
       concat_mapi,
       filter_map,
       filter_mapi,
       filter,
       filteri,
       filter_inplace,
       filteri_inplace,
       equal,
       equal_local,
       invariant,
       create,
       last,
       last_exn,
       enqueue_front,
       dequeue_back,
       dequeue_back_exn,
       peek_back,
       peek_back_exn,
       blit_transfer,
       get,
       set,
       capacity,
       set_capacity,
       Iteration];
   runtime.caml_register_global(39, Base_Queue, "Base__Queue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Nothing
//# unitInfo: Requires: Base__Identifiable, Base__Import, Sexplib0__Sexp_conv_error
//# shape: Base__Nothing:[N,F(1),N,F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    t_sexp_grammar = [4, 0],
    module_name = "Base.Nothing",
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Match_failure = global_data.Match_failure,
    Base_Identifiable = global_data.Base__Identifiable,
    a = [0, "src/nothing.ml", 6, 31];
   function unreachable_code_local(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, a], 1);
   }
   function unreachable_code(x){return unreachable_code_local(x);}
   var
    cst_Base_Nothing_t = "Base.Nothing.t",
    cst_Base_Nothing_of_string_not = "Base.Nothing.of_string: not supported";
   function hash_fold_t(param, t){return unreachable_code_local(t);}
   function compare(a, param){return unreachable_code_local(a);}
   function compare_local(a, param){return unreachable_code_local(a);}
   function equal_local(a, param){return unreachable_code_local(a);}
   function t_of_sexp(sexp){
    return Sexplib0_Sexp_conv_error[30].call(null, cst_Base_Nothing_t, sexp);
   }
   function of_string(param){
    return Base_Import[124].call(null, cst_Base_Nothing_of_string_not);
   }
   var
    include =
      Base_Identifiable[1].call
       (null,
        [0,
         compare,
         hash_fold_t,
         unreachable_code,
         t_of_sexp,
         unreachable_code,
         of_string,
         unreachable_code,
         module_name]),
    hash_fold_t$0 = include[1],
    hash = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t = include[4],
    of_string$0 = include[5],
    to_string = include[6],
    symbol = include[7],
    symbol$0 = include[8],
    symbol$1 = include[9],
    symbol$2 = include[10],
    symbol$3 = include[11],
    symbol$4 = include[12],
    equal = include[13],
    compare$0 = include[14],
    min = include[15],
    max = include[16],
    ascending = include[17],
    descending = include[18],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    pp = include[23],
    hashable = include[24];
   function must_be_none(param){return 0;}
   function must_be_empty(param){return 0;}
   function must_be_ok(param){var ok = param[1]; return ok;}
   function must_be_error(param){var error = param[1]; return error;}
   function must_be_first(param){var first = param[1]; return first;}
   function must_be_second(param){var second = param[1]; return second;}
   var
    Base_Nothing =
      [0,
       0,
       unreachable_code,
       t_sexp_grammar,
       unreachable_code,
       unreachable_code_local,
       hash_fold_t$0,
       hash,
       t_of_sexp$0,
       sexp_of_t,
       of_string$0,
       to_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local,
       compare_local,
       must_be_none,
       must_be_empty,
       must_be_ok,
       must_be_error,
       must_be_first,
       must_be_second];
   runtime.caml_register_global(9, Base_Nothing, "Base__Nothing");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Nativeint
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Word_size, Stdlib__Nativeint, Stdlib__Scanf
//# shape: Base__Nativeint:[F(1)*,N,F(1),F(1)*,F(1)*,F(1),N,F(1),F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,N,N,F(1),N,N,N,N,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1)*,N,N,F(2),F(2),N,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,N,N,N,F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1)*,F(1),F(1)*,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_nx = "%nx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Nativeint.Hex",
    module_name$0 = "Base.Nativeint",
    Base_Int_math = global_data.Base__Int_math,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Base_Printf = global_data.Base__Printf,
    Base_Float0 = global_data.Base__Float0,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Word_size = global_data.Base__Word_size,
    Base_Error = global_data.Base__Error,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    include = Base_Import[104],
    compare = include[9],
    globalize = Base_Import[287],
    hash_fold_t = Base_Import[202],
    func = Base_Import[216];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[167],
    sexp_of_t = Base_Import[143],
    t_sexp_grammar = Base_Import[189],
    hashable = [0, hash, compare, sexp_of_t],
    compare$0 = Base_Import[104][9],
    to_string = Stdlib_Nativeint[15],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib_Nativeint[14],
    comparator = Base_Comparator[7].call(null, [0, compare$0, sexp_of_t])[1],
    zero = Stdlib_Nativeint[1],
    b = Base_Comparable[14].call(null, [0, compare$0, sexp_of_t, zero]),
    is_positive = b[1],
    is_non_negative = b[2],
    is_negative = b[3],
    is_non_positive = b[4],
    sign = b[5],
    include$0 = Base_Int_string_conversions[1].call(null, [0, to_string]),
    to_string_hum = include$0[1],
    sexp_of_t$0 = include$0[2],
    compare_local = Base_Import[259];
   function compare$1(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[202], func$0 = Base_Import[216];
   function hash$0(x){return caml_call1(func$0, x);}
   var zero$0 = Stdlib_Nativeint[1];
   function neg(a){return - a | 0;}
   var
    symbol = Base_Import[104][1],
    c = [0, [6, 6, 0, 0, 0], cst_nx],
    d = [0, [6, 6, 0, 0, 0], cst_nx];
   function to_string$0(i){
    return caml_call1(Base_Printf[2].call(null, c), i);
   }
   function of_string$0(s){
    return caml_call1
            (Stdlib_Scanf[5].call(null, s, d), function(a){return a;});
   }
   var
    include$1 =
      Base_Int_string_conversions[2].call
       (null,
        [0,
         compare$1,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero$0,
         symbol,
         neg,
         module_name]),
    Hex = include$1[1],
    include$2 =
      Base_Pretty_printer[2].call(null, [0, module_name$0, to_string]),
    pp = include$2[1];
   function invariant(param){return 0;}
   var
    num_bits = Base_Word_size[2].call(null, Base_Word_size[3]),
    float_lower_bound = Base_Float0[26].call(null, num_bits),
    float_upper_bound = Base_Float0[24].call(null, num_bits);
   function shift_right_logical(b, a){return b >>> a | 0;}
   function shift_right(b, a){return b >> a;}
   function shift_left(b, a){return b << a;}
   var bit_not = Stdlib_Nativeint[12];
   function bit_xor(b, a){return b ^ a;}
   function bit_or(b, a){return b | a;}
   function bit_and(b, a){return b & a;}
   var
    min_value = Stdlib_Nativeint[11],
    max_value = Stdlib_Nativeint[10],
    abs = Stdlib_Nativeint[8],
    pred = Stdlib_Nativeint[7],
    succ = Stdlib_Nativeint[6],
    rem = runtime.caml_mod;
   function symbol$0(a){return - a | 0;}
   var
    minus_one = Stdlib_Nativeint[3],
    one = Stdlib_Nativeint[2],
    zero$1 = Stdlib_Nativeint[1],
    e =
      [0,
       [11,
        "Nativeint.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Nativeint.of_float: argument (%f) is out of range or NaN"];
   function to_float(a){return a;}
   function of_float_unchecked(a){return a | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var a = Base_Float0[29].call(null, f);
    return caml_call2(Base_Printf[7].call(null, e), a, 0);
   }
   var
    raise_s = Base_Error[32],
    f =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_Nativeint_floor_log2_got_i =
      "[Nativeint.floor_log2] got invalid input",
    cst_Nativeint_ceil_log2_got_in = "[Nativeint.ceil_log2] got invalid input",
    g = [0, "src/nativeint.ml", 206, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function non_positive_argument(param){
    return caml_call1(Base_Printf[7].call(null, f), 0);
   }
   function lsr(b, a){return b >>> a | 0;}
   function land(b, a){return b & a;}
   function ceil_pow2(x){
    if(Base_Import[104][2].call(null, x, 0)) non_positive_argument(0);
    var
     x$0 = Stdlib_Nativeint[7].call(null, x),
     x$6 = x$0 | x$0 >>> 1 | 0,
     x$5 = x$6 | x$6 >>> 2 | 0,
     x$4 = x$5 | x$5 >>> 4 | 0,
     x$3 = x$4 | x$4 >>> 8 | 0,
     x$2 = x$3 | x$3 >>> 16 | 0,
     x$1 = x$2 | x$2 >>> 32 | 0;
    return Stdlib_Nativeint[6].call(null, x$1);
   }
   function floor_pow2(x$0){
    if(Base_Import[104][2].call(null, x$0, 0)) non_positive_argument(0);
    var
     x = x$0 | x$0 >>> 1 | 0,
     x$5 = x | x >>> 2 | 0,
     x$4 = x$5 | x$5 >>> 4 | 0,
     x$3 = x$4 | x$4 >>> 8 | 0,
     x$2 = x$3 | x$3 >>> 16 | 0,
     x$1 = x$2 | x$2 >>> 32 | 0;
    return x$1 - (x$1 >>> 1 | 0) | 0;
   }
   function is_pow2(x){
    if(Base_Import[104][2].call(null, x, 0)) non_positive_argument(0);
    var a = x & Stdlib_Nativeint[7].call(null, x);
    return Base_Import[104][4].call(null, a, 0);
   }
   function floor_log2(i){
    if(caml_lessequal(i, Stdlib_Nativeint[1])){
     var a = [0, [0, cst, Base_Import[143].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Nativeint_floor_log2_got_i, a));
    }
    var
     b = runtime.Base_int_math_nativeint_clz(i),
     c = Base_Import[93].call(null, num_bits, 1);
    return Base_Import[93].call(null, c, b);
   }
   function ceil_log2(i){
    if(caml_lessequal(i, Stdlib_Nativeint[1])){
     var a = [0, [0, cst$0, Base_Import[143].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Nativeint_ceil_log2_got_in, a));
    }
    if(Stdlib_Nativeint[18].call(null, i, Stdlib_Nativeint[2])) return 0;
    var
     b =
       runtime.Base_int_math_nativeint_clz(Stdlib_Nativeint[7].call(null, i));
    return Base_Import[93].call(null, num_bits, b);
   }
   function between(t, low, high){
    var a = Base_Import[104][2].call(null, low, t);
    return a ? Base_Import[104][2].call(null, t, high) : a;
   }
   function clamp_unchecked(t, min, max){
    var a = Base_Import[104][14].call(null, t, max);
    return Base_Import[104][13].call(null, min, a);
   }
   function clamp_exn(t, min, max){
    if(Base_Import[104][2].call(null, min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
   }
   function clamp(t, min, max){
    if(! Base_Import[104][5].call(null, min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   var symbol$1 = runtime.caml_div, symbol$2 = runtime.caml_mul;
   function symbol$3(b, a){return b - a | 0;}
   function symbol$4(b, a){return b + a | 0;}
   function incr(r){r[1] = r[1] + one | 0; return 0;}
   function decr(r){r[1] = r[1] - one | 0; return 0;}
   function of_nativeint(t){return t;}
   function to_nativeint(t){return t;}
   var
    popcount = Base_Popcount[4],
    of_int_exn = Base_Int_conversions[5],
    to_int = Base_Int_conversions[23],
    to_int_exn = Base_Int_conversions[24],
    to_int_trunc = Base_Int_conversions[25],
    of_int32 = Base_Int_conversions[10],
    to_int32 = Base_Int_conversions[26],
    to_int32_exn = Base_Int_conversions[27],
    of_int64 = Base_Int_conversions[18],
    of_int64_exn = Base_Int_conversions[19],
    of_int64_trunc = Base_Int_conversions[20],
    to_int64 = Base_Int_conversions[29];
   function pow(b, e){
    var a = to_int_exn(e), c = to_int_exn(b);
    return of_int_exn(Base_Int_math[2][1].call(null, c, a));
   }
   function symbol$5(b, e){return pow(b, e);}
   var compare_local$0 = Base_Import[259];
   function compare$2(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[273];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[202], func$1 = Base_Import[216];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(a){return runtime.Base_int_math_nativeint_clz(a);}
   var
    Binary =
      Base_Int_string_conversions[3].call
        (null,
         [0,
          compare$2,
          compare_local$0,
          equal,
          equal_local,
          hash_fold_t$1,
          hash$1,
          clz,
          lsr,
          land,
          to_int_exn,
          num_bits,
          one,
          zero$1])
       [1],
    a = Base_Import[104],
    symbol$6 = a[3],
    symbol$7 = a[1],
    symbol$8 = a[5],
    symbol$9 = a[4],
    symbol$10 = a[2],
    symbol$11 = a[6],
    include$3 =
      Base_Int_math[1].call
       (null,
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol$4,
         symbol$3,
         symbol$2,
         symbol$1,
         symbol$0,
         symbol$11,
         symbol$10,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         abs,
         symbol$0,
         zero$1,
         of_int_exn,
         rem]),
    symbol$12 = include$3[1],
    symbol$13 = include$3[2],
    symbol$14 = include$3[3],
    round = include$3[4],
    round_towards_zero = include$3[5],
    round_down = include$3[6],
    round_up = include$3[7],
    round_nearest = include$3[8],
    include$4 = Base_Import[104],
    symbol$15 = include$4[1],
    symbol$16 = include$4[2],
    symbol$17 = include$4[3],
    symbol$18 = include$4[4],
    symbol$19 = include$4[5],
    symbol$20 = include$4[6],
    ascending = include$4[7],
    descending = include$4[8],
    compare$3 = include$4[9],
    compare_local$1 = include$4[10],
    equal$0 = include$4[11],
    equal_local$0 = include$4[12],
    max = include$4[13],
    min = include$4[14],
    Base_Nativeint =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       symbol$20,
       symbol$16,
       symbol$18,
       symbol$19,
       symbol$15,
       symbol$17,
       equal$0,
       compare$3,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       compare_local$1,
       equal_local$0,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero$1,
       one,
       minus_one,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$5,
       symbol$0,
       symbol$0,
       symbol$13,
       symbol$12,
       symbol$1,
       rem,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(a){return runtime.Base_int_math_nativeint_clz(a);},
       function(a){return runtime.Base_int_math_nativeint_ctz(a);},
       [0,
        symbol$4,
        symbol$3,
        symbol$2,
        symbol$1,
        symbol$0,
        symbol$5,
        symbol$11,
        symbol$10,
        symbol$9,
        symbol$8,
        symbol$7,
        symbol$6,
        abs,
        symbol$0,
        zero$1,
        symbol$12,
        symbol$13,
        symbol$14,
        bit_and,
        bit_or,
        bit_xor,
        bit_not,
        shift_left,
        shift_right,
        shift_right_logical],
       of_int_exn,
       to_int,
       of_int32,
       to_int32,
       of_nativeint,
       to_nativeint,
       of_int64,
       to_int_trunc,
       of_int64_trunc,
       runtime.caml_int32_bswap];
   runtime.caml_register_global(35, Base_Nativeint, "Base__Nativeint");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Map
//# unitInfo: Requires: Base__Comparator, Base__Error, Base__Exn, Base__Import, Base__List0, Base__Map_intf, Base__Maybe_bound, Base__Option, Base__Or_error, Base__Result, Base__Sequence, Base__Sexp, Base__Uniform_array, Base__With_return, Sexplib0__Sexp_conv, Sexplib0__Sexp_grammar
//# shape: Base__Map:[[F(2)*,N,F(2)*,F(1)*,F(1)*,F(1)*],[F(4),F(4),F(3),F(1)*,F(1)*,F(2)*,F(2)*,F(3)*],F(1),F(1)*,F(1)*,F(1)*,F(2)*->F(1)*,F(2),F(2),F(2),F(2),F(4),F(3),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(4),F(3),F(3),F(3),F(3),F(3),F(5),F(4),F(1)*,F(1)*,F(3),F(3),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(3),F(3),F(3),F(4),F(3),F(4),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(1),F(3),F(4),F(3),F(1),F(1),F(2),F(3),F(2),F(3),[F(4),F(4),F(3),F(3),F(2)*],F(3),F(5),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(3),F(5),F(3),F(3),F(2),F(2),F(2),F(4),F(4),F(3),F(4),F(1)*,F(1)*,F(3),F(3),F(2)*,F(4),F(4),F(3)*->F(1),N,N,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    cst_Map_of$1 = "Map.of_",
    cst_key$1 = "key",
    cst_of_sorted_array_duplicated$1 = "of_sorted_array: duplicated elements",
    cst_src_map_ml = "src/map.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "alist",
    name$0 = "sequence",
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Comparator = global_data.Base__Comparator,
    Base_Result = global_data.Base__Result,
    Base_Or_error = global_data.Base__Or_error,
    Base_Error = global_data.Base__Error,
    Base_Option = global_data.Base__Option,
    Base_Import = global_data.Base__Import,
    Base_Exn = global_data.Base__Exn,
    Base_Sexp = global_data.Base__Sexp,
    Base_List0 = global_data.Base__List0,
    Assert_failure = global_data.Assert_failure,
    Base_Uniform_array = global_data.Base__Uniform_array,
    Base_Sequence = global_data.Base__Sequence,
    Base_Maybe_bound = global_data.Base__Maybe_bound,
    Base_Map_intf = global_data.Base__Map_intf,
    Base_With_return = global_data.Base__With_return,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Symmetric_diff_element = Base_Map_intf[5],
    include = Base_Map_intf[8],
    compare = include[1],
    all = include[2],
    equal = include[3],
    sexp_of_t = include[4];
   function of_continue_or_stop(a){return a;}
   function to_continue_or_stop(a){return a;}
   var
    Finished_or_unfinished =
      [0,
       compare,
       all,
       equal,
       sexp_of_t,
       of_continue_or_stop,
       to_continue_or_stop],
    include$0 = Base_Map_intf[6],
    compare$0 = include$0[1],
    equal$0 = include$0[2],
    sexp_of_t$0 = include$0[3];
   function left(param){
    var variant = param[1];
    if(737457313 === variant)
     var left = param[2][1];
    else{if(847852583 > variant) return 0; var left = param[2];}
    return [0, left];
   }
   function right(param){
    var variant = param[1];
    if(737457313 === variant)
     var right = param[2][2];
    else{if(847852583 <= variant) return 0; var right = param[2];}
    return [0, right];
   }
   function left_value(t, default$){
    var variant = t[1];
    if(737457313 === variant)
     var left = t[2][1];
    else{if(847852583 > variant) return default$; var left = t[2];}
    return left;
   }
   function right_value(t, default$){
    var variant = t[1];
    if(737457313 === variant)
     var right = t[2][2];
    else{if(847852583 <= variant) return default$; var right = t[2];}
    return right;
   }
   function values(t, left_default, right_default){
    var variant = t[1];
    if(737457313 === variant){
     var match = t[2], right = match[2], left = match[1];
     return [0, left, right];
    }
    if(847852583 <= variant){
     var left$0 = t[2];
     return [0, left$0, right_default];
    }
    var right$0 = t[2];
    return [0, left_default, right$0];
   }
   var
    Merge_element =
      [0,
       compare$0,
       equal$0,
       sexp_of_t$0,
       left,
       right,
       left_value,
       right_value,
       values],
    with_return = Base_With_return[1],
    Duplicate = [248, "Base__Map.Duplicate", caml_fresh_oo_id(0)],
    a = [0, "map.ml.Duplicate"],
    b = [0, cst_src_map_ml, 67, 11];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Duplicate,
     function(param){
      if(param === Duplicate) return a;
      throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
     });
   var
    cst_of_sorted_array_duplicated = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_duplicated$0 = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_elements_a =
      "of_sorted_array: elements are not ordered",
    cst_Map_bal = cst_Map_bal$3,
    c = [0, cst_src_map_ml, 248, 18],
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    d = [0, cst_src_map_ml, 263, 18],
    cst_Map_bal$2 = cst_Map_bal$3;
   function globalize(param){
    var length = param[2], tree = param[1];
    return [0, tree, length];
   }
   function height(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var h = param[5];
    return h;
   }
   function in_range(lower, upper, compare_key, k){
    if(lower)
     var
      lower$0 = lower[1],
      a = caml_call2(compare_key, lower$0, k) < 0 ? 1 : 0;
    else
     var a = 1;
    if(a){
     if(upper){
      var upper$0 = upper[1];
      return caml_call2(compare_key, k, upper$0) < 0 ? 1 : 0;
     }
     var b = 1;
    }
    else
     var b = a;
    return b;
   }
   function loop(lower$1, upper, compare_key, t$0){
    var lower = lower$1, t = t$0;
    for(;;){
     if(typeof t === "number") return 1;
     if(0 === t[0]){
      var k = t[1];
      return in_range(lower, upper, compare_key, k);
     }
     var
      h = t[5],
      r = t[4],
      k$0 = t[2],
      l = t[1],
      hl = height(l),
      hr = height(r),
      f = Base_Import[93].call(null, hl, hr),
      b = Base_Import[123].call(null, f) <= 2 ? 1 : 0;
     if(b){
      var
       g = Base_Import[100].call(null, hl, hr),
       c = h === Base_Import[91].call(null, g, 1) ? 1 : 0;
      if(c){
       var d = in_range(lower, upper, compare_key, k$0);
       if(d){
        var e = loop(lower, [0, k$0], compare_key, l);
        if(e){var lower$0 = [0, k$0]; lower = lower$0; t = r; continue;}
        var a = e;
       }
       else
        var a = d;
      }
      else
       var a = c;
     }
     else
      var a = b;
     return a;
    }
   }
   function invariants(t, compare_key){return loop(0, 0, compare_key, t);}
   function create_with_heights(hl, hr, l, x, d, r){
    if(0 === hl && 0 === hr) return [0, x, d];
    var
     a =
       hr <= hl
        ? Base_Import[91].call(null, hl, 1)
        : Base_Import[91].call(null, hr, 1);
    return [1, l, x, d, r, a];
   }
   function create(l, x, d, r){
    var a = height(r);
    return create_with_heights(height(l), a, l, x, d, r);
   }
   function of_increasing_iterator_uncheck(len, f){
    function loop(n, f, i){
     if(3 >= n >>> 0)
      switch(n){
        case 0:
         return 0;
        case 1:
         var match$0 = caml_call1(f, i), v$0 = match$0[2], k$0 = match$0[1];
         return [0, k$0, v$0];
        case 2:
         var
          match$1 = caml_call1(f, i),
          vl = match$1[2],
          kl = match$1[1],
          match$2 = caml_call1(f, Base_Import[91].call(null, i, 1)),
          v$1 = match$2[2],
          k$1 = match$2[1];
         return [1, [0, kl, vl], k$1, v$1, 0, 2];
        default:
         var
          match$3 = caml_call1(f, i),
          vl$0 = match$3[2],
          kl$0 = match$3[1],
          match$4 = caml_call1(f, Base_Import[91].call(null, i, 1)),
          v$2 = match$4[2],
          k$2 = match$4[1],
          match$5 = caml_call1(f, Base_Import[91].call(null, i, 2)),
          vr = match$5[2],
          kr = match$5[1];
         return [1, [0, kl$0, vl$0], k$2, v$2, [0, kr, vr], 2];
      }
     var
      left_length = Base_Import[120].call(null, n, 1),
      a = Base_Import[93].call(null, n, left_length),
      right_length = Base_Import[93].call(null, a, 1),
      left = loop(left_length, f, i),
      match = caml_call1(f, Base_Import[91].call(null, i, left_length)),
      v = match[2],
      k = match[1],
      b = Base_Import[91].call(null, i, left_length),
      right = loop(right_length, f, Base_Import[91].call(null, b, 1));
     return create(left, k, v, right);
    }
    return loop(len, f, 0);
   }
   function of_sorted_array_unchecked(array, compare_key){
    var array_length = array.length - 1;
    a:
    {
     if(2 <= array_length){
      var
       k0 = caml_check_bound(array, 0)[1][1],
       k1 = caml_check_bound(array, 1)[2][1];
      if(caml_call2(compare_key, k0, k1) >= 0){
       var
        next =
          function(i){
           var
            b = Base_Import[93].call(null, array_length, 1),
            a = Base_Import[93].call(null, b, i);
           return caml_check_bound(array, a)[a + 1];
          };
       break a;
      }
     }
     var next = function(i){return caml_check_bound(array, i)[i + 1];};
    }
    var tree = of_increasing_iterator_uncheck(array_length, next);
    return [0, tree, array_length];
   }
   function of_sorted_array(array, compare_key){
    var len = array.length - 1;
    if(1 !== len && len)
     return with_return
             (function(r){
               var
                c = caml_check_bound(array, 1)[2],
                d = Base_Import[125].call(null, c),
                e = caml_check_bound(array, 0)[1],
                i = caml_call2(compare_key, Base_Import[125].call(null, e), d),
                increasing =
                  0 === i
                   ? caml_call1
                     (r,
                      Base_Or_error[40].call(null, cst_of_sorted_array_duplicated))
                   : i < 0 ? 1 : 0,
                a = Base_Import[93].call(null, array.length - 1, 2),
                f = 1;
               if(a >= 1){
                var i$0 = f;
                for(;;){
                 var
                  b = Base_Import[91].call(null, i$0, 1),
                  g = caml_check_bound(array, b)[b + 1],
                  h = Base_Import[125].call(null, g),
                  j = caml_check_bound(array, i$0)[i$0 + 1],
                  i$1 =
                    caml_call2(compare_key, Base_Import[125].call(null, j), h);
                 if(0 === i$1)
                  caml_call1
                   (r,
                    Base_Or_error[40].call
                     (null, cst_of_sorted_array_duplicated$0));
                 else if((i$1 < 0 ? 1 : 0) !== increasing)
                  caml_call1
                   (r,
                    Base_Or_error[40].call(null, cst_of_sorted_array_elements_a));
                 var k = i$0 + 1 | 0;
                 if(a === i$0) break;
                 i$0 = k;
                }
               }
               return [0,
                       globalize(of_sorted_array_unchecked(array, compare_key))];
              });
    return [0, globalize(of_sorted_array_unchecked(array, compare_key))];
   }
   function bal(l, x, d$0, r){
    var hl = height(l), hr = height(r);
    if(Base_Import[91].call(null, hr, 2) < hl){
     if(typeof l === "number")
      return Base_Import[126].call(null, cst_Map_bal);
     if(0 === l[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
     var lr = l[4], ld = l[3], lv = l[2], ll = l[1], a = height(lr);
     if(a <= height(ll)) return create(ll, lv, ld, create(lr, x, d$0, r));
     if(typeof lr === "number")
      return Base_Import[126].call(null, cst_Map_bal$0);
     if(0 === lr[0]){
      var lrd = lr[2], lrv = lr[1], b = create(0, x, d$0, r);
      return create(create(ll, lv, ld, 0), lrv, lrd, b);
     }
     var
      lrr = lr[4],
      lrd$0 = lr[3],
      lrv$0 = lr[2],
      lrl = lr[1],
      e = create(lrr, x, d$0, r);
     return create(create(ll, lv, ld, lrl), lrv$0, lrd$0, e);
    }
    if(Base_Import[91].call(null, hl, 2) >= hr)
     return create_with_heights(hl, hr, l, x, d$0, r);
    if(typeof r === "number")
     return Base_Import[126].call(null, cst_Map_bal$1);
    if(0 === r[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    var rr = r[4], rd = r[3], rv = r[2], rl = r[1], f = height(rl);
    if(f <= height(rr)) return create(create(l, x, d$0, rl), rv, rd, rr);
    if(typeof rl === "number")
     return Base_Import[126].call(null, cst_Map_bal$2);
    if(0 === rl[0]){
     var rld = rl[2], rlv = rl[1], g = create(0, rv, rd, rr);
     return create(create(l, x, d$0, 0), rlv, rld, g);
    }
    var
     rlr = rl[4],
     rld$0 = rl[3],
     rlv$0 = rl[2],
     rll = rl[1],
     h = create(rlr, rv, rd, rr);
    return create(create(l, x, d$0, rll), rlv$0, rld$0, h);
   }
   var
    empty_without_value_restrictio = 0,
    cst_key = cst_key$1,
    cst_Map_add_exn_got_key_alread = "[Map.add_exn] got key already present",
    e = [1, 0];
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function raise_key_already_present(key, sexp_of_key){
    var
     a = [0, [0, cst_key, caml_call1(sexp_of_key, key)], 0],
     b = Base_Sexp[10].call(null, cst_Map_add_exn_got_key_alread, a);
    return Base_Error[32].call(null, b);
   }
   function find_and_add_or_set
   (t, length, x, data, compare_key, sexp_of_key, add_or_set){
    if(typeof t === "number"){
     var
      length$0 = Base_Import[91].call(null, length, 1),
      tree = [0, x, data];
     return [0, tree, length$0];
    }
    if(0 === t[0]){
     var d = t[2], v = t[1], c = caml_call2(compare_key, x, v);
     if(0 === c)
      switch(add_or_set){
        case 0:
         return Base_Exn[6].call(null, Duplicate);
        case 1:
         return raise_key_already_present(x, sexp_of_key);
        default: var tree$0 = [0, x, data]; return [0, tree$0, length];
      }
     if(0 <= c){
      var
       length$1 = Base_Import[91].call(null, length, 1),
       tree$1 = [1, 0, v, d, [0, x, data], 2];
      return [0, tree$1, length$1];
     }
     var
      length$2 = Base_Import[91].call(null, length, 1),
      tree$2 = [1, [0, x, data], v, d, 0, 2];
     return [0, tree$2, length$2];
    }
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     c$0 = caml_call2(compare_key, x, v$0);
    if(0 === c$0)
     switch(add_or_set){
       case 0:
        return Base_Exn[6].call(null, Duplicate);
       case 1:
        return raise_key_already_present(x, sexp_of_key);
       default:
        var tree$3 = [1, l, x, data, r, h]; return [0, tree$3, length];
     }
    if(0 <= c$0)
     var
      match =
        find_and_add_or_set
         (r, length, x, data, compare_key, sexp_of_key, add_or_set),
      length$3 = match[2],
      r$0 = match[1],
      length$4 = length$3,
      r$1 = r$0,
      l$0 = l;
    else
     var
      match$0 =
        find_and_add_or_set
         (l, length, x, data, compare_key, sexp_of_key, add_or_set),
      length$5 = match$0[2],
      l$1 = match$0[1],
      length$4 = length$5,
      r$1 = r,
      l$0 = l$1;
    var tree$4 = bal(l$0, v$0, d$0, r$1);
    return [0, tree$4, length$4];
   }
   function set_min(key, data, t){
    if(typeof t === "number") return [0, key, data];
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [1, [0, key, data], v, d, 0, 2];
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = set_min(key, data, l);
    return bal(l$0, v$0, d$0, r);
   }
   function set_max(t, key, data){
    if(typeof t === "number") return [0, key, data];
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [1, 0, v, d, [0, key, data], 2];
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     r$0 = set_max(r, key, data);
    return bal(l, v$0, d$0, r$0);
   }
   function add_exn(t, length, key, data, compare_key, sexp_of_key){
    return find_and_add_or_set
            (t, length, key, data, compare_key, sexp_of_key, 1);
   }
   function add_exn_internal(t, length, key, data, compare_key, sexp_of_key){
    return find_and_add_or_set
            (t, length, key, data, compare_key, sexp_of_key, 0);
   }
   function set(t, length, key, data, compare_key){
    return find_and_add_or_set
            (t, length, key, data, compare_key, function(param){return e;}, 2);
   }
   var
    empty = 0,
    f = [0, cst_src_map_ml, 480, 21],
    cst_of_increasing_sequence_non =
      "of_increasing_sequence: non-increasing key",
    g = [0, 0, 0, 0],
    h = [0, cst_src_map_ml, 578, 4],
    i = [0, "Map.find_exn: not found"];
   function max_key(param){
    if(! param) return 0;
    var key = param[1][1];
    return [0, key];
   }
   function add_unchecked(t, key, data){return [0, [0, key, data], t];}
   function to_tree_unchecked(list){
    if(! list) return 0;
    if(list[2]){
     var
      len = Base_List0[5].call(null, list),
      list$0 = [0, list],
      loop =
        function(len){
         var match = list$0[1], switcher = len - 1 | 0;
         if(2 >= switcher >>> 0)
          switch(switcher){
            case 0:
             if(match){
              var
               tail$0 = match[2],
               match$2 = match[1],
               data = match$2[2],
               key = match$2[1];
              list$0[1] = tail$0;
              return [0, key, data];
             }
             break;
            case 1:
             if(match){
              var a = match[2];
              if(a){
               var
                tail$1 = a[2],
                e = a[1],
                d1 = e[2],
                k1 = e[1],
                match$3 = match[1],
                d2 = match$3[2],
                k2 = match$3[1];
               list$0[1] = tail$1;
               return [1, 0, k1, d1, [0, k2, d2], 2];
              }
             }
             break;
            default:
             if(match){
              var b = match[2];
              if(b){
               var c = b[2];
               if(c){
                var
                 tail$2 = c[2],
                 g = c[1],
                 d1$0 = g[2],
                 k1$0 = g[1],
                 h = b[1],
                 d2$0 = h[2],
                 k2$0 = h[1],
                 match$4 = match[1],
                 d3 = match$4[2],
                 k3 = match$4[1];
                list$0[1] = tail$2;
                return [1, [0, k1$0, d1$0], k2$0, d2$0, [0, k3, d3], 2];
               }
              }
             }
          }
         var
          nr = Base_Import[95].call(null, len, 2),
          i = Base_Import[93].call(null, len, nr),
          nl = Base_Import[93].call(null, i, 1),
          r = loop(nr),
          match$0 = list$0[1];
         if(! match$0)
          throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
         var
          tail = match$0[2],
          match$1 = match$0[1],
          d = match$1[2],
          k = match$1[1];
         list$0[1] = tail;
         var l = loop(nl);
         return create(l, k, d, r);
        };
     return loop(len);
    }
    var match = list[1], data = match[2], key = match[1];
    return [0, key, data];
   }
   function of_increasing_sequence(seq, compare_key){
    return with_return
            (function(param){
              var
               match =
                 Base_Sequence[11].call
                  (null,
                   seq,
                   [0, empty, 0],
                   function(a, param$0){
                    var
                     data = param$0[2],
                     key = param$0[1],
                     length = a[2],
                     builder = a[1],
                     match = max_key(builder);
                    if(match){
                     var prev_key = match[1];
                     if(0 <= caml_call2(compare_key, prev_key, key))
                      return caml_call1
                              (param,
                               Base_Or_error[40].call(null, cst_of_increasing_sequence_non));
                    }
                    var
                     length$0 = Base_Import[91].call(null, length, 1),
                     tree = add_unchecked(builder, key, data);
                    return [0, tree, length$0];
                   }),
               length = match[2],
               builder = match[1],
               tree = to_tree_unchecked(builder);
              return [0, [0, tree, length]];
             });
   }
   function join(l, k, d, r){
    if(typeof l === "number") return set_min(k, d, r);
    if(0 !== l[0]){
     var lh = l[5], lr = l[4], ld$0 = l[3], lk$0 = l[2], ll = l[1];
     if(typeof r !== "number"){
      if(0 === r[0]){
       var rd = r[2], rk = r[1];
       return set_max(set_max(l, k, d), rk, rd);
      }
      var rh = r[5], rr = r[4], rd$0 = r[3], rk$0 = r[2], rl = r[1];
      if(Base_Import[91].call(null, rh, 3) < lh)
       var r$0 = join(lr, k, d, r), d$0 = ld$0, k$0 = lk$0, l$0 = ll;
      else if(Base_Import[91].call(null, lh, 3) < rh)
       var r$0 = rr, d$0 = rd$0, k$0 = rk$0, l$0 = join(l, k, d, rl);
      else
       var r$0 = r, d$0 = d, k$0 = k, l$0 = l;
      return bal(l$0, k$0, d$0, r$0);
     }
    }
    if(typeof r === "number") return set_max(l, k, d);
    var ld = l[2], lk = l[1];
    return set_min(lk, ld, set_min(k, d, r));
   }
   function split_gen(t, x, compare_key){
    if(typeof t === "number") return g;
    if(0 === t[0]){
     var d = t[2], k = t[1], cmp = caml_call1(compare_key, k);
     return 0 === cmp
             ? [0, 0, [0, [0, k, d]], 0]
             : 0 <= cmp ? [0, t, 0, 0] : [0, 0, 0, t];
    }
    var
     r = t[4],
     d$0 = t[3],
     k$0 = t[2],
     l = t[1],
     cmp$0 = caml_call1(compare_key, k$0);
    if(0 === cmp$0) return [0, l, [0, [0, k$0, d$0]], r];
    if(0 <= cmp$0){
     var
      match = split_gen(r, x, compare_key),
      rr = match[3],
      maybe = match[2],
      rl = match[1];
     return [0, join(l, k$0, d$0, rl), maybe, rr];
    }
    var
     match$0 = split_gen(l, x, compare_key),
     lr = match$0[3],
     maybe$0 = match$0[2],
     ll = match$0[1];
    return [0, ll, maybe$0, join(lr, k$0, d$0, r)];
   }
   function split(t, x, compare_key){
    return split_gen(t, x, function(y){return caml_call2(compare_key, x, y);});
   }
   function split_and_reinsert_boundary(t, into, x, compare_key){
    var
     a =
       847852583 <= into
        ? function
         (y){
          var res = caml_call2(compare_key, x, y);
          return 0 === res ? 1 : res;
         }
        : function
         (y){
          var res = caml_call2(compare_key, x, y);
          return 0 === res ? -1 : res;
         },
     match = split_gen(t, x, a),
     right = match[3],
     boundary_opt = match[2],
     left = match[1];
    if(Base_Option[52].call(null, boundary_opt)) return [0, left, right];
    throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
   }
   function split_range(t, lower_bound, upper_bound, compare_key){
    if(Base_Maybe_bound[10].call(null, lower_bound, upper_bound, compare_key))
     return [0,
             empty_without_value_restrictio,
             empty_without_value_restrictio,
             empty_without_value_restrictio];
    if(typeof lower_bound === "number")
     var mid_and_right = t, left = empty_without_value_restrictio;
    else if(0 === lower_bound[0])
     var
      lb$1 = lower_bound[1],
      c = split_and_reinsert_boundary(t, -57574468, lb$1, compare_key),
      mid_and_right = c[2],
      left = c[1];
    else
     var
      lb$2 = lower_bound[1],
      d = split_and_reinsert_boundary(t, 847852583, lb$2, compare_key),
      mid_and_right$0 = d[2],
      left$0 = d[1],
      mid_and_right = mid_and_right$0,
      left = left$0;
    if(typeof upper_bound === "number")
     var right = empty_without_value_restrictio, mid = mid_and_right;
    else if(0 === upper_bound[0])
     var
      lb = upper_bound[1],
      a =
        split_and_reinsert_boundary(mid_and_right, 847852583, lb, compare_key),
      right = a[2],
      mid = a[1];
    else
     var
      lb$0 = upper_bound[1],
      b =
        split_and_reinsert_boundary
         (mid_and_right, -57574468, lb$0, compare_key),
      right$0 = b[2],
      mid$0 = b[1],
      right = right$0,
      mid = mid$0;
    return [0, left, mid, right];
   }
   function find(t$0, x, compare_key){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var d = t[2], v = t[1];
      return 0 === caml_call2(compare_key, x, v) ? [0, d] : 0;
     }
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      c = caml_call2(compare_key, x, v$0);
     if(0 === c) return [0, d$0];
     t = 0 <= c ? r : l;
    }
   }
   function add_multi(t, length, key, data, compare_key){
    var
     a = find(t, key, compare_key),
     data$0 = [0, data, Base_Option[30].call(null, a, 0)];
    return set(t, length, key, data$0, compare_key);
   }
   function find_multi(t, x, compare_key){
    var match = find(t, x, compare_key);
    if(! match) return 0;
    var l = match[1];
    return l;
   }
   function if_not_found(key, sexp_of_key){
    var a = [1, [0, i, [0, caml_call1(sexp_of_key, key), 0]]];
    throw caml_maybe_attach_backtrace([0, Base_Import[297], a], 1);
   }
   function find_exn(t$0, x, compare_key, sexp_of_key){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return if_not_found(x, sexp_of_key);
     if(0 === t[0]){
      var d = t[2], v = t[1];
      return 0 === caml_call2(compare_key, x, v)
              ? d
              : if_not_found(x, sexp_of_key);
     }
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      c = caml_call2(compare_key, x, v$0);
     if(0 === c) return d$0;
     t = 0 <= c ? r : l;
    }
   }
   function mem(t, x, compare_key){
    var a = find(t, x, compare_key);
    return Base_Option[53].call(null, a);
   }
   function min_elt(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var d = param[2], k = param[1];
      return [0, [0, k, d]];
     }
     var l = param[1];
     if(typeof l === "number"){
      var d$0 = param[3], k$0 = param[2];
      return [0, [0, k$0, d$0]];
     }
     param = l;
    }
   }
   var
    Map_min_elt_exn_of_empty_map =
      [248,
       "Base__Map.Tree0.Map_min_elt_exn_of_empty_map",
       caml_fresh_oo_id(0)],
    j = [0, "map.ml.Tree0.Map_min_elt_exn_of_empty_map"],
    k = [0, cst_src_map_ml, 664, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Map_min_elt_exn_of_empty_map,
     function(param){
      if(param === Map_min_elt_exn_of_empty_map) return j;
      throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
     });
   var
    Map_max_elt_exn_of_empty_map =
      [248,
       "Base__Map.Tree0.Map_max_elt_exn_of_empty_map",
       caml_fresh_oo_id(0)],
    l = [0, "map.ml.Tree0.Map_max_elt_exn_of_empty_map"],
    m = [0, cst_src_map_ml, 677, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Map_max_elt_exn_of_empty_map,
     function(param){
      if(param === Map_max_elt_exn_of_empty_map) return l;
      throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
     });
   var
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    n = [0, 0, 0],
    o = [0, cst_src_map_ml, 1145, 17],
    cst_or_error_duplicate_key = "_or_error: duplicate key",
    cst_Map_of = cst_Map_of$1,
    cst_exn_duplicate_key = "_exn: duplicate key",
    cst_Map_of$0 = cst_Map_of$1;
   function min_elt_exn(t){
    var match = min_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Map_min_elt_exn_of_empty_map, 1);
    var v = match[1];
    return v;
   }
   function max_elt(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var d = param[2], k = param[1];
      return [0, [0, k, d]];
     }
     if(typeof param[4] === "number"){
      var d$0 = param[3], k$0 = param[2];
      return [0, [0, k$0, d$0]];
     }
     var r = param[4];
     param = r;
    }
   }
   function max_elt_exn(t){
    var match = max_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Map_max_elt_exn_of_empty_map, 1);
    var v = match[1];
    return v;
   }
   function remove_min_elt(t){
    if(typeof t === "number")
     return Base_Import[126].call(null, cst_Map_remove_min_elt);
    if(0 === t[0]) return 0;
    var l = t[1];
    if(typeof l === "number"){var r = t[4]; return r;}
    var r$0 = t[4], d = t[3], x = t[2];
    return bal(remove_min_elt(l), x, d, r$0);
   }
   function append(lower_part, upper_part, compare_key){
    var match = max_elt(lower_part), match$0 = min_elt(upper_part);
    if(! match) return [0, 17724, upper_part];
    if(! match$0) return [0, 17724, lower_part];
    var a = match$0[1], v = a[2], min_upper = a[1], max_lower = match[1][1];
    if(0 <= caml_call2(compare_key, max_lower, min_upper)) return 838882908;
    var upper_part_without_min = remove_min_elt(upper_part);
    return [0, 17724, join(lower_part, min_upper, v, upper_part_without_min)];
   }
   function go(t$0, min, max, init$2, f, compare_key){
    var t = t$0, init = init$2;
    for(;;){
     if(typeof t === "number") return init;
     if(0 === t[0]){
      var d = t[2], k = t[1];
      if
       (0 <= caml_call2(compare_key, k, min)
        && 0 >= caml_call2(compare_key, k, max))
       return caml_call3(f, k, d, init);
      return init;
     }
     var
      r = t[4],
      d$0 = t[3],
      k$0 = t[2],
      l = t[1],
      c_min = caml_call2(compare_key, k$0, min);
     if(0 <= c_min)
      if(0 === c_min){
       var init$0 = caml_call3(f, k$0, d$0, init);
       t = r;
       init = init$0;
      }
      else{
       var
        z = go(l, min, max, init, f, compare_key),
        c_max = caml_call2(compare_key, k$0, max);
       if(0 < c_max) return z;
       var init$1 = caml_call3(f, k$0, d$0, z);
       if(0 === c_max) return init$1;
       t = r;
       init = init$1;
      }
     else
      t = r;
    }
   }
   function fold_range_inclusive(t, min, max, init, f, compare_key){
    return 0 < caml_call2(compare_key, min, max)
            ? init
            : go(t, min, max, init, f, compare_key);
   }
   function range_to_alist(t, min, max, compare_key){
    var
     a =
       fold_range_inclusive
        (t,
         min,
         max,
         0,
         function(key, data, l){return [0, [0, key, data], l];},
         compare_key);
    return Base_List0[19].call(null, a);
   }
   function concat_unchecked(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var match = min_elt_exn(t2), d = match[2], x = match[1];
    return bal(t1, x, d, remove_min_elt(t2));
   }
   function concat_and_balance_unchecked(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var match = min_elt_exn(t2), d = match[2], x = match[1];
    return join(t1, x, d, remove_min_elt(t2));
   }
   function remove(tree, x, length, compare_key){
    if(typeof tree === "number") return [0, tree, length];
    if(0 === tree[0]){
     var v = tree[1];
     if(0 !== caml_call2(compare_key, x, v)) return [0, tree, length];
     var length$0 = Base_Import[93].call(null, length, 1);
     return [0, 0, length$0];
    }
    var
     r = tree[4],
     d = tree[3],
     v$0 = tree[2],
     l = tree[1],
     c = caml_call2(compare_key, x, v$0);
    if(0 === c){
     var
      length$1 = Base_Import[93].call(null, length, 1),
      tree$0 = concat_unchecked(l, r);
     return [0, tree$0, length$1];
    }
    if(0 <= c)
     var
      match = remove(r, x, length, compare_key),
      length$2 = match[2],
      r$0 = match[1],
      length$3 = length$2,
      r$1 = r$0,
      l$0 = l;
    else
     var
      match$0 = remove(l, x, length, compare_key),
      length$4 = match$0[2],
      l$1 = match$0[1],
      length$3 = length$4,
      r$1 = r,
      l$0 = l$1;
    if(length === length$3) return [0, tree, length];
    var tree$1 = bal(l$0, v$0, d, r$1);
    return [0, tree$1, length$3];
   }
   function change(tree, key, f, length, compare_key){
    if(typeof tree === "number"){
     var match = caml_call1(f, 0);
     if(! match) return [0, 0, length];
     var
      data = match[1],
      length$0 = Base_Import[91].call(null, length, 1),
      tree$0 = [0, key, data];
     return [0, tree$0, length$0];
    }
    if(0 === tree[0]){
     var d = tree[2], v = tree[1], c = caml_call2(compare_key, key, v);
     if(0 === c){
      var match$0 = caml_call1(f, [0, d]);
      if(match$0){
       var d$0 = match$0[1], tree$1 = [0, v, d$0];
       return [0, tree$1, length];
      }
      var length$1 = Base_Import[93].call(null, length, 1);
      return [0, 0, length$1];
     }
     if(0 <= c){
      var
       match$1 = change(0, key, f, length, compare_key),
       length$2 = match$1[2],
       r = match$1[1];
      if(r === tree) return [0, tree, length$2];
      var tree$2 = bal(0, v, d, r);
      return [0, tree$2, length$2];
     }
     var
      match$2 = change(0, key, f, length, compare_key),
      length$3 = match$2[2],
      l = match$2[1];
     if(l === tree) return [0, tree, length$3];
     var tree$3 = bal(l, v, d, 0);
     return [0, tree$3, length$3];
    }
    var
     h = tree[5],
     r$0 = tree[4],
     d$1 = tree[3],
     v$0 = tree[2],
     l$0 = tree[1],
     c$0 = caml_call2(compare_key, key, v$0);
    if(0 === c$0){
     var match$3 = caml_call1(f, [0, d$1]);
     if(match$3){
      var data$0 = match$3[1], tree$4 = [1, l$0, key, data$0, r$0, h];
      return [0, tree$4, length];
     }
     var
      length$4 = Base_Import[93].call(null, length, 1),
      tree$5 = concat_unchecked(l$0, r$0);
     return [0, tree$5, length$4];
    }
    if(0 <= c$0){
     var
      match$4 = change(r$0, key, f, length, compare_key),
      length$5 = match$4[2],
      r$1 = match$4[1];
     if(r$1 === r$0) return [0, tree, length$5];
     var tree$6 = bal(l$0, v$0, d$1, r$1);
     return [0, tree$6, length$5];
    }
    var
     match$5 = change(l$0, key, f, length, compare_key),
     length$6 = match$5[2],
     l$1 = match$5[1];
    if(l$1 === l$0) return [0, tree, length$6];
    var tree$7 = bal(l$1, v$0, d$1, r$0);
    return [0, tree$7, length$6];
   }
   function update(t, key, f, length, compare_key){
    if(typeof t === "number"){
     var
      data = caml_call1(f, 0),
      length$0 = Base_Import[91].call(null, length, 1),
      tree = [0, key, data];
     return [0, tree, length$0];
    }
    if(0 === t[0]){
     var d = t[2], v = t[1], c = caml_call2(compare_key, key, v);
     if(0 === c){
      var d$0 = caml_call1(f, [0, d]), tree$0 = [0, v, d$0];
      return [0, tree$0, length];
     }
     if(0 <= c){
      var
       match = update(0, key, f, length, compare_key),
       length$1 = match[2],
       r = match[1],
       tree$1 = bal(0, v, d, r);
      return [0, tree$1, length$1];
     }
     var
      match$0 = update(0, key, f, length, compare_key),
      length$2 = match$0[2],
      l = match$0[1],
      tree$2 = bal(l, v, d, 0);
     return [0, tree$2, length$2];
    }
    var
     h = t[5],
     r$0 = t[4],
     d$1 = t[3],
     v$0 = t[2],
     l$0 = t[1],
     c$0 = caml_call2(compare_key, key, v$0);
    if(0 === c$0){
     var
      data$0 = caml_call1(f, [0, d$1]),
      tree$3 = [1, l$0, key, data$0, r$0, h];
     return [0, tree$3, length];
    }
    if(0 <= c$0){
     var
      match$1 = update(r$0, key, f, length, compare_key),
      length$3 = match$1[2],
      r$1 = match$1[1],
      tree$4 = bal(l$0, v$0, d$1, r$1);
     return [0, tree$4, length$3];
    }
    var
     match$2 = update(l$0, key, f, length, compare_key),
     length$4 = match$2[2],
     l$1 = match$2[1],
     tree$5 = bal(l$1, v$0, d$1, r$0);
    return [0, tree$5, length$4];
   }
   function remove_multi(t, key, length, compare_key){
    return change
            (t,
             key,
             function(param){
              if(param){
               var match = param[1];
               if(match){
                var non_empty_tail = match[2];
                if(non_empty_tail) return [0, non_empty_tail];
               }
              }
              return 0;
             },
             length,
             compare_key);
   }
   function iter_keys(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(f, v);}
     var r = t[4], v$0 = t[2], l = t[1];
     iter_keys(l, f);
     caml_call1(f, v$0);
     t = r;
    }
   }
   function iter(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var d = t[2]; return caml_call1(f, d);}
     var r = t[4], d$0 = t[3], l = t[1];
     iter(l, f);
     caml_call1(f, d$0);
     t = r;
    }
   }
   function iteri(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var d = t[2], v = t[1]; return caml_call2(f, v, d);}
     var r = t[4], d$0 = t[3], v$0 = t[2], l = t[1];
     iteri(l, f);
     caml_call2(f, v$0, d$0);
     t = r;
    }
   }
   function iteri_until_loop(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var d = t[2], v = t[1]; return caml_call2(f, v, d);}
     var r = t[4], d$0 = t[3], v$0 = t[2], l = t[1];
     if(iteri_until_loop(l, f)) return 1;
     if(caml_call2(f, v$0, d$0)) return 1;
     t = r;
    }
   }
   function map(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var d = t[2], v = t[1]; return [0, v, caml_call1(f, d)];}
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = map(l, f),
     d$1 = caml_call1(f, d$0),
     r$0 = map(r, f);
    return [1, l$0, v$0, d$1, r$0, h];
   }
   function mapi(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [0, v, caml_call2(f, v, d)];
    }
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = mapi(l, f),
     d$1 = caml_call2(f, v$0, d$0),
     r$0 = mapi(r, f);
    return [1, l$0, v$0, d$1, r$0, h];
   }
   function fold(t$0, accu$1, f){
    var t = t$0, accu = accu$1;
    for(;;){
     if(typeof t === "number") return accu;
     if(0 === t[0]){var d = t[2], v = t[1]; return caml_call3(f, v, d, accu);}
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      accu$0 = caml_call3(f, v$0, d$0, fold(l, accu, f));
     t = r;
     accu = accu$0;
    }
   }
   function fold_until(t, init, f, finish){
    function fold_until_loop(t$0, acc$2, f){
     var t = t$0, acc = acc$2;
     for(;;){
      if(typeof t === "number") return [0, acc];
      if(0 === t[0]){var d = t[2], v = t[1]; return caml_call3(f, v, d, acc);}
      var
       r = t[4],
       d$0 = t[3],
       v$0 = t[2],
       l = t[1],
       match = fold_until_loop(l, acc, f);
      if(0 !== match[0]){var final$0 = match[1]; return [1, final$0];}
      var acc$0 = match[1], match$0 = caml_call3(f, v$0, d$0, acc$0);
      if(0 !== match$0[0]){var final = match$0[1]; return [1, final];}
      var acc$1 = match$0[1];
      t = r;
      acc = acc$1;
     }
    }
    var match = fold_until_loop(t, init, f);
    if(0 === match[0]){var acc = match[1]; return caml_call1(finish, acc);}
    var stop = match[1];
    return stop;
   }
   function fold_right(t$0, accu$1, f){
    var t = t$0, accu = accu$1;
    for(;;){
     if(typeof t === "number") return accu;
     if(0 === t[0]){var d = t[2], v = t[1]; return caml_call3(f, v, d, accu);}
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      accu$0 = caml_call3(f, v$0, d$0, fold_right(r, accu, f));
     t = l;
     accu = accu$0;
    }
   }
   function filter_mapi(t, f, len){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1], match = caml_call2(f, v, d);
     if(match){var new_data = match[1]; return [0, v, new_data];}
     len[1]--;
     return 0;
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = filter_mapi(l, f, len),
     new_data$0 = caml_call2(f, v$0, d$0),
     r$0 = filter_mapi(r, f, len);
    if(new_data$0){
     var new_data$1 = new_data$0[1];
     return join(l$0, v$0, new_data$1, r$0);
    }
    len[1]--;
    return concat_and_balance_unchecked(l$0, r$0);
   }
   function filteri(t, f, len){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return caml_call2(f, v, d) ? t : (len[1]--, 0);
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = filteri(l, f, len),
     keep_data = caml_call2(f, v$0, d$0),
     r$0 = filteri(r, f, len);
    if(l === l$0 && keep_data && r === r$0) return t;
    return keep_data
            ? join(l$0, v$0, d$0, r$0)
            : (len[1]--, concat_and_balance_unchecked(l$0, r$0));
   }
   function filter(t, f, len){
    return filteri(t, function(param, data){return caml_call1(f, data);}, len);
   }
   function filter_keys(t, f, len){
    return filteri(t, function(key, param){return caml_call1(f, key);}, len);
   }
   function filter_map(t, f, len){
    return filter_mapi
            (t, function(param, data){return caml_call1(f, data);}, len);
   }
   function partition_mapi(t, f){
    var
     match =
       fold
        (t,
         [0, empty, empty],
         function(key, data, param){
          var t2 = param[2], t1 = param[1], match = caml_call2(f, key, data);
          if(0 === match[0]){
           var x = match[1];
           return [0, add_unchecked(t1, key, x), t2];
          }
          var y = match[1];
          return [0, t1, add_unchecked(t2, key, y)];
         }),
     t2 = match[2],
     t1 = match[1],
     a = to_tree_unchecked(t2);
    return [0, to_tree_unchecked(t1), a];
   }
   function partition_map(t, f){
    return partition_mapi
            (t, function(param, data){return caml_call1(f, data);});
   }
   function partitioni_tf(t, f){
    function loop(t, f){
     if(typeof t === "number") return n;
     if(0 === t[0]){
      var d = t[2], v = t[1];
      return caml_call2(f, v, d) ? [0, t, 0] : [0, 0, t];
     }
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      match = loop(l, f),
      l_f = match[2],
      l_t = match[1],
      keep_data_t = caml_call2(f, v$0, d$0),
      match$0 = loop(r, f),
      r_f = match$0[2],
      r_t = match$0[1];
     function mk(l$0, keep_data, r$0){
      if(l === l$0 && keep_data && r === r$0) return t;
      return keep_data
              ? join(l$0, v$0, d$0, r$0)
              : concat_and_balance_unchecked(l$0, r$0);
     }
     var a = mk(l_f, 1 - keep_data_t, r_f);
     return [0, mk(l_t, keep_data_t, r_t), a];
    }
    return loop(t, f);
   }
   function partition_tf(t, f){
    return partitioni_tf
            (t, function(param, data){return caml_call1(f, data);});
   }
   function cons(t$0, e$1){
    var t = t$0, e = e$1;
    for(;;){
     if(typeof t === "number") return e;
     if(0 === t[0]){var d = t[2], v = t[1]; return [0, v, d, 0, e];}
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      e$0 = [0, v$0, d$0, r, e];
     t = l;
     e = e$0;
    }
   }
   function cons_right(t$0, e$1){
    var t = t$0, e = e$1;
    for(;;){
     if(typeof t === "number") return e;
     if(0 === t[0]){var d = t[2], v = t[1]; return [0, v, d, 0, e];}
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      e$0 = [0, v$0, d$0, l, e];
     t = r;
     e = e$0;
    }
   }
   function of_tree(tree){return cons(tree, 0);}
   function step_deeper_exn(tree, e){
    if(typeof tree === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
    if(0 === tree[0]){
     var d = tree[2], v = tree[1];
     return [0, 0, [0, v, d, 0, e]];
    }
    var r = tree[4], d$0 = tree[3], v$0 = tree[2], l = tree[1];
    return [0, l, [0, v$0, d$0, r, e]];
   }
   function drop_phys_equal_prefix(tree1$2, acc1$2, tree2$2, acc2$2){
    var tree1 = tree1$2, acc1 = acc1$2, tree2 = tree2$2, acc2 = acc2$2;
    for(;;){
     if(tree1 === tree2) return [0, acc1, acc2];
     var h2 = height(tree2), h1 = height(tree1);
     if(h2 === h1){
      var
       match = step_deeper_exn(tree1, acc1),
       acc1$0 = match[2],
       tree1$0 = match[1],
       match$0 = step_deeper_exn(tree2, acc2),
       acc2$0 = match$0[2],
       tree2$0 = match$0[1];
      tree1 = tree1$0;
      acc1 = acc1$0;
      tree2 = tree2$0;
      acc2 = acc2$0;
     }
     else if(h1 < h2){
      var
       match$1 = step_deeper_exn(tree2, acc2),
       acc2$1 = match$1[2],
       tree2$1 = match$1[1];
      tree2 = tree2$1;
      acc2 = acc2$1;
     }
     else{
      var
       match$2 = step_deeper_exn(tree1, acc1),
       acc1$1 = match$2[2],
       tree1$1 = match$2[1];
      tree1 = tree1$1;
      acc1 = acc1$1;
     }
    }
   }
   function fold2(compare_key, t1, t2, init, f){
    a:
    {
     var t1$0 = t1, t2$0 = t2, curr = init;
     for(;;){
      if(! t1$0) break;
      if(! t2$0){var param = t1$0, init$0 = curr; break a;}
      var
       enum2 = t2$0[4],
       tree2 = t2$0[3],
       v2 = t2$0[2],
       k2 = t2$0[1],
       enum1 = t1$0[4],
       tree1 = t1$0[3],
       v1 = t1$0[2],
       k1 = t1$0[1],
       compare_result = caml_call2(compare_key, k1, k2);
      if(0 === compare_result){
       var
        next = caml_call3(f, k1, [0, 737457313, [0, v1, v2]], curr),
        t2$1 = cons(tree2, enum2),
        t1$1 = cons(tree1, enum1);
       t1$0 = t1$1;
       t2$0 = t2$1;
       curr = next;
      }
      else if(0 <= compare_result){
       var
        next$0 = caml_call3(f, k2, [0, -57574468, v2], curr),
        t2$2 = cons(tree2, enum2);
       t2$0 = t2$2;
       curr = next$0;
      }
      else{
       var
        next$1 = caml_call3(f, k1, [0, 847852583, v1], curr),
        t1$2 = cons(tree1, enum1);
       t1$0 = t1$2;
       curr = next$1;
      }
     }
     if(! t2$0) return curr;
     var param$0 = t2$0, init$1 = curr;
     for(;;){
      if(! param$0) return init$1;
      var
       enum$0 = param$0[4],
       tree$0 = param$0[3],
       data$0 = param$0[2],
       key$0 = param$0[1],
       next$3 = caml_call3(f, key$0, [0, -57574468, data$0], init$1);
      param$0 = cons(tree$0, enum$0);
      init$1 = next$3;
     }
    }
    for(;;){
     if(! param) return init$0;
     var
      enum$ = param[4],
      tree = param[3],
      data = param[2],
      key = param[1],
      next$2 = caml_call3(f, key, [0, 847852583, data], init$0);
     param = cons(tree, enum$);
     init$0 = next$2;
    }
   }
   function symmetric_diff(t1, t2, compare_key, data_equal){
    function step(state){
     var left = state[1];
     if(left){
      var
       right = state[2],
       enum$ = left[4],
       tree = left[3],
       data = left[2],
       key = left[1];
      if(! right)
       return [1, [0, key, [0, 847852583, data]], [0, cons(tree, enum$), 0]];
      var
       enum2 = right[4],
       tree2 = right[3],
       v2 = right[2],
       k2 = right[1],
       compare_result = caml_call2(compare_key, key, k2);
      if(0 !== compare_result)
       return 0 <= compare_result
               ? [1,
                 [0, k2, [0, -57574468, v2]],
                 [0, left, cons(tree2, enum2)]]
               : [1,
                 [0, key, [0, 847852583, data]],
                 [0, cons(tree, enum$), right]];
      var next_state = drop_phys_equal_prefix(tree, enum$, tree2, enum2);
      return caml_call2(data_equal, data, v2)
              ? [0, next_state]
              : [1, [0, key, [0, 1013247643, [0, data, v2]]], next_state];
     }
     var match = state[2];
     if(! match) return 0;
     var
      enum$0 = match[4],
      tree$0 = match[3],
      data$0 = match[2],
      key$0 = match[1];
     return [1,
             [0, key$0, [0, -57574468, data$0]],
             [0, 0, cons(tree$0, enum$0)]];
    }
    var a = drop_phys_equal_prefix(t1, 0, t2, 0);
    return Base_Sequence[44].call(null, a, step);
   }
   function fold_symmetric_diff(t1, t2, compare_key, data_equal, init$0, f){
    function add(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, -57574468, v]]);
    }
    function remove(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, 847852583, v]]);
    }
    var
     match$0 = drop_phys_equal_prefix(t1, 0, t2, 0),
     right$1 = match$0[2],
     left$1 = match$0[1];
    a:
    {
     var left = left$1, right = right$1, init$1 = init$0;
     for(;;){
      if(! left){var init = init$1, param = right; break;}
      if(! right){var param$0 = left, init$2 = init$1; break a;}
      var
       enum2 = right[4],
       tree2 = right[3],
       v2 = right[2],
       k2 = right[1],
       enum1 = left[4],
       tree1 = left[3],
       v1 = left[2],
       k1 = left[1],
       compare_result = caml_call2(compare_key, k1, k2);
      if(0 === compare_result){
       var
        acc =
          caml_call2(data_equal, v1, v2)
           ? init$1
           : caml_call2(f, init$1, [0, k1, [0, 1013247643, [0, v1, v2]]]),
        match = drop_phys_equal_prefix(tree1, enum1, tree2, enum2),
        enum2$0 = match[2],
        enum1$0 = match[1];
       left = enum1$0;
       right = enum2$0;
       init$1 = acc;
      }
      else if(0 <= compare_result){
       var acc$0 = add(init$1, k2, v2), right$0 = cons(tree2, enum2);
       right = right$0;
       init$1 = acc$0;
      }
      else{
       var acc$1 = remove(init$1, k1, v1), left$0 = cons(tree1, enum1);
       left = left$0;
       init$1 = acc$1;
      }
     }
     for(;;){
      if(! param) return init;
      var
       enum$ = param[4],
       tree = param[3],
       data = param[2],
       key = param[1],
       next$0 = add(init, key, data);
      init = next$0;
      param = cons(tree, enum$);
     }
    }
    for(;;){
     if(! param$0) return init$2;
     var
      enum$0 = param$0[4],
      tree$0 = param$0[3],
      data$0 = param$0[2],
      key$0 = param$0[1],
      next = remove(init$2, key$0, data$0);
     param$0 = cons(tree$0, enum$0);
     init$2 = next;
    }
   }
   function to_sequence
   (comparator, opt, keys_greater_or_equal_to, keys_less_or_equal_to, t$3){
    var order = opt ? opt[1] : -542431297;
    function inclusive_bound(side, t, bound){
     var
      compare_key = comparator[1],
      match = split(t, bound, compare_key),
      r = match[3],
      maybe = match[2],
      l = match[1],
      t$0 = caml_call1(side, [0, l, r]);
     if(! maybe) return t$0;
     var match$0 = maybe[1], data = match$0[2], key = match$0[1];
     return set(t$0, 0, key, data, compare_key)[1];
    }
    if(511974747 <= order){
     var
      a = Base_Import[127],
      tree =
        Base_Option[34].call
         (null,
          keys_greater_or_equal_to,
          t$3,
          function(b, c){return inclusive_bound(a, b, c);}),
      next$0 =
        function(enum$){
         if(! enum$) return 0;
         var e = enum$[4], t = enum$[3], v = enum$[2], k = enum$[1];
         return [1, [0, k, v], cons_right(t, e)];
        };
     if(keys_less_or_equal_to){
      var
       key$0 = keys_less_or_equal_to[1],
       compare$0 = comparator[1],
       t$1 = tree,
       e$1 = 0;
      for(;;){
       if(typeof t$1 === "number"){var init$0 = e$1; break;}
       if(0 === t$1[0]){
        var d$1 = t$1[2], v$2 = t$1[1], t$2 = [1, 0, v$2, d$1, 0, 1];
        t$1 = t$2;
       }
       else{
        var l$0 = t$1[1], v$3 = t$1[2];
        if(0 < caml_call2(compare$0, v$3, key$0))
         t$1 = l$0;
        else{
         var
          r$1 = t$1[4],
          d$2 = t$1[3],
          v$4 = t$1[2],
          e$2 = [0, v$4, d$2, l$0, e$1];
         t$1 = r$1;
         e$1 = e$2;
        }
       }
      }
     }
     else
      var init$0 = cons_right(tree, 0);
     return Base_Sequence[44].call(null, init$0, next$0);
    }
    var
     b = Base_Import[125],
     t$4 =
       Base_Option[34].call
        (null,
         keys_less_or_equal_to,
         t$3,
         function(a, c){return inclusive_bound(b, a, c);});
    function next(enum$){
     if(! enum$) return 0;
     var e = enum$[4], t = enum$[3], v = enum$[2], k = enum$[1];
     return [1, [0, k, v], cons(t, e)];
    }
    if(keys_greater_or_equal_to){
     var
      key = keys_greater_or_equal_to[1],
      compare = comparator[1],
      t = t$4,
      e = 0;
     for(;;){
      if(typeof t === "number"){var init = e; break;}
      if(0 === t[0]){
       var d = t[2], v = t[1], t$0 = [1, 0, v, d, 0, 1];
       t = t$0;
      }
      else{
       var l = t[1], r = t[4], v$0 = t[2];
       if(0 <= caml_call2(compare, v$0, key)){
        var r$0 = t[4], d$0 = t[3], v$1 = t[2], e$0 = [0, v$1, d$0, r$0, e];
        t = l;
        e = e$0;
       }
       else
        t = r;
      }
     }
    }
    else
     var init = of_tree(t$4);
    return Base_Sequence[44].call(null, init, next);
   }
   function compare$1(compare_key, compare_data, t1$0, t2$0){
    var
     match$0 = drop_phys_equal_prefix(t1$0, 0, t2$0, 0),
     e2$1 = match$0[2],
     e1$1 = match$0[1],
     t1 = e1$1,
     t2 = e2$1;
    for(;;){
     if(! t1) return t2 ? -1 : 0;
     if(! t2) return 1;
     var
      e2 = t2[4],
      r2 = t2[3],
      d2 = t2[2],
      v2 = t2[1],
      e1 = t1[4],
      r1 = t1[3],
      d1 = t1[2],
      v1 = t1[1],
      c = caml_call2(compare_key, v1, v2);
     if(0 !== c) return c;
     var c$0 = caml_call2(compare_data, d1, d2);
     if(0 !== c$0) return c$0;
     var
      match = drop_phys_equal_prefix(r1, e1, r2, e2),
      e2$0 = match[2],
      e1$0 = match[1];
     t1 = e1$0;
     t2 = e2$0;
    }
   }
   function equal$1(compare_key, compare_data, t1$0, t2$0){
    var
     match$0 = drop_phys_equal_prefix(t1$0, 0, t2$0, 0),
     e2$1 = match$0[2],
     e1$1 = match$0[1],
     t1 = e1$1,
     t2 = e2$1;
    for(;;){
     if(t1){
      if(t2){
       var
        e2 = t2[4],
        r2 = t2[3],
        d2 = t2[2],
        v2 = t2[1],
        e1 = t1[4],
        r1 = t1[3],
        d1 = t1[2],
        v1 = t1[1],
        a = 0 === caml_call2(compare_key, v1, v2) ? 1 : 0;
       if(a){
        var b = caml_call2(compare_data, d1, d2);
        if(b){
         var
          match = drop_phys_equal_prefix(r1, e1, r2, e2),
          e2$0 = match[2],
          e1$0 = match[1];
         t1 = e1$0;
         t2 = e2$0;
         continue;
        }
        var c = b;
       }
       else
        var c = a;
       return c;
      }
     }
     else if(! t2) return 1;
     return 0;
    }
   }
   function iter2(t1, t2, f, compare_key){
    var a = of_tree(t2);
    return fold2
            (compare_key,
             of_tree(t1),
             a,
             0,
             function(key, data, param){return caml_call2(f, key, data);});
   }
   function fold2$0(t1, t2, init, f, compare_key){
    var a = of_tree(t2);
    return fold2(compare_key, of_tree(t1), a, init, f);
   }
   function fold_symmetric_diff$0(t1, t2, compare_key, data_equal, init, f){
    function add(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, -57574468, v]]);
    }
    function remove(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, 847852583, v]]);
    }
    function delta(acc, k, v$0, v){
     return caml_call2(data_equal, v$0, v)
             ? acc
             : caml_call2(f, acc, [0, k, [0, 1013247643, [0, v$0, v]]]);
    }
    function loop(t$1, t$2, acc$3){
     a:
     {
      b:
      {
       c:
       {
        var t$0 = t$1, t = t$2, init = acc$3;
        for(;;){
         if(t$0 === t) return init;
         if(typeof t$0 === "number") break;
         if(0 === t$0[0]) break c;
         var r = t$0[4], v$1 = t$0[3], k$1 = t$0[2], l = t$0[1];
         if(typeof t === "number") break b;
         if(0 === t[0]) break a;
         var r$0 = t[4], v$2 = t[3], k$2 = t[2], l$0 = t[1];
         if(0 !== caml_call2(compare_key, k$1, k$2)) break a;
         var acc$1 = loop(l, l$0, init), acc$2 = delta(acc$1, k$1, v$1, v$2);
         t$0 = r;
         t = r$0;
         init = acc$2;
        }
        return fold
                (t,
                 init,
                 function(key, data, acc){return add(acc, key, data);});
       }
       var v = t$0[2], k = t$0[1];
       if(typeof t !== "number"){
        if(0 !== t[0]) break a;
        var v$0 = t[2], k$0 = t[1], x = caml_call2(compare_key, k, k$0);
        if(0 === x) return delta(init, k, v, v$0);
        if(0 <= x){var acc = add(init, k$0, v$0); return remove(acc, k, v);}
        var acc$0 = remove(init, k, v);
        return add(acc$0, k$0, v$0);
       }
      }
      return fold
              (t$0,
               init,
               function(key, data, acc){return remove(acc, key, data);});
     }
     return fold_symmetric_diff(t$0, t, compare_key, data_equal, init, f);
    }
    return loop(t1, t2, init);
   }
   function length(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var
     r = param[4],
     l = param[1],
     a = length(r),
     b = length(l),
     c = Base_Import[91].call(null, b, a);
    return Base_Import[91].call(null, c, 1);
   }
   function keys(t){
    return fold_right
            (t, 0, function(key, param, list){return [0, key, list];});
   }
   function data(t){
    return fold_right
            (t, 0, function(param, data, list){return [0, data, list];});
   }
   function of_foldable(fold, foldable, init, f, compare_key){
    return caml_call3
            (fold,
             foldable,
             [0, empty_without_value_restrictio, 0],
             function(a, param){
              var
               data = param[2],
               key = param[1],
               length = a[2],
               accum = a[1],
               match = find(accum, key, compare_key);
              if(match)
               var prev = match[1], prev_data = prev;
              else
               var prev_data = init;
              var data$0 = caml_call2(f, prev_data, data);
              return globalize(set(accum, length, key, data$0, compare_key));
             });
   }
   function Of_foldable(M){
    function of_foldable_fold(foldable, init, f, compare_key){
     return of_foldable(M[2], foldable, init, f, compare_key);
    }
    function of_foldable_reduce(foldable, f, compare_key){
     return caml_call3
             (M[2],
              foldable,
              [0, empty_without_value_restrictio, 0],
              function(a, param){
               var
                data = param[2],
                key = param[1],
                length = a[2],
                accum = a[1],
                match = find(accum, key, compare_key);
               if(match)
                var prev = match[1], new_data = caml_call2(f, prev, data);
               else
                var new_data = data;
               return globalize
                       (set(accum, length, key, new_data, compare_key));
              });
    }
    function of_foldable$0(foldable, compare_key){
     return with_return
             (function(r){
               var
                map =
                  caml_call3
                   (M[2],
                    foldable,
                    [0, empty_without_value_restrictio, 0],
                    function(a, param){
                     var
                      data = param[2],
                      key = param[1],
                      length = a[2],
                      t = a[1],
                      acc = set(t, length, key, data, compare_key),
                      length$0 = acc[2];
                     return length === length$0
                             ? caml_call1(r, [0, -1048878709, key])
                             : globalize(acc);
                    });
               return [0, 17724, map];
              });
    }
    function of_foldable_or_error(foldable, comparator){
     var match = of_foldable$0(foldable, comparator[1]), variant = match[1];
     if(17724 <= variant){var x = match[2]; return [0, x];}
     var
      key = match[2],
      a = comparator[2],
      b = Base_Import[112].call(null, M[1], cst_or_error_duplicate_key),
      c = Base_Import[112].call(null, cst_Map_of, b);
     return Base_Or_error[38].call(null, 0, 0, c, key, a);
    }
    function of_foldable_exn(foldable, comparator){
     var match = of_foldable$0(foldable, comparator[1]), variant = match[1];
     if(17724 <= variant){var x = match[2]; return x;}
     var
      key = match[2],
      a = comparator[2],
      b = Base_Import[112].call(null, M[1], cst_exn_duplicate_key),
      c = Base_Import[112].call(null, cst_Map_of$0, b),
      d = Base_Error[19].call(null, 0, 0, c, key, a);
     return Base_Error[31].call(null, d);
    }
    function of_foldable_multi(foldable, compare_key){
     var
      alist = caml_call3(M[2], foldable, 0, function(l, x){return [0, x, l];});
     return of_foldable
             (Base_List0[8],
              alist,
              0,
              function(l, x){return [0, x, l];},
              compare_key);
    }
    return [0,
            of_foldable_fold,
            of_foldable_reduce,
            of_foldable$0,
            of_foldable_or_error,
            of_foldable_exn,
            of_foldable_multi];
   }
   var
    fold$0 = Base_List0[8],
    Of_alist = Of_foldable([0, name, fold$0]),
    of_alist_fold = Of_alist[1],
    of_alist_reduce = Of_alist[2],
    of_alist = Of_alist[3],
    of_alist_or_error = Of_alist[4],
    of_alist_exn = Of_alist[5],
    of_alist_multi = Of_alist[6],
    fold$1 = Base_Sequence[11],
    Of_sequence = Of_foldable([0, name$0, fold$1]),
    of_sequence_fold = Of_sequence[1],
    of_sequence_reduce = Of_sequence[2],
    of_sequence = Of_sequence[3],
    of_sequence_or_error = Of_sequence[4],
    of_sequence_exn = Of_sequence[5],
    of_sequence_multi = Of_sequence[6],
    cst_Map_of_list_with_key_or_er =
      "Map.of_list_with_key_or_error: duplicate key",
    cst_Map_of_list_with_key_exn_d = "Map.of_list_with_key_exn: duplicate key",
    cst_Map_merge_disjoint_exn_dup = "Map.merge_disjoint_exn: duplicate key",
    p = [0, 0],
    q = [0, 0],
    cst_Map_of_iteri_exn_duplicate = "Map.of_iteri_exn: duplicate key",
    cst_Map_t_of_sexp_direct_dupli = "Map.t_of_sexp_direct: duplicate key",
    r = [0, cst_src_map_ml, 1967, 6],
    cst_key$0 = cst_key$1,
    cst_Map_map_keys_exn_duplicate = "Map.map_keys_exn: duplicate key",
    s = [0, "Map.Build_increasing.add: non-increasing key"],
    dummy = 0;
   function of_list_with_key(list, get_key, compare_key){
    return with_return
            (function(r){
              var
               map =
                 Base_List0[8].call
                  (null,
                   list,
                   [0, empty_without_value_restrictio, 0],
                   function(param, data){
                    var
                     length = param[2],
                     t = param[1],
                     key = caml_call1(get_key, data),
                     acc = set(t, length, key, data, compare_key),
                     new_length = acc[2];
                    return length === new_length
                            ? caml_call1(r, [0, -1048878709, key])
                            : globalize(acc);
                   });
              return [0, 17724, map];
             });
   }
   function of_list_with_key_or_error(list, get_key, comparator){
    var
     match = of_list_with_key(list, get_key, comparator[1]),
     variant = match[1];
    if(17724 <= variant){var x = match[2]; return [0, x];}
    var key = match[2];
    return Base_Or_error[38].call
            (null, 0, 0, cst_Map_of_list_with_key_or_er, key, comparator[2]);
   }
   function of_list_with_key_exn(list, get_key, comparator){
    var
     match = of_list_with_key(list, get_key, comparator[1]),
     variant = match[1];
    if(17724 <= variant){var x = match[2]; return x;}
    var
     key = match[2],
     a =
       Base_Error[19].call
        (null, 0, 0, cst_Map_of_list_with_key_exn_d, key, comparator[2]);
    return Base_Error[31].call(null, a);
   }
   function of_list_with_key_multi(list, get_key, compare_key){
    var list$0 = Base_List0[19].call(null, list);
    return Base_List0[8].call
            (null,
             list$0,
             [0, empty_without_value_restrictio, 0],
             function(param, data){
              var
               length = param[2],
               t = param[1],
               key = caml_call1(get_key, data);
              return globalize
                      (update
                        (t,
                         key,
                         function(option){
                          var list = Base_Option[30].call(null, option, 0);
                          return [0, data, list];
                         },
                         length,
                         compare_key));
             });
   }
   function of_list_with_key_fold(list, get_key, init, f, compare_key){
    return Base_List0[8].call
            (null,
             list,
             [0, empty_without_value_restrictio, 0],
             function(param, data){
              var
               length = param[2],
               t = param[1],
               key = caml_call1(get_key, data);
              return globalize
                      (update
                        (t,
                         key,
                         function(param){
                          if(! param) return caml_call2(f, init, data);
                          var prev = param[1];
                          return caml_call2(f, prev, data);
                         },
                         length,
                         compare_key));
             });
   }
   function of_list_with_key_reduce(list, get_key, f, compare_key){
    return Base_List0[8].call
            (null,
             list,
             [0, empty_without_value_restrictio, 0],
             function(param, data){
              var
               length = param[2],
               t = param[1],
               key = caml_call1(get_key, data);
              return globalize
                      (update
                        (t,
                         key,
                         function(param){
                          if(! param) return data;
                          var prev = param[1];
                          return caml_call2(f, prev, data);
                         },
                         length,
                         compare_key));
             });
   }
   function for_all(t, f){
    return with_return
            (function(r){
              iter
               (t,
                function(data){
                 var a = 1 - caml_call1(f, data);
                 return a ? caml_call1(r, 0) : a;
                });
              return 1;
             });
   }
   function for_alli(t, f){
    return with_return
            (function(r){
              iteri
               (t,
                function(key, data){
                 var a = 1 - caml_call2(f, key, data);
                 return a ? caml_call1(r, 0) : a;
                });
              return 1;
             });
   }
   function exists(t, f){
    return with_return
            (function(r){
              iter
               (t,
                function(data){
                 var a = caml_call1(f, data);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function existsi(t, f){
    return with_return
            (function(r){
              iteri
               (t,
                function(key, data){
                 var a = caml_call2(f, key, data);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function count(t, f){
    return fold
            (t,
             0,
             function(param, data, acc){
              return caml_call1(f, data)
                      ? Base_Import[91].call(null, acc, 1)
                      : acc;
             });
   }
   function counti(t, f){
    return fold
            (t,
             0,
             function(key, data, acc){
              return caml_call2(f, key, data)
                      ? Base_Import[91].call(null, acc, 1)
                      : acc;
             });
   }
   function sum(M, t, f){
    return fold
            (t,
             M[1],
             function(param, data, acc){
              var a = caml_call1(f, data);
              return caml_call2(M[2], a, acc);
             });
   }
   function sumi(M, t, f){
    return fold
            (t,
             M[1],
             function(key, data, acc){
              var a = caml_call2(f, key, data);
              return caml_call2(M[2], a, acc);
             });
   }
   function to_alist(opt, t){
    var key_order = opt ? opt[1] : 608542111;
    return 608542111 <= key_order
            ? fold_right
              (t, 0, function(key, data, x){return [0, [0, key, data], x];})
            : fold
              (t, 0, function(key, data, x){return [0, [0, key, data], x];});
   }
   function merge(t1, t2, f, compare_key){
    var
     a = length(t2),
     b = length(t1),
     c = Base_Import[91].call(null, b, a),
     elts = Base_Uniform_array[62].call(null, c),
     i = [0, 0];
    iter2
     (t1,
      t2,
      function(key, values){
       var match = caml_call2(f, key, values);
       if(! match) return 0;
       var value = match[1];
       Base_Uniform_array[15].call(null, elts, i[1], [0, key, value]);
       i[1]++;
       return 0;
      },
      compare_key);
    var length$0 = i[1];
    function get(i){return Base_Uniform_array[12].call(null, elts, i);}
    var tree = of_increasing_iterator_uncheck(length$0, get);
    return [0, tree, length$0];
   }
   function merge_large_first
   (length_large, t_large, t_small, call, combine, compare_key){
    return fold
            (t_small,
             [0, t_large, length_large],
             function(key, data, param){
              var length = param[2], t = param[1];
              return globalize
                      (update
                        (t,
                         key,
                         function(param){
                          if(! param) return data;
                          var data$0 = param[1];
                          return caml_call4(call, combine, key, data$0, data);
                         },
                         length,
                         compare_key));
             });
   }
   function call(f, key, x, y){return caml_call3(f, key, x, y);}
   function swap(f, key, x, y){return caml_call3(f, key, y, x);}
   function merge_skewed(t1, t2, length1, length2, combine, compare_key){
    return length2 <= length1
            ? merge_large_first(length1, t1, t2, call, combine, compare_key)
            : merge_large_first(length2, t2, t1, swap, combine, compare_key);
   }
   function merge_disjoint_exn(t1, t2, length1, length2, comparator){
    return merge_skewed
            (t1,
             t2,
             length1,
             length2,
             function(key, b, param){
              var
               a =
                 Base_Error[19].call
                  (null,
                   0,
                   0,
                   cst_Map_merge_disjoint_exn_dup,
                   key,
                   comparator[2]);
              return Base_Error[31].call(null, a);
             },
             comparator[1]);
   }
   function repackage(marker, k, v){return marker ? [0, [0, k, v]] : 0;}
   function closest_key(t$0, dir, k$0, compare_key){
    var t = t$0, found_marker = 0, found_key = 0, found_value = 0;
    for(;;){
     if(typeof t === "number")
      return repackage(found_marker, found_key, found_value);
     if(0 === t[0]) break;
     var
      r = t[4],
      found_value$0 = t[3],
      found_key$0 = t[2],
      l = t[1],
      c$0 = caml_call2(compare_key, found_key$0, k$0);
     if(0 === c$0)
      return -640801497 === dir
              ? is_empty
                 (l)
                ? repackage(found_marker, found_key, found_value)
                : max_elt(l)
              : -779285465
                <= dir
                ? [0, [0, found_key$0, found_value$0]]
                : is_empty
                   (r)
                  ? repackage(found_marker, found_key, found_value)
                  : min_elt(r);
     if(-640801497 !== dir && 927731004 > dir){
      if(0 < c$0){
       t = l;
       found_marker = 1;
       found_key = found_key$0;
       found_value = found_value$0;
       continue;
      }
      t = r;
      continue;
     }
     if(0 <= c$0)
      t = l;
     else{
      t = r;
      found_marker = 1;
      found_key = found_key$0;
      found_value = found_value$0;
     }
    }
    var
     v = t[2],
     k = t[1],
     c = caml_call2(compare_key, k, k$0),
     a =
       521507869 <= dir
        ? 927731004 <= dir ? c <= 0 ? 1 : 0 : 0 <= c ? 1 : 0
        : -640801497 <= dir ? c < 0 ? 1 : 0 : 0 < c ? 1 : 0;
    return a
            ? [0, [0, k, v]]
            : repackage(found_marker, found_key, found_value);
   }
   function rank(t$0, k$1, compare_key){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var k = t[1];
      return 0 === caml_call2(compare_key, k, k$1) ? p : 0;
     }
     var
      r = t[4],
      k$0 = t[2],
      l = t[1],
      c = caml_call2(compare_key, k$0, k$1);
     if(0 === c) return [0, length(l)];
     if(0 >= c) break;
     t = l;
    }
    var a = rank(r, k$1, compare_key);
    return caml_call2
            (Base_Option[24],
             a,
             function(rank){
              var a = length(l), b = Base_Import[91].call(null, rank, 1);
              return Base_Import[91].call(null, b, a);
             });
   }
   function nth(num_to_search, param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var v = param[2], k = param[1];
      return 0 === num_to_search[1] ? [0, [0, k, v]] : (num_to_search[1]--, 0);
     }
     var
      r = param[4],
      v$0 = param[3],
      k$0 = param[2],
      l = param[1],
      some = nth(num_to_search, l);
     if(some) return some;
     if(0 === num_to_search[1]) return [0, [0, k$0, v$0]];
     num_to_search[1]--;
     param = r;
    }
   }
   function nth$0(t, n){return nth([0, n], t);}
   function find_first_satisfying(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var v = t[2], k = t[1];
      return caml_call2(f, k, v) ? [0, [0, k, v]] : 0;
     }
     var r = t[4], v$0 = t[3], k$0 = t[2], l = t[1];
     if(caml_call2(f, k$0, v$0)){
      var x = find_first_satisfying(l, f);
      return x ? x : [0, [0, k$0, v$0]];
     }
     t = r;
    }
   }
   function find_last_satisfying(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var v = t[2], k = t[1];
      return caml_call2(f, k, v) ? [0, [0, k, v]] : 0;
     }
     var r = t[4], v$0 = t[3], k$0 = t[2], l = t[1];
     if(caml_call2(f, k$0, v$0)){
      var x = find_last_satisfying(r, f);
      return x ? x : [0, [0, k$0, v$0]];
     }
     t = l;
    }
   }
   function binary_search(t, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (t,
                  function(key, data){
                   return 0 <= caml_call3(compare, key, data, v) ? 1 : 0;
                  })
               : find_last_satisfying
                 (t,
                  function(key, data){
                   return caml_call3(compare, key, data, v) < 0 ? 1 : 0;
                  })
             : -253007807
               <= how
               ? find_last_satisfying
                 (t,
                  function(key, data){
                   return caml_call3(compare, key, data, v) <= 0 ? 1 : 0;
                  })
               : find_first_satisfying
                 (t,
                  function(key, data){
                   return 0 < caml_call3(compare, key, data, v) ? 1 : 0;
                  });
    if(-1055410545 <= how){
     var
      pair =
        find_last_satisfying
         (t,
          function(key, data){
           return caml_call3(compare, key, data, v) <= 0 ? 1 : 0;
          });
     if(pair){
      var match = pair[1], data = match[2], key = match[1];
      if(0 === caml_call3(compare, key, data, v)) return pair;
     }
     return 0;
    }
    var
     pair$0 =
       find_first_satisfying
        (t,
         function(key, data){
          return 0 <= caml_call3(compare, key, data, v) ? 1 : 0;
         });
    if(pair$0){
     var match$0 = pair$0[1], data$0 = match$0[2], key$0 = match$0[1];
     if(0 === caml_call3(compare, key$0, data$0, v)) return pair$0;
    }
    return 0;
   }
   function binary_search_segmented(t, segment_of, how){
    function is_left(key, data){
     return 847852583 <= caml_call2(segment_of, key, data) ? 1 : 0;
    }
    function is_right(key, data){return 1 - is_left(key, data);}
    return 125585502 <= how
            ? find_last_satisfying(t, is_left)
            : find_first_satisfying(t, is_right);
   }
   function binary_search_one_sided_bound
   (t, maybe_bound, compare, if_exclusive, if_inclusive){
    function find_bound(t, how, bound, compare){
     var match = binary_search(t, compare, how, bound);
     if(! match) return 0;
     var bound$0 = match[1][1];
     return [0, [0, bound$0]];
    }
    if(typeof maybe_bound === "number") return q;
    if(0 === maybe_bound[0]){
     var bound = maybe_bound[1];
     return find_bound(t, if_inclusive, bound, compare);
    }
    var bound$0 = maybe_bound[1];
    return find_bound(t, if_exclusive, bound$0, compare);
   }
   function binary_search_two_sided_bounds
   (t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_one_sided_bound
        (t, lower_bound, compare, -839473056, 926943384);
    if(! match) return 0;
    var
     lower_bound$0 = match[1],
     match$0 =
       binary_search_one_sided_bound
        (t, upper_bound, compare, 200870407, -253007807);
    if(! match$0) return 0;
    var upper_bound$0 = match$0[1];
    return [0, [0, lower_bound$0, upper_bound$0]];
   }
   function of_iteri(iteri, compare_key){
    var acc = [0, 0, [0, empty_without_value_restrictio, 0]];
    caml_call1
     (iteri,
      function(key, data){
       var
        match = acc[2],
        length = match[2],
        map = match[1],
        pair = set(map, length, key, data, compare_key),
        length$0 = pair[2];
       if(length === length$0 && Base_Option[52].call(null, acc[1])){acc[1] = [0, key]; return 0;}
       acc[2] = globalize(pair);
       return 0;
      });
    var match = acc[1];
    if(! match) return [0, 17724, acc[2]];
    var key = match[1];
    return [0, -1048878709, key];
   }
   function of_iteri_exn(iteri, comparator){
    var match = of_iteri(iteri, comparator[1]), variant = match[1];
    if(17724 <= variant){var v = match[2]; return v;}
    var
     key = match[2],
     a =
       Base_Error[19].call
        (null, 0, 0, cst_Map_of_iteri_exn_duplicate, key, comparator[2]);
    return Base_Error[31].call(null, a);
   }
   function t_of_sexp_direct(key_of_sexp, value_of_sexp, sexp, comparator){
    var
     a = Base_Import[171],
     alist =
       Base_Import[173].call
        (null, function(b){return a(key_of_sexp, value_of_sexp, b);}, sexp),
     compare_key = comparator[1],
     match = of_alist(alist, compare_key),
     variant = match[1];
    if(17724 <= variant){var v = match[2]; return v;}
    var k = match[2];
    function b(a){return a;}
    function c(a){return a;}
    var
     d = Base_Import[171],
     alist_sexps =
       Base_Import[173].call(null, function(a){return d(c, b, a);}, sexp),
     found_first_k = [0, 0];
    Base_List0[13].call
     (null,
      alist,
      alist_sexps,
      function(c, param){
       var
        k2_sexp = param[1],
        k2 = c[1],
        a = 0 === caml_call2(compare_key, k, k2) ? 1 : 0;
       if(a){
        if(found_first_k[1])
         return Base_Import[156].call
                 (null, cst_Map_t_of_sexp_direct_dupli, k2_sexp);
        found_first_k[1] = 1;
        var b = 0;
       }
       else
        var b = a;
       return b;
      });
    throw caml_maybe_attach_backtrace([0, Assert_failure, r], 1);
   }
   function sexp_of_t$1(sexp_of_key, sexp_of_value, t){
    function f(key, data, acc){
     var a = [0, caml_call1(sexp_of_value, data), 0];
     return [0, [1, [0, caml_call1(sexp_of_key, key), a]], acc];
    }
    return [1, fold_right(t, 0, f)];
   }
   function combine_errors(t, sexp_of_key){
    var
     match = partition_map(t, Base_Result[38]),
     errors = match[2],
     oks = match[1];
    if(is_empty(errors)) return [0, oks];
    var a = sexp_of_t$1(sexp_of_key, Base_Error[9], errors);
    return Base_Or_error[39].call(null, a);
   }
   function unzip(t){
    var a = map(t, Base_Import[127]);
    return [0, map(t, Base_Import[125]), a];
   }
   function map_keys(t1, f, param){
    var sexp_of_key = param[2], compare_key = param[1];
    return with_return
            (function(param){
              return [0,
                      17724,
                      fold
                       (t1,
                        [0, empty_without_value_restrictio, 0],
                        function(key, data, param$0){
                         var
                          length = param$0[2],
                          t2 = param$0[1],
                          key$0 = caml_call1(f, key);
                         try{
                          var
                           a =
                             globalize
                              (add_exn_internal
                                (t2, length, key$0, data, compare_key, sexp_of_key));
                          return a;
                         }
                         catch(exn$0){
                          var exn = caml_wrap_exception(exn$0);
                          if(exn === Duplicate)
                           return caml_call1(param, [0, -1048878709, key$0]);
                          throw caml_maybe_attach_backtrace(exn, 0);
                         }
                        })];
             });
   }
   function map_keys_exn(t, f, comparator){
    var match = map_keys(t, f, comparator), variant = match[1];
    if(17724 <= variant){var result = match[2]; return result;}
    var
     key = match[2],
     sexp_of_key = comparator[2],
     a = [0, [0, cst_key$0, caml_call1(sexp_of_key, key)], 0],
     b = Base_Sexp[10].call(null, cst_Map_map_keys_exn_duplicate, a);
    return Base_Error[32].call(null, b);
   }
   function transpose_keys(outer_comparator, inner_comparator, outer_t){
    return fold
            (outer_t,
             [0, empty_without_value_restrictio, 0],
             function(outer_key, inner_t, acc){
              return fold
                      (inner_t,
                       acc,
                       function(inner_key, data, param){
                        var acc_len = param[2], acc = param[1];
                        return globalize
                                (update
                                  (acc,
                                   inner_key,
                                   function(param){
                                    if(param){
                                     var match = param[1], elt_len = match[2], elt = match[1];
                                     return globalize
                                             (set(elt, elt_len, outer_key, data, outer_comparator[1]));
                                    }
                                    var tree = [0, outer_key, data];
                                    return [0, tree, 1];
                                   },
                                   acc_len,
                                   inner_comparator[1]));
                       });
             });
   }
   function Make_applicative_traversals(A){
    function mapi(t, f){
     if(typeof t === "number") return caml_call1(A[1], 0);
     if(0 === t[0]){
      var d = t[2], v = t[1], a = caml_call2(f, v, d);
      return caml_call2(A[2], a, function(new_data){return [0, v, new_data];});
     }
     var
      h = t[5],
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      l$0 = caml_call1(A[14], function(param){return mapi(l, f);}),
      d$1 = caml_call2(f, v$0, d$0),
      r$0 = caml_call1(A[14], function(param){return mapi(r, f);});
     return caml_call4
             (A[10],
              l$0,
              d$1,
              r$0,
              function(l, d, r){return [1, l, v$0, d, r, h];});
    }
    function filter_mapi(t, f){
     function tree_filter_mapi(t, f){
      if(typeof t === "number") return caml_call1(A[1], [0, 0, 0]);
      if(0 === t[0]){
       var d = t[2], v = t[1], a = caml_call2(f, v, d);
       return caml_call2
               (A[2],
                a,
                function(param){
                 if(! param) return [0, 0, 0];
                 var new_data = param[1], tree = [0, v, new_data];
                 return [0, tree, 1];
                });
      }
      var
       r = t[4],
       d$0 = t[3],
       v$0 = t[2],
       l = t[1],
       b = caml_call1(A[14], function(param){return tree_filter_mapi(r, f);}),
       c = caml_call2(f, v$0, d$0),
       e = caml_call1(A[14], function(param){return tree_filter_mapi(l, f);});
      return caml_call4
              (A[10],
               e,
               c,
               b,
               function(a, new_data, param){
                var r_len = param[2], r = param[1], l_len = a[2], l = a[1];
                if(new_data){
                 var
                  new_data$0 = new_data[1],
                  b = Base_Import[91].call(null, l_len, r_len),
                  length = Base_Import[91].call(null, b, 1),
                  tree = join(l, v$0, new_data$0, r);
                 return [0, tree, length];
                }
                var
                 length$0 = Base_Import[91].call(null, l_len, r_len),
                 tree$0 = concat_and_balance_unchecked(l, r);
                return [0, tree$0, length$0];
               });
     }
     return tree_filter_mapi(t, f);
    }
    return [0, mapi, filter_mapi];
   }
   function compare_key(t){return t[1][1];}
   function like(a, param){
    var length = param[2], tree = param[1], comparator = a[1];
    return [0, comparator, tree, length];
   }
   function like_maybe_no_op(old_t, param){
    var
     length = param[2],
     tree = param[1],
     old_tree = old_t[2],
     comparator = old_t[1];
    return old_tree === tree ? old_t : [0, comparator, tree, length];
   }
   function with_same_length(param, tree){
    var length = param[3], comparator = param[1];
    return [0, comparator, tree, length];
   }
   function of_like_tree(t, tree){
    var a = length(tree);
    return [0, t[1], tree, a];
   }
   function of_like_tree_maybe_no_op(t, tree){
    if(t[2] === tree) return t;
    var a = length(tree);
    return [0, t[1], tree, a];
   }
   function of_tree$0(comparator, tree){
    return [0, comparator, tree, length(tree)];
   }
   function comparator(t){return t[1];}
   function to_tree(t){return t[2];}
   function invariants$0(t){
    var c = compare_key(t), a = invariants(t[2], c);
    if(a) var d = t[3], b = length(t[2]) === d ? 1 : 0; else var b = a;
    return b;
   }
   function is_empty$0(t){return is_empty(t[2]);}
   function length$0(t){return t[3];}
   function set$0(t, key, data){
    var a = compare_key(t);
    return like(t, set(t[2], t[3], key, data, a));
   }
   function add_exn$0(t, key, data){
    var a = t[1][2], b = compare_key(t);
    return like(t, add_exn(t[2], t[3], key, data, b, a));
   }
   function add(t, key, data){
    try{
     var
      a = t[1][2],
      b = compare_key(t),
      result = like(t, add_exn_internal(t[2], t[3], key, data, b, a));
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Duplicate) return -1024851605;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, 17724, result];
   }
   function add_multi$0(t, key, data){
    var a = compare_key(t);
    return like(t, add_multi(t[2], t[3], key, data, a));
   }
   function remove_multi$0(t, key){
    var a = compare_key(t);
    return like(t, remove_multi(t[2], key, t[3], a));
   }
   function find_multi$0(t, key){
    var a = compare_key(t);
    return find_multi(t[2], key, a);
   }
   function change$0(t, key, f){
    var a = compare_key(t);
    return like(t, change(t[2], key, f, t[3], a));
   }
   function update$0(t, key, f){
    var a = compare_key(t);
    return like(t, update(t[2], key, f, t[3], a));
   }
   function find_exn$0(t, key){
    var a = t[1][2], b = compare_key(t);
    return find_exn(t[2], key, b, a);
   }
   function find$0(t, key){var a = compare_key(t); return find(t[2], key, a);}
   function remove$0(t, key){
    var a = compare_key(t);
    return like_maybe_no_op(t, remove(t[2], key, t[3], a));
   }
   function mem$0(t, key){var a = compare_key(t); return mem(t[2], key, a);}
   function iter_keys$0(t, f){return iter_keys(t[2], f);}
   function iter$0(t, f){return iter(t[2], f);}
   function iteri$0(t, f){return iteri(t[2], f);}
   function iteri_until(t, f){
    var t$0 = t[2];
    return iteri_until_loop(t$0, f);
   }
   function iter2$0(t1, t2, f){
    var a = compare_key(t1);
    return iter2(t1[2], t2[2], f, a);
   }
   function map$0(t, f){return with_same_length(t, map(t[2], f));}
   function mapi$0(t, f){return with_same_length(t, mapi(t[2], f));}
   function fold$2(t, init, f){return fold(t[2], init, f);}
   function fold_until$0(t, init, f, finish){
    return fold_until(t[2], init, f, finish);
   }
   function fold_right$0(t, init, f){return fold_right(t[2], init, f);}
   function fold2$1(t1, t2, init, f){
    var a = compare_key(t1);
    return fold2$0(t1[2], t2[2], init, f, a);
   }
   function filter_keys$0(t, f){
    var len = [0, t[3]], tree = filter_keys(t[2], f, len), length = len[1];
    return like_maybe_no_op(t, [0, tree, length]);
   }
   function filter$0(t, f){
    var len = [0, t[3]], tree = filter(t[2], f, len), length = len[1];
    return like_maybe_no_op(t, [0, tree, length]);
   }
   function filteri$0(t, f){
    var len = [0, t[3]], tree = filteri(t[2], f, len), length = len[1];
    return like_maybe_no_op(t, [0, tree, length]);
   }
   function filter_map$0(t, f){
    var len = [0, t[3]], tree = filter_map(t[2], f, len), length = len[1];
    return like(t, [0, tree, length]);
   }
   function filter_mapi$0(t, f){
    var len = [0, t[3]], tree = filter_mapi(t[2], f, len), length = len[1];
    return like(t, [0, tree, length]);
   }
   function of_like_tree2(t, param){
    var t2 = param[2], t1 = param[1], a = of_like_tree(t, t2);
    return [0, of_like_tree(t, t1), a];
   }
   function of_like_tree2_maybe_no_op(t, param){
    var t2 = param[2], t1 = param[1], a = of_like_tree_maybe_no_op(t, t2);
    return [0, of_like_tree_maybe_no_op(t, t1), a];
   }
   function partition_mapi$0(t, f){
    return of_like_tree2(t, partition_mapi(t[2], f));
   }
   function partition_map$0(t, f){
    return of_like_tree2(t, partition_map(t[2], f));
   }
   function partitioni_tf$0(t, f){
    return of_like_tree2_maybe_no_op(t, partitioni_tf(t[2], f));
   }
   function partition_tf$0(t, f){
    return of_like_tree2_maybe_no_op(t, partition_tf(t[2], f));
   }
   function combine_errors$0(t){
    var a = combine_errors(t[2], t[1][2]);
    return caml_call2
            (Base_Or_error[47], a, function(a){return of_like_tree(t, a);});
   }
   function unzip$0(t){return of_like_tree2(t, unzip(t[2]));}
   function compare_direct(compare_data, t1, t2){
    var a = t2[2], b = t1[2];
    return compare$1(compare_key(t1), compare_data, b, a);
   }
   function equal$2(compare_data, t1, t2){
    var a = t2[2], b = t1[2];
    return equal$1(compare_key(t1), compare_data, b, a);
   }
   function keys$0(t){return keys(t[2]);}
   function data$0(t){return data(t[2]);}
   function to_alist$0(key_order, t){return to_alist(key_order, t[2]);}
   function symmetric_diff$0(t1, t2, data_equal){
    var a = compare_key(t1);
    return symmetric_diff(t1[2], t2[2], a, data_equal);
   }
   function fold_symmetric_diff$1(t1, t2, data_equal, init, f){
    var a = compare_key(t1);
    return fold_symmetric_diff$0(t1[2], t2[2], a, data_equal, init, f);
   }
   function merge$0(t1, t2, f){
    var a = compare_key(t1);
    return like(t1, merge(t1[2], t2[2], f, a));
   }
   function merge_disjoint_exn$0(t1, t2){
    return like(t1, merge_disjoint_exn(t1[2], t2[2], t1[3], t2[3], t1[1]));
   }
   function merge_skewed$0(t1, t2, combine){
    var
     a = compare_key(t1),
     b = merge_skewed(t1[2], t2[2], t1[3], t2[3], combine, a),
     t1$0 = t2[3] <= t1[3] ? t1 : t2;
    return like_maybe_no_op(t1$0, b);
   }
   function min_elt$0(t){return min_elt(t[2]);}
   function min_elt_exn$0(t){return min_elt_exn(t[2]);}
   function max_elt$0(t){return max_elt(t[2]);}
   function max_elt_exn$0(t){return max_elt_exn(t[2]);}
   function for_all$0(t, f){return for_all(t[2], f);}
   function for_alli$0(t, f){return for_alli(t[2], f);}
   function exists$0(t, f){return exists(t[2], f);}
   function existsi$0(t, f){return existsi(t[2], f);}
   function count$0(t, f){return count(t[2], f);}
   function counti$0(t, f){return counti(t[2], f);}
   function sum$0(m, t, f){return sum(m, t[2], f);}
   function sumi$0(m, t, f){return sumi(m, t[2], f);}
   function split$0(t, k){
    var
     a = compare_key(t),
     match = split(t[2], k, a),
     tree = match[3],
     maybe = match[2],
     tree$0 = match[1],
     comparator = t[1],
     both_len =
       Base_Option[53].call(null, maybe)
        ? Base_Import[93].call(null, t[3], 1)
        : t[3],
     b = height(tree);
    if(height(tree$0) < b){
     var
      l = of_tree$0(comparator, tree$0),
      length = Base_Import[93].call(null, both_len, l[3]);
     return [0, l, maybe, [0, comparator, tree, length]];
    }
    var
     r = of_tree$0(comparator, tree),
     length$0 = Base_Import[93].call(null, both_len, r[3]);
    return [0, [0, comparator, tree$0, length$0], maybe, r];
   }
   function split_and_reinsert_boundary$0(t, into, k){
    var
     a = compare_key(t),
     match = split_and_reinsert_boundary(t[2], into, k, a),
     tree = match[2],
     tree$0 = match[1],
     comparator = t[1],
     b = height(tree);
    if(height(tree$0) < b){
     var
      l = of_tree$0(comparator, tree$0),
      length = Base_Import[93].call(null, t[3], l[3]);
     return [0, l, [0, comparator, tree, length]];
    }
    var
     r = of_tree$0(comparator, tree),
     length$0 = Base_Import[93].call(null, t[3], r[3]);
    return [0, [0, comparator, tree$0, length$0], r];
   }
   function split_le_gt(t, k){
    return split_and_reinsert_boundary$0(t, 847852583, k);
   }
   function split_lt_ge(t, k){
    return split_and_reinsert_boundary$0(t, -57574468, k);
   }
   function subrange(t, lower_bound, upper_bound){
    var
     a = compare_key(t),
     match = split_range(t[2], lower_bound, upper_bound, a),
     right = match[3],
     tree = match[2],
     left = match[1],
     h_l = height(left),
     h_r = height(right),
     outer_joined_height =
       h_l === h_r
        ? Base_Import[91].call(null, h_l, 1)
        : Base_Import[100].call(null, h_l, h_r);
    if(outer_joined_height >= height(tree)) return of_tree$0(t[1], tree);
    var
     b = length(right),
     c = length(left),
     d = Base_Import[91].call(null, c, b),
     mid_length = Base_Import[93].call(null, t[3], d),
     comparator = t[1];
    return [0, comparator, tree, mid_length];
   }
   function append$0(lower_part, upper_part){
    var
     a = compare_key(lower_part),
     match = append(lower_part[2], upper_part[2], a);
    if(typeof match === "number") return 838882908;
    var
     tree = match[2],
     length = Base_Import[91].call(null, lower_part[3], upper_part[3]),
     comparator = lower_part[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function fold_range_inclusive$0(t, min, max, init, f){
    var a = compare_key(t);
    return fold_range_inclusive(t[2], min, max, init, f, a);
   }
   function range_to_alist$0(t, min, max){
    var a = compare_key(t);
    return range_to_alist(t[2], min, max, a);
   }
   function closest_key$0(t, dir, key){
    var a = compare_key(t);
    return closest_key(t[2], dir, key, a);
   }
   function nth$1(t, n){return nth$0(t[2], n);}
   function nth_exn(t, n){
    var a = nth$1(t, n);
    return Base_Option[31].call(null, 0, 0, 0, a);
   }
   function rank$0(t, key){var a = compare_key(t); return rank(t[2], key, a);}
   function sexp_of_t$2(sexp_of_k, sexp_of_v, param, t){return sexp_of_t$1(sexp_of_k, sexp_of_v, t[2]);
   }
   function to_sequence$0
   (order, keys_greater_or_equal_to, keys_less_or_equal_to, t){
    return to_sequence
            (t[1],
             order,
             keys_greater_or_equal_to,
             keys_less_or_equal_to,
             t[2]);
   }
   function binary_search$0(t, compare, how, v){
    return binary_search(t[2], compare, how, v);
   }
   function binary_search_segmented$0(t, segment_of, how){
    return binary_search_segmented(t[2], segment_of, how);
   }
   function hash_fold_direct(hash_fold_key, hash_fold_data, state, t){
    var t$0 = t[2], a = length(t$0);
    return fold
            (t$0,
             caml_call2(Base_Import[206], state, a),
             function(key, data, state){
              return caml_call2
                      (hash_fold_data,
                       caml_call2(hash_fold_key, state, key),
                       data);
             });
   }
   function binary_search_subrange(t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_two_sided_bounds(t[2], compare, lower_bound, upper_bound);
    if(! match) return like_maybe_no_op(t, [0, 0, 0]);
    var
     match$0 = match[1],
     upper_bound$0 = match$0[2],
     lower_bound$0 = match$0[1];
    return subrange(t, lower_bound$0, upper_bound$0);
   }
   function Make_applicative_traversals$0(A){
    var Tree_traversals = Make_applicative_traversals(A);
    function mapi(t, f){
     var a = Tree_traversals[1].call(null, t[2], f);
     return caml_call2
             (A[2],
              a,
              function(new_tree){return with_same_length(t, new_tree);});
    }
    function filter_mapi(t, f){
     var a = Tree_traversals[2].call(null, t[2], f);
     return caml_call2
             (A[2],
              a,
              function(new_tree_with_length){
               return like(t, new_tree_with_length);
              });
    }
    return [0, , mapi, filter_mapi];
   }
   function empty$0(param){return empty_without_value_restrictio;}
   function of_tree$1(param, tree){return tree;}
   function singleton(param, key, data){return [0, key, data];}
   function of_sorted_array_unchecked$0(comparator, array){
    return of_sorted_array_unchecked(array, comparator[1])[1];
   }
   function of_sorted_array$0(comparator, array){
    var a = of_sorted_array(array, comparator[1]);
    return caml_call2(Base_Or_error[47], a, function(x){return x[1];});
   }
   function of_alist$0(comparator, alist){
    var d = of_alist(alist, comparator[1]), variant = d[1];
    if(17724 > variant) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_alist_or_error$0(comparator, alist){
    var a = of_alist_or_error(alist, comparator);
    return caml_call2(Base_Or_error[47], a, function(x){return x[1];});
   }
   function of_alist_exn$0(comparator, alist){
    return of_alist_exn(alist, comparator)[1];
   }
   function of_alist_multi$0(comparator, alist){
    return of_alist_multi(alist, comparator[1])[1];
   }
   function of_alist_fold$0(comparator, alist, init, f){
    return of_alist_fold(alist, init, f, comparator[1])[1];
   }
   function of_alist_reduce$0(comparator, alist, f){
    return of_alist_reduce(alist, f, comparator[1])[1];
   }
   function of_iteri$0(comparator, iteri){
    var d = of_iteri(iteri, comparator[1]), variant = d[1];
    if(17724 > variant) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_iteri_exn$0(comparator, iteri){
    return of_iteri_exn(iteri, comparator)[1];
   }
   function of_increasing_iterator_uncheck$0(required_by_intf, len, f){return of_increasing_iterator_uncheck(len, f);
   }
   function of_increasing_sequence$0(comparator, seq){
    var a = of_increasing_sequence(seq, comparator[1]);
    return caml_call2(Base_Or_error[47], a, function(x){return x[1];});
   }
   function of_sequence$0(comparator, seq){
    var d = of_sequence(seq, comparator[1]), variant = d[1];
    if(17724 > variant) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_sequence_or_error$0(comparator, seq){
    var a = of_sequence_or_error(seq, comparator);
    return caml_call2(Base_Or_error[47], a, function(x){return x[1];});
   }
   function of_sequence_exn$0(comparator, seq){
    return of_sequence_exn(seq, comparator)[1];
   }
   function of_sequence_multi$0(comparator, seq){
    return of_sequence_multi(seq, comparator[1])[1];
   }
   function of_sequence_fold$0(comparator, seq, init, f){
    return of_sequence_fold(seq, init, f, comparator[1])[1];
   }
   function of_sequence_reduce$0(comparator, seq, f){
    return of_sequence_reduce(seq, f, comparator[1])[1];
   }
   function of_list_with_key$0(comparator, list, get_key){
    var d = of_list_with_key(list, get_key, comparator[1]), variant = d[1];
    if(17724 > variant) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_list_with_key_or_error$0(comparator, list, get_key){
    var a = of_list_with_key_or_error(list, get_key, comparator);
    return caml_call2(Base_Or_error[47], a, function(x){return x[1];});
   }
   function of_list_with_key_exn$0(comparator, list, get_key){
    return of_list_with_key_exn(list, get_key, comparator)[1];
   }
   function of_list_with_key_multi$0(comparator, list, get_key){
    return of_list_with_key_multi(list, get_key, comparator[1])[1];
   }
   function of_list_with_key_fold$0(comparator, list, get_key, init, f){
    return of_list_with_key_fold(list, get_key, init, f, comparator[1])[1];
   }
   function of_list_with_key_reduce$0(comparator, list, get_key, f){
    return of_list_with_key_reduce(list, get_key, f, comparator[1])[1];
   }
   function to_tree$0(t){return t;}
   function invariants$1(comparator, t){return invariants(t, comparator[1]);}
   function is_empty$1(t){return is_empty(t);}
   function length$1(t){return length(t);}
   function set$1(comparator, t, key, data){
    return set(t, 0, key, data, comparator[1])[1];
   }
   function add_exn$1(comparator, t, key, data){
    return add_exn(t, 0, key, data, comparator[1], comparator[2])[1];
   }
   function add$0(comparator, t, key, data){
    try{
     var
      a =
        [0,
         17724,
         add_exn_internal(t, 0, key, data, comparator[1], comparator[2])[1]];
     return a;
    }
    catch(exn){return -1024851605;}
   }
   function add_multi$1(comparator, t, key, data){
    return add_multi(t, 0, key, data, comparator[1])[1];
   }
   function remove_multi$1(comparator, t, key){
    return remove_multi(t, key, 0, comparator[1])[1];
   }
   function find_multi$1(comparator, t, key){
    return find_multi(t, key, comparator[1]);
   }
   function change$1(comparator, t, key, f){
    return change(t, key, f, 0, comparator[1])[1];
   }
   function update$1(comparator, t, key, f){
    return change$1
            (comparator,
             t,
             key,
             function(data){return [0, caml_call1(f, data)];});
   }
   function find_exn$1(comparator, t, key){
    return find_exn(t, key, comparator[1], comparator[2]);
   }
   function find$1(comparator, t, key){return find(t, key, comparator[1]);}
   function remove$1(comparator, t, key){
    return remove(t, key, 0, comparator[1])[1];
   }
   function mem$1(comparator, t, key){return mem(t, key, comparator[1]);}
   function iter_keys$1(t, f){return iter_keys(t, f);}
   function iter$1(t, f){return iter(t, f);}
   function iteri$1(t, f){return iteri(t, f);}
   function iteri_until$0(t, f){return iteri_until_loop(t, f);}
   function iter2$1(comparator, t1, t2, f){
    return iter2(t1, t2, f, comparator[1]);
   }
   function map$1(t, f){return map(t, f);}
   function mapi$1(t, f){return mapi(t, f);}
   function fold$3(t, init, f){return fold(t, init, f);}
   function fold_until$1(t, init, f, finish){return fold_until(t, init, f, finish);
   }
   function fold_right$1(t, init, f){return fold_right(t, init, f);}
   function fold2$2(comparator, t1, t2, init, f){
    return fold2$0(t1, t2, init, f, comparator[1]);
   }
   function filter_keys$1(t, f){return filter_keys(t, f, [0, 0]);}
   function filter$1(t, f){return filter(t, f, [0, 0]);}
   function filteri$1(t, f){return filteri(t, f, [0, 0]);}
   function filter_map$1(t, f){return filter_map(t, f, [0, 0]);}
   function filter_mapi$1(t, f){return filter_mapi(t, f, [0, 0]);}
   function partition_mapi$1(t, f){return partition_mapi(t, f);}
   function partition_map$1(t, f){return partition_map(t, f);}
   function partitioni_tf$1(t, f){return partitioni_tf(t, f);}
   function partition_tf$1(t, f){return partition_tf(t, f);}
   function combine_errors$1(comparator, t){
    return combine_errors(t, comparator[2]);
   }
   function compare_direct$0(comparator, compare_data, t1, t2){return compare$1(comparator[1], compare_data, t1, t2);
   }
   function equal$3(comparator, compare_data, t1, t2){
    return equal$1(comparator[1], compare_data, t1, t2);
   }
   function keys$1(t){return keys(t);}
   function data$1(t){return data(t);}
   function to_alist$1(key_order, t){return to_alist(key_order, t);}
   function symmetric_diff$1(comparator, t1, t2, data_equal){
    return symmetric_diff(t1, t2, comparator[1], data_equal);
   }
   function fold_symmetric_diff$2(comparator, t1, t2, data_equal, init, f){
    return fold_symmetric_diff$0(t1, t2, comparator[1], data_equal, init, f);
   }
   function merge$1(comparator, t1, t2, f){
    return merge(t1, t2, f, comparator[1])[1];
   }
   function merge_disjoint_exn$1(comparator, t1, t2){
    var a = length(t2);
    return merge_disjoint_exn(t1, t2, length(t1), a, comparator)[1];
   }
   function merge_skewed$1(comparator, t1, t2, combine){
    var a = comparator[1], b = length(t2);
    return merge_skewed(t1, t2, length(t1), b, combine, a)[1];
   }
   function min_elt$1(t){return min_elt(t);}
   function min_elt_exn$1(t){return min_elt_exn(t);}
   function max_elt$1(t){return max_elt(t);}
   function max_elt_exn$1(t){return max_elt_exn(t);}
   function for_all$1(t, f){return for_all(t, f);}
   function for_alli$1(t, f){return for_alli(t, f);}
   function exists$1(t, f){return exists(t, f);}
   function existsi$1(t, f){return existsi(t, f);}
   function count$1(t, f){return count(t, f);}
   function counti$1(t, f){return counti(t, f);}
   function sum$1(m, t, f){return sum(m, t, f);}
   function sumi$1(m, t, f){return sumi(m, t, f);}
   function split$1(comparator, t, k){return split(t, k, comparator[1]);}
   function split_le_gt$0(comparator, t, k){
    return split_and_reinsert_boundary(t, 847852583, k, comparator[1]);
   }
   function split_lt_ge$0(comparator, t, k){
    return split_and_reinsert_boundary(t, -57574468, k, comparator[1]);
   }
   function append$1(comparator, lower_part, upper_part){
    return append(lower_part, upper_part, comparator[1]);
   }
   function subrange$0(comparator, t, lower_bound, upper_bound){
    var ret = split_range(t, lower_bound, upper_bound, comparator[1])[2];
    return ret;
   }
   function fold_range_inclusive$1(comparator, t, min, max, init, f){
    return fold_range_inclusive(t, min, max, init, f, comparator[1]);
   }
   function range_to_alist$1(comparator, t, min, max){
    return range_to_alist(t, min, max, comparator[1]);
   }
   function closest_key$1(comparator, t, dir, key){
    return closest_key(t, dir, key, comparator[1]);
   }
   function nth$2(t, n){return nth$0(t, n);}
   function nth_exn$0(t, n){
    var a = nth$0(t, n);
    return Base_Option[31].call(null, 0, 0, 0, a);
   }
   function rank$1(comparator, t, key){return rank(t, key, comparator[1]);}
   function sexp_of_t$3(sexp_of_k, sexp_of_v, param, t){return sexp_of_t$1(sexp_of_k, sexp_of_v, t);
   }
   function t_of_sexp_direct$0(comparator, k_of_sexp, v_of_sexp, sexp){
    return t_of_sexp_direct(k_of_sexp, v_of_sexp, sexp, comparator)[1];
   }
   function to_sequence$1
   (comparator, order, keys_greater_or_equal_to, keys_less_or_equal_to, t){
    return to_sequence
            (comparator,
             order,
             keys_greater_or_equal_to,
             keys_less_or_equal_to,
             t);
   }
   function binary_search$1(param, t, compare, how, v){return binary_search(t, compare, how, v);
   }
   function binary_search_segmented$1(param, t, segment_of, how){return binary_search_segmented(t, segment_of, how);
   }
   function binary_search_subrange$0
   (comparator, t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_two_sided_bounds(t, compare, lower_bound, upper_bound);
    if(! match) return 0;
    var
     match$0 = match[1],
     upper_bound$0 = match$0[2],
     lower_bound$0 = match$0[1];
    return subrange$0(comparator, t, lower_bound$0, upper_bound$0);
   }
   function map_keys$0(comparator, t, f){
    var dup = map_keys(t, f, comparator), variant = dup[1];
    if(17724 > variant) return dup;
    var t$0 = dup[2][1];
    return [0, 17724, t$0];
   }
   function map_keys_exn$0(comparator, t, f){
    return map_keys_exn(t, f, comparator)[1];
   }
   function transpose_keys$0(outer_comparator, inner_comparator, t){
    var t$0 = transpose_keys(outer_comparator, inner_comparator, t)[1];
    function f(x){return x[1];}
    return map(t$0, f);
   }
   function add_exn$2(t, comparator, key, data){
    var match = max_key(t);
    if(match){
     var prev_key = match[1];
     if(0 <= caml_call2(comparator[1], prev_key, key))
      return Base_Error[32].call(null, s);
    }
    return add_unchecked(t, key, data);
   }
   function to_tree$1(t){return to_tree_unchecked(t);}
   var Build_increasing = [0, empty, add_exn$2, to_tree$1];
   function empty$1(comparator){
    return [0, comparator, empty_without_value_restrictio, 0];
   }
   function singleton$0(comparator, key, data){return [0, comparator, [0, key, data], 1];
   }
   function of_tree0(comparator, param){
    var length = param[2], tree = param[1];
    return [0, comparator, tree, length];
   }
   function of_tree$2(comparator, tree){
    var length$0 = length(tree);
    return of_tree0(comparator, [0, tree, length$0]);
   }
   function of_sorted_array_unchecked$1(comparator, array){
    return of_tree0
            (comparator, of_sorted_array_unchecked(array, comparator[1]));
   }
   function of_sorted_array$1(comparator, array){
    var a = of_sorted_array(array, comparator[1]);
    return caml_call2
            (Base_Or_error[47],
             a,
             function(tree){return of_tree0(comparator, tree);});
   }
   function of_alist$1(comparator, alist){
    var z = of_alist(alist, comparator[1]), variant = z[1];
    if(17724 > variant) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_alist_or_error$1(comparator, alist){
    var a = of_alist_or_error(alist, comparator);
    return caml_call2
            (Base_Result[33],
             a,
             function(tree){return of_tree0(comparator, tree);});
   }
   function of_alist_exn$1(comparator, alist){
    return of_tree0(comparator, of_alist_exn(alist, comparator));
   }
   function of_alist_multi$1(comparator, alist){
    return of_tree0(comparator, of_alist_multi(alist, comparator[1]));
   }
   function of_alist_fold$1(comparator, alist, init, f){
    return of_tree0(comparator, of_alist_fold(alist, init, f, comparator[1]));
   }
   function of_alist_reduce$1(comparator, alist, f){
    return of_tree0(comparator, of_alist_reduce(alist, f, comparator[1]));
   }
   function of_iteri$1(comparator, iteri){
    var z = of_iteri(iteri, comparator[1]), variant = z[1];
    if(17724 > variant) return z;
    var tree_length = z[2];
    return [0, 17724, of_tree0(comparator, tree_length)];
   }
   function of_iteri_exn$1(comparator, iteri){
    return of_tree0(comparator, of_iteri_exn(iteri, comparator));
   }
   function of_increasing_iterator_uncheck$1(comparator, length, f){
    var tree = of_increasing_iterator_uncheck(length, f);
    return of_tree0(comparator, [0, tree, length]);
   }
   function of_increasing_sequence$1(comparator, seq){
    var a = of_increasing_sequence(seq, comparator[1]);
    return caml_call2
            (Base_Or_error[47],
             a,
             function(x){return of_tree0(comparator, x);});
   }
   function of_sequence$1(comparator, seq){
    var z = of_sequence(seq, comparator[1]), variant = z[1];
    if(17724 > variant) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_sequence_or_error$1(comparator, seq){
    var a = of_sequence_or_error(seq, comparator);
    return caml_call2
            (Base_Result[33],
             a,
             function(tree){return of_tree0(comparator, tree);});
   }
   function of_sequence_exn$1(comparator, seq){
    return of_tree0(comparator, of_sequence_exn(seq, comparator));
   }
   function of_sequence_multi$1(comparator, seq){
    return of_tree0(comparator, of_sequence_multi(seq, comparator[1]));
   }
   function of_sequence_fold$1(comparator, seq, init, f){
    return of_tree0(comparator, of_sequence_fold(seq, init, f, comparator[1]));
   }
   function of_sequence_reduce$1(comparator, seq, f){
    return of_tree0(comparator, of_sequence_reduce(seq, f, comparator[1]));
   }
   function of_list_with_key$1(comparator, list, get_key){
    var z = of_list_with_key(list, get_key, comparator[1]), variant = z[1];
    if(17724 > variant) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_list_with_key_or_error$1(comparator, list, get_key){
    var a = of_list_with_key_or_error(list, get_key, comparator);
    return caml_call2
            (Base_Result[33],
             a,
             function(tree){return of_tree0(comparator, tree);});
   }
   function of_list_with_key_exn$1(comparator, list, get_key){
    return of_tree0
            (comparator, of_list_with_key_exn(list, get_key, comparator));
   }
   function of_list_with_key_multi$1(comparator, list, get_key){
    return of_tree0
            (comparator, of_list_with_key_multi(list, get_key, comparator[1]));
   }
   function of_list_with_key_fold$1(comparator, list, get_key, init, f){
    return of_tree0
            (comparator,
             of_list_with_key_fold(list, get_key, init, f, comparator[1]));
   }
   function of_list_with_key_reduce$1(comparator, list, get_key, f){
    return of_tree0
            (comparator,
             of_list_with_key_reduce(list, get_key, f, comparator[1]));
   }
   function t_of_sexp_direct$1(comparator, k_of_sexp, v_of_sexp, sexp){
    return of_tree0
            (comparator,
             t_of_sexp_direct(k_of_sexp, v_of_sexp, sexp, comparator));
   }
   function map_keys$1(comparator, t, f){
    var dup = map_keys(t[2], f, comparator), variant = dup[1];
    if(17724 > variant) return dup;
    var pair = dup[2];
    return [0, 17724, of_tree0(comparator, pair)];
   }
   function map_keys_exn$1(comparator, t, f){
    return of_tree0(comparator, map_keys_exn(t[2], f, comparator));
   }
   function transpose_keys$1(inner_comparator, t){
    var outer_comparator = t[1];
    return map$0
            (of_tree0
              (inner_comparator,
               transpose_keys
                (outer_comparator, inner_comparator, map(t[2], to_tree))),
             function(x){return of_tree0(outer_comparator, x);});
   }
   function Empty_without_value_restrictio(K){
    var empty = [0, K[1], empty_without_value_restrictio, 0];
    return [0, empty];
   }
   function comparator_s(t){return Base_Comparator[5].call(null, t[1]);}
   var
    to_comparator = Base_Comparator[4],
    t = [0, "_"],
    u = [1, 0],
    v = [1, 0],
    w = [1, 0];
   function of_tree$3(m, tree){return of_tree$0(to_comparator(m), tree);}
   function empty$2(m){return empty$1(to_comparator(m));}
   function singleton$1(m, a){
    var b = to_comparator(m);
    return function(c){return singleton$0(b, a, c);};
   }
   function of_alist$2(m, a){return of_alist$1(to_comparator(m), a);}
   function of_alist_or_error$2(m, a){
    return of_alist_or_error$1(to_comparator(m), a);
   }
   function of_alist_exn$2(m, a){return of_alist_exn$1(to_comparator(m), a);}
   function of_alist_multi$2(m, a){
    return of_alist_multi$1(to_comparator(m), a);
   }
   function of_alist_fold$2(m, a, init, f){
    return of_alist_fold$1(to_comparator(m), a, init, f);
   }
   function of_alist_reduce$2(m, a, f){
    return of_alist_reduce$1(to_comparator(m), a, f);
   }
   function of_sorted_array_unchecked$2(m, a){
    return of_sorted_array_unchecked$1(to_comparator(m), a);
   }
   function of_sorted_array$2(m, a){
    return of_sorted_array$1(to_comparator(m), a);
   }
   function of_iteri$2(m, iteri){return of_iteri$1(to_comparator(m), iteri);}
   function of_iteri_exn$2(m, iteri){
    return of_iteri_exn$1(to_comparator(m), iteri);
   }
   function of_increasing_iterator_uncheck$2(m, len, f){
    return of_increasing_iterator_uncheck$1(to_comparator(m), len, f);
   }
   function of_increasing_sequence$2(m, seq){
    return of_increasing_sequence$1(to_comparator(m), seq);
   }
   function of_sequence$2(m, s){return of_sequence$1(to_comparator(m), s);}
   function of_sequence_or_error$2(m, s){
    return of_sequence_or_error$1(to_comparator(m), s);
   }
   function of_sequence_exn$2(m, s){
    return of_sequence_exn$1(to_comparator(m), s);
   }
   function of_sequence_multi$2(m, s){
    return of_sequence_multi$1(to_comparator(m), s);
   }
   function of_sequence_fold$2(m, s, init, f){
    return of_sequence_fold$1(to_comparator(m), s, init, f);
   }
   function of_sequence_reduce$2(m, s, f){
    return of_sequence_reduce$1(to_comparator(m), s, f);
   }
   function of_list_with_key$2(m, l, get_key){
    return of_list_with_key$1(to_comparator(m), l, get_key);
   }
   function of_list_with_key_or_error$2(m, l, get_key){
    return of_list_with_key_or_error$1(to_comparator(m), l, get_key);
   }
   function of_list_with_key_exn$2(m, l, get_key){
    return of_list_with_key_exn$1(to_comparator(m), l, get_key);
   }
   function of_list_with_key_multi$2(m, l, get_key){
    return of_list_with_key_multi$1(to_comparator(m), l, get_key);
   }
   function of_list_with_key_fold$2(m, l, get_key, init, f){
    return of_list_with_key_fold$1(to_comparator(m), l, get_key, init, f);
   }
   function of_list_with_key_reduce$2(m, l, get_key, f){
    return of_list_with_key_reduce$1(to_comparator(m), l, get_key, f);
   }
   function map_keys$2(m, t, f){return map_keys$1(to_comparator(m), t, f);}
   function map_keys_exn$2(m, t, f){
    return map_keys_exn$1(to_comparator(m), t, f);
   }
   function transpose_keys$2(m, t){
    return transpose_keys$1(to_comparator(m), t);
   }
   function M(K){return [0];}
   function sexp_of_m_t(K, sexp_of_v, t$0){
    return sexp_of_t$2(K[1], sexp_of_v, function(param){return t;}, t$0);
   }
   function m_t_of_sexp(K, v_of_sexp, sexp){
    return t_of_sexp_direct$1(K[2], K[1], v_of_sexp, sexp);
   }
   function m_t_sexp_grammar(K, v_grammar){
    return [5,
            [0,
             Sexplib0_Sexp_grammar[5],
             w,
             [2,
              [1,
               [2,
                [0,
                 [5, [0, Sexplib0_Sexp_grammar[6], v, K[1]]],
                 [0, [5, [0, Sexplib0_Sexp_grammar[7], u, v_grammar]], 0]]]]]]];
   }
   function compare_m_t(param, compare_v, t1, t2){return compare_direct(compare_v, t1, t2);
   }
   function equal_m_t(param, equal_v, t1, t2){return equal$2(equal_v, t1, t2);
   }
   function hash_fold_m_t(K, hash_fold_v, state){
    var a = K[1];
    return function(b){return hash_fold_direct(a, hash_fold_v, state, b);};
   }
   var comparator$0 = Base_Comparator[2][1];
   function of_tree$4(tree){return [0, comparator$0, tree, length(tree)];}
   var
    include$1 = Empty_without_value_restrictio(Base_Comparator[2]),
    empty$3 = include$1[1];
   function singleton$2(a){
    return function(b){return singleton$0(comparator$0, a, b);};
   }
   function of_alist$3(a){return of_alist$1(comparator$0, a);}
   function of_alist_or_error$3(a){
    return of_alist_or_error$1(comparator$0, a);
   }
   function of_alist_exn$3(a){return of_alist_exn$1(comparator$0, a);}
   function of_alist_multi$3(a){return of_alist_multi$1(comparator$0, a);}
   function of_alist_fold$3(a, init, f){
    return of_alist_fold$1(comparator$0, a, init, f);
   }
   function of_alist_reduce$3(a, f){
    return of_alist_reduce$1(comparator$0, a, f);
   }
   function of_sorted_array_unchecked$3(a){
    return of_sorted_array_unchecked$1(comparator$0, a);
   }
   function of_sorted_array$3(a){return of_sorted_array$1(comparator$0, a);}
   function of_iteri$3(iteri){return of_iteri$1(comparator$0, iteri);}
   function of_iteri_exn$3(iteri){return of_iteri_exn$1(comparator$0, iteri);}
   function of_increasing_iterator_uncheck$3(len, f){
    return of_increasing_iterator_uncheck$1(comparator$0, len, f);
   }
   function of_increasing_sequence$3(seq){
    return of_increasing_sequence$1(comparator$0, seq);
   }
   function of_sequence$3(s){return of_sequence$1(comparator$0, s);}
   function of_sequence_or_error$3(s){
    return of_sequence_or_error$1(comparator$0, s);
   }
   function of_sequence_exn$3(s){return of_sequence_exn$1(comparator$0, s);}
   function of_sequence_multi$3(s){
    return of_sequence_multi$1(comparator$0, s);
   }
   function of_sequence_fold$3(s, init, f){
    return of_sequence_fold$1(comparator$0, s, init, f);
   }
   function of_sequence_reduce$3(s, f){
    return of_sequence_reduce$1(comparator$0, s, f);
   }
   function of_list_with_key$3(l, get_key){
    return of_list_with_key$1(comparator$0, l, get_key);
   }
   function of_list_with_key_or_error$3(l, get_key){
    return of_list_with_key_or_error$1(comparator$0, l, get_key);
   }
   function of_list_with_key_exn$3(l, get_key){
    return of_list_with_key_exn$1(comparator$0, l, get_key);
   }
   function of_list_with_key_multi$3(l, get_key){
    return of_list_with_key_multi$1(comparator$0, l, get_key);
   }
   function of_list_with_key_fold$3(l, get_key, init, f){
    return of_list_with_key_fold$1(comparator$0, l, get_key, init, f);
   }
   function of_list_with_key_reduce$3(l, get_key, f){
    return of_list_with_key_reduce$1(comparator$0, l, get_key, f);
   }
   function map_keys$3(t, f){return map_keys$1(comparator$0, t, f);}
   function map_keys_exn$3(t, f){return map_keys_exn$1(comparator$0, t, f);}
   function transpose_keys$3(t){return transpose_keys$1(comparator$0, t);}
   var
    Base_Map =
      [0,
       Finished_or_unfinished,
       Merge_element,
       invariants$0,
       comparator_s,
       comparator,
       empty$2,
       singleton$1,
       of_alist$2,
       of_alist_or_error$2,
       of_alist_exn$2,
       of_alist_multi$2,
       of_alist_fold$2,
       of_alist_reduce$2,
       of_iteri$2,
       of_iteri_exn$2,
       of_sorted_array$2,
       of_sorted_array_unchecked$2,
       of_increasing_iterator_uncheck$2,
       of_increasing_sequence$2,
       of_sequence$2,
       of_sequence_or_error$2,
       of_sequence_exn$2,
       of_sequence_multi$2,
       of_sequence_fold$2,
       of_sequence_reduce$2,
       of_list_with_key$2,
       of_list_with_key_or_error$2,
       of_list_with_key_exn$2,
       of_list_with_key_multi$2,
       of_list_with_key_fold$2,
       of_list_with_key_reduce$2,
       is_empty$0,
       length$0,
       set$0,
       add,
       add_exn$0,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$0,
       find_exn$0,
       remove$0,
       mem$0,
       iter_keys$0,
       iter$0,
       iteri$0,
       iteri_until,
       iter2$0,
       map$0,
       mapi$0,
       map_keys$2,
       map_keys_exn$2,
       fold$2,
       fold_until$0,
       fold_right$0,
       fold2$1,
       filter_keys$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$0,
       partition_tf$0,
       combine_errors$0,
       unzip$0,
       compare_direct,
       hash_fold_direct,
       equal$2,
       keys$0,
       data$0,
       to_alist$0,
       merge$0,
       merge_disjoint_exn$0,
       merge_skewed$0,
       Symmetric_diff_element,
       symmetric_diff$0,
       fold_symmetric_diff$1,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       transpose_keys$2,
       for_all$0,
       for_alli$0,
       exists$0,
       existsi$0,
       count$0,
       counti$0,
       sum$0,
       sumi$0,
       split$0,
       split_le_gt,
       split_lt_ge,
       append$0,
       subrange,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$1,
       nth_exn,
       rank$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       binary_search_subrange,
       function(b){
        var a = Make_applicative_traversals$0(b);
        return [0, a[2], a[3]];
       },
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       [0,
        sexp_of_t$2,
        t_of_sexp_direct$1,
        [0,
         sexp_of_t$3,
         t_of_sexp_direct$0,
         empty$0,
         singleton,
         map_keys$0,
         map_keys_exn$0,
         transpose_keys$0,
         of_sorted_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_uncheck$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_increasing_sequence$0,
         of_sequence$0,
         of_sequence_or_error$0,
         of_sequence_exn$0,
         of_sequence_multi$0,
         of_sequence_fold$0,
         of_sequence_reduce$0,
         of_list_with_key$0,
         of_list_with_key_or_error$0,
         of_list_with_key_exn$0,
         of_list_with_key_multi$0,
         of_list_with_key_fold$0,
         of_list_with_key_reduce$0,
         of_iteri$0,
         of_iteri_exn$0,
         of_tree$1,
         invariants$1,
         is_empty$1,
         length$1,
         add$0,
         add_exn$1,
         set$1,
         add_multi$1,
         remove_multi$1,
         find_multi$1,
         change$1,
         update$1,
         find$1,
         find_exn$1,
         remove$1,
         mem$1,
         iter_keys$1,
         iter$1,
         iteri$1,
         iteri_until$0,
         iter2$1,
         map$1,
         mapi$1,
         fold$3,
         fold_until$1,
         fold_right$1,
         fold2$2,
         filter_keys$1,
         filter$1,
         filteri$1,
         filter_map$1,
         filter_mapi$1,
         partition_mapi$1,
         partition_map$1,
         partitioni_tf$1,
         partition_tf$1,
         combine_errors$1,
         unzip,
         compare_direct$0,
         equal$3,
         keys$1,
         data$1,
         to_alist$1,
         merge$1,
         merge_disjoint_exn$1,
         merge_skewed$1,
         symmetric_diff$1,
         fold_symmetric_diff$2,
         min_elt$1,
         min_elt_exn$1,
         max_elt$1,
         max_elt_exn$1,
         for_all$1,
         for_alli$1,
         exists$1,
         existsi$1,
         count$1,
         counti$1,
         sum$1,
         sumi$1,
         split$1,
         split_le_gt$0,
         split_lt_ge$0,
         append$1,
         subrange$0,
         fold_range_inclusive$1,
         range_to_alist$1,
         closest_key$1,
         nth$2,
         nth_exn$0,
         rank$1,
         to_tree$0,
         to_sequence$1,
         binary_search$1,
         binary_search_segmented$1,
         binary_search_subrange$0,
         function(A){
          var Tree0_traversals = Make_applicative_traversals(A);
          function mapi(t, f){return Tree0_traversals[1].call(null, t, f);}
          function filter_mapi(t, f){
           var a = Tree0_traversals[2].call(null, t, f);
           return caml_call2(A[2], a, function(x){return x[1];});
          }
          return [0, mapi, filter_mapi];
         },
         empty_without_value_restrictio,
         Build_increasing],
        empty$1,
        singleton$0,
        map_keys$1,
        map_keys_exn$1,
        transpose_keys$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_uncheck$1,
        of_alist$1,
        of_alist_or_error$1,
        of_alist_exn$1,
        of_alist_multi$1,
        of_alist_fold$1,
        of_alist_reduce$1,
        of_increasing_sequence$1,
        of_sequence$1,
        of_sequence_or_error$1,
        of_sequence_exn$1,
        of_sequence_multi$1,
        of_sequence_fold$1,
        of_sequence_reduce$1,
        of_list_with_key$1,
        of_list_with_key_or_error$1,
        of_list_with_key_exn$1,
        of_list_with_key_multi$1,
        of_list_with_key_fold$1,
        of_list_with_key_reduce$1,
        of_iteri$1,
        of_iteri_exn$1,
        of_tree$2,
        invariants$0,
        is_empty$0,
        length$0,
        add,
        add_exn$0,
        set$0,
        add_multi$0,
        remove_multi$0,
        find_multi$0,
        change$0,
        update$0,
        find$0,
        find_exn$0,
        remove$0,
        mem$0,
        iter_keys$0,
        iter$0,
        iteri$0,
        iteri_until,
        iter2$0,
        map$0,
        mapi$0,
        fold$2,
        fold_until$0,
        fold_right$0,
        fold2$1,
        filter_keys$0,
        filter$0,
        filteri$0,
        filter_map$0,
        filter_mapi$0,
        partition_mapi$0,
        partition_map$0,
        partitioni_tf$0,
        partition_tf$0,
        combine_errors$0,
        unzip$0,
        compare_direct,
        equal$2,
        keys$0,
        data$0,
        to_alist$0,
        merge$0,
        merge_disjoint_exn$0,
        merge_skewed$0,
        symmetric_diff$0,
        fold_symmetric_diff$1,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        for_all$0,
        for_alli$0,
        exists$0,
        existsi$0,
        count$0,
        counti$0,
        sum$0,
        sumi$0,
        split$0,
        split_le_gt,
        split_lt_ge,
        append$0,
        subrange,
        fold_range_inclusive$0,
        range_to_alist$0,
        closest_key$0,
        nth$1,
        nth_exn,
        rank$0,
        to_tree,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        binary_search_subrange,
        function(b){
         var a = Make_applicative_traversals$0(b);
         return [0, a[2], a[3]];
        },
        comparator,
        hash_fold_direct,
        Empty_without_value_restrictio],
       [0,
        empty$3,
        singleton$2,
        map_keys$3,
        map_keys_exn$3,
        transpose_keys$3,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_uncheck$3,
        of_alist$3,
        of_alist_or_error$3,
        of_alist_exn$3,
        of_alist_multi$3,
        of_alist_fold$3,
        of_alist_reduce$3,
        of_increasing_sequence$3,
        of_sequence$3,
        of_sequence_or_error$3,
        of_sequence_exn$3,
        of_sequence_multi$3,
        of_sequence_fold$3,
        of_sequence_reduce$3,
        of_list_with_key$3,
        of_list_with_key_or_error$3,
        of_list_with_key_exn$3,
        of_list_with_key_multi$3,
        of_list_with_key_fold$3,
        of_list_with_key_reduce$3,
        of_iteri$3,
        of_iteri_exn$3,
        of_tree$4,
        invariants$0,
        is_empty$0,
        length$0,
        add,
        add_exn$0,
        set$0,
        add_multi$0,
        remove_multi$0,
        find_multi$0,
        change$0,
        update$0,
        find$0,
        find_exn$0,
        remove$0,
        mem$0,
        iter_keys$0,
        iter$0,
        iteri$0,
        iteri_until,
        iter2$0,
        map$0,
        mapi$0,
        fold$2,
        fold_until$0,
        fold_right$0,
        fold2$1,
        filter_keys$0,
        filter$0,
        filteri$0,
        filter_map$0,
        filter_mapi$0,
        partition_mapi$0,
        partition_map$0,
        partitioni_tf$0,
        partition_tf$0,
        combine_errors$0,
        unzip$0,
        compare_direct,
        equal$2,
        keys$0,
        data$0,
        to_alist$0,
        merge$0,
        merge_disjoint_exn$0,
        merge_skewed$0,
        symmetric_diff$0,
        fold_symmetric_diff$1,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        for_all$0,
        for_alli$0,
        exists$0,
        existsi$0,
        count$0,
        counti$0,
        sum$0,
        sumi$0,
        split$0,
        split_le_gt,
        split_lt_ge,
        append$0,
        subrange,
        fold_range_inclusive$0,
        range_to_alist$0,
        closest_key$0,
        nth$1,
        nth_exn,
        rank$0,
        to_tree,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        binary_search_subrange,
        function(b){
         var a = Make_applicative_traversals$0(b);
         return [0, a[2], a[3]];
        }],
       of_tree$3,
       to_tree];
   runtime.caml_register_global(67, Base_Map, "Base__Map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Linked_queue0
//# unitInfo: Requires: Stdlib__Queue
//# shape: Base__Linked_queue0:[F(1)*,F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(2),F(2),F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Queue = global_data.Stdlib__Queue,
    create = Stdlib_Queue[2],
    clear = Stdlib_Queue[11],
    copy = Stdlib_Queue[12],
    is_empty = Stdlib_Queue[13],
    length = Stdlib_Queue[14],
    peek = Stdlib_Queue[8],
    pop = Stdlib_Queue[7],
    push = Stdlib_Queue[4],
    transfer = Stdlib_Queue[17];
   function iter(t, f){
    var caml_iter = Stdlib_Queue[15];
    return caml_iter(f, t);
   }
   function fold(t, init, f){
    var caml_fold = Stdlib_Queue[16];
    return caml_fold(f, init, t);
   }
   var
    Base_Linked_queue0 =
      [0,
       create,
       clear,
       copy,
       is_empty,
       length,
       peek,
       pop,
       push,
       transfer,
       iter,
       fold];
   runtime.caml_register_global(1, Base_Linked_queue0, "Base__Linked_queue0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Linked_queue
//# unitInfo: Requires: Base__Array, Base__Import, Base__Indexed_container, Base__Linked_queue0, Base__List, Sexplib0__Sexp_grammar
//# shape: Base__Linked_queue:[F(2),F(2),F(1)*,N,F(1)*,F(1)*,F(2),F(3),N,N,N,N,N,N,N,N,N,F(1),N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(2),F(2),F(2),F(1),F(1),F(1),F(3),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Import = global_data.Base__Import,
    Base_Array = global_data.Base__Array,
    Base_Linked_queue0 = global_data.Base__Linked_queue0,
    Base_Indexed_container = global_data.Base__Indexed_container,
    create = Base_Linked_queue0[1],
    clear = Base_Linked_queue0[2],
    copy = Base_Linked_queue0[3],
    is_empty = Base_Linked_queue0[4],
    length = Base_Linked_queue0[5],
    iter = Base_Linked_queue0[10],
    fold = Base_Linked_queue0[11];
   function enqueue(t, x){return Base_Linked_queue0[8].call(null, x, t);}
   function dequeue(t){
    return is_empty(t) ? 0 : [0, Base_Linked_queue0[7].call(null, t)];
   }
   var dequeue_exn = Base_Linked_queue0[7];
   function dequeue_and_ignore_exn(t){dequeue_exn(t); return 0;}
   function peek(t){
    return is_empty(t) ? 0 : [0, Base_Linked_queue0[6].call(null, t)];
   }
   var peek_exn = Base_Linked_queue0[6];
   function drain(t, f, while$){
    for(;;){
     if(! is_empty(t) && caml_call1(while$, peek_exn(t))){caml_call1(f, dequeue_exn(t)); continue;}
     return 0;
    }
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    C =
      Base_Indexed_container[8].call
       (null, [0, fold, iter$0, length$0, -304398144, -304398144]),
    count = C[10],
    exists = C[8],
    find = C[12],
    find_map = C[13],
    fold_result = C[6],
    fold_until = C[7],
    for_all = C[9],
    max_elt = C[17],
    mem = C[1],
    min_elt = C[16],
    sum = C[11],
    to_list = C[14],
    counti = C[22],
    existsi = C[20],
    find_mapi = C[24],
    findi = C[23],
    foldi = C[18],
    for_alli = C[21],
    iteri = C[19];
   function transfer(src, dst){
    return Base_Linked_queue0[9].call(null, src, dst);
   }
   function concat_map(t, f){
    var res = create(0);
    iter
     (t,
      function(a){
       var b = caml_call1(f, a);
       return Base_List[19].call
               (null, b, function(b){return enqueue(res, b);});
      });
    return res;
   }
   function concat_mapi(t, f){
    var res = create(0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       var b = caml_call2(f, i, a);
       return Base_List[19].call
               (null, b, function(b){return enqueue(res, b);});
      });
    return res;
   }
   function filter_map(t, f){
    var res = create(0);
    iter
     (t,
      function(a){
       var match = caml_call1(f, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(res, b);
      });
    return res;
   }
   function filter_mapi(t, f){
    var res = create(0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       var match = caml_call2(f, i, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(res, b);
      });
    return res;
   }
   function filter(t, f){
    var res = create(0);
    iter
     (t,
      function(a){var b = caml_call1(f, a); return b ? enqueue(res, a) : b;});
    return res;
   }
   function filteri(t, f){
    var res = create(0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       var b = caml_call2(f, i, a);
       return b ? enqueue(res, a) : b;
      });
    return res;
   }
   function map(t, f){
    var res = create(0);
    iter(t, function(a){return enqueue(res, caml_call1(f, a));});
    return res;
   }
   function mapi(t, f){
    var res = create(0);
    caml_call2
     (iteri, t, function(i, a){return enqueue(res, caml_call2(f, i, a));});
    return res;
   }
   function filter_inplace(q, f){
    var q$0 = filter(q, f);
    clear(q);
    return transfer(q$0, q);
   }
   function filteri_inplace(q, f){
    var q$0 = filteri(q, f);
    clear(q);
    return transfer(q$0, q);
   }
   function enqueue_all(t, list){
    return Base_List[19].call(null, list, function(x){return enqueue(t, x);});
   }
   function of_list(list){
    var t = create(0);
    Base_List[19].call(null, list, function(x){return enqueue(t, x);});
    return t;
   }
   function of_array(array){
    var t = create(0);
    Base_Array[20].call(null, array, function(x){return enqueue(t, x);});
    return t;
   }
   function init(len, f){
    var t = create(0), a = Base_Import[93].call(null, len, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      enqueue(t, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return t;
   }
   function to_array(t){
    var len = length(t);
    if(0 === len) return [0];
    var a = peek_exn(t), arr = Base_Array[48].call(null, len, a), i = [0, 0];
    iter
     (t,
      function(v){
       var a = i[1];
       runtime.caml_check_bound(arr, a)[a + 1] = v;
       i[1]++;
       return 0;
      });
    return arr;
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(Base_Import[173].call(null, a_of_sexp, sexp));
   }
   function sexp_of_t(sexp_of_a, t){
    var a = caml_call1(to_list, t);
    return Base_Import[149].call(null, sexp_of_a, a);
   }
   function t_sexp_grammar(grammar){
    var a = Base_List[7].call(null, grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function singleton(a){var t = create(0); enqueue(t, a); return t;}
   var
    Base_Linked_queue =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       singleton,
       of_list,
       of_array,
       init,
       enqueue,
       enqueue_all,
       dequeue,
       dequeue_exn,
       dequeue_and_ignore_exn,
       drain,
       peek,
       peek_exn,
       clear,
       copy,
       map,
       mapi,
       concat_map,
       concat_mapi,
       filter_map,
       filter_mapi,
       filter,
       filteri,
       filter_inplace,
       filteri_inplace,
       create,
       transfer];
   runtime.caml_register_global(6, Base_Linked_queue, "Base__Linked_queue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int64
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Stdlib__Int64, Stdlib__Scanf
//# shape: Base__Int64:[F(1)*,N,F(1),F(1)*,F(1)*,F(1),N,F(1),F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,N,N,F(1),N,N,N,F(2),N,N,N,N,N,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1),F(1)*,N,N,N,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(2),F(1)*,F(1)*,N,N,N,N,F(1),F(1),F(1),F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Lx = "%Lx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_equal = runtime.caml_equal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int64.Hex",
    module_name$0 = "Base.Int64",
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Int_math = global_data.Base__Int_math,
    Base_Comparable = global_data.Base__Comparable,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Error = global_data.Base__Error,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    globalize = Base_Import[286],
    hash_fold_t = Base_Import[203],
    func = Base_Import[217];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[166],
    sexp_of_t = Base_Import[142],
    t_sexp_grammar = Base_Import[188],
    hashable = [0, hash, Stdlib_Int64[15], sexp_of_t];
   function compare(b, a){return caml_int64_compare(b, a);}
   var
    to_string = Stdlib_Int64[14],
    of_string = runtime.caml_int64_of_string,
    of_string_opt = Stdlib_Int64[13],
    include = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include[1],
    num_bits = 64,
    float_lower_bound = Base_Float0[26].call(null, num_bits),
    float_upper_bound = Base_Float0[24].call(null, num_bits),
    shift_right_logical = caml_int64_shift_right_unsigne,
    shift_right = runtime.caml_int64_shift_right,
    shift_left = runtime.caml_int64_shift_left,
    bit_not = Stdlib_Int64[11],
    bit_xor = runtime.caml_int64_xor,
    bit_or = caml_int64_or,
    bit_and = caml_int64_and,
    min_value = Stdlib_Int64[10],
    max_value = Stdlib_Int64[9],
    abs = Stdlib_Int64[8],
    pred = Stdlib_Int64[7],
    succ = Stdlib_Int64[6],
    symbol = Base_Int_math[2][2],
    rem = runtime.caml_int64_mod,
    neg = caml_int64_neg,
    minus_one = Stdlib_Int64[3],
    one = Stdlib_Int64[2],
    zero = Stdlib_Int64[1],
    to_float = runtime.caml_int64_to_float,
    of_float_unchecked = caml_int64_of_float,
    a =
      [0,
       [11,
        "Int64.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int64.of_float: argument (%f) is out of range or NaN"];
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound)
     return caml_int64_of_float(f);
    var b = Base_Float0[29].call(null, f);
    return caml_call2(Base_Printf[7].call(null, a), b, 0);
   }
   function bswap16(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 48);
   }
   function bswap32(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 32);
   }
   function bswap48(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 16);
   }
   var
    include$0 = Base_Comparable[14].call(null, [0, compare, sexp_of_t, zero]),
    is_positive = include$0[1],
    is_non_negative = include$0[2],
    is_negative = include$0[3],
    is_non_positive = include$0[4],
    sign = include$0[5],
    b = [0, "src/int64.ml", 115, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function invariant(param){return 0;}
   function between(t, low, high){
    var a = caml_lessequal(low, t), b = a ? caml_lessequal(t, high) : a;
    return b;
   }
   function clamp_unchecked(t, min, max){
    var a = Base_Import[103][4].call(null, t, max);
    return Base_Import[103][3].call(null, min, a);
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function incr(r){r[1] = caml_int64_add(r[1], one); return 0;}
   function decr(r){r[1] = caml_int64_sub(r[1], one); return 0;}
   function of_int64_exn(a){return a;}
   function to_int64(t){return t;}
   var
    popcount = Base_Popcount[3],
    of_int_exn = caml_int64_of_int32,
    to_int = Base_Int_conversions[12],
    to_int_exn = Base_Int_conversions[13],
    of_int32_exn = caml_int64_of_int32,
    to_int32 = Base_Int_conversions[15],
    to_int32_exn = Base_Int_conversions[16],
    of_nativeint_exn = caml_int64_of_int32,
    to_nativeint = Base_Int_conversions[18],
    to_nativeint_exn = Base_Int_conversions[19],
    raise_s = Base_Error[32],
    c =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_];
   function non_positive_argument(param){
    return caml_call1(Base_Printf[7].call(null, c), 0);
   }
   var
    lsr = caml_int64_shift_right_unsigne,
    land = caml_int64_and,
    cst_Int64_floor_log2_got_inval = "[Int64.floor_log2] got invalid input",
    cst_Int64_ceil_log2_got_invali = "[Int64.ceil_log2] got invalid input";
   function ceil_pow2(x){
    if(caml_lessequal(x, Stdlib_Int64[1])) non_positive_argument(0);
    var
     x$0 = Stdlib_Int64[7].call(null, x),
     x$6 = caml_int64_or(x$0, caml_int64_shift_right_unsigne(x$0, 1)),
     x$5 = caml_int64_or(x$6, caml_int64_shift_right_unsigne(x$6, 2)),
     x$4 = caml_int64_or(x$5, caml_int64_shift_right_unsigne(x$5, 4)),
     x$3 = caml_int64_or(x$4, caml_int64_shift_right_unsigne(x$4, 8)),
     x$2 = caml_int64_or(x$3, caml_int64_shift_right_unsigne(x$3, 16)),
     x$1 = caml_int64_or(x$2, caml_int64_shift_right_unsigne(x$2, 32));
    return Stdlib_Int64[6].call(null, x$1);
   }
   function floor_pow2(x$0){
    if(caml_lessequal(x$0, Stdlib_Int64[1])) non_positive_argument(0);
    var
     x = caml_int64_or(x$0, caml_int64_shift_right_unsigne(x$0, 1)),
     x$5 = caml_int64_or(x, caml_int64_shift_right_unsigne(x, 2)),
     x$4 = caml_int64_or(x$5, caml_int64_shift_right_unsigne(x$5, 4)),
     x$3 = caml_int64_or(x$4, caml_int64_shift_right_unsigne(x$4, 8)),
     x$2 = caml_int64_or(x$3, caml_int64_shift_right_unsigne(x$3, 16)),
     x$1 = caml_int64_or(x$2, caml_int64_shift_right_unsigne(x$2, 32));
    return caml_int64_sub(x$1, caml_int64_shift_right_unsigne(x$1, 1));
   }
   function is_pow2(x){
    if(caml_lessequal(x, Stdlib_Int64[1])) non_positive_argument(0);
    var a = Stdlib_Int64[1];
    return caml_equal(caml_int64_and(x, Stdlib_Int64[7].call(null, x)), a);
   }
   function floor_log2(i){
    if(caml_lessequal(i, Stdlib_Int64[1])){
     var a = [0, [0, cst, Base_Import[142].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int64_floor_log2_got_inval, a));
    }
    var
     b = runtime.Base_int_math_int64_clz(i),
     c = Base_Import[93].call(null, num_bits, 1);
    return Base_Import[93].call(null, c, b);
   }
   function ceil_log2(i){
    if(caml_lessequal(i, Stdlib_Int64[1])){
     var a = [0, [0, cst$0, Base_Import[142].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int64_ceil_log2_got_invali, a));
    }
    if(Stdlib_Int64[17].call(null, i, Stdlib_Int64[2])) return 0;
    var b = runtime.Base_int_math_int64_clz(Stdlib_Int64[7].call(null, i));
    return Base_Import[93].call(null, num_bits, b);
   }
   var
    include$1 = Base_Int_string_conversions[1].call(null, [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$0 = include$1[2],
    compare_local = Base_Import[258];
   function compare$0(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[203], func$0 = Base_Import[217];
   function hash$0(x){return caml_call1(func$0, x);}
   var
    symbol$0 = caml_lessthan,
    d = [0, [7, 6, 0, 0, 0], cst_Lx],
    e = [0, [7, 6, 0, 0, 0], cst_Lx];
   function to_string$0(i){
    return caml_call1(Base_Printf[2].call(null, d), i);
   }
   function of_string$0(s){
    return caml_call1
            (Stdlib_Scanf[5].call(null, s, e), function(a){return a;});
   }
   var
    include$2 =
      Base_Int_string_conversions[2].call
       (null,
        [0,
         compare$0,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$0,
         neg,
         module_name]),
    Hex = include$2[1],
    compare_local$0 = Base_Import[258];
   function compare$1(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[272];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[203], func$1 = Base_Import[217];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(a){return runtime.Base_int_math_int64_clz(a);}
   var
    include$3 =
      Base_Int_string_conversions[3].call
       (null,
        [0,
         compare$1,
         compare_local$0,
         equal,
         equal_local,
         hash_fold_t$1,
         hash$1,
         clz,
         lsr,
         land,
         to_int_exn,
         num_bits,
         one,
         zero]),
    Binary = include$3[1],
    pp = Base_Pretty_printer[2].call(null, [0, module_name$0, to_string])[1],
    include$4 =
      Base_Int_math[1].call
       (null,
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         caml_int64_add,
         caml_int64_sub,
         runtime.caml_int64_mul,
         runtime.caml_int64_div,
         caml_int64_neg,
         runtime.caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         runtime.caml_notequal,
         abs,
         caml_int64_neg,
         zero,
         of_int_exn,
         rem]),
    symbol$1 = include$4[1],
    symbol$2 = include$4[2],
    symbol$3 = include$4[3],
    round = include$4[4],
    round_towards_zero = include$4[5],
    round_down = include$4[6],
    round_up = include$4[7],
    round_nearest = include$4[8],
    include$5 = Base_Import[103],
    ascending = include$5[1],
    descending = include$5[2],
    max = include$5[3],
    min = include$5[4],
    Base_Int64 =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       caml_equal,
       function(b, a){return caml_int64_compare(b, a);},
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       function(b, a){return caml_int64_compare(b, a);},
       caml_equal,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       one,
       minus_one,
       rem,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       succ,
       pred,
       symbol,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(a){return runtime.Base_int_math_int64_clz(a);},
       function(a){return runtime.Base_int_math_int64_ctz(a);},
       [0, symbol, bit_not, abs, zero, symbol$1, symbol$2, symbol$3],
       symbol,
       bit_not,
       abs,
       zero,
       symbol$1,
       symbol$2,
       symbol$3,
       to_int,
       to_int32,
       to_nativeint,
       bswap16,
       bswap32,
       bswap48];
   runtime.caml_register_global(30, Base_Int64, "Base__Int64");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int63_emul
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Float0, Base__Import, Base__Int64, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String, Stdlib__Int64
//# shape: Base__Int63_emul:[F(1)*,N,F(1),F(1)*,F(1),F(1),N,F(1)*,F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1),N,N,F(1),N,N,N,N,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1)*,N,N,F(2),F(2),N,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,N,N,N,F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,[],N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_int63_emul_ml = "src/int63_emul.ml",
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_string = runtime.caml_int64_of_string,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    a = caml_int64_create_lo_mi_hi(2, 0, 0),
    mask = caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
    module_name = "Base.Int63.Hex",
    module_name$0 = "Base.Int63",
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Int64 = global_data.Base__Int64,
    Base_String = global_data.Base__String,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Popcount = global_data.Base__Popcount,
    Base_Comparator = global_data.Base__Comparator,
    Base_Int_math = global_data.Base__Int_math,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    include = Base_Import[103],
    max = include[3],
    min = include[4],
    compare_local = Base_Import[258];
   function compare(a, b){return caml_call2(compare_local, a, b);}
   var
    globalize = Base_Import[286],
    hash_fold_t = Base_Import[203],
    sexp_of_t = Base_Import[142],
    t_sexp_grammar = Base_Import[188],
    include$0 = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include$0[1],
    c = caml_int64_create_lo_mi_hi(2, 0, 0),
    g = [0, cst_src_int63_emul_ml, 117, 20];
   function wrap_exn(x){
    Base_Int_conversions[21].call(null, x);
    return caml_int64_mul(x, c);
   }
   function unwrap(x){return caml_int64_shift_right(x, 1);}
   function invariant(t){
    if(caml_equal(caml_int64_and(t, mask), t)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
   }
   var
    symbol = caml_int64_add,
    symbol$0 = caml_int64_sub,
    symbol$1 = caml_int64_neg;
   function abs(x){return Stdlib_Int64[8].call(null, x);}
   var one = wrap_exn(caml_int64_create_lo_mi_hi(1, 0, 0));
   function succ(a){return caml_int64_add(a, one);}
   function pred(a){return caml_int64_sub(a, one);}
   var
    x = Stdlib_Int64[10],
    min_value = caml_int64_and(x, mask),
    x$0 = Stdlib_Int64[9],
    max_value = caml_int64_and(x$0, mask);
   function bit_not(x){
    var x$0 = Stdlib_Int64[11].call(null, x);
    return caml_int64_and(x$0, mask);
   }
   var
    bit_and = caml_int64_and,
    bit_xor = runtime.caml_int64_xor,
    bit_or = runtime.caml_int64_or,
    shift_left = runtime.caml_int64_shift_left;
   function shift_right(x, i){
    var x$0 = caml_int64_shift_right(x, i);
    return caml_int64_and(x$0, mask);
   }
   function shift_right_logical(x, i){
    var x$0 = caml_int64_shift_right_unsigne(x, i);
    return caml_int64_and(x$0, mask);
   }
   var f = Base_Int_math[2][3], e = caml_int64_create_lo_mi_hi(2, 0, 0);
   function pow(a, b){
    return caml_int64_mul
            (f(caml_int64_shift_right(a, 1), caml_int64_shift_right(b, 1)), e);
   }
   function symbol$2(a, b){
    return caml_int64_mul(a, caml_int64_shift_right(b, 1));
   }
   function symbol$3(a$0, b){
    var x = runtime.caml_int64_div(a$0, b);
    return caml_int64_mul(x, a);
   }
   var rem = runtime.caml_int64_mod, d = caml_int64_create_lo_mi_hi(2, 0, 0);
   function popcount(x){return Base_Popcount[3].call(null, x);}
   function to_int64(t){return caml_int64_shift_right(t, 1);}
   function of_int64(t){
    return Base_Int_conversions[22].call(null, t)
            ? [0, caml_int64_mul(t, d)]
            : 0;
   }
   function of_int64_exn(t){return wrap_exn(t);}
   function of_int64_trunc(t){return caml_int64_mul(t, a);}
   function t_of_sexp(x){return wrap_exn(Base_Import[166].call(null, x));}
   function sexp_of_t$0(x){
    return Base_Import[142].call(null, caml_int64_shift_right(x, 1));
   }
   function compare$0(x, y){return caml_call2(compare_local, x, y);}
   function compare_local$0(x, y){return caml_call2(compare_local, x, y);}
   var equal_local = caml_equal;
   function is_pow2(x){
    return Base_Int64[72].call(null, caml_int64_shift_right(x, 1));
   }
   function clz(x){return Base_Int64[73].call(null, x);}
   function ctz(x){
    return Base_Int64[74].call(null, caml_int64_shift_right(x, 1));
   }
   function floor_pow2(x){
    return wrap_exn(Base_Int64[69].call(null, caml_int64_shift_right(x, 1)));
   }
   function ceil_pow2(x){
    return wrap_exn(Base_Int64[69].call(null, caml_int64_shift_right(x, 1)));
   }
   function floor_log2(x){
    return Base_Int64[71].call(null, caml_int64_shift_right(x, 1));
   }
   function ceil_log2(x){
    return Base_Int64[70].call(null, caml_int64_shift_right(x, 1));
   }
   function hash(x){return Base_Import[85][105][28].call(null, x);}
   var
    hashable = [0, hash, compare$0, sexp_of_t$0],
    h =
      [0,
       [11, "Int63.of_string: invalid input ", [3, 0, 0]],
       "Int63.of_string: invalid input %S"],
    i = caml_int64_create_lo_mi_hi(0, 0, 0);
   function invalid_str(x){
    return caml_call2(Base_Printf[6].call(null, h), x, 0);
   }
   function to_string(x){
    return Stdlib_Int64[14].call(null, caml_int64_shift_right(x, 1));
   }
   function of_string_raw(str){
    var len = caml_ml_string_length(str);
    a:
    if(0 < len){
     var switcher = caml_string_get(str, 0) - 43 | 0;
     if(2 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var sign = 4003188, pos = 1; break a;
        case 2:
         var sign = 3901488, pos = 1; break a;
      }
     var sign = 4003188, pos = 0;
    }
    else
     var sign = 4003188, pos = 0;
    if(Base_Import[91].call(null, pos, 2) < len)
     var
      c1 = caml_string_get(str, pos),
      c2 = caml_string_get(str, Base_Import[91].call(null, pos, 1)),
      match = 48 === c1 ? 9 < c2 - 48 >>> 0 ? [0, , 0] : [0, , 1] : [0, , 1];
    else
     var match = [0, , 1];
    var signedness = match[2];
    if(signedness){var t = caml_int64_of_string(str); return wrap_exn(t);}
    if(4003188 <= sign)
     var pos_str = str;
    else
     var
      b = Base_Import[93].call(null, caml_ml_string_length(str), 1),
      pos_str = Base_String[3].call(null, str, 1, b);
    var int64 = caml_int64_of_string(pos_str);
    if(caml_lessthan(int64, i)) invalid_str(str);
    var int63 = caml_int64_mul(int64, a);
    return 4003188 <= sign ? int63 : caml_int64_neg(int63);
   }
   function of_string(str){
    try{var a = of_string_raw(str); return a;}
    catch(exn){return invalid_str(str);}
   }
   function of_string_opt(str){
    try{var t = of_string_raw(str);}catch(exn){return 0;}
    return [0, t];
   }
   function bswap16(t){
    var x = Base_Int64[86].call(null, caml_int64_shift_right(t, 1));
    return caml_int64_mul(x, a);
   }
   function bswap32(t){
    var x = Base_Int64[87].call(null, caml_int64_shift_right(t, 1));
    return caml_int64_mul(x, a);
   }
   function bswap48(t){
    var x = Base_Int64[88].call(null, caml_int64_shift_right(t, 1));
    return caml_int64_mul(x, a);
   }
   var
    num_bits = 63,
    float_lower_bound = Base_Float0[26].call(null, num_bits),
    float_upper_bound = Base_Float0[24].call(null, num_bits),
    minus_one = wrap_exn(Stdlib_Int64[3]),
    one$0 = wrap_exn(Stdlib_Int64[2]),
    zero = wrap_exn(Stdlib_Int64[1]),
    j =
      [0,
       [11,
        "Int63.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int63.of_float: argument (%f) is out of range or NaN"];
   function to_float(x){
    return runtime.caml_int64_to_float(caml_int64_shift_right(x, 1));
   }
   function of_float_unchecked(x){
    var x$0 = caml_int64_of_float(x);
    return caml_int64_mul(x$0, a);
   }
   function of_float(t){
    if(float_lower_bound <= t && t <= float_upper_bound){
     var x = caml_int64_of_float(t);
     return caml_int64_mul(x, a);
    }
    var b = Base_Float0[29].call(null, t);
    return caml_call2(Base_Printf[7].call(null, j), b, 0);
   }
   var
    b = Base_Comparable[14].call(null, [0, compare$0, sexp_of_t$0, zero]),
    is_positive = b[1],
    is_non_negative = b[2],
    is_negative = b[3],
    is_non_positive = b[4],
    sign = b[5],
    k = [0, cst_src_int63_emul_ml, 334, 2],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function between(t, low, high){
    var a = caml_lessequal(low, t), b = a ? caml_lessequal(t, high) : a;
    return b;
   }
   function clamp_unchecked(t, min$0, max$0){return max(min$0, min(t, max$0));
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t$0(max)], 0],
     b = [0, [0, cst_min, sexp_of_t$0(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function symbol$4(b, e){return pow(b, e);}
   function incr(r){var x = r[1]; r[1] = caml_int64_add(x, one$0); return 0;}
   function decr(r){var x = r[1]; r[1] = caml_int64_sub(x, one$0); return 0;}
   function of_int(x){return wrap_exn(Base_Int_conversions[4].call(null, x));}
   function of_int_exn(x){return of_int(x);}
   function to_int(x){
    return Base_Int_conversions[12].call(null, caml_int64_shift_right(x, 1));
   }
   function to_int_exn(x){
    return Base_Int_conversions[13].call(null, caml_int64_shift_right(x, 1));
   }
   function to_int_trunc(x){
    return Base_Int_conversions[14].call(null, caml_int64_shift_right(x, 1));
   }
   function of_int32(x){
    return wrap_exn(Base_Int_conversions[9].call(null, x));
   }
   function of_int32_exn(x){return of_int32(x);}
   function to_int32(x){
    return Base_Int_conversions[15].call(null, caml_int64_shift_right(x, 1));
   }
   function to_int32_exn(x){
    return Base_Int_conversions[16].call(null, caml_int64_shift_right(x, 1));
   }
   function to_int32_trunc(x){
    return Base_Int_conversions[17].call(null, caml_int64_shift_right(x, 1));
   }
   function of_nativeint(x){
    return of_int64(Base_Int_conversions[29].call(null, x));
   }
   function of_nativeint_exn(x){
    return wrap_exn(Base_Int_conversions[29].call(null, x));
   }
   function of_nativeint_trunc(x){
    var t = Base_Int_conversions[29].call(null, x);
    return caml_int64_mul(t, a);
   }
   function to_nativeint(x){
    return Base_Int_conversions[18].call(null, caml_int64_shift_right(x, 1));
   }
   function to_nativeint_exn(x){
    return Base_Int_conversions[19].call(null, caml_int64_shift_right(x, 1));
   }
   function to_nativeint_trunc(x){
    return Base_Int_conversions[20].call(null, caml_int64_shift_right(x, 1));
   }
   var
    include$1 = Base_Int_string_conversions[1].call(null, [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$1 = include$1[2];
   function compare$1(a, b){return caml_call2(compare_local, a, b);}
   function hash$0(x){return hash(x);}
   var
    symbol$5 = caml_lessthan,
    l = [0, [7, 6, 0, 0, 0], "%Lx"],
    cst_0x = "0x";
   function to_string$0(i){
    return caml_call1
            (Base_Printf[2].call(null, l),
             caml_int64_shift_right_unsigne(i, 1));
   }
   function of_string$0(s){
    return of_string(Base_Import[112].call(null, cst_0x, s));
   }
   var
    include$2 =
      Base_Int_string_conversions[2].call
       (null,
        [0,
         compare$1,
         compare_local$0,
         hash_fold_t,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$5,
         symbol$1,
         module_name]),
    Hex = include$2[1];
   function to_string$1(x){return to_string(x);}
   var
    pp = Base_Pretty_printer[2].call(null, [0, module_name$0, to_string$1])[1],
    symbol$6 = caml_notequal,
    symbol$7 = caml_lessthan,
    symbol$8 = caml_greaterthan,
    symbol$9 = caml_equal,
    symbol$10 = caml_lessequal,
    symbol$11 = caml_greaterequal,
    include$3 =
      Base_Int_math[1].call
       (null,
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol,
         symbol$0,
         symbol$2,
         symbol$3,
         symbol$1,
         symbol$11,
         symbol$10,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         abs,
         symbol$1,
         zero,
         of_int_exn,
         rem]),
    symbol$12 = include$3[1],
    symbol$13 = include$3[2],
    symbol$14 = include$3[3],
    round = include$3[4],
    round_towards_zero = include$3[5],
    round_down = include$3[6],
    round_up = include$3[7],
    round_nearest = include$3[8];
   function compare$2(a, b){return caml_call2(compare_local, a, b);}
   var equal = caml_equal;
   function hash$1(x){return hash(x);}
   var
    include$4 =
      Base_Int_string_conversions[3].call
       (null,
        [0,
         compare$2,
         compare_local$0,
         equal,
         equal_local,
         hash_fold_t,
         hash$1,
         clz,
         shift_right_logical,
         bit_and,
         to_int_exn,
         num_bits,
         one$0,
         zero]),
    Binary = include$4[1],
    Repr = [0],
    include$5 = Base_Import[103],
    ascending = include$5[1],
    descending = include$5[2],
    max$0 = include$5[3],
    min$0 = include$5[4],
    Base_Int63_emul =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$1,
       of_string,
       to_string,
       caml_greaterequal,
       caml_lessequal,
       caml_equal,
       caml_greaterthan,
       caml_lessthan,
       caml_notequal,
       caml_equal,
       function(b, a){return caml_int64_compare(b, a);},
       min$0,
       max$0,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       function(b, a){return caml_int64_compare(b, a);},
       caml_equal,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero,
       one$0,
       minus_one,
       symbol,
       symbol$0,
       symbol$2,
       symbol$4,
       symbol$1,
       symbol$1,
       symbol$13,
       symbol$12,
       symbol$3,
       rem,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       clz,
       ctz,
       [0,
        symbol,
        symbol$0,
        symbol$2,
        symbol$3,
        symbol$1,
        symbol$4,
        symbol$11,
        symbol$10,
        symbol$9,
        symbol$8,
        symbol$7,
        symbol$6,
        abs,
        symbol$1,
        zero,
        symbol$12,
        symbol$13,
        symbol$14,
        bit_and,
        bit_or,
        bit_xor,
        bit_not,
        shift_left,
        shift_right,
        shift_right_logical],
       of_int,
       to_int,
       to_int_trunc,
       of_int32,
       to_int32,
       to_int32_trunc,
       of_int64,
       of_int64_trunc,
       of_nativeint,
       to_nativeint,
       of_nativeint_trunc,
       to_nativeint_trunc,
       bswap16,
       bswap32,
       bswap48,
       [0, wrap_exn, unwrap],
       Repr,
       1];
   runtime.caml_register_global(34, Base_Int63_emul, "Base__Int63_emul");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int32
//# unitInfo: Requires: Base__Bool0, Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Stdlib__Int32, Stdlib__Scanf
//# shape: Base__Int32:[F(1)*,N,F(1),F(1)*,F(1),F(1),N,F(1),F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1)*,N,N,F(1),N,N,N,N,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1)*,N,N,F(2),F(2),N,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1),F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1)*,F(1)*,N,N,N,F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_lx = "%lx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int32.Hex",
    module_name$0 = "Base.Int32",
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Int_math = global_data.Base__Int_math,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Error = global_data.Base__Error,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    globalize = Base_Import[285],
    hash_fold_t = Base_Import[204],
    func = Base_Import[218];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[165],
    sexp_of_t = Base_Import[141],
    t_sexp_grammar = Base_Import[187],
    hashable = [0, hash, Stdlib_Int32[15], sexp_of_t];
   function ascending(x, y){return Stdlib_Int32[15].call(null, x, y);}
   var
    to_string = Stdlib_Int32[14],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib_Int32[13],
    include = Base_Comparator[7].call(null, [0, ascending, sexp_of_t]),
    comparator = include[1],
    num_bits = 32,
    float_lower_bound = Base_Float0[26].call(null, num_bits),
    float_upper_bound = Base_Float0[24].call(null, num_bits),
    float_of_bits = runtime.caml_int32_float_of_bits,
    bits_of_float = runtime.caml_int32_bits_of_float;
   function shift_right_logical(b, a){return b >>> a | 0;}
   function shift_right(b, a){return b >> a;}
   function shift_left(b, a){return b << a;}
   var bit_not = Stdlib_Int32[11];
   function bit_xor(b, a){return b ^ a;}
   function bit_or(b, a){return b | a;}
   function bit_and(b, a){return b & a;}
   var
    min_value = Stdlib_Int32[10],
    max_value = Stdlib_Int32[9],
    abs = Stdlib_Int32[8],
    pred = Stdlib_Int32[7],
    succ = Stdlib_Int32[6],
    rem = runtime.caml_mod;
   function symbol(a){return - a | 0;}
   var
    minus_one = Stdlib_Int32[3],
    one = Stdlib_Int32[2],
    zero = Stdlib_Int32[1],
    compare_local = runtime.caml_compare,
    a =
      [0,
       [11,
        "Int32.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int32.of_float: argument (%f) is out of range or NaN"];
   function to_float(a){return a;}
   function of_float_unchecked(a){return a | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var b = Base_Float0[29].call(null, f);
    return caml_call2(Base_Printf[7].call(null, a), b, 0);
   }
   var
    include$0 =
      Base_Comparable[14].call(null, [0, ascending, sexp_of_t, zero]),
    is_positive = include$0[1],
    is_non_negative = include$0[2],
    is_negative = include$0[3],
    is_non_positive = include$0[4],
    sign = include$0[5],
    symbol$0 = caml_greaterequal,
    symbol$1 = caml_lessequal,
    symbol$2 = caml_equal,
    symbol$3 = caml_greaterthan,
    symbol$4 = runtime.caml_lessthan,
    symbol$5 = runtime.caml_notequal;
   function descending(x, y){return ascending(y, x);}
   function min(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   function max(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   var
    equal = caml_equal,
    equal_local = caml_equal,
    b = [0, "src/int32.ml", 103, 4],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]";
   function between(t, low, high){
    var a = caml_lessequal(low, t);
    return a ? caml_lessequal(t, high) : a;
   }
   function clamp_unchecked(t, min$0, max$0){return max(min$0, min(t, max$0));
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   function invariant(param){return 0;}
   var symbol$6 = runtime.caml_div, symbol$7 = runtime.caml_mul;
   function symbol$8(b, a){return b - a | 0;}
   function symbol$9(b, a){return b + a | 0;}
   function incr(r){r[1] = r[1] + one | 0; return 0;}
   function decr(r){r[1] = r[1] - one | 0; return 0;}
   function of_int32(t){return t;}
   function to_int32(t){return t;}
   var
    popcount = Base_Popcount[2],
    of_int = Base_Int_conversions[1],
    of_int_exn = Base_Int_conversions[2],
    of_int_trunc = Base_Int_conversions[3],
    to_int = Base_Int_conversions[6],
    to_int_exn = Base_Int_conversions[7],
    to_int_trunc = Base_Int_conversions[8],
    of_int64 = Base_Int_conversions[15],
    of_int64_exn = Base_Int_conversions[16],
    of_int64_trunc = Base_Int_conversions[17],
    to_int64 = Base_Int_conversions[9],
    of_nativeint = Base_Int_conversions[26],
    of_nativeint_exn = Base_Int_conversions[27],
    of_nativeint_trunc = Base_Int_conversions[28],
    to_nativeint = Base_Int_conversions[10];
   function pow(b, e){
    var a = to_int_exn(e), c = to_int_exn(b);
    return of_int_exn(Base_Int_math[2][1].call(null, c, a));
   }
   function symbol$10(b, e){return pow(b, e);}
   function bswap16(x){return caml_int32_bswap(x) >>> 16 | 0;}
   var
    raise_s = Base_Error[32],
    c =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_Int32_floor_log2_got_inval = "[Int32.floor_log2] got invalid input",
    cst_Int32_ceil_log2_got_invali = "[Int32.ceil_log2] got invalid input";
   function non_positive_argument(param){
    return caml_call1(Base_Printf[7].call(null, c), 0);
   }
   function lsr(b, a){return b >>> a | 0;}
   function land(b, a){return b & a;}
   function ceil_pow2(x){
    if(Base_Import[102][2].call(null, x, Stdlib_Int32[1]))
     non_positive_argument(0);
    var
     x$0 = Stdlib_Int32[7].call(null, x),
     x$5 = x$0 | x$0 >>> 1 | 0,
     x$4 = x$5 | x$5 >>> 2 | 0,
     x$3 = x$4 | x$4 >>> 4 | 0,
     x$2 = x$3 | x$3 >>> 8 | 0,
     x$1 = x$2 | x$2 >>> 16 | 0;
    return Stdlib_Int32[6].call(null, x$1);
   }
   function floor_pow2(x$0){
    if(Base_Import[102][2].call(null, x$0, Stdlib_Int32[1]))
     non_positive_argument(0);
    var
     x = x$0 | x$0 >>> 1 | 0,
     x$4 = x | x >>> 2 | 0,
     x$3 = x$4 | x$4 >>> 4 | 0,
     x$2 = x$3 | x$3 >>> 8 | 0,
     x$1 = x$2 | x$2 >>> 16 | 0;
    return x$1 - (x$1 >>> 1 | 0) | 0;
   }
   function is_pow2(x){
    if(Base_Import[102][2].call(null, x, Stdlib_Int32[1]))
     non_positive_argument(0);
    var a = Stdlib_Int32[1], b = x & Stdlib_Int32[7].call(null, x);
    return Base_Import[102][4].call(null, b, a);
   }
   function floor_log2(i){
    if(Base_Import[102][2].call(null, i, Stdlib_Int32[1])){
     var a = [0, [0, cst, Base_Import[141].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int32_floor_log2_got_inval, a));
    }
    var
     b = runtime.Base_int_math_int32_clz(i),
     c = Base_Import[93].call(null, num_bits, 1);
    return Base_Import[93].call(null, c, b);
   }
   function ceil_log2(i){
    if(Base_Import[102][2].call(null, i, Stdlib_Int32[1])){
     var a = [0, [0, cst$0, Base_Import[141].call(null, i)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int32_ceil_log2_got_invali, a));
    }
    if(Stdlib_Int32[17].call(null, i, Stdlib_Int32[2])) return 0;
    var b = runtime.Base_int_math_int32_clz(Stdlib_Int32[7].call(null, i));
    return Base_Import[93].call(null, num_bits, b);
   }
   var
    include$1 = Base_Int_string_conversions[1].call(null, [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$0 = include$1[2],
    compare_local$0 = Base_Import[257];
   function compare(a, b){return caml_call2(compare_local$0, a, b);}
   var
    hash_fold_t$0 = Base_Import[204],
    func$0 = Base_Import[218],
    d = [0, [5, 6, 0, 0, 0], cst_lx],
    e = [0, [5, 6, 0, 0, 0], cst_lx];
   function hash$0(x){return caml_call1(func$0, x);}
   function to_string$0(i){
    return caml_call1(Base_Printf[2].call(null, d), i);
   }
   function of_string$0(s){
    return caml_call1
            (Stdlib_Scanf[5].call(null, s, e), function(a){return a;});
   }
   var
    include$2 =
      Base_Int_string_conversions[2].call
       (null,
        [0,
         compare,
         compare_local$0,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$4,
         symbol,
         module_name]),
    Hex = include$2[1],
    compare_local$1 = Base_Import[257];
   function compare$0(a, b){return caml_call2(compare_local$1, a, b);}
   var equal_local$0 = Base_Import[271];
   function equal$0(a, b){return caml_call2(equal_local$0, a, b);}
   var hash_fold_t$1 = Base_Import[204], func$1 = Base_Import[218];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(a){return runtime.Base_int_math_int32_clz(a);}
   var
    include$3 =
      Base_Int_string_conversions[3].call
       (null,
        [0,
         compare$0,
         compare_local$1,
         equal$0,
         equal_local$0,
         hash_fold_t$1,
         hash$1,
         clz,
         lsr,
         land,
         to_int_exn,
         num_bits,
         one,
         zero]),
    Binary = include$3[1],
    pp = Base_Pretty_printer[2].call(null, [0, module_name$0, to_string])[1],
    include$4 =
      Base_Int_math[1].call
       (null,
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         symbol$5,
         abs,
         symbol,
         zero,
         of_int_exn,
         rem]),
    symbol$11 = include$4[1],
    symbol$12 = include$4[2],
    symbol$13 = include$4[3],
    round = include$4[4],
    round_towards_zero = include$4[5],
    round_down = include$4[6],
    round_up = include$4[7],
    round_nearest = include$4[8],
    Base_Int32 =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       equal,
       ascending,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       compare_local,
       equal_local,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero,
       one,
       minus_one,
       symbol$9,
       symbol$8,
       symbol$7,
       symbol$10,
       symbol,
       symbol,
       symbol$12,
       symbol$11,
       symbol$6,
       rem,
       symbol$13,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32,
       to_int32,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(a){return runtime.Base_int_math_int32_clz(a);},
       function(a){return runtime.Base_int_math_int32_ctz(a);},
       [0,
        symbol$9,
        symbol$8,
        symbol$7,
        symbol$6,
        symbol,
        symbol$10,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$5,
        abs,
        symbol,
        zero,
        symbol$11,
        symbol$12,
        symbol$13,
        bit_and,
        bit_or,
        bit_xor,
        bit_not,
        shift_left,
        shift_right,
        shift_right_logical],
       of_int,
       to_int,
       of_int32,
       to_int32,
       of_nativeint,
       to_nativeint,
       of_int64,
       of_int_trunc,
       to_int_trunc,
       of_nativeint_trunc,
       of_int64_trunc,
       bits_of_float,
       float_of_bits,
       bswap16,
       caml_int32_bswap];
   runtime.caml_register_global(30, Base_Int32, "Base__Int32");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int63
//# unitInfo: Requires: Base__Bool, Base__Error, Base__Import, Base__Int, Base__Int63_emul, Base__Int64, Base__Random, Base__Sexp, Base__Sys0, Base__Word_size
//# shape: Base__Int63:[N,F(1),F(1)*,F(1),F(1),N,F(1),F(1),N,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(1),N,N,F(1),N,N,N,N,F(2)*,F(2)*,F(2)*,F(2),F(1)*,F(1)*,N,N,F(2),F(2),N,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(2),F(2)*,F(2)*,F(2)*,F(1)*,F(1),F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,N,N,N,F(2)*,F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2),F(3),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_product$1 = "product",
    cst_t$3 = "t",
    cst_u$3 = "u",
    caml_div = runtime.caml_div,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Word_size = global_data.Base__Word_size,
    Base_Int = global_data.Base__Int,
    Base_Sexp = global_data.Base__Sexp,
    Base_Random = global_data.Base__Random,
    Base_Import = global_data.Base__Import,
    Base_Bool = global_data.Base__Bool,
    Base_Int64 = global_data.Base__Int64,
    Base_Error = global_data.Base__Error,
    Base_Int63_emul = global_data.Base__Int63_emul,
    Base_Sys0 = global_data.Base__Sys0,
    Assert_failure = global_data.Assert_failure,
    raise_s = Base_Error[32],
    include$0 = Base_Sys0[19].call(null, [0], [0]),
    repr = include$0[1],
    t_sexp_grammar = Base_Int[2],
    of_float = Base_Int[3],
    to_float = Base_Int[4],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash_fold_t = Base_Int[7],
    hash = Base_Int[8],
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    of_string = Base_Int[11],
    to_string = Base_Int[12],
    equal = Base_Int[13],
    compare = Base_Int[14],
    min = Base_Int[15],
    max = Base_Int[16],
    ascending = Base_Int[17],
    descending = Base_Int[18],
    between = Base_Int[19],
    clamp_exn = Base_Int[20],
    clamp = Base_Int[21],
    comparator = Base_Int[22],
    pp = Base_Int[23],
    hashable = Base_Int[24],
    is_positive = Base_Int[25],
    is_non_negative = Base_Int[26],
    is_negative = Base_Int[27],
    is_non_positive = Base_Int[28],
    sign = Base_Int[29],
    compare_local = Base_Int[30],
    equal_local = Base_Int[31],
    invariant = Base_Int[32],
    Hex = Base_Int[33],
    Binary = Base_Int[34],
    of_string_opt = Base_Int[35],
    to_string_hum = Base_Int[36],
    one = Base_Int[37],
    minus_one = Base_Int[38],
    rem = Base_Int[39],
    round = Base_Int[40],
    round_towards_zero = Base_Int[41],
    round_down = Base_Int[42],
    round_up = Base_Int[43],
    round_nearest = Base_Int[44],
    succ = Base_Int[45],
    pred = Base_Int[46],
    pow = Base_Int[47],
    bit_and = Base_Int[48],
    bit_or = Base_Int[49],
    bit_xor = Base_Int[50],
    bit_not = Base_Int[51],
    popcount = Base_Int[52],
    shift_left = Base_Int[53],
    shift_right = Base_Int[54],
    decr = Base_Int[55],
    incr = Base_Int[56],
    of_int32_exn = Base_Int[57],
    to_int32_exn = Base_Int[58],
    of_int64_exn = Base_Int[59],
    to_int64 = Base_Int[60],
    of_nativeint_exn = Base_Int[61],
    to_nativeint_exn = Base_Int[62],
    of_float_unchecked = Base_Int[63],
    num_bits = Base_Int[64],
    max_value = Base_Int[65],
    min_value = Base_Int[66],
    shift_right_logical = Base_Int[67],
    ceil_pow2 = Base_Int[68],
    floor_pow2 = Base_Int[69],
    ceil_log2 = Base_Int[70],
    is_pow2 = Base_Int[72],
    clz = Base_Int[73],
    ctz = Base_Int[74],
    O = Base_Int[75],
    symbol = Base_Int[76],
    lnot = Base_Int[77],
    abs = Base_Int[78],
    zero = Base_Int[79],
    symbol$0 = Base_Int[80],
    symbol$1 = Base_Int[81],
    symbol$2 = Base_Int[82],
    of_int = Base_Int[84],
    to_int32 = Base_Int[87],
    of_int64 = Base_Int[88],
    of_nativeint = Base_Int[89],
    a = Base_Int[90];
   function to_int(x){return [0, x];}
   function to_int_trunc(x){return x;}
   function to_nativeint_trunc(x){return a(x);}
   function to_nativeint(x){return [0, a(x)];}
   function bswap32(t){
    return caml_int64_to_int32
            (Base_Int64[87].call(null, caml_int64_of_int32(t)));
   }
   function bswap48(t){
    return caml_int64_to_int32
            (Base_Int64[88].call(null, caml_int64_of_int32(t)));
   }
   var
    cst_Int_floor_log2_got_invalid = "[Int.floor_log2] got invalid input",
    cst_neg_overflow = "neg overflow",
    cst_abs_overflow = "abs overflow",
    cst_product$0 = cst_product$1,
    cst_u$2 = cst_u$3,
    cst_t$2 = cst_t$3,
    cst_overflow$2 = "( / ) overflow",
    cst_product = cst_product$1,
    cst_u$1 = cst_u$3,
    cst_t$1 = cst_t$3,
    cst_overflow$1 = "( * ) overflow",
    cst_diff = "diff",
    cst_u$0 = cst_u$3,
    cst_t$0 = cst_t$3,
    cst_overflow$0 = "( - ) overflow",
    cst_sum = "sum",
    cst_u = cst_u$3,
    cst_t = cst_t$3,
    cst_overflow = "( + ) overflow",
    b = [0, "src/int63.ml", 110, 9],
    repr$0 = 0,
    include =
      repr
       ? [0,
         Base_Int63_emul[2],
         Base_Int63_emul[3],
         Base_Int63_emul[4],
         Base_Int63_emul[5],
         Base_Int63_emul[6],
         Base_Int63_emul[7],
         Base_Int63_emul[8],
         Base_Int63_emul[9],
         Base_Int63_emul[10],
         Base_Int63_emul[11],
         Base_Int63_emul[12],
         Base_Int63_emul[13],
         Base_Int63_emul[14],
         Base_Int63_emul[15],
         Base_Int63_emul[16],
         Base_Int63_emul[17],
         Base_Int63_emul[18],
         Base_Int63_emul[19],
         Base_Int63_emul[20],
         Base_Int63_emul[21],
         Base_Int63_emul[22],
         Base_Int63_emul[23],
         Base_Int63_emul[24],
         Base_Int63_emul[25],
         Base_Int63_emul[26],
         Base_Int63_emul[27],
         Base_Int63_emul[28],
         Base_Int63_emul[29],
         Base_Int63_emul[30],
         Base_Int63_emul[31],
         Base_Int63_emul[32],
         Base_Int63_emul[33],
         Base_Int63_emul[34],
         Base_Int63_emul[35],
         Base_Int63_emul[36],
         Base_Int63_emul[37],
         Base_Int63_emul[38],
         Base_Int63_emul[39],
         Base_Int63_emul[40],
         Base_Int63_emul[41],
         Base_Int63_emul[42],
         Base_Int63_emul[43],
         Base_Int63_emul[44],
         Base_Int63_emul[45],
         Base_Int63_emul[46],
         Base_Int63_emul[47],
         Base_Int63_emul[48],
         Base_Int63_emul[49],
         Base_Int63_emul[50],
         Base_Int63_emul[51],
         Base_Int63_emul[52],
         Base_Int63_emul[53],
         Base_Int63_emul[54],
         Base_Int63_emul[55],
         Base_Int63_emul[56],
         Base_Int63_emul[57],
         Base_Int63_emul[58],
         Base_Int63_emul[59],
         Base_Int63_emul[60],
         Base_Int63_emul[61],
         Base_Int63_emul[62],
         Base_Int63_emul[63],
         Base_Int63_emul[64],
         Base_Int63_emul[65],
         Base_Int63_emul[66],
         Base_Int63_emul[67],
         Base_Int63_emul[68],
         Base_Int63_emul[69],
         Base_Int63_emul[70],
         Base_Int63_emul[71],
         Base_Int63_emul[72],
         Base_Int63_emul[73],
         Base_Int63_emul[74],
         Base_Int63_emul[75],
         Base_Int63_emul[76],
         Base_Int63_emul[77],
         Base_Int63_emul[78],
         Base_Int63_emul[79],
         Base_Int63_emul[80],
         Base_Int63_emul[81],
         Base_Int63_emul[82],
         Base_Int63_emul[83],
         Base_Int63_emul[84],
         Base_Int63_emul[85],
         Base_Int63_emul[86],
         Base_Int63_emul[88],
         Base_Int63_emul[89],
         Base_Int63_emul[90],
         Base_Int63_emul[91],
         Base_Int63_emul[92],
         Base_Int63_emul[93],
         Base_Int63_emul[94],
         Base_Int63_emul[95],
         ,
         Base_Int63_emul[97],
         Base_Int63_emul[98],
         Base_Int63_emul[99],
         Base_Int63_emul[100],
         Base_Int63_emul[101],
         Base_Int63_emul[102],
         Base_Int63_emul[103],
         Base_Int63_emul[104],
         Base_Int63_emul[105],
         Base_Int63_emul[106],
         Base_Int63_emul[107],
         Base_Int63_emul[108],
         Base_Int63_emul[109],
         Base_Int63_emul[110],
         Base_Int63_emul[111],
         Base_Int63_emul[112],
         Base_Int63_emul[87],
         Base_Int63_emul[118],
         Base_Int63_emul[113],
         Base_Int63_emul[114],
         Base_Int63_emul[115]]
       : [0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(b, a){return a <= b ? 1 : 0;},
         function(b, a){return b <= a ? 1 : 0;},
         function(b, a){return b === a ? 1 : 0;},
         function(b, a){return a < b ? 1 : 0;},
         function(b, a){return b < a ? 1 : 0;},
         function(b, a){return b !== a ? 1 : 0;},
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         compare_local,
         equal_local,
         invariant,
         Hex,
         Binary,
         of_string_opt,
         to_string_hum,
         zero,
         one,
         minus_one,
         function(b, a){return b + a | 0;},
         function(b, a){return b - a | 0;},
         caml_mul,
         symbol,
         function(a){return - a | 0;},
         function(a){return - a | 0;},
         symbol$1,
         symbol$0,
         caml_div,
         rem,
         symbol$2,
         function(b, a){return b & a;},
         function(b, a){return b | a;},
         function(b, a){return b ^ a;},
         lnot,
         function(b, a){return b << a;},
         function(b, a){return b >> a;},
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         num_bits,
         max_value,
         min_value,
         function(b, a){return b >>> a | 0;},
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         ,
         is_pow2,
         clz,
         ctz,
         [0,
          function(b, a){return b + a | 0;},
          function(b, a){return b - a | 0;},
          caml_mul,
          caml_div,
          function(a){return - a | 0;},
          O[1],
          function(b, a){return a <= b ? 1 : 0;},
          function(b, a){return b <= a ? 1 : 0;},
          function(b, a){return b === a ? 1 : 0;},
          function(b, a){return a < b ? 1 : 0;},
          function(b, a){return b < a ? 1 : 0;},
          function(b, a){return b !== a ? 1 : 0;},
          O[3],
          function(a){return - a | 0;},
          O[4],
          O[5],
          O[6],
          O[7],
          function(b, a){return b & a;},
          function(b, a){return b | a;},
          function(b, a){return b ^ a;},
          O[2],
          function(b, a){return b << a;},
          function(b, a){return b >> a;},
          function(b, a){return b >>> a | 0;}],
         of_int,
         to_int,
         to_int_trunc,
         of_int32_exn,
         to_int32,
         function(a){return a;},
         of_int64,
         caml_int64_to_int32,
         of_nativeint,
         to_nativeint,
         function(a){return a;},
         to_nativeint_trunc,
         of_float_unchecked,
         repr$0,
         runtime.caml_bswap16,
         bswap32,
         bswap48],
    t_sexp_grammar$0 = include[1],
    of_float$0 = include[2],
    to_float$0 = include[3],
    of_int_exn$0 = include[4],
    to_int_exn$0 = include[5],
    hash_fold_t$0 = include[6],
    hash$0 = include[7],
    t_of_sexp$0 = include[8],
    sexp_of_t$0 = include[9],
    of_string$0 = include[10],
    to_string$0 = include[11],
    symbol$3 = include[12],
    symbol$4 = include[13],
    symbol$5 = include[14],
    symbol$6 = include[15],
    symbol$7 = include[16],
    symbol$8 = include[17],
    equal$0 = include[18],
    compare$0 = include[19],
    min$0 = include[20],
    max$0 = include[21],
    ascending$0 = include[22],
    descending$0 = include[23],
    between$0 = include[24],
    clamp_exn$0 = include[25],
    clamp$0 = include[26],
    comparator$0 = include[27],
    pp$0 = include[28],
    hashable$0 = include[29],
    is_positive$0 = include[30],
    is_non_negative$0 = include[31],
    is_negative$0 = include[32],
    is_non_positive$0 = include[33],
    sign$0 = include[34],
    compare_local$0 = include[35],
    equal_local$0 = include[36],
    invariant$0 = include[37],
    Hex$0 = include[38],
    Binary$0 = include[39],
    of_string_opt$0 = include[40],
    to_string_hum$0 = include[41],
    zero$0 = include[42],
    one$0 = include[43],
    minus_one$0 = include[44],
    symbol$9 = include[45],
    symbol$10 = include[46],
    symbol$11 = include[47],
    symbol$12 = include[48],
    neg = include[49],
    symbol$13 = include[50],
    symbol$14 = include[51],
    symbol$15 = include[52],
    symbol$16 = include[53],
    rem$0 = include[54],
    symbol$17 = include[55],
    land = include[56],
    lor = include[57],
    lxor = include[58],
    lnot$0 = include[59],
    lsl = include[60],
    asr = include[61],
    round$0 = include[62],
    round_towards_zero$0 = include[63],
    round_down$0 = include[64],
    round_up$0 = include[65],
    round_nearest$0 = include[66],
    abs$0 = include[67],
    succ$0 = include[68],
    pred$0 = include[69],
    pow$0 = include[70],
    bit_and$0 = include[71],
    bit_or$0 = include[72],
    bit_xor$0 = include[73],
    bit_not$0 = include[74],
    popcount$0 = include[75],
    shift_left$0 = include[76],
    shift_right$0 = include[77],
    decr$0 = include[78],
    incr$0 = include[79],
    of_int32_exn$0 = include[80],
    to_int32_exn$0 = include[81],
    of_int64_exn$0 = include[82],
    to_int64$0 = include[83],
    of_nativeint_exn$0 = include[84],
    to_nativeint_exn$0 = include[85],
    num_bits$0 = include[86],
    max_value$0 = include[87],
    min_value$0 = include[88],
    lsr = include[89],
    shift_right_logical$0 = include[90],
    ceil_pow2$0 = include[91],
    floor_pow2$0 = include[92],
    ceil_log2$0 = include[93],
    is_pow2$0 = include[95],
    clz$0 = include[96],
    ctz$0 = include[97],
    O$0 = include[98],
    of_int$0 = include[99],
    to_int$0 = include[100],
    to_int_trunc$0 = include[101],
    of_int32 = include[102],
    to_int32$0 = include[103],
    to_int32_trunc = include[104],
    of_int64$0 = include[105],
    of_int64_trunc = include[106],
    of_nativeint$0 = include[107],
    to_nativeint$0 = include[108],
    of_nativeint_trunc = include[109],
    to_nativeint_trunc$0 = include[110],
    of_float_unchecked$0 = include[111],
    repr$1 = include[112],
    bswap16 = include[113],
    bswap32$0 = include[114],
    bswap48$0 = include[115];
   function symbol$18(t, u){
    var sum = symbol$9(t, u), a = bit_xor$0(t, bit_not$0(sum));
    if(symbol$7(bit_or$0(bit_xor$0(t, u), a), zero$0)) return sum;
    var
     b = [0, [0, cst_sum, caml_call1(sexp_of_t$0, sum)], 0],
     c = [0, [0, cst_u, caml_call1(sexp_of_t$0, u)], b],
     d = [0, [0, cst_t, caml_call1(sexp_of_t$0, t)], c];
    return raise_s(Base_Sexp[10].call(null, cst_overflow, d));
   }
   function symbol$19(t, u){
    var diff = symbol$10(t, u), pos_diff = symbol$6(t, u);
    if(symbol$8(t, u)){
     var a = caml_call1(is_positive$0, diff);
     if(Base_Bool[15].call(null, pos_diff, a)){
      var
       b = [0, [0, cst_diff, caml_call1(sexp_of_t$0, diff)], 0],
       c = [0, [0, cst_u$0, caml_call1(sexp_of_t$0, u)], b],
       d = [0, [0, cst_t$0, caml_call1(sexp_of_t$0, t)], c];
      return raise_s(Base_Sexp[10].call(null, cst_overflow$0, d));
     }
    }
    return diff;
   }
   var negative_one = of_int$0(-1);
   function div_would_overflow(t, u){
    var a = symbol$5(t, min_value$0);
    return a ? symbol$5(u, negative_one) : a;
   }
   function symbol$20(t, u){
    var product = symbol$11(t, u);
    a:
    if(symbol$8(u, zero$0)){
     if
      (!
       div_would_overflow(product, u)
       && ! symbol$8(symbol$16(product, u), t))
      break a;
     var
      a = [0, [0, cst_product, caml_call1(sexp_of_t$0, product)], 0],
      b = [0, [0, cst_u$1, caml_call1(sexp_of_t$0, u)], a],
      c = [0, [0, cst_t$1, caml_call1(sexp_of_t$0, t)], b];
     return raise_s(Base_Sexp[10].call(null, cst_overflow$1, c));
    }
    return product;
   }
   function symbol$21(t, u){
    if(! div_would_overflow(t, u)) return symbol$16(t, u);
    var
     a = [0, [0, cst_product$0, caml_call1(sexp_of_t$0, symbol$16(t, u))], 0],
     b = [0, [0, cst_u$2, caml_call1(sexp_of_t$0, u)], a],
     c = [0, [0, cst_t$2, caml_call1(sexp_of_t$0, t)], b];
    return raise_s(Base_Sexp[10].call(null, cst_overflow$2, c));
   }
   function abs$1(t){
    return symbol$5(t, min_value$0)
            ? Base_Import[124].call(null, cst_abs_overflow)
            : abs$0(t);
   }
   function neg$0(t){
    return symbol$5(t, min_value$0)
            ? Base_Import[124].call(null, cst_neg_overflow)
            : neg(t);
   }
   if(63 !== num_bits$0)
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   function random_of_int(opt, bound){
    var state = opt ? opt[1] : Base_Random[19][1], a = to_int_exn$0(bound);
    return of_int$0(caml_call2(Base_Random[19][7], state, a));
   }
   function random_of_int64(opt, bound){
    var state = opt ? opt[1] : Base_Random[19][1], a = to_int64$0(bound);
    return of_int64_exn$0(caml_call2(Base_Random[19][10], state, a));
   }
   var random = Base_Word_size[3] ? random_of_int : random_of_int64;
   function random_incl_of_int(opt, lo, hi){
    var
     state = opt ? opt[1] : Base_Random[19][1],
     a = to_int_exn$0(hi),
     b = to_int_exn$0(lo);
    return of_int$0(caml_call3(Base_Random[19][12], state, b, a));
   }
   function random_incl_of_int64(opt, lo, hi){
    var
     state = opt ? opt[1] : Base_Random[19][1],
     a = to_int64$0(hi),
     b = to_int64$0(lo);
    return of_int64_exn$0(caml_call3(Base_Random[19][15], state, b, a));
   }
   var
    random_incl =
      Base_Word_size[3] ? random_incl_of_int : random_incl_of_int64;
   function floor_log2(t){
    if(Base_Word_size[3]){
     var a = to_int_exn$0(t);
     return Base_Int[71].call(null, a);
    }
    if(symbol$4(t, zero$0)){
     var b = [0, [0, cst, caml_call1(sexp_of_t$0, t)], 0];
     raise_s(Base_Sexp[10].call(null, cst_Int_floor_log2_got_invalid, b));
    }
    var floor_log2 = [0, num_bits$0 - 2 | 0];
    for(;;){
     if(! equal$0(zero$0, bit_and$0(t, shift_left$0(one$0, floor_log2[1]))))
      return floor_log2[1];
     floor_log2[1] = floor_log2[1] - 1 | 0;
    }
   }
   var
    Base_Int63 =
      [0,
       t_sexp_grammar$0,
       of_float$0,
       to_float$0,
       of_int_exn$0,
       to_int_exn$0,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       equal$0,
       compare$0,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       pp$0,
       hashable$0,
       is_positive$0,
       is_non_negative$0,
       is_negative$0,
       is_non_positive$0,
       sign$0,
       compare_local$0,
       equal_local$0,
       invariant$0,
       Hex$0,
       Binary$0,
       of_string_opt$0,
       to_string_hum$0,
       zero$0,
       one$0,
       minus_one$0,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       neg,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       rem$0,
       symbol$17,
       land,
       lor,
       lxor,
       lnot$0,
       lsl,
       asr,
       round$0,
       round_towards_zero$0,
       round_down$0,
       round_up$0,
       round_nearest$0,
       abs$0,
       succ$0,
       pred$0,
       pow$0,
       bit_and$0,
       bit_or$0,
       bit_xor$0,
       bit_not$0,
       popcount$0,
       shift_left$0,
       shift_right$0,
       decr$0,
       incr$0,
       of_int32_exn$0,
       to_int32_exn$0,
       of_int64_exn$0,
       to_int64$0,
       of_nativeint_exn$0,
       to_nativeint_exn$0,
       of_float_unchecked$0,
       num_bits$0,
       max_value$0,
       min_value$0,
       lsr,
       shift_right_logical$0,
       ceil_pow2$0,
       floor_pow2$0,
       ceil_log2$0,
       is_pow2$0,
       clz$0,
       ctz$0,
       O$0,
       [0, symbol$18, symbol$19, symbol$20, symbol$21, abs$1, neg$0],
       of_int$0,
       to_int$0,
       of_int32,
       to_int32$0,
       of_int64$0,
       of_nativeint$0,
       to_nativeint$0,
       to_int_trunc$0,
       to_int32_trunc,
       of_int64_trunc,
       of_nativeint_trunc,
       to_nativeint_trunc$0,
       bswap16,
       bswap32$0,
       bswap48$0,
       random,
       random_incl,
       floor_log2,
       [0, Base_Int63_emul[117], repr$1]];
   runtime.caml_register_global(32, Base_Int63, "Base__Int63");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_mutable_intf
//# shape: Base__Dictionary_mutable_intf:[[[]]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Merge_into_action = [0],
    Definitions = [0, Merge_into_action],
    Base_Dictionary_mutable_intf = [0, Definitions];
   runtime.caml_register_global
    (0, Base_Dictionary_mutable_intf, "Base__Dictionary_mutable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_mutable
//# unitInfo: Requires: Base__Dictionary_mutable_intf
//# shape: Base__Dictionary_mutable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Dictionary_mutable = [0];
   runtime.caml_register_global
    (0, Base_Dictionary_mutable, "Base__Dictionary_mutable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashtbl_intf
//# shape: Base__Hashtbl_intf:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Key = [0],
    Base_Hashtbl_intf = [0, Key];
   runtime.caml_register_global(0, Base_Hashtbl_intf, "Base__Hashtbl_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Avltree
//# unitInfo: Requires: Base__Error, Base__Import, Base__Sexp
//# shape: Base__Avltree:[N,F(1)*,F(2),F(6),F(1),F(1),F(3),F(5),F(6),F(7),F(5),F(6),F(7),F(3),F(4),F(3),F(2),F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_avltree_ml = "src/avltree.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Sexp = global_data.Base__Sexp,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Error = global_data.Base__Error,
    raise_s = Base_Error[32];
   function max(x, y){return y < x ? x : y;}
   var
    a = [0, cst_src_avltree_ml, 50, 6],
    b = [0, cst_src_avltree_ml, 56, 6],
    c = [0, cst_src_avltree_ml, 67, 6],
    d = [0, cst_src_avltree_ml, 66, 6],
    e = [0, cst_src_avltree_ml, 87, 22],
    f = [0, cst_src_avltree_ml, 110, 26],
    g = [0, cst_src_avltree_ml, 129, 30],
    h = [0, cst_src_avltree_ml, 145, 26],
    i = [0, cst_src_avltree_ml, 163, 30],
    dummy = 0;
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function height(param){
    if(typeof param === "number") return 0;
    if(0 !== param[0]) return 1;
    var height = param[4];
    return height;
   }
   function invariant(t, compare){
    function inv(param){
     if(typeof param !== "number" && 0 === param[0]){
      var
       left = param[1],
       key = param[2],
       h = param[4],
       right = param[5],
       hr = height(right),
       hl = height(left);
      inv(left);
      inv(right);
      if(typeof left !== "number"){
       var left_key = 0 === left[0] ? left[2] : left[1];
       if(0 <= caml_call2(compare, left_key, key))
        throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
      }
      if(typeof right !== "number"){
       var right_key = 0 === right[0] ? right[2] : right[1];
       if(0 >= caml_call2(compare, right_key, key))
        throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
      }
      var e = max(hl, hr);
      if(h !== Base_Import[91].call(null, e, 1))
       throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
      var f = Base_Import[93].call(null, hl, hr);
      if(2 < Base_Import[123].call(null, f))
       throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
      return 0;
     }
     return 0;
    }
    return inv(t);
   }
   function update_height(param){
    if(typeof param !== "number" && 0 === param[0]){
     var
      left = param[1],
      old_height = param[4],
      right = param[5],
      a = height(right),
      b = max(height(left), a),
      new_height = Base_Import[91].call(null, b, 1);
     if(new_height !== old_height) param[4] = new_height;
     return;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   }
   function balance(root_node){
    if(typeof root_node !== "number" && 0 === root_node[0]){
     var
      left = root_node[1],
      right = root_node[5],
      hl = height(left),
      hr = height(right);
     if(Base_Import[91].call(null, hr, 2) < hl){
      if(typeof left !== "number" && 0 === left[0]){
       var
        left_node_left = left[1],
        left_node_right = left[5],
        a = height(left_node_right);
       if(a <= height(left_node_left)){
        root_node[1] = left_node_right;
        left[5] = root_node;
        update_height(root_node);
        update_height(left);
        return left;
       }
       if(typeof left_node_right !== "number" && 0 === left_node_right[0]){
        var lr_left = left_node_right[1], lr_right = left_node_right[5];
        left[5] = lr_left;
        root_node[1] = lr_right;
        left_node_right[5] = root_node;
        left_node_right[1] = left;
        update_height(left);
        update_height(root_node);
        update_height(left_node_right);
        return left_node_right;
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
     }
     if(Base_Import[91].call(null, hl, 2) >= hr){
      update_height(root_node);
      return root_node;
     }
     if(typeof right !== "number" && 0 === right[0]){
      var
       right_node_left = right[1],
       right_node_right = right[5],
       b = height(right_node_left);
      if(b <= height(right_node_right)){
       root_node[5] = right_node_left;
       right[1] = root_node;
       update_height(root_node);
       update_height(right);
       return right;
      }
      if(typeof right_node_left !== "number" && 0 === right_node_left[0]){
       var rl_left = right_node_left[1], rl_right = right_node_left[5];
       right[1] = rl_right;
       root_node[5] = rl_left;
       right_node_left[1] = root_node;
       right_node_left[5] = right;
       update_height(right);
       update_height(root_node);
       update_height(right_node_left);
       return right_node_left;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
    }
    return root_node;
   }
   function add(t, replace, compare, added, k, v){
    if(typeof t === "number"){added[1] = 1; return [1, k, v];}
    if(0 !== t[0]){
     var k$1 = t[1], c$0 = caml_call2(compare, k$1, k);
     if(0 !== c$0){
      added[1] = 1;
      return 0 <= c$0 ? [0, 0, k, v, 2, t] : [0, t, k, v, 2, 0];
     }
     added[1] = 0;
     if(replace) t[2] = v;
     return t;
    }
    var
     left = t[1],
     k$0 = t[2],
     right = t[5],
     c = caml_call2(compare, k, k$0);
    if(0 === c){added[1] = 0; if(replace) t[3] = v; return t;}
    if(0 <= c){
     var right$0 = add(right, replace, compare, added, k, v);
     if(1 - (right$0 === right ? 1 : 0)) t[5] = right$0;
    }
    else{
     var left$0 = add(left, replace, compare, added, k, v);
     if(1 - (left$0 === left ? 1 : 0)) t[1] = left$0;
    }
    return added[1] ? balance(t) : t;
   }
   function first(t$0){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var l = t[1];
      if(typeof l !== "number"){t = l; continue;}
      var v = t[3], k = t[2];
     }
     else
      var k$0 = t[1], v$0 = t[2], v = v$0, k = k$0;
     return [0, [0, k, v]];
    }
   }
   function last(t$0){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 === t[0]){
      var k = t[2], v = t[3];
      if(typeof t[5] !== "number"){var r = t[5]; t = r; continue;}
      var v$0 = v, k$0 = k;
     }
     else
      var k$1 = t[1], v$1 = t[2], v$0 = v$1, k$0 = k$1;
     return [0, [0, k$0, v$0]];
    }
   }
   function findi_and_call_impl
   (t$0,
    compare,
    k$1,
    arg1,
    arg2,
    call_if_found,
    call_if_not_found,
    if_found,
    if_not_found){
    var t = t$0;
    for(;;){
     if(typeof t === "number")
      return caml_call4(call_if_not_found, if_not_found, k$1, arg1, arg2);
     if(0 !== t[0]){
      var k$0 = t[1], v$0 = t[2];
      return 0 === caml_call2(compare, k$1, k$0)
              ? caml_call5(call_if_found, if_found, k$0, v$0, arg1, arg2)
              : caml_call4(call_if_not_found, if_not_found, k$1, arg1, arg2);
     }
     var
      left = t[1],
      k = t[2],
      v = t[3],
      right = t[5],
      c = caml_call2(compare, k$1, k);
     if(0 === c) return caml_call5(call_if_found, if_found, k, v, arg1, arg2);
     t = 0 <= c ? right : left;
    }
   }
   function call_if_found(if_found, b, data, a, param){return caml_call1(if_found, data);
   }
   function call_if_not_found(if_not_found, key, a, param){return caml_call1(if_not_found, key);
   }
   function find_and_call(t, compare, k, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             0,
             0,
             call_if_found,
             call_if_not_found,
             if_found,
             if_not_found);
   }
   function call_if_found$0(if_found, key, data, a, param){return caml_call2(if_found, key, data);
   }
   function call_if_not_found$0(if_not_found, key, a, param){return caml_call1(if_not_found, key);
   }
   function findi_and_call(t, compare, k, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             0,
             0,
             call_if_found$0,
             call_if_not_found$0,
             if_found,
             if_not_found);
   }
   function call_if_found$1(if_found, a, data, arg, param){return caml_call2(if_found, data, arg);
   }
   function call_if_not_found$1(if_not_found, key, arg, param){return caml_call2(if_not_found, key, arg);
   }
   function find_and_call1(t, compare, k, a, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             0,
             call_if_found$1,
             call_if_not_found$1,
             if_found,
             if_not_found);
   }
   function call_if_found$2(if_found, key, data, arg, param){return caml_call3(if_found, key, data, arg);
   }
   function call_if_not_found$2(if_not_found, key, arg, param){return caml_call2(if_not_found, key, arg);
   }
   function findi_and_call1(t, compare, k, a, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             0,
             call_if_found$2,
             call_if_not_found$2,
             if_found,
             if_not_found);
   }
   function call_if_found$3(if_found, param, data, arg1, arg2){return caml_call3(if_found, data, arg1, arg2);
   }
   function call_if_not_found$3(if_not_found, key, arg1, arg2){return caml_call3(if_not_found, key, arg1, arg2);
   }
   function find_and_call2(t, compare, k, a, b, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             b,
             call_if_found$3,
             call_if_not_found$3,
             if_found,
             if_not_found);
   }
   function call_if_found$4(if_found, key, data, arg1, arg2){return caml_call4(if_found, key, data, arg1, arg2);
   }
   function call_if_not_found$4(if_not_found, key, arg1, arg2){return caml_call3(if_not_found, key, arg1, arg2);
   }
   function findi_and_call2(t, compare, k, a, b, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             b,
             call_if_found$4,
             call_if_not_found$4,
             if_found,
             if_not_found);
   }
   function if_found(v){return [0, v];}
   function if_not_found(param){return 0;}
   function find(t, compare, k){
    return find_and_call(t, compare, k, if_found, if_not_found);
   }
   function if_found$0(param){return 1;}
   function if_not_found$0(param){return 0;}
   function mem(t, compare, k){
    return find_and_call(t, compare, k, if_found$0, if_not_found$0);
   }
   var
    letrec_function_context = [],
    j = [0, cst_src_avltree_ml, 389, 15],
    k = [0, cst_src_avltree_ml, 406, 20];
   function remove(t, removed, compare, k){
    if(typeof t === "number"){removed[1] = 0; return 0;}
    if(0 !== t[0]){
     var k$1 = t[1];
     return 0 === caml_call2(compare, k, k$1)
             ? (removed[1] = 1, 0)
             : (removed[1] = 0, t);
    }
    var
     left = t[1],
     k$0 = t[2],
     right = t[5],
     c = caml_call2(compare, k, k$0);
    if(0 === c){
     removed[1] = 1;
     return caml_call2(letrec_function_context[1], left, right);
    }
    if(0 <= c){
     var right$0 = remove(right, removed, compare, k);
     if(1 - (right$0 === right ? 1 : 0)) t[5] = right$0;
    }
    else{
     var left$0 = remove(left, removed, compare, k);
     if(1 - (left$0 === left ? 1 : 0)) t[1] = left$0;
    }
    return removed[1] ? balance(t) : t;
   }
   function remove_min_elt(tree){
    if(typeof tree === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
    if(0 !== tree[0]) return 0;
    var left = tree[1];
    if(typeof left === "number"){var right = tree[5]; return right;}
    if(0 !== left[0]){
     var k = tree[2], v = tree[3];
     if(typeof tree[5] === "number") return [1, k, v];
    }
    tree[1] = remove_min_elt(left);
    return balance(tree);
   }
   function merge(t1, tree$0){
    if(typeof t1 === "number") return tree$0;
    if(typeof tree$0 === "number") return t1;
    var tree = tree$0;
    for(;;){
     if(typeof tree === "number")
      var tree$1 = 0;
     else if(0 === tree[0]){
      var left = tree[1];
      if(typeof left !== "number"){tree = left; continue;}
      var tree$1 = tree;
     }
     else
      var tree$1 = tree;
     if(typeof tree$1 === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
     if(0 === tree$1[0]){
      tree$1[5] = remove_min_elt(tree$0);
      tree$1[1] = t1;
      var tree$2 = tree$1;
     }
     else
      var
       k$0 = tree$1[1],
       v = tree$1[2],
       t2 = remove_min_elt(tree$0),
       a = height(t2),
       b = max(height(t1), a),
       tree$2 = [0, t1, k$0, v, Base_Import[91].call(null, b, 1), t2];
     return balance(tree$2);
    }
   }
   runtime.caml_update_dummy(letrec_function_context, [0, merge]);
   var
    cst_Avltree_choose_exn_of_empt = "[Avltree.choose_exn] of empty hashtbl";
   function fold(t$0, init$2, f){
    var t = t$0, init = init$2;
    for(;;){
     if(typeof t === "number") return init;
     if(0 !== t[0]){
      var key$4 = t[1], data$4 = t[2];
      return caml_call3(f, key$4, data$4, init);
     }
     var left = t[1];
     if(typeof left === "number"){
      var key = t[2], data = t[3], match = t[5];
      if(typeof match !== "number" && 0 !== match[0]){
       var rkey = match[1], rdata = match[2];
       return caml_call3(f, rkey, rdata, caml_call3(f, key, data, init));
      }
     }
     else{
      if(0 === left[0]){
       var key$1 = t[2], data$1 = t[3], match$0 = t[5];
       if(typeof match$0 !== "number" && 0 !== match$0[0]){
        var rkey$0 = match$0[1], rdata$0 = match$0[2];
        return caml_call3
                (f,
                 rkey$0,
                 rdata$0,
                 caml_call3(f, key$1, data$1, fold(left, init, f)));
       }
      }
      else{
       var
        lkey$0 = left[1],
        ldata$0 = left[2],
        key$3 = t[2],
        data$3 = t[3],
        match$1 = t[5];
       if(typeof match$1 === "number")
        return caml_call3
                (f, key$3, data$3, caml_call3(f, lkey$0, ldata$0, init));
       if(0 !== match$1[0]){
        var rkey$1 = match$1[1], rdata$1 = match$1[2];
        return caml_call3
                (f,
                 rkey$1,
                 rdata$1,
                 caml_call3
                  (f, key$3, data$3, caml_call3(f, lkey$0, ldata$0, init)));
       }
      }
      if(typeof left !== "number" && 0 !== left[0]){
       var
        lkey = left[1],
        ldata = left[2],
        key$2 = t[2],
        data$2 = t[3],
        right$0 = t[5],
        init$1 =
          caml_call3(f, key$2, data$2, caml_call3(f, lkey, ldata, init));
       t = right$0;
       init = init$1;
       continue;
      }
     }
     var
      key$0 = t[2],
      data$0 = t[3],
      right = t[5],
      init$0 = caml_call3(f, key$0, data$0, fold(left, init, f));
     t = right;
     init = init$0;
    }
   }
   function iter(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 !== t[0]){
      var key$0 = t[1], data$0 = t[2];
      return caml_call2(f, key$0, data$0);
     }
     var left = t[1], key = t[2], data = t[3], right = t[5];
     iter(left, f);
     caml_call2(f, key, data);
     t = right;
    }
   }
   function mapi_inplace(t$0, f){
    var t = t$0;
    for(;;){
     if(typeof t === "number") return 0;
     if(0 !== t[0]){
      var key$0 = t[1], value$0 = t[2];
      t[2] = caml_call2(f, key$0, value$0);
      return 0;
     }
     var left = t[1], key = t[2], value = t[3], right = t[5];
     mapi_inplace(left, f);
     t[3] = caml_call2(f, key, value);
     t = right;
    }
   }
   function choose_exn(param){
    if(typeof param === "number")
     return raise_s
             (Base_Sexp[10].call(null, cst_Avltree_choose_exn_of_empt, 0));
    if(0 === param[0])
     var value = param[3], key = param[2];
    else
     var key$0 = param[1], value$0 = param[2], value = value$0, key = key$0;
    return [0, key, value];
   }
   var
    Base_Avltree =
      [0,
       0,
       is_empty,
       invariant,
       add,
       first,
       last,
       find,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       mem,
       remove,
       fold,
       iter,
       mapi_inplace,
       choose_exn];
   runtime.caml_register_global(16, Base_Avltree, "Base__Avltree");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashtbl
//# unitInfo: Requires: Base__Array, Base__Avltree, Base__Error, Base__Hashable, Base__Hashtbl_intf, Base__Import, Base__Int, Base__List, Base__Option, Base__Or_error, Base__Random, Base__Sexp, Base__With_return, Sexplib0__Sexp_grammar
//# shape: Base__Hashtbl:[F(1)*,F(3)*,F(3),F(3),F(4),F(4),F(4),F(4),F(4),F(6),F(5),F(5),F(5),F(7),F(1)*,F(1),F(1),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(1)*,F(2),F(2),F(1),F(1),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(4),F(5),F(6),F(4),F(5),F(6),F(2),F(3),F(3),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(1),F(4),F(4),F(3),F(2),F(2),F(1)*,F(3),F(1)*,N,F(1)*,F(3),F(3),F(2),F(4),[F(1)*]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_hashtbl_ml = "src/hashtbl.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Avltree = global_data.Base__Avltree,
    Base_Import = global_data.Base__Import,
    Base_Hashable = global_data.Base__Hashable,
    Base_Array = global_data.Base__Array,
    Base_List = global_data.Base__List,
    Base_Or_error = global_data.Base__Or_error,
    Base_Sexp = global_data.Base__Sexp,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Assert_failure = global_data.Assert_failure,
    Base_Error = global_data.Base__Error,
    Base_Option = global_data.Base__Option,
    Base_Random = global_data.Base__Random,
    Base_Int = global_data.Base__Int,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1],
    hash_param = Base_Hashable[5],
    hash = Base_Hashable[6],
    raise_s = Base_Error[32],
    cst_Hashtbl_mutation_not_allow =
      "Hashtbl: mutation not allowed during iteration";
   function sexp_of_key(t){return t[4][3];}
   function compare_key(t){return t[4][2];}
   function ensure_mutation_allowed(t){
    var a = 1 - t[5];
    return a ? Base_Import[124].call(null, cst_Hashtbl_mutation_not_allow) : a;
   }
   function without_mutating(t, f){
    if(! t[5]) return caml_call1(f, 0);
    t[5] = 0;
    try{var x = caml_call1(f, 0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = 1;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = 1;
    return x;
   }
   var
    max_table_length = Base_Int[69].call(null, Base_Array[47]),
    cst_Hashtbl_add_exn_got_key_al = "Hashtbl.add_exn got key already present",
    cst_Hashtbl_choose_exn_of_empt = "[Hashtbl.choose_exn] of empty hashtbl",
    cst_Hashtbl_choose_randomly_ex =
      "[Hashtbl.choose_randomly_exn] of empty hashtbl",
    b = [0, cst_src_hashtbl_ml, 333, 2],
    c = [0, "Hashtbl.find_exn: not found"],
    cst_Hashtbl_of_alist_exn_dupli = "Hashtbl.of_alist_exn: duplicate key",
    cst_Hashtbl_t_of_sexp_duplicat = "Hashtbl.t_of_sexp: duplicate key",
    d = [0, cst_src_hashtbl_ml, 582, 4],
    cst_keys = "keys",
    cst_Hashtbl_create_with_key_du = "Hashtbl.create_with_key: duplicate keys",
    cst_Hashtbl_merge_different_ha =
      "Hashtbl.merge: different 'hashable' values";
   function create(a, opt, hashable, param){
    var
     growth_allowed = a ? a[1] : 1,
     size = opt ? opt[1] : 0,
     b = Base_Int[16].call(null, 1, size),
     size$0 = Base_Int[15].call(null, b, max_table_length),
     size$1 = Base_Int[68].call(null, size$0);
    return [0,
            Base_Array[48].call(null, size$1, Base_Avltree[1]),
            0,
            growth_allowed,
            hashable,
            1];
   }
   function slot(t, key){
    var
     hash = caml_call1(t[4][1], key),
     a = Base_Import[93].call(null, t[1].length - 1, 1);
    return Base_Import[116].call(null, hash, a);
   }
   function add_worker(t, replace, key, data){
    var
     i = slot(t, key),
     root = caml_check_bound(t[1], i)[i + 1],
     added = [0, 0],
     a = compare_key(t),
     new_root = Base_Avltree[4].call(null, root, replace, a, added, key, data);
    if(added[1]) t[2] = Base_Import[91].call(null, t[2], 1);
    if(1 - (new_root === root ? 1 : 0))
     caml_check_bound(t[1], i)[i + 1] = new_root;
    return added[1];
   }
   function maybe_resize_table(t){
    var
     len = t[1].length - 1,
     should_grow = len < t[2] ? 1 : 0,
     b = should_grow ? t[3] : should_grow;
    if(b){
     var
      e = Base_Import[88].call(null, len, 2),
      new_array_length = Base_Int[15].call(null, e, max_table_length),
      c = len < new_array_length ? 1 : 0;
     if(c){
      var
       new_table =
         Base_Array[48].call(null, new_array_length, Base_Avltree[1]),
       old_table = t[1];
      t[1] = new_table;
      t[2] = 0;
      var
       f = function(key, data){add_worker(t, 1, key, data); return 0;},
       d = Base_Import[93].call(null, old_table.length - 1, 1),
       g = 0;
      if(d >= 0){
       var i = g;
       for(;;){
        var h = caml_check_bound(old_table, i)[i + 1];
        Base_Avltree[17].call(null, h, f);
        var j = i + 1 | 0;
        if(d === i) break;
        i = j;
       }
      }
      var a = 0;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function capacity(t){return t[1].length - 1;}
   function set(t, key, data){
    ensure_mutation_allowed(t);
    add_worker(t, 1, key, data);
    return maybe_resize_table(t);
   }
   function add(t, key, data){
    ensure_mutation_allowed(t);
    var added = add_worker(t, 0, key, data);
    return added ? (maybe_resize_table(t), 17724) : -1024851605;
   }
   function add_exn(t, key, data){
    if(17724 <= add(t, key, data)) return 0;
    var
     sexp_of_key$0 = sexp_of_key(t),
     error =
       Base_Error[19].call
        (null, 0, 0, cst_Hashtbl_add_exn_got_key_al, key, sexp_of_key$0);
    return Base_Error[31].call(null, error);
   }
   function clear(t){
    ensure_mutation_allowed(t);
    var a = Base_Import[93].call(null, t[1].length - 1, 1), b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = Base_Avltree[1];
      caml_check_bound(t[1], i)[i + 1] = c;
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    t[2] = 0;
    return 0;
   }
   function find_and_call(t, key, if_found, if_not_found){
    var a = slot(t, key), tree = caml_check_bound(t[1], a)[a + 1];
    if(typeof tree === "number") return caml_call1(if_not_found, key);
    if(0 === tree[0]){
     var b = compare_key(t);
     return Base_Avltree[8].call(null, tree, b, key, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call1(if_found, v)
            : caml_call1(if_not_found, key);
   }
   function find_and_call1(t, key, a, if_found, if_not_found){
    var b = slot(t, key), tree = caml_check_bound(t[1], b)[b + 1];
    if(typeof tree === "number") return caml_call2(if_not_found, key, a);
    if(0 === tree[0]){
     var c = compare_key(t);
     return Base_Avltree[9].call
             (null, tree, c, key, a, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call2(if_found, v, a)
            : caml_call2(if_not_found, key, a);
   }
   function find_and_call2(t, key, a, b, if_found, if_not_found){
    var c = slot(t, key), tree = caml_check_bound(t[1], c)[c + 1];
    if(typeof tree === "number") return caml_call3(if_not_found, key, a, b);
    if(0 === tree[0]){
     var d = compare_key(t);
     return Base_Avltree[10].call
             (null, tree, d, key, a, b, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call3(if_found, v, a, b)
            : caml_call3(if_not_found, key, a, b);
   }
   function findi_and_call(t, key, if_found, if_not_found){
    var a = slot(t, key), tree = caml_check_bound(t[1], a)[a + 1];
    if(typeof tree === "number") return caml_call1(if_not_found, key);
    if(0 === tree[0]){
     var b = compare_key(t);
     return Base_Avltree[11].call(null, tree, b, key, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call2(if_found, k, v)
            : caml_call1(if_not_found, key);
   }
   function findi_and_call1(t, key, a, if_found, if_not_found){
    var b = slot(t, key), tree = caml_check_bound(t[1], b)[b + 1];
    if(typeof tree === "number") return caml_call2(if_not_found, key, a);
    if(0 === tree[0]){
     var c = compare_key(t);
     return Base_Avltree[12].call
             (null, tree, c, key, a, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call3(if_found, k, v, a)
            : caml_call2(if_not_found, key, a);
   }
   function findi_and_call2(t, key, a, b, if_found, if_not_found){
    var c = slot(t, key), tree = caml_check_bound(t[1], c)[c + 1];
    if(typeof tree === "number") return caml_call3(if_not_found, key, a, b);
    if(0 === tree[0]){
     var d = compare_key(t);
     return Base_Avltree[13].call
             (null, tree, d, key, a, b, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call4(if_found, k, v, a, b)
            : caml_call3(if_not_found, key, a, b);
   }
   function if_found(v){return [0, v];}
   function if_not_found(param){return 0;}
   function find(t, key){
    return find_and_call(t, key, if_found, if_not_found);
   }
   function mem(t, key){
    var a = slot(t, key), tree = caml_check_bound(t[1], a)[a + 1];
    if(typeof tree === "number") return 0;
    if(0 === tree[0]){
     var b = compare_key(t);
     return Base_Avltree[14].call(null, tree, b, key);
    }
    var k = tree[1];
    return 0 === caml_call2(compare_key(t), k, key) ? 1 : 0;
   }
   function remove(t, key){
    ensure_mutation_allowed(t);
    var
     i = slot(t, key),
     root = caml_check_bound(t[1], i)[i + 1],
     removed = [0, 0],
     b = compare_key(t),
     new_root = Base_Avltree[15].call(null, root, removed, b, key);
    if(1 - (root === new_root ? 1 : 0))
     caml_check_bound(t[1], i)[i + 1] = new_root;
    var
     a = removed[1],
     c = a ? (t[2] = Base_Import[93].call(null, t[2], 1), 0) : a;
    return c;
   }
   function length(t){return t[2];}
   function is_empty(t){return 0 === t[2] ? 1 : 0;}
   function fold(t, init, f){
    if(0 === t[2]) return init;
    var n = t[1].length - 1, acc = [0, init], m = t[5];
    try{
     t[5] = 0;
     var a = Base_Import[93].call(null, n, 1), b = 0;
     if(a >= 0){
      var i = b;
      for(;;){
       var bucket = t[1][i + 1];
       if(typeof bucket !== "number")
        if(0 === bucket[0])
         acc[1] = Base_Avltree[16].call(null, bucket, acc[1], f);
        else{
         var key = bucket[1], data = bucket[2];
         acc[1] = caml_call3(f, key, data, acc[1]);
        }
       var c = i + 1 | 0;
       if(a === i) break;
       i = c;
      }
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = m;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = m;
    return acc[1];
   }
   function iteri(t, f){
    if(0 === t[2]) return 0;
    var n = t[1].length - 1, m = t[5];
    try{
     t[5] = 0;
     var a = Base_Import[93].call(null, n, 1), b = 0;
     if(a >= 0){
      var i = b;
      for(;;){
       var bucket = t[1][i + 1];
       if(typeof bucket !== "number")
        if(0 === bucket[0])
         Base_Avltree[17].call(null, bucket, f);
        else{var key = bucket[1], data = bucket[2]; caml_call2(f, key, data);}
       var c = i + 1 | 0;
       if(a === i) break;
       i = c;
      }
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = m;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = m;
    return 0;
   }
   function iter(t, f){
    return iteri(t, function(param, data){return caml_call1(f, data);});
   }
   function iter_keys(t, f){
    return iteri(t, function(key, param){return caml_call1(f, key);});
   }
   function choose_nonempty(table, i$1){
    var i = i$1;
    for(;;){
     var avltree = table[i + 1];
     if(! Base_Avltree[2].call(null, avltree))
      return Base_Avltree[19].call(null, avltree);
     var
      a = Base_Import[93].call(null, table.length - 1, 1),
      b = Base_Import[91].call(null, i, 1),
      i$0 = Base_Import[116].call(null, b, a);
     i = i$0;
    }
   }
   function choose_exn(t){
    if(0 === t[2])
     raise_s(Base_Sexp[10].call(null, cst_Hashtbl_choose_exn_of_empt, 0));
    return choose_nonempty(t[1], 0);
   }
   function choose(t){return is_empty(t) ? 0 : [0, choose_nonempty(t[1], 0)];}
   function choose_randomly_nonempty(random_state, t){
    var
     start_idx = caml_call2(Base_Random[19][7], random_state, t[1].length - 1);
    return choose_nonempty(t[1], start_idx);
   }
   function choose_randomly(opt, t){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    return is_empty(t) ? 0 : [0, choose_randomly_nonempty(random_state, t)];
   }
   function choose_randomly_exn(opt, t){
    var random_state = opt ? opt[1] : Base_Random[19][1];
    if(0 === t[2])
     raise_s(Base_Sexp[10].call(null, cst_Hashtbl_choose_randomly_ex, 0));
    return choose_randomly_nonempty(random_state, t);
   }
   function invariant(invariant_key, invariant_data, t){
    var a = Base_Import[93].call(null, t[1].length - 1, 1), c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var d = compare_key(t), e = caml_check_bound(t[1], i)[i + 1];
      Base_Avltree[3].call(null, e, d);
      var f = i + 1 | 0;
      if(a === i) break;
      i = f;
     }
    }
    var
     real_len =
       fold
        (t,
         0,
         function(key, data, i){
          caml_call1(invariant_key, key);
          caml_call1(invariant_data, data);
          return Base_Import[91].call(null, i, 1);
         });
    if(real_len === t[2]) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function if_found$0(v, param){return v;}
   function if_not_found$0(k, t){
    var a = [1, [0, c, [0, caml_call1(t[4][3], k), 0]]];
    throw caml_maybe_attach_backtrace([0, Base_Import[297], a], 1);
   }
   function find_exn(t, key){
    return find_and_call1(t, key, t, if_found$0, if_not_found$0);
   }
   function existsi(t, f){
    return with_return
            (function(r){
              iteri
               (t,
                function(key, data){
                 var a = caml_call2(f, key, data);
                 return a ? caml_call1(r, 1) : a;
                });
              return 0;
             });
   }
   function exists(t, f){
    return existsi(t, function(param, data){return caml_call1(f, data);});
   }
   function for_alli(t, f){
    return 1
           -
            existsi
             (t, function(key, data){return 1 - caml_call2(f, key, data);});
   }
   function for_all(t, f){
    return 1
           -
            existsi(t, function(param, data){return 1 - caml_call1(f, data);});
   }
   function counti(t, f){
    return fold
            (t,
             0,
             function(key, data, acc){
              return caml_call2(f, key, data)
                      ? Base_Import[91].call(null, acc, 1)
                      : acc;
             });
   }
   function count(t, f){
    return fold
            (t,
             0,
             function(param, data, acc){
              return caml_call1(f, data)
                      ? Base_Import[91].call(null, acc, 1)
                      : acc;
             });
   }
   function mapi(t, f){
    var new_t = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){return set(new_t, key, caml_call2(f, key, data));});
    return new_t;
   }
   function map(t, f){
    return mapi(t, function(param, data){return caml_call1(f, data);});
   }
   function copy(t){return map(t, function(a){return a;});}
   function filter_mapi(t, f){
    var new_t = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){
       var match = caml_call2(f, key, data);
       if(! match) return 0;
       var new_data = match[1];
       return set(new_t, key, new_data);
      });
    return new_t;
   }
   function filter_map(t, f){
    return filter_mapi(t, function(param, data){return caml_call1(f, data);});
   }
   function filteri(t, f){
    return filter_mapi
            (t,
             function(key, data){
              return caml_call2(f, key, data) ? [0, data] : 0;
             });
   }
   function filter(t, f){
    return filteri(t, function(param, data){return caml_call1(f, data);});
   }
   function filter_keys(t, f){
    return filteri(t, function(key, param){return caml_call1(f, key);});
   }
   function partition_mapi(t, f){
    var
     t0 = create([0, t[3]], [0, t[2]], t[4], 0),
     t1 = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){
       var match = caml_call2(f, key, data);
       if(0 === match[0]){
        var new_data = match[1];
        return set(t0, key, new_data);
       }
       var new_data$0 = match[1];
       return set(t1, key, new_data$0);
      });
    return [0, t0, t1];
   }
   function partition_map(t, f){
    return partition_mapi
            (t, function(param, data){return caml_call1(f, data);});
   }
   function partitioni_tf(t, f){
    return partition_mapi
            (t,
             function(key, data){
              return caml_call2(f, key, data) ? [0, data] : [1, data];
             });
   }
   function partition_tf(t, f){
    return partitioni_tf
            (t, function(param, data){return caml_call1(f, data);});
   }
   function find_or_add(t, id, default$){
    return find_and_call
            (t,
             id,
             function(data){return data;},
             function(key){
              var default$0 = caml_call1(default$, 0);
              set(t, key, default$0);
              return default$0;
             });
   }
   function findi_or_add(t, id, default$){
    return find_and_call
            (t,
             id,
             function(data){return data;},
             function(key){
              var default$0 = caml_call1(default$, key);
              set(t, key, default$0);
              return default$0;
             });
   }
   function find_and_remove(t, key){
    var result = find_and_call(t, key, if_found, if_not_found);
    if(Base_Option[53].call(null, result)) remove(t, key);
    return result;
   }
   function change(t, key, f){
    var match = caml_call1(f, find_and_call(t, key, if_found, if_not_found));
    if(! match) return remove(t, key);
    var data = match[1];
    return set(t, key, data);
   }
   function update_and_return(t, key, f){
    var data = caml_call1(f, find_and_call(t, key, if_found, if_not_found));
    set(t, key, data);
    return data;
   }
   function update(t, id, f){update_and_return(t, id, f); return 0;}
   function incr_by(remove_if_zero, t, key, by){
    if(! remove_if_zero)
     return update
             (t,
              key,
              function(param){
               if(! param) return by;
               var i = param[1];
               return Base_Import[91].call(null, by, i);
              });
    var
     opt = find_and_call(t, key, if_found, if_not_found),
     a = Base_Option[30].call(null, opt, 0),
     n = Base_Import[91].call(null, by, a),
     match = 0 === n ? 0 : [0, n];
    if(! match) return remove(t, key);
    var data = match[1];
    return set(t, key, data);
   }
   function incr(a, opt, t, key){
    var by = a ? a[1] : 1, remove_if_zero = opt ? opt[1] : 0;
    return incr_by(remove_if_zero, t, key, by);
   }
   function decr(a, opt, t, key){
    var by = a ? a[1] : 1, remove_if_zero = opt ? opt[1] : 0;
    return incr_by(remove_if_zero, t, key, Base_Import[113].call(null, by));
   }
   function add_multi(t, key, data){
    return update
            (t,
             key,
             function(param){
              if(! param) return [0, data, 0];
              var l = param[1];
              return [0, data, l];
             });
   }
   function remove_multi(t, key){
    var match = find_and_call(t, key, if_found, if_not_found);
    if(! match) return 0;
    var a = match[1];
    if(a && a[2]){var tl = a[2]; return set(t, key, tl);}
    return remove(t, key);
   }
   function find_multi(t, key){
    var match = find_and_call(t, key, if_found, if_not_found);
    if(! match) return 0;
    var l = match[1];
    return l;
   }
   function create_mapped
   (growth_allowed, size, hashable, get_key, get_data, rows){
    if(size)
     var s = size[1], size$0 = s;
    else
     var size$0 = Base_List[45].call(null, rows);
    var
     res = create(growth_allowed, [0, size$0], hashable, 0),
     dupes = [0, 0];
    Base_List[19].call
     (null,
      rows,
      function(r){
       var key = caml_call1(get_key, r), data = caml_call1(get_data, r);
       return mem(res, key)
               ? (dupes[1] = [0, key, dupes[1]], 0)
               : set(res, key, data);
      });
    var keys = dupes[1];
    return keys
            ? [0, 175765640, Base_List[126].call(null, keys, hashable[2])]
            : [0, 17724, res];
   }
   function of_alist(growth_allowed, size, hashable, lst){
    var
     match =
       create_mapped
        (growth_allowed,
         size,
         hashable,
         Base_Import[125],
         Base_Import[127],
         lst),
     variant = match[1];
    if(175765640 <= variant){
     var k = match[2];
     return [0, -1048878709, Base_List[88].call(null, k)];
    }
    var t = match[2];
    return [0, 17724, t];
   }
   function of_alist_report_all_dups(growth_allowed, size, hashable, lst){
    return create_mapped
            (growth_allowed,
             size,
             hashable,
             Base_Import[125],
             Base_Import[127],
             lst);
   }
   function of_alist_or_error(growth_allowed, size, hashable, lst){
    var
     match = of_alist(growth_allowed, size, hashable, lst),
     variant = match[1];
    if(17724 <= variant){var v = match[2]; return [0, v];}
    var key = match[2], sexp_of_key = hashable[3];
    return Base_Or_error[38].call
            (null, 0, 0, cst_Hashtbl_of_alist_exn_dupli, key, sexp_of_key);
   }
   function of_alist_exn(growth_allowed, size, hashable, lst){
    var match = of_alist_or_error(growth_allowed, size, hashable, lst);
    if(0 === match[0]){var v = match[1]; return v;}
    var e = match[1];
    return Base_Error[31].call(null, e);
   }
   function of_alist_multi(growth_allowed, size$0, hashable, rows){
    var get_data = Base_Import[127], get_key = Base_Import[125];
    if(size$0)
     var s = size$0[1], size = s;
    else
     var size = Base_List[45].call(null, rows);
    var res = create(growth_allowed, [0, size], hashable, 0);
    Base_List[19].call
     (null,
      rows,
      function(r){
       var key = get_key(r), data = get_data(r);
       return add_multi(res, key, data);
      });
    return res;
   }
   function to_alist(t){
    return fold
            (t,
             0,
             function(key, data, list){return [0, [0, key, data], list];});
   }
   function sexp_of_t(sexp_of_key, sexp_of_data, t){
    var
     a = to_alist(t),
     b =
       Base_List[83].call
        (null,
         a,
         function(a, param){
          var k2 = param[1], k1 = a[1];
          return caml_call2(t[4][2], k1, k2);
         }),
     c = Base_Import[147];
    return Base_Import[149].call
            (null, function(a){return c(sexp_of_key, sexp_of_data, a);}, b);
   }
   function t_of_sexp(hashable, k_of_sexp, d_of_sexp, sexp){
    var
     a = Base_Import[171],
     alist =
       Base_Import[173].call
        (null, function(b){return a(k_of_sexp, d_of_sexp, b);}, sexp),
     match =
       of_alist(0, [0, Base_List[45].call(null, alist)], hashable, alist),
     variant = match[1];
    if(17724 <= variant){var v = match[2]; return v;}
    var k = match[2];
    function b(a){return a;}
    function c(a){return a;}
    var
     e = Base_Import[171],
     alist_sexps =
       Base_Import[173].call(null, function(a){return e(c, b, a);}, sexp),
     found_first_k = [0, 0];
    Base_List[67].call
     (null,
      alist,
      alist_sexps,
      function(c, param){
       var
        k2_sexp = param[1],
        k2 = c[1],
        a = 0 === caml_call2(hashable[2], k, k2) ? 1 : 0;
       if(a){
        if(found_first_k[1])
         return Base_Import[156].call
                 (null, cst_Hashtbl_t_of_sexp_duplicat, k2_sexp);
        found_first_k[1] = 1;
        var b = 0;
       }
       else
        var b = a;
       return b;
      });
    throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
   }
   function t_sexp_grammar(k_grammar, v_grammar){
    var a = caml_call2(Base_List[137][3], k_grammar, v_grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function keys(t){
    return fold(t, 0, function(key, param, acc){return [0, key, acc];});
   }
   function data(t){
    return fold(t, 0, function(param, data, list){return [0, data, list];});
   }
   function group
   (growth_allowed, size, hashable, get_key, get_data, combine, rows){
    var groups = create(growth_allowed, size, hashable, 0);
    Base_List[19].call
     (null,
      rows,
      function(row){
       var
        key = caml_call1(get_key, row),
        data = caml_call1(get_data, row),
        match = find_and_call(groups, key, if_found, if_not_found);
       if(match)
        var old = match[1], data$0 = caml_call2(combine, old, data);
       else
        var data$0 = data;
       return set(groups, key, data$0);
      });
    return groups;
   }
   function create_with_key(growth_allowed, size, hashable, get_key, rows){
    return create_mapped
            (growth_allowed,
             size,
             hashable,
             get_key,
             function(a){return a;},
             rows);
   }
   function create_with_key_or_error
   (growth_allowed, size, hashable, get_key, rows){
    var
     match = create_with_key(growth_allowed, size, hashable, get_key, rows),
     variant = match[1];
    if(175765640 <= variant){
     var
      keys = match[2],
      sexp_of_key = hashable[3],
      a =
        [0, [0, cst_keys, Base_Import[149].call(null, sexp_of_key, keys)], 0],
      b = Base_Sexp[10].call(null, cst_Hashtbl_create_with_key_du, a);
     return Base_Or_error[39].call(null, b);
    }
    var t = match[2];
    return [0, t];
   }
   function create_with_key_exn(growth_allowed, size, hashable, get_key, rows){
    var
     a =
       create_with_key_or_error(growth_allowed, size, hashable, get_key, rows);
    return Base_Or_error[34].call(null, a);
   }
   function maybe_set(t, key, f, d){
    var match = caml_call2(f, key, d);
    if(! match) return 0;
    var v = match[1];
    return set(t, key, v);
   }
   function merge(t_left, t_right, f){
    if(1 - Base_Hashable[1].call(null, t_left[4], t_right[4]))
     Base_Import[126].call(null, cst_Hashtbl_merge_different_ha);
    var new_t = create([0, t_left[3]], [0, t_left[2]], t_left[4], 0);
    without_mutating
     (t_left,
      function(param){
       return without_mutating
               (t_right,
                function(param){
                 iteri
                  (t_left,
                   function(key, left){
                    var
                     match = find_and_call(t_right, key, if_found, if_not_found);
                    if(! match)
                     return maybe_set(new_t, key, f, [0, 847852583, left]);
                    var right = match[1];
                    return maybe_set
                            (new_t, key, f, [0, 737457313, [0, left, right]]);
                   });
                 return iteri
                         (t_right,
                          function(key, right){
                           return find_and_call(t_left, key, if_found, if_not_found)
                                   ? 0
                                   : maybe_set(new_t, key, f, [0, -57574468, right]);
                          });
                });
      });
    return new_t;
   }
   function merge_into(src, dst, f){
    return iteri
            (src,
             function(key, data){
              var
               dst_data$0 = find_and_call(dst, key, if_found, if_not_found),
               action =
                 without_mutating
                  (dst,
                   function(param){
                    return caml_call3(f, key, data, dst_data$0);
                   });
              if(! action) return remove(dst, key);
              var data$0 = action[1];
              if(! dst_data$0) return set(dst, key, data$0);
              var
               dst_data = dst_data$0[1],
               a = 1 - (dst_data === data$0 ? 1 : 0);
              return a ? set(dst, key, data$0) : a;
             });
   }
   function filteri_inplace(t, f){
    var
     to_remove =
       fold
        (t,
         0,
         function(key, data, ac){
          return caml_call2(f, key, data) ? ac : [0, key, ac];
         });
    return Base_List[19].call
            (null, to_remove, function(key){return remove(t, key);});
   }
   function filter_inplace(t, f){
    return filteri_inplace
            (t, function(param, data){return caml_call1(f, data);});
   }
   function filter_keys_inplace(t, f){
    return filteri_inplace
            (t, function(key, param){return caml_call1(f, key);});
   }
   function filter_mapi_inplace(t, f){
    var
     map_results =
       fold
        (t,
         0,
         function(key, data, ac){
          return [0, [0, key, caml_call2(f, key, data)], ac];
         });
    return Base_List[19].call
            (null,
             map_results,
             function(param){
              var result = param[2], key = param[1];
              if(! result) return remove(t, key);
              var data = result[1];
              return set(t, key, data);
             });
   }
   function filter_map_inplace(t, f){
    return filter_mapi_inplace
            (t, function(param, data){return caml_call1(f, data);});
   }
   function mapi_inplace(t, f){
    ensure_mutation_allowed(t);
    return without_mutating
            (t,
             function(param){
              var a = Base_Avltree[18];
              return Base_Array[20].call
                      (null, t[1], function(b){return a(b, f);});
             });
   }
   function map_inplace(t, f){
    return mapi_inplace(t, function(param, data){return caml_call1(f, data);});
   }
   function similar(equal, t$0, t){
    var a = t$0[2] === t[2] ? 1 : 0;
    return a
            ? with_return
              (function(r){
                without_mutating
                 (t,
                  function(param){
                   return iteri
                           (t$0,
                            function(key, data){
                             var match = find_and_call(t, key, if_found, if_not_found);
                             if(! match) return caml_call1(r, 0);
                             var
                              data$0 = match[1],
                              a = 1 - caml_call2(equal, data, data$0);
                             return a ? caml_call1(r, 0) : a;
                            });
                  });
                return 1;
               })
            : a;
   }
   function Creators(Key){
    var hashable = Key[1];
    function create$0(growth_allowed, size, param){
     return create(growth_allowed, size, hashable, 0);
    }
    function of_alist$0(growth_allowed, size, l){
     return of_alist(growth_allowed, size, hashable, l);
    }
    function of_alist_report_all_dups$0(growth_allowed, size, l){
     return of_alist_report_all_dups(growth_allowed, size, hashable, l);
    }
    function of_alist_or_error$0(growth_allowed, size, l){
     return of_alist_or_error(growth_allowed, size, hashable, l);
    }
    function of_alist_exn$0(growth_allowed, size, l){
     return of_alist_exn(growth_allowed, size, hashable, l);
    }
    function t_of_sexp$0(k_of_sexp, d_of_sexp, sexp){
     return t_of_sexp(hashable, k_of_sexp, d_of_sexp, sexp);
    }
    function of_alist_multi$0(growth_allowed, size, l){
     return of_alist_multi(growth_allowed, size, hashable, l);
    }
    function create_mapped$0(growth_allowed, size, get_key, get_data, l){
     return create_mapped
             (growth_allowed, size, hashable, get_key, get_data, l);
    }
    function create_with_key$0(growth_allowed, size, get_key, l){
     return create_with_key(growth_allowed, size, hashable, get_key, l);
    }
    function create_with_key_or_error$0(growth_allowed, size, get_key, l){
     return create_with_key_or_error
             (growth_allowed, size, hashable, get_key, l);
    }
    function create_with_key_exn$0(growth_allowed, size, get_key, l){
     return create_with_key_exn(growth_allowed, size, hashable, get_key, l);
    }
    function group$0(growth_allowed, size, get_key, get_data, combine, l){
     return group
             (growth_allowed, size, hashable, get_key, get_data, combine, l);
    }
    return [0,
            t_of_sexp$0,
            create$0,
            of_alist$0,
            of_alist_report_all_dups$0,
            of_alist_or_error$0,
            of_alist_exn$0,
            of_alist_multi$0,
            create_mapped$0,
            create_with_key$0,
            create_with_key_or_error$0,
            create_with_key_exn$0,
            group$0];
   }
   var
    hashable = Base_Hashable[2],
    a = Creators([0, hashable]),
    t_of_sexp$0 = a[1],
    create$0 = a[2],
    of_alist$0 = a[3],
    of_alist_report_all_dups$0 = a[4],
    of_alist_or_error$0 = a[5],
    of_alist_exn$0 = a[6],
    of_alist_multi$0 = a[7],
    create_mapped$0 = a[8],
    create_with_key$0 = a[9],
    create_with_key_or_error$0 = a[10],
    create_with_key_exn$0 = a[11],
    group$0 = a[12];
   function hashable$0(t){return t[4];}
   var Private = [0, hashable$0];
   function create$1(growth_allowed, size, m){
    return create(growth_allowed, size, Base_Hashable[3].call(null, m), 0);
   }
   function of_alist$1(growth_allowed, size, m, l){
    return of_alist(growth_allowed, size, Base_Hashable[3].call(null, m), l);
   }
   function of_alist_report_all_dups$1(growth_allowed, size, m, l){
    return of_alist_report_all_dups
            (growth_allowed, size, Base_Hashable[3].call(null, m), l);
   }
   function of_alist_or_error$1(growth_allowed, size, m, l){
    return of_alist_or_error
            (growth_allowed, size, Base_Hashable[3].call(null, m), l);
   }
   function of_alist_exn$1(growth_allowed, size, m, l){
    return of_alist_exn
            (growth_allowed, size, Base_Hashable[3].call(null, m), l);
   }
   function of_alist_multi$1(growth_allowed, size, m, l){
    return of_alist_multi
            (growth_allowed, size, Base_Hashable[3].call(null, m), l);
   }
   function create_mapped$1(growth_allowed, size, m, get_key, get_data, l){
    return create_mapped
            (growth_allowed,
             size,
             Base_Hashable[3].call(null, m),
             get_key,
             get_data,
             l);
   }
   function create_with_key$1(growth_allowed, size, m, get_key, l){
    return create_with_key
            (growth_allowed, size, Base_Hashable[3].call(null, m), get_key, l);
   }
   function create_with_key_or_error$1(growth_allowed, size, m, get_key, l){
    return create_with_key_or_error
            (growth_allowed, size, Base_Hashable[3].call(null, m), get_key, l);
   }
   function create_with_key_exn$1(growth_allowed, size, m, get_key, l){
    return create_with_key_exn
            (growth_allowed, size, Base_Hashable[3].call(null, m), get_key, l);
   }
   function group$1(growth_allowed, size, m, get_key, get_data, combine, l){
    return group
            (growth_allowed,
             size,
             Base_Hashable[3].call(null, m),
             get_key,
             get_data,
             combine,
             l);
   }
   function hashable_s(t){return Base_Hashable[4].call(null, t[4]);}
   function M(K){return [0];}
   function sexp_of_m_t(K, sexp_of_v, t){
    return sexp_of_t(K[1], sexp_of_v, t);
   }
   function m_t_of_sexp(K, v_of_sexp, sexp){
    var a = K[1];
    return t_of_sexp
            (Base_Hashable[3].call(null, [0, K[2], K[3], K[4]]),
             a,
             v_of_sexp,
             sexp);
   }
   function m_t_sexp_grammar(K, v_grammar){
    return t_sexp_grammar(K[1], v_grammar);
   }
   function equal_m_t(param, equal_v, t1, t2){return similar(equal_v, t1, t2);
   }
   var
    Base_Hashtbl =
      [0,
       hash,
       hash_param,
       sexp_of_t,
       create$1,
       of_alist$1,
       of_alist_report_all_dups$1,
       of_alist_or_error$1,
       of_alist_exn$1,
       of_alist_multi$1,
       create_mapped$1,
       create_with_key$1,
       create_with_key_or_error$1,
       create_with_key_exn$1,
       group$1,
       sexp_of_key,
       clear,
       copy,
       fold,
       iter_keys,
       iter,
       iteri,
       existsi,
       exists,
       for_alli,
       for_all,
       counti,
       count,
       length,
       capacity,
       is_empty,
       mem,
       remove,
       choose,
       choose_exn,
       choose_randomly,
       choose_randomly_exn,
       set,
       add,
       add_exn,
       change,
       update,
       update_and_return,
       map,
       mapi,
       filter_map,
       filter_mapi,
       filter_keys,
       filter,
       filteri,
       partition_map,
       partition_mapi,
       partition_tf,
       partitioni_tf,
       find_or_add,
       findi_or_add,
       find,
       find_exn,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       find_and_remove,
       merge,
       merge_into,
       keys,
       data,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       similar,
       similar,
       to_alist,
       incr,
       decr,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       invariant,
       Creators,
       [0,
        t_of_sexp$0,
        sexp_of_t,
        t_sexp_grammar,
        hashable,
        invariant,
        create$0,
        of_alist$0,
        of_alist_report_all_dups$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        create_mapped$0,
        create_with_key$0,
        create_with_key_or_error$0,
        create_with_key_exn$0,
        group$0,
        sexp_of_key,
        clear,
        copy,
        fold,
        iter_keys,
        iter,
        iteri,
        existsi,
        exists,
        for_alli,
        for_all,
        counti,
        count,
        length,
        capacity,
        is_empty,
        mem,
        remove,
        choose,
        choose_exn,
        choose_randomly,
        choose_randomly_exn,
        set,
        add,
        add_exn,
        change,
        update,
        update_and_return,
        map,
        mapi,
        filter_map,
        filter_mapi,
        filter_keys,
        filter,
        filteri,
        partition_map,
        partition_mapi,
        partition_tf,
        partitioni_tf,
        find_or_add,
        findi_or_add,
        find,
        find_exn,
        find_and_call,
        find_and_call1,
        find_and_call2,
        findi_and_call,
        findi_and_call1,
        findi_and_call2,
        find_and_remove,
        merge,
        merge_into,
        keys,
        data,
        filter_keys_inplace,
        filter_inplace,
        filteri_inplace,
        map_inplace,
        mapi_inplace,
        filter_map_inplace,
        filter_mapi_inplace,
        similar,
        similar,
        to_alist,
        incr,
        decr,
        add_multi,
        remove_multi,
        find_multi],
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       equal_m_t,
       Private];
   runtime.caml_register_global(26, Base_Hashtbl, "Base__Hashtbl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_set_intf
//# shape: Base__Hash_set_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hash_set_intf = [0];
   runtime.caml_register_global(0, Base_Hash_set_intf, "Base__Hash_set_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_set
//# unitInfo: Requires: Base__Array, Base__Container, Base__Hash_set_intf, Base__Hashable, Base__Hashtbl, Base__Import, Base__List, Base__Or_error, Base__With_return, Sexplib0__Sexp_grammar
//# shape: Base__Hash_set:[F(2),F(3),F(4),F(1)*,F(1)*,F(2),F(3),F(3),F(4),F(2),F(2),F(2),F(3),F(2),F(2),F(1),F(1),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(1)*,N,F(1)*,F(1)*,F(2),F(2),F(1)*,F(3),[F(1)*]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_List = global_data.Base__List,
    Base_Hashable = global_data.Base__Hashable,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Base_Array = global_data.Base__Array,
    Base_Container = global_data.Base__Container,
    Base_Or_error = global_data.Base__Or_error,
    Base_With_return = global_data.Base__With_return,
    hashable_s = Base_Hashtbl[84],
    hashable = Base_Hashtbl[93][1],
    poly_hashable = Base_Hashtbl[87][4],
    with_return = Base_With_return[1],
    clear = Base_Hashtbl[16],
    length = Base_Hashtbl[28],
    mem = Base_Hashtbl[31],
    cst_element_already_exists = "element already exists",
    b = [0, 0];
   function is_empty(t){return Base_Hashtbl[30].call(null, t);}
   function find_map(t, f){
    return with_return
            (function(r){
              Base_Hashtbl[19].call
               (null,
                t,
                function(elt){
                 var o = caml_call1(f, elt);
                 return o ? caml_call1(r, o) : 0;
                });
              return 0;
             });
   }
   function find(t, f){
    return find_map(t, function(a){return caml_call1(f, a) ? [0, a] : 0;});
   }
   function add(t, k){return Base_Hashtbl[37].call(null, t, k, 0);}
   function strict_add(t, k){
    return mem(t, k)
            ? Base_Or_error[40].call(null, cst_element_already_exists)
            : (Base_Hashtbl[37].call(null, t, k, 0), b);
   }
   function strict_add_exn(t, k){
    var a = strict_add(t, k);
    return Base_Or_error[34].call(null, a);
   }
   var
    remove = Base_Hashtbl[32],
    c = [0, 0],
    cst_element_not_in_set = "element not in set";
   function strict_remove(t, k){
    if(mem(t, k)){remove(t, k); return c;}
    var a = Base_Hashtbl[15].call(null, t);
    return Base_Or_error[38].call(null, 0, 0, cst_element_not_in_set, k, a);
   }
   function strict_remove_exn(t, k){
    var a = strict_remove(t, k);
    return Base_Or_error[34].call(null, a);
   }
   function fold(t, init, f){
    return Base_Hashtbl[18].call
            (null,
             t,
             init,
             function(key, param, acc){return caml_call2(f, acc, key);});
   }
   function iter(t, f){return Base_Hashtbl[19].call(null, t, f);}
   function count(t, f){return Base_Container[2].call(null, fold, t, f);}
   function sum(m, t, f){return Base_Container[7].call(null, fold, m, t, f);}
   function min_elt(t, compare){
    return Base_Container[3].call(null, fold, t, compare);
   }
   function max_elt(t, compare){
    return Base_Container[4].call(null, fold, t, compare);
   }
   function fold_result(t, init, f){
    return Base_Container[8].call(null, fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return Base_Container[9].call(null, fold, init, f, finish, t);
   }
   var
    to_list = Base_Hashtbl[67],
    d = [0, 0],
    cst_Hash_set_t_of_sexp_require = "Hash_set.t_of_sexp requires a list",
    cst_Hash_set_t_of_sexp_got_a_d =
      "Hash_set.t_of_sexp got a duplicate element";
   function sexp_of_t(sexp_of_e, t){
    var
     a = to_list(t),
     b = hashable(t)[2],
     c = Base_List[83].call(null, a, b);
    return Base_Import[149].call(null, sexp_of_e, c);
   }
   function to_array(t){
    var len = length(t), index = [0, Base_Import[93].call(null, len, 1)];
    return fold
            (t,
             [0],
             function(acc, key){
              if(0 === acc.length - 1)
               return Base_Array[48].call(null, len, key);
              index[1] = Base_Import[93].call(null, index[1], 1);
              var a = index[1];
              runtime.caml_check_bound(acc, a)[a + 1] = key;
              return acc;
             });
   }
   function exists(t, f){
    return Base_Hashtbl[22].call
            (null, t, function(key, param){return caml_call1(f, key);});
   }
   function for_all(t, f){
    return 1
           -
            Base_Hashtbl[22].call
             (null, t, function(key, param){return 1 - caml_call1(f, key);});
   }
   function equal(t1, t2){
    return Base_Hashtbl[76].call(null, function(a, param){return 1;}, t1, t2);
   }
   function copy(t){return Base_Hashtbl[17].call(null, t);}
   function filter(t, f){
    return Base_Hashtbl[49].call
            (null, t, function(key, param){return caml_call1(f, key);});
   }
   function union(t1, t2){
    return Base_Hashtbl[65].call(null, t1, t2, function(a, param){return d;});
   }
   function diff(t1, t2){
    return filter
            (t1,
             function(key){return 1 - Base_Hashtbl[31].call(null, t2, key);});
   }
   function inter(t1, t2){
    var a = length(t2);
    if(a < length(t1))
     var larger = t1, smaller = t2;
    else
     var larger = t2, smaller = t1;
    return Base_Hashtbl[49].call
            (null,
             smaller,
             function(key, param){
              return Base_Hashtbl[31].call(null, larger, key);
             });
   }
   function filter_inplace(t, f){
    var
     to_remove =
       fold(t, 0, function(ac, x){return caml_call1(f, x) ? ac : [0, x, ac];});
    return Base_List[19].call
            (null, to_remove, function(x){return remove(t, x);});
   }
   function of_hashtbl_keys(hashtbl){
    return Base_Hashtbl[43].call(null, hashtbl, function(a){return 0;});
   }
   function to_hashtbl(t, f){
    return Base_Hashtbl[44].call
            (null, t, function(key, param){return caml_call1(f, key);});
   }
   function create(growth_allowed, size, m){
    return Base_Hashtbl[4].call(null, growth_allowed, size, m);
   }
   function of_list(growth_allowed, size, m, l){
    if(size)
     var x = size[1], size$0 = x;
    else
     var size$0 = Base_List[45].call(null, l);
    var t = Base_Hashtbl[4].call(null, growth_allowed, [0, size$0], m);
    Base_List[19].call(null, l, function(k){return add(t, k);});
    return t;
   }
   function t_of_sexp(m, e_of_sexp, sexp){
    if(0 === sexp[0])
     return Base_Import[156].call(null, cst_Hash_set_t_of_sexp_require, sexp);
    var list = sexp[1], t = create(0, [0, Base_List[45].call(null, list)], m);
    Base_List[19].call
     (null,
      list,
      function(sexp){
       var e = caml_call1(e_of_sexp, sexp);
       return 0 === strict_add(t, e)[0]
               ? 0
               : Base_Import
                  [156].call
                 (null, cst_Hash_set_t_of_sexp_got_a_d, sexp);
      });
    return t;
   }
   function Creators(Elt){
    function create$0(growth_allowed, size, param){
     return create(growth_allowed, size, Base_Hashable[4].call(null, Elt[1]));
    }
    function of_list$0(growth_allowed, size, l){
     return of_list
             (growth_allowed, size, Base_Hashable[4].call(null, Elt[1]), l);
    }
    function t_of_sexp$0(e_of_sexp, sexp){
     return t_of_sexp(Base_Hashable[4].call(null, Elt[1]), e_of_sexp, sexp);
    }
    return [0, t_of_sexp$0, create$0, of_list$0];
   }
   var
    a = Creators([0, poly_hashable]),
    t_of_sexp$0 = a[1],
    create$0 = a[2],
    of_list$0 = a[3];
   function t_sexp_grammar(grammar){
    var a = Base_List[7].call(null, grammar);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function M(Elt){return [0];}
   function sexp_of_m_t(Elt, t){return sexp_of_t(Elt[1], t);}
   function m_t_of_sexp(Elt, sexp){
    return t_of_sexp([0, Elt[2], Elt[3], Elt[4]], Elt[1], sexp);
   }
   function m_t_sexp_grammar(Elt){
    var a = Base_Import[194].call(null, Elt[1]);
    return Sexplib0_Sexp_grammar[1].call(null, a);
   }
   function equal_m_t(param, t1, t2){return equal(t1, t2);}
   var
    hashable$0 = Base_Hashtbl[93][1],
    Private = [0, hashable$0],
    Base_Hash_set =
      [0,
       sexp_of_t,
       create,
       of_list,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       mem,
       copy,
       add,
       strict_add,
       strict_add_exn,
       remove,
       strict_remove,
       strict_remove_exn,
       clear,
       equal,
       filter,
       filter_inplace,
       inter,
       union,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       hashable_s,
       [0,
        t_of_sexp$0,
        sexp_of_t,
        t_sexp_grammar,
        create$0,
        of_list$0,
        length,
        is_empty,
        iter,
        fold,
        fold_result,
        fold_until,
        exists,
        for_all,
        count,
        sum,
        find,
        find_map,
        to_list,
        to_array,
        min_elt,
        max_elt,
        mem,
        copy,
        add,
        strict_add,
        strict_add_exn,
        remove,
        strict_remove,
        strict_remove_exn,
        clear,
        equal,
        filter,
        filter_inplace,
        inter,
        union,
        diff,
        of_hashtbl_keys,
        to_hashtbl],
       Creators,
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       equal_m_t,
       Private];
   runtime.caml_register_global(16, Base_Hash_set, "Base__Hash_set");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Float
//# unitInfo: Requires: Base__Bytes0, Base__Char, Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int, Base__Int63, Base__Int64, Base__Int_string_conversions, Base__Or_error, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String, Base__Word_size, Sexplib0__Sexp_conv_error, Stdlib__Int64
//# shape: Base__Float:[F(1)*,N,F(1)*,F(1)*,N,F(1),F(1),F(1),F(1),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,N,F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*,F(2)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1),F(1)*,F(2)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(2),F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,N,N,N,F(2),F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2)*,F(2)*,F(1)*,N,F(1)*,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(1)*,N,N,F(1),F(5),F(1),F(8),F(2),F(1)*,F(2)*,F(1)*,N,F(1)*,N,F(1),F(1)*,F(3),F(3),F(1)*,F(1)*,F(1)*,N,[F(1)*,F(3),F(1),F(1)*,N,N,F(1),F(1),F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_out_of_range_0 = " out of range [0, ",
    cst_s_1e = "%s%.1e",
    cst_is_too_large = ") is too large",
    cst_is_too_small_or_NaN = ") is too small or NaN",
    cst$5 = ".",
    cst_Float_int63_round_down_exn = "Float.int63_round_down_exn: argument (",
    cst_Float_int63_round_nearest_ =
      "Float.int63_round_nearest_portable_alloc_exn: argument (",
    cst_Float_int63_round_up_exn_a = "Float.int63_round_up_exn: argument (",
    cst_Float_iround_down_exn_argu = "Float.iround_down_exn: argument (",
    cst_Float_iround_nearest_exn_a = "Float.iround_nearest_exn: argument (",
    cst_Float_iround_nearest_exn_a$0 =
      "Float.iround_nearest_exn: argument (%f) is too large",
    cst_Float_iround_up_exn_argume = "Float.iround_up_exn: argument (",
    cst_Infinite = "Infinite",
    cst_Nan = "Nan",
    cst_Normal = "Normal",
    cst_Subnormal = "Subnormal",
    cst_Zero = "Zero",
    cst_infinite = "infinite",
    cst_nan$1 = "nan",
    cst_normal = "normal",
    cst_src_float_ml = "src/float.ml",
    cst_subnormal = "subnormal",
    cst_zero = "zero",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_float_compare = runtime.caml_float_compare,
    caml_format_float = runtime.caml_format_float,
    caml_int64_bits_of_float = runtime.caml_int64_bits_of_float,
    caml_int64_or = runtime.caml_int64_or,
    caml_int_compare = runtime.caml_int_compare,
    caml_log10_float = runtime.caml_log10_float,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$2 = cst$4,
    cst$1 = "-",
    cst$0 = cst$5,
    cst = cst$5,
    all = [0, 0, [0, 1, [0, 2, [0, 3, [0, 4, 0]]]]],
    error_source_007 = "float.ml.Class.t",
    t_sexp_grammar$0 =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Infinite, 0]],
         [0,
          [1, [0, cst_Nan, 0]],
          [0,
           [1, [0, cst_Normal, 0]],
           [0, [1, [0, cst_Subnormal, 0]], [0, [1, [0, cst_Zero, 0]], 0]]]]]]],
    module_name = "Base.Float",
    Base_Printf = global_data.Base__Printf,
    Base_Or_error = global_data.Base__Or_error,
    Base_Int = global_data.Base__Int,
    Base_Int63 = global_data.Base__Int63,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Int64 = global_data.Base__Int64,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_String = global_data.Base__String,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Char = global_data.Base__Char,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Word_size = global_data.Base__Word_size,
    Base_Comparable = global_data.Base__Comparable,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    round_up = Base_Float0[1],
    round_down = Base_Float0[2],
    mod_float = Base_Float0[3],
    modf = Base_Float0[4],
    float_of_string = Base_Float0[5],
    float_of_string_opt = Base_Float0[6],
    nan = Base_Float0[7],
    max_value = Base_Float0[8],
    neg_infinity = Base_Float0[9],
    max_finite_value = Base_Float0[10],
    epsilon_float = Base_Float0[11],
    classify_float = Base_Float0[12],
    abs_float = Base_Float0[13],
    is_integer = Base_Float0[14],
    symbol = Base_Float0[15],
    symbol$0 = Base_Float0[16],
    frexp = Base_Float0[17],
    ldexp = Base_Float0[18],
    is_nan = Base_Float0[19],
    to_int64_preserve_order = Base_Float0[20],
    to_int64_preserve_order_exn = Base_Float0[21],
    of_int64_preserve_order = Base_Float0[22],
    one_ulp = Base_Float0[23],
    upper_bound_for_int = Base_Float0[24],
    lower_bound_for_int = Base_Float0[26],
    clamp_unchecked = Base_Float0[28],
    box = Base_Float0[29],
    raise_s = Base_Error[32],
    hash_fold_t = Base_Import[209],
    func = Base_Import[223];
   function hash(x){return caml_call1(func, x);}
   var
    globalize = Base_Import[283],
    t_of_sexp = Base_Import[164],
    sexp_of_t = Base_Import[140],
    t_sexp_grammar = Base_Import[186],
    hashable = [0, hash, caml_float_compare, sexp_of_t],
    compare = caml_float_compare,
    include = Base_Comparator[7].call(null, [0, compare, sexp_of_t]),
    comparator = include[1],
    a = [0, [11, "Float.of_string ", [2, 0, 0]], "Float.of_string %s"];
   function invariant(param){return 0;}
   function to_float(x){return x;}
   function of_float(x){return x;}
   function of_string(s){
    try{var b = float_of_string(s); return b;}
    catch(exn){return caml_call2(Base_Printf[7].call(null, a), s, 0);}
   }
   function to_string(x){
    var
     y = caml_format_float("%.15g", x),
     y$0 = float_of_string(y) === x ? y : caml_format_float("%.17g", x),
     l = runtime.caml_ml_string_length(y$0),
     i = 0;
    for(;;){
     if(l <= i) return Base_Import[112].call(null, y$0, cst);
     var match = runtime.caml_string_get(y$0, i);
     a:
     {
      if(48 <= match){if(58 <= match) break a;} else if(45 !== match) break a;
      var i$0 = Base_Import[91].call(null, i, 1);
      i = i$0;
      continue;
     }
     return y$0;
    }
   }
   var
    min_positive_subnormal_value = symbol(2., -1074.),
    min_positive_normal_value = symbol(2., -1022.),
    zero = 0.,
    of_int = Base_Int[4],
    to_int = Base_Int[3];
   function of_int63(i){return Base_Int63[3].call(null, i);}
   var
    of_int64 = runtime.caml_int64_to_float,
    to_int64 = runtime.caml_int64_of_float,
    iround_lbound = lower_bound_for_int(Base_Int[64]),
    iround_ubound = upper_bound_for_int(Base_Int[64]),
    b =
      [0,
       [11,
        cst_Float_iround_up_exn_argume,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.iround_up_exn: argument (%f) is too large"],
    c =
      [0,
       [11,
        cst_Float_iround_up_exn_argume,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_up_exn: argument (%f) is too small or NaN"],
    d =
      [0,
       [11,
        cst_Float_iround_down_exn_argu,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.iround_down_exn: argument (%f) is too large"],
    e =
      [0,
       [11,
        cst_Float_iround_down_exn_argu,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_down_exn: argument (%f) is too small or NaN"],
    f =
      [0,
       [11,
        "Float.iround_towards_zero_exn: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Float.iround_towards_zero_exn: argument (%f) is out of range or NaN"];
   function iround_up(t){
    if(! (0. < t))
     return iround_lbound <= t ? [0, Base_Int[63].call(null, t)] : 0;
    var t$0 = round_up(t);
    return t$0 <= iround_ubound ? [0, Base_Int[63].call(null, t$0)] : 0;
   }
   function iround_up_exn(t){
    if(0. < t){
     var t$0 = round_up(t);
     if(t$0 <= iround_ubound) return Base_Int[63].call(null, t$0);
     var a = box(t);
     return caml_call2(Base_Printf[7].call(null, b), a, 0);
    }
    if(iround_lbound <= t) return Base_Int[63].call(null, t);
    var d = box(t);
    return caml_call2(Base_Printf[7].call(null, c), d, 0);
   }
   function iround_down(t){
    if(0. <= t)
     return t <= iround_ubound ? [0, Base_Int[63].call(null, t)] : 0;
    var t$0 = round_down(t);
    return iround_lbound <= t$0 ? [0, Base_Int[63].call(null, t$0)] : 0;
   }
   function iround_down_exn(t){
    if(0. <= t){
     if(t <= iround_ubound) return Base_Int[63].call(null, t);
     var a = box(t);
     return caml_call2(Base_Printf[7].call(null, d), a, 0);
    }
    var t$0 = round_down(t);
    if(iround_lbound <= t$0) return Base_Int[63].call(null, t$0);
    var b = box(t);
    return caml_call2(Base_Printf[7].call(null, e), b, 0);
   }
   function iround_towards_zero(t){
    if(iround_lbound <= t && t <= iround_ubound)
     return [0, Base_Int[63].call(null, t)];
    return 0;
   }
   function iround_towards_zero_exn(t){
    if(iround_lbound <= t && t <= iround_ubound)
     return Base_Int[63].call(null, t);
    var a = box(t);
    return caml_call2(Base_Printf[7].call(null, f), a, 0);
   }
   var
    g = symbol(2., 52.),
    round_nearest_lb = Base_Import[114].call(null, g),
    round_nearest_ub = symbol(2., 52.),
    one_ulp_less_than_half = one_ulp(759637122, 0.5);
   function add_half_for_round_nearest(t){
    var a = t === one_ulp_less_than_half ? one_ulp_less_than_half : 0.5;
    return Base_Import[92].call(null, t, a);
   }
   function iround_nearest_32(t){
    if(0. <= t){
     var t$0 = add_half_for_round_nearest(t);
     return t$0 <= iround_ubound ? [0, Base_Int[63].call(null, t$0)] : 0;
    }
    var t$1 = round_down(Base_Import[92].call(null, t, 0.5));
    return iround_lbound <= t$1 ? [0, Base_Int[63].call(null, t$1)] : 0;
   }
   function iround_nearest_64(t){
    if(0. <= t){
     if(! (t < round_nearest_ub))
      return t <= iround_ubound ? [0, Base_Int[63].call(null, t)] : 0;
     var a = add_half_for_round_nearest(t);
     return [0, Base_Int[63].call(null, a)];
    }
    if(! (round_nearest_lb < t))
     return iround_lbound <= t ? [0, Base_Int[63].call(null, t)] : 0;
    var b = round_down(Base_Import[92].call(null, t, 0.5));
    return [0, Base_Int[63].call(null, b)];
   }
   var
    R = [0, [8, [0, 0, 4], 0, [0, 8], 0], "%.8G"],
    P =
      [0,
       [11,
        "exponent ",
        [4, 0, 0, 0, [11, cst_out_of_range_0, [4, 0, 0, 0, [12, 93, 0]]]]],
       "exponent %d out of range [0, %d]"],
    Q =
      [0,
       [11,
        "mantissa ",
        [2, 0, [11, cst_out_of_range_0, [2, 0, [12, 93, 0]]]]],
       "mantissa %s out of range [0, %s]"],
    cst_Float_sign_exn_of_NAN = "Float.sign_exn of NAN",
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    L = [0, cst_src_float_ml, 865, 2],
    K =
      [0,
       [11,
        "Float.round_significant: invalid argument significant_digits:",
        [4, 0, 0, 0, 0]],
       "Float.round_significant: invalid argument significant_digits:%d"],
    J = [0, [8, [0, 0, 3], 0, 1, 0], "%.*g"],
    I = [0, "p"],
    cst_t = "t",
    cst_g = "g",
    cst_m = "m",
    cst_k = "k",
    F = [0, cst_src_float_ml, 703, 8],
    E = [0, cst_src_float_ml, 706, 8],
    A = [0, cst_src_float_ml, 713, 8],
    B = [0, cst_src_float_ml, 714, 8],
    C = [0, [2, 0, [4, 0, 0, 0, [2, 0, [12, 32, 0]]]], "%s%d%s "],
    D = [0, [2, 0, [4, 0, 0, 0, [2, 0, [4, 0, 0, 0, 0]]]], "%s%d%s%d"],
    z = [0, cst_src_float_ml, 690, 8],
    cst_0 = ".0",
    G = [0, [2, 0, [8, [0, 0, 1], 0, [0, 1], 0]], cst_s_1e],
    H = [0, [2, 0, [8, [0, 0, 1], 0, [0, 1], 0]], cst_s_1e],
    cst_inf$1 = "-inf  ",
    cst_inf$2 = "inf  ",
    cst_nan$0 = "nan  ",
    cst_sexp = "sexp",
    cst_sexp_of_float_produced_str = "[sexp_of_float] produced strange sexp",
    w =
      [0,
       [11, "to_string_hum: invalid argument ~decimals=", [4, 0, 0, 0, 0]],
       "to_string_hum: invalid argument ~decimals=%d"],
    x = [0, [8, [0, 1, 0], 0, 1, 0], "%+.*f"],
    y = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
    cst_inf = "inf",
    cst_inf$0 = "-inf",
    cst_nan = cst_nan$1,
    r = [0, cst_Infinite],
    s = [0, cst_Nan],
    t = [0, cst_Normal],
    u = [0, cst_Subnormal],
    v = [0, cst_Zero],
    p =
      [0,
       [11,
        cst_Float_int63_round_nearest_,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_nearest_portable_alloc_exn: argument (%f) is too large"],
    q =
      [0,
       [11,
        cst_Float_int63_round_nearest_,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_nearest_portable_alloc_exn: argument (%f) is too small or NaN"],
    n =
      [0,
       [11,
        cst_Float_int63_round_down_exn,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_down_exn: argument (%f) is too large"],
    o =
      [0,
       [11,
        cst_Float_int63_round_down_exn,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_down_exn: argument (%f) is too small or NaN"],
    l =
      [0,
       [11,
        cst_Float_int63_round_up_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_up_exn: argument (%f) is too large"],
    m =
      [0,
       [11,
        cst_Float_int63_round_up_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_up_exn: argument (%f) is too small or NaN"],
    j =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       cst_Float_iround_nearest_exn_a$0],
    k =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_nearest_exn: argument (%f) is too small or NaN"],
    h =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       cst_Float_iround_nearest_exn_a$0],
    i =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, ") is too small", 0]]],
       "Float.iround_nearest_exn: argument (%f) is too small"],
    one = 1.,
    minus_one = -1.,
    pi = 3.141592653589793,
    sqrt_pi = 1.772453850905516,
    sqrt_2pi = 2.5066282746310007,
    euler = 0.5772156649015329,
    iround_nearest = Base_Word_size[3] ? iround_nearest_64 : iround_nearest_32;
   function iround_nearest_exn_32(t){
    if(0. <= t){
     var t$0 = add_half_for_round_nearest(t);
     if(t$0 <= iround_ubound) return Base_Int[63].call(null, t$0);
     var a = box(t);
     return caml_call2(Base_Printf[7].call(null, h), a, 0);
    }
    var t$1 = round_down(Base_Import[92].call(null, t, 0.5));
    if(iround_lbound <= t$1) return Base_Int[63].call(null, t$1);
    var b = box(t);
    return caml_call2(Base_Printf[7].call(null, i), b, 0);
   }
   function iround_nearest_exn_64(t){
    if(0. <= t){
     if(t < round_nearest_ub){
      var a = add_half_for_round_nearest(t);
      return Base_Int[63].call(null, a);
     }
     if(t <= iround_ubound) return Base_Int[63].call(null, t);
     var b = box(t);
     return caml_call2(Base_Printf[7].call(null, j), b, 0);
    }
    if(round_nearest_lb < t){
     var c = round_down(Base_Import[92].call(null, t, 0.5));
     return Base_Int[63].call(null, c);
    }
    if(iround_lbound <= t) return Base_Int[63].call(null, t);
    var d = box(t);
    return caml_call2(Base_Printf[7].call(null, k), d, 0);
   }
   var
    iround_nearest_exn =
      Base_Word_size[3] ? iround_nearest_exn_64 : iround_nearest_exn_32;
   function iround_exn(opt, t){
    var dir = opt ? opt[1] : 857423934;
    return 857423934 <= dir
            ? 1003109192
              <= dir
              ? iround_towards_zero_exn(t)
              : iround_nearest_exn(t)
            : 759637122 <= dir ? iround_down_exn(t) : iround_up_exn(t);
   }
   function iround(opt, t){
    var dir = opt ? opt[1] : 857423934;
    try{var a = [0, iround_exn([0, dir], t)]; return a;}catch(exn){return 0;}
   }
   function is_inf(t){
    return Base_Import[96].call(null, 1., t) === 0. ? 1 : 0;
   }
   function is_finite(t){
    return Base_Import[94].call(null, t, t) === 0. ? 1 : 0;
   }
   function min_inan(x, y){
    return is_nan(y) ? x : is_nan(x) ? y : x < y ? x : y;
   }
   function max_inan(x, y){
    return is_nan(y) ? x : is_nan(x) ? y : y < x ? x : y;
   }
   var
    add = Base_Import[92],
    sub = Base_Import[94],
    neg = Base_Import[114],
    scale = Base_Import[90];
   function square(x){return Base_Import[90].call(null, x, x);}
   function fractional(t){return Base_Import[125].call(null, t);}
   function integral(t){return Base_Import[127].call(null, t);}
   function round_towards_zero(t){
    return 0. <= t ? round_down(t) : round_up(t);
   }
   function round_nearest_inline(t){
    if(round_nearest_lb < t && t < round_nearest_ub)
     return round_down(add_half_for_round_nearest(t));
    return Base_Import[92].call(null, t, 0.);
   }
   function round_nearest(t){return round_nearest_inline(t);}
   function round_nearest_half_to_even(t){
    if(! (t <= round_nearest_lb) && ! (round_nearest_ub <= t)){
     var
      floor = round_down(t),
      ceil_or_succ = Base_Import[92].call(null, floor, 1.),
      diff_floor = Base_Import[94].call(null, t, floor),
      diff_ceil = Base_Import[94].call(null, ceil_or_succ, t);
     return diff_floor < diff_ceil
             ? floor
             : diff_ceil
               < diff_floor
               ? ceil_or_succ
               : mod_float(floor, 2.) === 0. ? floor : ceil_or_succ;
    }
    return Base_Import[92].call(null, t, 0.);
   }
   var
    int63_round_lbound = lower_bound_for_int(Base_Int63[87]),
    int63_round_ubound = upper_bound_for_int(Base_Int63[87]);
   function int63_round_up_exn(t){
    if(0. < t){
     var t$0 = round_up(t);
     if(t$0 <= int63_round_ubound) return Base_Int63[86].call(null, t$0);
     var a = Base_Float0[29].call(null, t);
     return caml_call2(Base_Printf[7].call(null, l), a, 0);
    }
    if(int63_round_lbound <= t) return Base_Int63[86].call(null, t);
    var b = Base_Float0[29].call(null, t);
    return caml_call2(Base_Printf[7].call(null, m), b, 0);
   }
   function int63_round_down_exn(t){
    if(0. <= t){
     if(t <= int63_round_ubound) return Base_Int63[86].call(null, t);
     var a = Base_Float0[29].call(null, t);
     return caml_call2(Base_Printf[7].call(null, n), a, 0);
    }
    var t$0 = round_down(t);
    if(int63_round_lbound <= t$0) return Base_Int63[86].call(null, t$0);
    var b = Base_Float0[29].call(null, t);
    return caml_call2(Base_Printf[7].call(null, o), b, 0);
   }
   function int63_round_nearest_portable_a(t0){
    var t = round_nearest_inline(t0);
    if(0. < t){
     if(t <= int63_round_ubound) return Base_Int63[86].call(null, t);
     var a = box(t0);
     return caml_call2(Base_Printf[7].call(null, p), a, 0);
    }
    if(int63_round_lbound <= t) return Base_Int63[86].call(null, t);
    var b = box(t0);
    return caml_call2(Base_Printf[7].call(null, q), b, 0);
   }
   function int63_round_nearest_arch64_noa(f){
    var a = iround_nearest_exn(f);
    return Base_Int63[100].call(null, a);
   }
   var
    int63_round_nearest_exn =
      Base_Word_size[3]
       ? int63_round_nearest_arch64_noa
       : int63_round_nearest_portable_a;
   function round(opt, t){
    var dir = opt ? opt[1] : 857423934;
    return 857423934 <= dir
            ? 1003109192
              <= dir
              ? round_towards_zero(t)
              : round_nearest_inline(t)
            : 759637122 <= dir ? round_down(t) : round_up(t);
   }
   var compare_local = caml_int_compare, compare$0 = caml_int_compare;
   function t_of_sexp$0(sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var match = sexp_008[1], a = caml_string_compare(match, cst_infinite);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= a){
           if(0 < a){
            if(match === cst_nan$1) break e;
            if(match === cst_normal) break d;
            if(match === cst_subnormal) break c;
            if(match !== cst_zero) break a;
            break b;
           }
          }
          else if(match !== cst_Infinite){
           if(match === cst_Nan) break e;
           if(match === cst_Normal) break d;
           if(match === cst_Subnormal) break c;
           if(match !== cst_Zero) break a;
           break b;
          }
          return 0;
         }
         return 1;
        }
        return 2;
       }
       return 3;
      }
      return 4;
     }
     var match$0 = sexp_008[1];
     if(! match$0)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_007, sexp_008);
     var match$1 = match$0[1];
     if(0 !== match$1[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_007, sexp_008);
     var match$2 = match$1[1], b = caml_string_compare(match$2, cst_infinite);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= b){
          if(0 < b){
           if(match$2 === cst_nan$1) break e;
           if(match$2 === cst_normal) break d;
           if(match$2 === cst_subnormal) break c;
           if(match$2 !== cst_zero) break a;
           break b;
          }
         }
         else if(match$2 !== cst_Infinite){
          if(match$2 === cst_Nan) break e;
          if(match$2 === cst_Normal) break d;
          if(match$2 === cst_Subnormal) break c;
          if(match$2 !== cst_Zero) break a;
          break b;
         }
         return Sexplib0_Sexp_conv_error[7].call
                 (null, error_source_007, sexp_008);
        }
        return Sexplib0_Sexp_conv_error[7].call
                (null, error_source_007, sexp_008);
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_007, sexp_008);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_007, sexp_008);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_007, sexp_008);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_007, sexp_008);
   }
   function sexp_of_t$0(param){
    switch(param){
      case 0:
       return r;
      case 1:
       return s;
      case 2:
       return t;
      case 3:
       return u;
      default: return v;
    }
   }
   function to_string$0(t){
    var a = sexp_of_t$0(t);
    return Base_Import[160].call(null, a);
   }
   function of_string$0(s){
    return t_of_sexp$0(Base_Import[136].call(null, s));
   }
   function classify(t){
    switch(classify_float(t)){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 4;
      case 3:
       return 0;
      default: return 1;
    }
   }
   function insert_underscores(a, opt, string){
    var
     delimiter = a ? a[1] : 95,
     strip_zero = opt ? opt[1] : 0,
     match = Base_String[100].call(null, string, 46);
    if(! match)
     return Base_Int_string_conversions[6].call(null, string, delimiter);
    var
     match$0 = match[1],
     right = match$0[2],
     left = match$0[1],
     left$0 = Base_Int_string_conversions[6].call(null, left, delimiter),
     right$0 =
       strip_zero
        ? Base_String
           [108].call
          (null,
           [0, function(c){return Base_Char[12].call(null, c, 48);}],
           right)
        : right;
    if(right$0 === cst$4) return left$0;
    var b = Base_Import[112].call(null, cst$0, right$0);
    return Base_Import[112].call(null, left$0, b);
   }
   function to_string_hum(delimiter, a, strip_zero, opt, f){
    var decimals = a ? a[1] : 3, explicit_plus = opt ? opt[1] : 0;
    if(decimals < 0) caml_call2(Base_Printf[7].call(null, w), decimals, 0);
    var match = classify(f);
    if(1 === match) return cst_nan;
    if(! match) return 0. < f ? cst_inf : cst_inf$0;
    var
     s =
       explicit_plus
        ? caml_call2(Base_Printf[2].call(null, x), decimals, f)
        : caml_call2(Base_Printf[2].call(null, y), decimals, f);
    return insert_underscores(delimiter, strip_zero, s);
   }
   function sexp_of_t$1(t){
    var sexp = sexp_of_t(t);
    if(1009018843 <= Base_Sexp[19][1]) return sexp;
    if(0 === sexp[0]){
     var string = sexp[1];
     return Base_String[70].call(null, 0, 0, string, 69)
             ? sexp
             : [0, insert_underscores(0, 0, string)];
    }
    var a = [0, [0, cst_sexp, Base_Sexp[5].call(null, sexp)], 0];
    return raise_s
            (Base_Sexp[10].call(null, cst_sexp_of_float_produced_str, a));
   }
   function to_padded_compact_string_custo
   (t, opt, kilo, mega, giga, tera, peta, param){
    var prefix = opt ? opt[1] : cst$2, match = classify(t);
    if(1 === match) return cst_nan$0;
    if(! match) return t < 0. ? cst_inf$1 : cst_inf$2;
    function go(t){
     function conv(mag, numerator, denominator){
      a:
      {
       if(denominator === 100. && 999.95 <= numerator) break a;
       if(100000. <= denominator){
        var t$0 = Base_Import[90].call(null, denominator, 9.9995);
        if(round_nearest_inline(t$0) <= numerator) break a;
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, F], 1);
      }
      var t = Base_Import[90].call(null, denominator, 9999.5);
      if(! (numerator < round_nearest_inline(t)))
       throw caml_maybe_attach_backtrace([0, Assert_failure, E], 1);
      var
       k = round_down(Base_Import[96].call(null, numerator, denominator)),
       lower = Base_Import[90].call(null, denominator, k),
       a = Base_Import[92].call(null, k, 1.),
       higher = Base_Import[90].call(null, denominator, a),
       diff_right = Base_Import[94].call(null, higher, numerator),
       diff_left = Base_Import[94].call(null, numerator, lower),
       k$0 = iround_nearest_exn(k),
       k$1 =
         diff_right < diff_left
          ? Base_Import[91].call(null, k$0, 1)
          : diff_left
            < diff_right
            ? k$0
            : 0
              === Base_Import[122].call(null, k$0, 2)
              ? k$0
              : Base_Import[91].call(null, k$0, 1),
       d = Base_Import[122].call(null, k$1, 10),
       i = Base_Import[95].call(null, k$1, 10);
      if(0 <= i && 1000 > i){
       if(0 <= d && 10 > d)
        return 0 === d
                ? caml_call3(Base_Printf[2].call(null, C), prefix, i, mag)
                : caml_call4(Base_Printf[2].call(null, D), prefix, i, mag, d);
       throw caml_maybe_attach_backtrace([0, Assert_failure, B], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
     }
     if(! (t < 999.95)){
      if(t < 999950.) return conv(kilo, t, 100.);
      if(t < 999950000.) return conv(mega, t, 100000.);
      if(t < 999950000000.) return conv(giga, t, 100000000.);
      if(t < 999950000000000.) return conv(tera, t, 100000000000.);
      if(! peta) return caml_call2(Base_Printf[2].call(null, H), prefix, t);
      var peta$0 = peta[1];
      return t < 999950000000000000.
              ? conv(peta$0, t, 100000000000000.)
              : caml_call2(Base_Printf[2].call(null, G), prefix, t);
     }
     if(0. <= t && t < 999.95){
      var
       x = Base_Import[112].call(null, prefix, caml_format_float("%.1f", t));
      if(! Base_String[96].call(null, x, cst_0)) return x;
      var
       x$0 = Base_Bytes0[21].call(null, x),
       n = runtime.caml_ml_bytes_length(x$0);
      caml_bytes_set(x$0, Base_Import[93].call(null, n, 1), 32);
      caml_bytes_set(x$0, Base_Import[93].call(null, n, 2), 32);
      return runtime.caml_string_of_bytes(x$0);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, z], 1);
    }
    if(0. <= t) return go(t);
    var a = go(Base_Import[114].call(null, t));
    return Base_Import[112].call(null, cst$1, a);
   }
   function to_padded_compact_string(t){
    return to_padded_compact_string_custo
            (t, 0, cst_k, cst_m, cst_g, cst_t, I, 0);
   }
   function int_pow(x, n){
    if(0 === n) return 1.;
    var
     x$0 = [0, Base_Import[92].call(null, x, -0.)],
     n$0 = [0, n],
     accum = [0, 1.];
    if(n$0[1] < 0){
     x$0[1] = Base_Import[96].call(null, 1., x$0[1]);
     n$0[1] = Base_Import[113].call(null, n$0[1]);
     if(n$0[1] < 0){accum[1] = x$0[1]; n$0[1]--;}
    }
    for(;;){
     if(1 >= n$0[1]) return Base_Import[90].call(null, x$0[1], accum[1]);
     if(0 !== Base_Import[116].call(null, n$0[1], 1))
      accum[1] = Base_Import[90].call(null, x$0[1], accum[1]);
     x$0[1] = Base_Import[90].call(null, x$0[1], x$0[1]);
     n$0[1] = Base_Import[120].call(null, n$0[1], 1);
    }
   }
   function round_gen(x, how){
    if(x === 0.) return 0.;
    if(! is_finite(x)) return x;
    var variant = how[1];
    if(555917426 <= variant)
     var
      sd = how[2],
      a = to_int(round_up(caml_log10_float(abs_float(x)))),
      dd = Base_Import[93].call(null, sd, a),
      dd$0 = dd,
      sd$0 = sd;
    else
     var
      dd$1 = how[2],
      d = to_int(round_up(caml_log10_float(abs_float(x)))),
      sd$1 = Base_Import[91].call(null, dd$1, d),
      dd$0 = dd$1,
      sd$0 = sd$1;
    if(0 > sd$0) return 0.;
    if(17 <= sd$0) return x;
    var abs_dd = Base_Int[78].call(null, dd$0);
    if(22 >= abs_dd && 16 > sd$0){
     var order = int_pow(10., abs_dd);
     if(0 <= dd$0){
      var
       b = round_nearest_half_to_even(Base_Import[90].call(null, x, order));
      return Base_Import[96].call(null, b, order);
     }
     var c = round_nearest_half_to_even(Base_Import[96].call(null, x, order));
     return Base_Import[90].call(null, c, order);
    }
    return of_string(caml_call2(Base_Printf[2].call(null, J), sd$0, x));
   }
   function round_significant(x, significant_digits){
    return 0 < significant_digits
            ? round_gen(x, [0, 555917426, significant_digits])
            : caml_call2(Base_Printf[7].call(null, K), significant_digits, 0);
   }
   function round_decimal(x, decimal_digits){
    return round_gen(x, [0, -352548012, decimal_digits]);
   }
   function between(t, low, high){
    var a = low <= t ? 1 : 0, b = a ? t <= high ? 1 : 0 : a;
    return b;
   }
   function clamp_exn(t, min, max){
    if(min <= max) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, L], 1);
   }
   function clamp(t, min, max){
    if(min <= max) return [0, clamp_unchecked(t, min, max)];
    var
     a = [0, [0, cst_max, sexp_of_t(max)], 0],
     b = [0, [0, cst_min, sexp_of_t(min)], a],
     c = Base_Sexp[10].call(null, cst_clamp_requires_min_max, b);
    return Base_Or_error[39].call(null, c);
   }
   var
    symbol$1 = Base_Import[92],
    symbol$2 = Base_Import[94],
    symbol$3 = Base_Import[90],
    symbol$4 = Base_Import[96],
    symbol$5 = Base_Import[114];
   function sign_exn(t){
    if(0. < t) return 2;
    if(t < 0.) return 0;
    if(t === 0.) return 1;
    var
     a = [0, [0, cst$3, sexp_of_t$1(t)], 0],
     b = Base_Sexp[10].call(null, cst_Float_sign_exn_of_NAN, a);
    return Base_Error[32].call(null, b);
   }
   function sign_or_nan(t){return 0. < t ? 2 : t < 0. ? 0 : t === 0. ? 1 : 3;}
   function ieee_negative(t){
    var bits = caml_int64_bits_of_float(t);
    return runtime.caml_lessthan(bits, Stdlib_Int64[1]);
   }
   var
    mantissa_bits = 52,
    M = Base_Int64[37],
    exponent_mask64 =
      runtime.caml_int64_sub(Base_Int64[53].call(null, Base_Int64[37], 11), M),
    exponent_mask = Base_Int64[6].call(null, exponent_mask64),
    N = Base_Int63[43],
    O = Base_Int63[76].call(null, Base_Int63[43], mantissa_bits),
    mantissa_mask = Base_Int63[46].call(null, O, N),
    mantissa_mask64 = Base_Int63[83].call(null, mantissa_mask);
   function ieee_exponent(t){
    var
     bits = caml_int64_bits_of_float(t),
     a = Base_Int64[67].call(null, bits, mantissa_bits);
    return runtime.caml_int64_to_int32
            (Base_Int64[48].call(null, a, exponent_mask64));
   }
   function ieee_mantissa(t){
    var bits = caml_int64_bits_of_float(t);
    return Base_Int63[109].call
            (null, runtime.caml_int64_and(bits, mantissa_mask64));
   }
   function create_ieee_exn(negative, exponent, mantissa){
    if(Base_Int[48].call(null, exponent, exponent_mask) !== exponent)
     return caml_call3
             (Base_Printf[6].call(null, P), exponent, exponent_mask, 0);
    var a = Base_Int63[71].call(null, mantissa, mantissa_mask);
    if(Base_Int63[17].call(null, a, mantissa)){
     var
      b = Base_Int63[11].call(null, mantissa_mask),
      c = Base_Int63[11].call(null, mantissa);
     return caml_call3(Base_Printf[6].call(null, Q), c, b, 0);
    }
    var
     sign_bits = negative ? Stdlib_Int64[10] : Stdlib_Int64[1],
     expt_bits =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_of_int32(exponent), 52),
     mant_bits = Base_Int63[83].call(null, mantissa),
     bits = caml_int64_or(sign_bits, caml_int64_or(expt_bits, mant_bits));
    return runtime.caml_int64_float_of_bits(bits);
   }
   function create_ieee(negative, exponent, mantissa){
    return Base_Or_error[31].call
            (null,
             0,
             function(param){
              return create_ieee_exn(negative, exponent, mantissa);
             });
   }
   function to_string$1(x){
    return caml_call1(Base_Printf[2].call(null, R), x);
   }
   function sexp_of_t$2(x){return [0, to_string$1(x)];}
   function of_string$1(x){return of_string(x);}
   var
    include$0 = Base_Comparable[14].call(null, [0, compare, sexp_of_t, zero]),
    sign = include$0[5];
   function is_positive(t){return 0. < t ? 1 : 0;}
   function is_non_negative(t){return 0. <= t ? 1 : 0;}
   function is_negative(t){return t < 0. ? 1 : 0;}
   function is_non_positive(t){return t <= 0. ? 1 : 0;}
   var
    include$1 = Base_Pretty_printer[2].call(null, [0, module_name, to_string]),
    pp = include$1[1];
   function symbol$6(b, a){return b !== a ? 1 : 0;}
   function symbol$7(b, a){return b < a ? 1 : 0;}
   function symbol$8(b, a){return a < b ? 1 : 0;}
   function symbol$9(b, a){return b === a ? 1 : 0;}
   function symbol$10(b, a){return b <= a ? 1 : 0;}
   function symbol$11(b, a){return a <= b ? 1 : 0;}
   function of_float$0(x){return x;}
   var
    specialized_hash = Base_Import[223],
    Private =
      [0,
       box,
       clamp_unchecked,
       lower_bound_for_int,
       upper_bound_for_int,
       specialized_hash,
       one_ulp_less_than_half,
       int63_round_nearest_portable_a,
       int63_round_nearest_arch64_noa,
       iround_nearest_exn_64],
    include$2 = Base_Import[108],
    ascending = include$2[1],
    descending = include$2[2],
    compare_local$0 = include$2[3],
    equal_local = include$2[4];
   function min(x, y){if(! (x < y) && ! is_nan(x)) return y; return x;}
   function max(x, y){if(! (y < x) && ! is_nan(x)) return y; return x;}
   var
    Base_Float =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$1,
       of_string,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       float_of_string_opt,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       equal_local,
       compare_local$0,
       invariant,
       min,
       max,
       nan,
       max_value,
       neg_infinity,
       max_value,
       neg_infinity,
       zero,
       one,
       minus_one,
       pi,
       sqrt_pi,
       sqrt_2pi,
       euler,
       epsilon_float,
       max_finite_value,
       min_positive_subnormal_value,
       min_positive_normal_value,
       to_int64_preserve_order,
       to_int64_preserve_order_exn,
       of_int64_preserve_order,
       one_ulp,
       of_int,
       to_int,
       of_int63,
       of_int64,
       to_int64,
       round,
       iround,
       iround_exn,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       round_nearest_half_to_even,
       iround_towards_zero,
       iround_down,
       iround_up,
       iround_nearest,
       iround_towards_zero_exn,
       iround_down_exn,
       iround_up_exn,
       iround_nearest_exn,
       int63_round_down_exn,
       int63_round_up_exn,
       int63_round_nearest_exn,
       iround_lbound,
       iround_ubound,
       int63_round_lbound,
       int63_round_ubound,
       round_significant,
       round_decimal,
       is_nan,
       is_inf,
       is_finite,
       is_integer,
       min_inan,
       max_inan,
       symbol$1,
       symbol$2,
       symbol$4,
       symbol$0,
       symbol$3,
       symbol,
       symbol$5,
       [0, fractional, integral],
       modf,
       mod_float,
       add,
       sub,
       neg,
       scale,
       abs_float,
       [0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$0,
        symbol,
        symbol$5,
        symbol$11,
        symbol$10,
        symbol$9,
        symbol$8,
        symbol$7,
        symbol$6,
        abs_float,
        neg,
        zero,
        of_int,
        of_float$0],
       [0, symbol$1, symbol$2, symbol$3, symbol$4, symbol$0, symbol, symbol$5],
       to_string,
       to_string_hum,
       to_padded_compact_string,
       to_padded_compact_string_custo,
       int_pow,
       square,
       ldexp,
       frexp,
       [0,
        compare$0,
        compare_local,
        all,
        t_of_sexp$0,
        sexp_of_t$0,
        t_sexp_grammar$0,
        of_string$0,
        to_string$0],
       classify,
       sign,
       sign_exn,
       sign_or_nan,
       create_ieee,
       create_ieee_exn,
       ieee_negative,
       ieee_exponent,
       ieee_mantissa,
       [0, t_of_sexp, sexp_of_t$2, t_sexp_grammar, of_string$1, to_string$1],
       Private];
   runtime.caml_register_global(191, Base_Float, "Base__Float");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Fieldslib
//# shape: Base__Fieldslib:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Fieldslib = [0];
   runtime.caml_register_global(0, Base_Fieldslib, "Base__Fieldslib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Buffer_intf
//# shape: Base__Buffer_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Buffer_intf = [0];
   runtime.caml_register_global(0, Base_Buffer_intf, "Base__Buffer_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Buffer
//# unitInfo: Requires: Base__Blit, Base__Buffer_intf, Base__Bytes, Base__Import, Stdlib__Buffer
//# shape: Base__Buffer:[F(1),F(1)*,F(1),F(1),N,N,N,N,N,N,F(2),F(1)*,F(1),F(1),F(2),F(2),F(4),F(2),F(4),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Bytes = global_data.Base__Bytes,
    Base_Import = global_data.Base__Import,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Base_Blit = global_data.Base__Blit,
    create = Stdlib_Buffer[1],
    contents = Stdlib_Buffer[2],
    to_bytes = Stdlib_Buffer[3],
    nth = Stdlib_Buffer[6],
    length = Stdlib_Buffer[7],
    clear = Stdlib_Buffer[8],
    reset = Stdlib_Buffer[9],
    add_char = Stdlib_Buffer[12],
    add_string = Stdlib_Buffer[16],
    add_bytes = Stdlib_Buffer[17],
    add_buffer = Stdlib_Buffer[21],
    a = Stdlib_Buffer[18],
    b = Stdlib_Buffer[19];
   function add_substring(t, s, pos, len){return a(t, s, pos, len);}
   function add_subbytes(t, s, pos, len){return b(t, s, pos, len);}
   function sexp_of_t(t){
    var a = contents(t);
    return Base_Import[136].call(null, a);
   }
   var
    caml_buffer_length = Stdlib_Buffer[7],
    caml_buffer_blit = Stdlib_Buffer[5];
   function create$0(len){return Base_Bytes[34].call(null, len);}
   var length$0 = runtime.caml_ml_bytes_length;
   function unsafe_blit(src, src_pos, dst, dst_pos, len){
    return caml_buffer_blit(src, src_pos, dst, dst_pos, len);
   }
   var
    To_bytes =
      Base_Blit[2].call
       (null, [0, caml_buffer_length], [0, length$0, create$0, unsafe_blit]),
    blit = To_bytes[1],
    blito = To_bytes[2],
    unsafe_blit$0 = To_bytes[3],
    sub = To_bytes[4],
    subo = To_bytes[5],
    To_string = Base_Blit[3].call(null, [0], To_bytes),
    Base_Buffer =
      [0,
       sexp_of_t,
       create,
       contents,
       to_bytes,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       To_string,
       nth,
       length,
       clear,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer];
   runtime.caml_register_global(4, Base_Buffer, "Base__Buffer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Backtrace
//# unitInfo: Requires: Base__Exn, Base__Int, Base__List, Base__String, Base__Sys0, Stdlib__Printexc
//# shape: Base__Backtrace:[F(1),F(2)*,F(1),F(1),N,N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    elided_message = "<backtrace elided in test>",
    Base_Exn = global_data.Base__Exn,
    Base_Sys0 = global_data.Base__Sys0,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int = global_data.Base__Int,
    elide = [0, 0];
   function get(opt, param){
    var at_most_num_frames = opt ? opt[1] : Base_Int[65];
    return runtime.caml_get_current_callstack(at_most_num_frames);
   }
   function to_string(t){
    return elide[1] ? elided_message : Stdlib_Printexc[14].call(null, t);
   }
   function to_string_list(t){
    var a = to_string(t);
    return Base_String[104].call(null, a);
   }
   function sexp_of_t(t){
    var a = to_string_list(t);
    return [1, Base_List[53].call(null, a, function(x){return [0, x];})];
   }
   var
    set_recording = Stdlib_Printexc[7],
    am_recording = Stdlib_Printexc[8],
    cst_OCAMLRUNPARAM = "OCAMLRUNPARAM",
    cst_b = "b";
   function most_recent(param){return Stdlib_Printexc[12].call(null, 0);}
   function most_recent_for_exn(exn){
    return Base_Exn[18].call(null, exn) ? [0, most_recent(0)] : 0;
   }
   function with_recording(b, f){
    var saved = am_recording(0);
    set_recording(b);
    return Base_Exn[13].call
            (null, f, function(param){return set_recording(saved);});
   }
   function initialize_module(param){
    var match = Base_Sys0[21].call(null, cst_OCAMLRUNPARAM);
    if(match)
     var
      x = match[1],
      b = Base_String[97],
      c = Base_String[102].call(null, x, 44),
      ocamlrunparam_mentions_backtra =
        Base_List[23].call(null, c, function(a){return b(a, cst_b);});
    else
     var ocamlrunparam_mentions_backtra = 0;
    var a = 1 - ocamlrunparam_mentions_backtra;
    return a ? set_recording(1) : a;
   }
   var
    Base_Backtrace =
      [0,
       sexp_of_t,
       get,
       to_string,
       to_string_list,
       elide,
       [0,
        am_recording,
        set_recording,
        with_recording,
        most_recent,
        most_recent_for_exn],
       initialize_module];
   runtime.caml_register_global(9, Base_Backtrace, "Base__Backtrace");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base
//# unitInfo: Requires: Base__Array, Base__Backtrace, Base__Bool, Base__Bytes, Base__Char, Base__Container_intf, Base__Error, Base__Exn, Base__Float, Base__Import, Base__Int, Base__Int32, Base__Int64, Base__Int_conversions, Base__Int_string_conversions, Base__List, Base__Nativeint, Base__Option, Base__Ref, Base__Sexp_with_comparable, Base__String, Base__T, Base__Unit, Shadow_stdlib
//# shape: Base:[N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N,[F(1),F(2),F(1),F(1)*,F(1)*,N,N,F(2),N,F(2),F(3),F(2),F(2),F(2),F(1),F(1),N,N,N,F(1)*,N,N,N,N,N,N,N,F(2),F(2),N,N,N,N,N,N,N,N,F(2),F(2)],[F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,N,N,N,N,F(1)*,F(1)*,F(1)*,N,F(3),F(2),F(1)],[N],[N,N,F(3),F(3),F(2)*,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1)*,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),N,N,N,F(1),F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1),N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(3),F(3),F(3),F(3),F(2),N,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,N,N,F(3),F(3),F(2),N,F(2),F(2),F(1)*,N,N,N,N,F(2)*,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1)*,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,F(1),F(1),N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),N,N,N,F(2),N,N,N,N,N,N,N,F(2)*,F(2)*,F(2),F(2),N,N,N,N,N,N,N,F(2)*,F(1)*,F(1)*,F(1),F(1),F(1)],N,N,F(3),F(3),F(2)*,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1)*,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),N,N,N,F(1),F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1),N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,F(3),F(3),F(3),F(3),F(2),N,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),N,N,N,N,F(3),F(3),F(2),N,F(2),F(2),F(1)*,N,N,N,N,F(2)*,F(2),F(2),F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),F(1),F(1)*,N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,F(1),F(1),N,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,N,F(1),N,N,N,F(2),N,N,N,N,N,N,N,F(2)*,F(2)*,F(2),F(2),N,N,N,N,N,N,N,F(2)*,F(1)*,F(1)*,F(1),F(1),F(1),[],N,[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ref = global_data.Base__Ref,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Array = global_data.Base__Array,
    Shadow_stdlib = global_data.Shadow_stdlib,
    Base_Sexp_with_comparable = global_data.Base__Sexp_with_comparable,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Import = global_data.Base__Import,
    Base_Bool = global_data.Base__Bool,
    Base_Char = global_data.Base__Char,
    Base_Exn = global_data.Base__Exn,
    Base_Float = global_data.Base__Float,
    Base_Int = global_data.Base__Int,
    Base_Int32 = global_data.Base__Int32,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_String = global_data.Base__String,
    Base_Bytes = global_data.Base__Bytes,
    Base_Unit = global_data.Base__Unit,
    Base_Error = global_data.Base__Error,
    Base_Container_intf = global_data.Base__Container_intf,
    Base_Backtrace = global_data.Base__Backtrace,
    Exit = Shadow_stdlib[3],
    Not_found = Shadow_stdlib[4],
    max_int = Shadow_stdlib[8],
    min_int = Shadow_stdlib[9],
    infinity = Shadow_stdlib[11],
    neg_infinity = Shadow_stdlib[12],
    nan = Shadow_stdlib[13],
    max_float = Shadow_stdlib[14],
    min_float = Shadow_stdlib[15],
    epsilon_float = Shadow_stdlib[16],
    char_of_int = Shadow_stdlib[18],
    string_of_bool = Shadow_stdlib[19],
    bool_of_string_opt = Shadow_stdlib[20],
    bool_of_string = Shadow_stdlib[21],
    string_of_int = Shadow_stdlib[22],
    int_of_string_opt = Shadow_stdlib[23],
    string_of_float = Shadow_stdlib[24],
    float_of_string_opt = Shadow_stdlib[25],
    stdin = Shadow_stdlib[27],
    stdout = Shadow_stdlib[28],
    stderr = Shadow_stdlib[29],
    print_char = Shadow_stdlib[30],
    print_string = Shadow_stdlib[31],
    print_bytes = Shadow_stdlib[32],
    print_int = Shadow_stdlib[33],
    print_float = Shadow_stdlib[34],
    print_endline = Shadow_stdlib[35],
    print_newline = Shadow_stdlib[36],
    prerr_char = Shadow_stdlib[37],
    prerr_string = Shadow_stdlib[38],
    prerr_bytes = Shadow_stdlib[39],
    prerr_int = Shadow_stdlib[40],
    prerr_float = Shadow_stdlib[41],
    prerr_endline = Shadow_stdlib[42],
    prerr_newline = Shadow_stdlib[43],
    read_line = Shadow_stdlib[44],
    read_int_opt = Shadow_stdlib[45],
    read_int = Shadow_stdlib[46],
    read_float_opt = Shadow_stdlib[47],
    read_float = Shadow_stdlib[48],
    open_out = Shadow_stdlib[49],
    open_out_bin = Shadow_stdlib[50],
    open_out_gen = Shadow_stdlib[51],
    flush = Shadow_stdlib[52],
    flush_all = Shadow_stdlib[53],
    output_char = Shadow_stdlib[54],
    output_string = Shadow_stdlib[55],
    output_bytes = Shadow_stdlib[56],
    output = Shadow_stdlib[57],
    output_substring = Shadow_stdlib[58],
    output_byte = Shadow_stdlib[59],
    output_binary_int = Shadow_stdlib[60],
    output_value = Shadow_stdlib[61],
    seek_out = Shadow_stdlib[62],
    pos_out = Shadow_stdlib[63],
    out_channel_length = Shadow_stdlib[64],
    close_out = Shadow_stdlib[65],
    close_out_noerr = Shadow_stdlib[66],
    set_binary_mode_out = Shadow_stdlib[67],
    open_in = Shadow_stdlib[68],
    open_in_bin = Shadow_stdlib[69],
    open_in_gen = Shadow_stdlib[70],
    input_char = Shadow_stdlib[71],
    input_line = Shadow_stdlib[72],
    input = Shadow_stdlib[73],
    really_input = Shadow_stdlib[74],
    really_input_string = Shadow_stdlib[75],
    input_byte = Shadow_stdlib[76],
    input_binary_int = Shadow_stdlib[77],
    input_value = Shadow_stdlib[78],
    seek_in = Shadow_stdlib[79],
    pos_in = Shadow_stdlib[80],
    in_channel_length = Shadow_stdlib[81],
    close_in = Shadow_stdlib[82],
    close_in_noerr = Shadow_stdlib[83],
    set_binary_mode_in = Shadow_stdlib[84],
    string_of_format = Shadow_stdlib[85],
    symbol = Shadow_stdlib[86],
    exit = Shadow_stdlib[87],
    at_exit = Shadow_stdlib[88],
    valid_float_lexem = Shadow_stdlib[89],
    unsafe_really_input = Shadow_stdlib[90],
    do_at_exit = Shadow_stdlib[91],
    do_domain_local_at_exit = Shadow_stdlib[92],
    globalize = Base_Sexp_with_comparable[1],
    hash_fold_t = Base_Sexp_with_comparable[2],
    hash = Base_Sexp_with_comparable[3],
    t_of_sexp = Base_Sexp_with_comparable[4],
    sexp_of_t = Base_Sexp_with_comparable[5],
    Not_found_s = Base_Sexp_with_comparable[6],
    Of_sexp_error = Base_Sexp_with_comparable[7],
    message = Base_Sexp_with_comparable[8],
    default_indent = Base_Sexp_with_comparable[9],
    pp_hum = Base_Sexp_with_comparable[10],
    pp_hum_indent = Base_Sexp_with_comparable[11],
    pp_mach = Base_Sexp_with_comparable[12],
    pp = Base_Sexp_with_comparable[13],
    to_string_hum = Base_Sexp_with_comparable[14],
    to_string_mach = Base_Sexp_with_comparable[15],
    to_string = Base_Sexp_with_comparable[16],
    of_float_style = Base_Sexp_with_comparable[17],
    of_int_style = Base_Sexp_with_comparable[18],
    t_sexp_grammar = Base_Sexp_with_comparable[19],
    invariant = Base_Sexp_with_comparable[20],
    of_string = Base_Sexp_with_comparable[21],
    symbol$0 = Base_Sexp_with_comparable[22],
    symbol$1 = Base_Sexp_with_comparable[23],
    symbol$2 = Base_Sexp_with_comparable[24],
    symbol$3 = Base_Sexp_with_comparable[25],
    symbol$4 = Base_Sexp_with_comparable[26],
    symbol$5 = Base_Sexp_with_comparable[27],
    equal = Base_Sexp_with_comparable[28],
    compare = Base_Sexp_with_comparable[29],
    min = Base_Sexp_with_comparable[30],
    max = Base_Sexp_with_comparable[31],
    ascending = Base_Sexp_with_comparable[32],
    descending = Base_Sexp_with_comparable[33],
    between = Base_Sexp_with_comparable[34],
    clamp_exn = Base_Sexp_with_comparable[35],
    clamp = Base_Sexp_with_comparable[36],
    comparator = Base_Sexp_with_comparable[37],
    compare_local = Base_Sexp_with_comparable[38],
    equal_local = Base_Sexp_with_comparable[39],
    Sexp =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       t_sexp_grammar,
       invariant,
       of_string,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local],
    int_to_int32 = Base_Int_conversions[1],
    int_to_int32_exn = Base_Int_conversions[2],
    int_to_int32_trunc = Base_Int_conversions[3],
    int_to_int64 = Base_Int_conversions[4],
    int_to_nativeint = Base_Int_conversions[5],
    int32_to_int = Base_Int_conversions[6],
    int32_to_int_exn = Base_Int_conversions[7],
    int32_to_int_trunc = Base_Int_conversions[8],
    int32_to_int64 = Base_Int_conversions[9],
    int32_to_nativeint = Base_Int_conversions[10],
    int32_is_representable_as_int = Base_Int_conversions[11],
    int64_to_int = Base_Int_conversions[12],
    int64_to_int_exn = Base_Int_conversions[13],
    int64_to_int_trunc = Base_Int_conversions[14],
    int64_to_int32 = Base_Int_conversions[15],
    int64_to_int32_exn = Base_Int_conversions[16],
    int64_to_int32_trunc = Base_Int_conversions[17],
    int64_to_nativeint = Base_Int_conversions[18],
    int64_to_nativeint_exn = Base_Int_conversions[19],
    int64_to_nativeint_trunc = Base_Int_conversions[20],
    int64_fit_on_int63_exn = Base_Int_conversions[21],
    int64_is_representable_as_int6 = Base_Int_conversions[22],
    nativeint_to_int = Base_Int_conversions[23],
    nativeint_to_int_exn = Base_Int_conversions[24],
    nativeint_to_int_trunc = Base_Int_conversions[25],
    nativeint_to_int32 = Base_Int_conversions[26],
    nativeint_to_int32_exn = Base_Int_conversions[27],
    nativeint_to_int32_trunc = Base_Int_conversions[28],
    nativeint_to_int64 = Base_Int_conversions[29],
    num_bits_int = Base_Int_conversions[30],
    num_bits_int32 = Base_Int_conversions[31],
    num_bits_int64 = Base_Int_conversions[32],
    num_bits_nativeint = Base_Int_conversions[33],
    Make = Base_Int_string_conversions[1],
    Make_hex = Base_Int_string_conversions[2],
    Make_binary = Base_Int_string_conversions[3],
    sexp_of_int_style = Base_Int_string_conversions[4],
    insert_delimiter_every = Base_Int_string_conversions[5],
    insert_delimiter = Base_Int_string_conversions[6],
    insert_underscores = Base_Int_string_conversions[7],
    Int_conversions =
      [0,
       int_to_int32,
       int_to_int32_exn,
       int_to_int32_trunc,
       int_to_int64,
       int_to_nativeint,
       int32_to_int,
       int32_to_int_exn,
       int32_to_int_trunc,
       int32_to_int64,
       int32_to_nativeint,
       int32_is_representable_as_int,
       int64_to_int,
       int64_to_int_exn,
       int64_to_int_trunc,
       int64_to_int32,
       int64_to_int32_exn,
       int64_to_int32_trunc,
       int64_to_nativeint,
       int64_to_nativeint_exn,
       int64_to_nativeint_trunc,
       int64_fit_on_int63_exn,
       int64_is_representable_as_int6,
       nativeint_to_int,
       nativeint_to_int_exn,
       nativeint_to_int_trunc,
       nativeint_to_int32,
       nativeint_to_int32_exn,
       nativeint_to_int32_trunc,
       nativeint_to_int64,
       num_bits_int,
       num_bits_int32,
       num_bits_int64,
       num_bits_nativeint,
       Make,
       Make_hex,
       Make_binary,
       sexp_of_int_style,
       insert_delimiter_every,
       insert_delimiter,
       insert_underscores],
    am_testing = Base_Import[129],
    Exported_for_specific_uses = [0, am_testing],
    compare_array_local = Base_Array[2],
    compare_array = Base_Array[1],
    equal_array_local = Base_Array[106],
    equal_array = Base_Array[105],
    globalize_array = Base_Array[3],
    array_of_sexp = Base_Array[4],
    sexp_of_array = Base_Array[5];
   function array_sexp_grammar(a_sexp_grammar){
    return Base_Array[6].call(null, a_sexp_grammar);
   }
   var compare_bool_local = Base_Bool[28];
   function compare_bool(a, b){return compare_bool_local(a, b);}
   var equal_bool_local = Base_Bool[29];
   function equal_bool(a, b){return equal_bool_local(a, b);}
   var
    globalize_bool = Base_Bool[2],
    hash_fold_bool = Base_Bool[4],
    func = Base_Bool[5];
   function hash_bool(x){return func(x);}
   var
    bool_of_sexp = Base_Bool[6],
    sexp_of_bool = Base_Bool[7],
    bool_sexp_grammar = Base_Bool[3],
    compare_char_local = Base_Char[29];
   function compare_char(a, b){return compare_char_local(a, b);}
   var equal_char_local = Base_Char[28];
   function equal_char(a, b){return equal_char_local(a, b);}
   var
    globalize_char = Base_Char[2],
    hash_fold_char = Base_Char[4],
    func$0 = Base_Char[5];
   function hash_char(x){return caml_call1(func$0, x);}
   var
    char_of_sexp = Base_Char[6],
    sexp_of_char = Base_Char[7],
    char_sexp_grammar = Base_Char[3],
    sexp_of_exn = Base_Exn[1],
    compare_float_local = Base_Float[24];
   function compare_float(a, b){return compare_float_local(a, b);}
   var equal_float_local = Base_Float[23];
   function equal_float(a, b){return equal_float_local(a, b);}
   var
    globalize_float = Base_Float[1],
    hash_fold_float = Base_Float[5],
    func$1 = Base_Float[6];
   function hash_float(x){return func$1(x);}
   var
    float_of_sexp = Base_Float[7],
    sexp_of_float = Base_Float[8],
    float_sexp_grammar = Base_Float[2],
    compare_int_local = Base_Int[30];
   function compare_int(a, b){return compare_int_local(a, b);}
   var equal_int_local = Base_Int[31];
   function equal_int(a, b){return equal_int_local(a, b);}
   var
    globalize_int = Base_Int[1],
    hash_fold_int = Base_Int[7],
    func$2 = Base_Int[8];
   function hash_int(x){return func$2(x);}
   var
    int_of_sexp = Base_Int[9],
    sexp_of_int = Base_Int[10],
    int_sexp_grammar = Base_Int[2],
    compare_int32_local = Base_Int32[36];
   function compare_int32(a, b){return compare_int32_local(a, b);}
   var equal_int32_local = Base_Int32[37];
   function equal_int32(a, b){return equal_int32_local(a, b);}
   var
    globalize_int32 = Base_Int32[1],
    hash_fold_int32 = Base_Int32[7],
    func$3 = Base_Int32[8];
   function hash_int32(x){return func$3(x);}
   var
    int32_of_sexp = Base_Int32[9],
    sexp_of_int32 = Base_Int32[10],
    int32_sexp_grammar = Base_Int32[2],
    compare_int64_local = Base_Int64[30];
   function compare_int64(a, b){return compare_int64_local(a, b);}
   var equal_int64_local = Base_Int64[31];
   function equal_int64(a, b){return equal_int64_local(a, b);}
   var
    globalize_int64 = Base_Int64[1],
    hash_fold_int64 = Base_Int64[7],
    func$4 = Base_Int64[8];
   function hash_int64(x){return func$4(x);}
   var
    int64_of_sexp = Base_Int64[9],
    sexp_of_int64 = Base_Int64[10],
    int64_sexp_grammar = Base_Int64[2],
    compare_list_local = Base_List[2],
    compare_list = Base_List[1],
    equal_list_local = Base_List[155],
    equal_list = Base_List[154],
    globalize_list = Base_List[3],
    hash_fold_list = Base_List[4],
    list_of_sexp = Base_List[5],
    sexp_of_list = Base_List[6];
   function list_sexp_grammar(a_sexp_grammar){
    return Base_List[7].call(null, a_sexp_grammar);
   }
   var compare_nativeint_local = Base_Nativeint[36];
   function compare_nativeint(a, b){return compare_nativeint_local(a, b);}
   var equal_nativeint_local = Base_Nativeint[37];
   function equal_nativeint(a, b){return equal_nativeint_local(a, b);}
   var
    globalize_nativeint = Base_Nativeint[1],
    hash_fold_nativeint = Base_Nativeint[7],
    func$5 = Base_Nativeint[8];
   function hash_nativeint(x){return func$5(x);}
   var
    nativeint_of_sexp = Base_Nativeint[9],
    sexp_of_nativeint = Base_Nativeint[10],
    nativeint_sexp_grammar = Base_Nativeint[2],
    compare_option_local = Base_Option[2],
    compare_option = Base_Option[1],
    equal_option_local = Base_Option[7],
    equal_option = Base_Option[6],
    globalize_option = Base_Option[3],
    hash_fold_option = Base_Option[4],
    option_of_sexp = Base_Option[9],
    sexp_of_option = Base_Option[10];
   function option_sexp_grammar(a_sexp_grammar){
    return Base_Option[5].call(null, a_sexp_grammar);
   }
   var
    compare_ref_local = Base_Ref[2],
    compare_ref = Base_Ref[1],
    equal_ref_local = Base_Ref[4],
    equal_ref = Base_Ref[3],
    globalize_ref = Base_Ref[5],
    ref_of_sexp = Base_Ref[6],
    sexp_of_ref = Base_Ref[7];
   function ref_sexp_grammar(a_sexp_grammar){
    return Base_Ref[8].call(null, a_sexp_grammar);
   }
   var compare_string_local = Base_String[62];
   function compare_string(a, b){return compare_string_local(a, b);}
   var equal_string_local = Base_String[135];
   function equal_string(a, b){return equal_string_local(a, b);}
   var globalize_string = Base_String[1], hash_fold_string = Base_String[40];
   function hash_string(x){return runtime.Base_hash_string(x);}
   var
    string_of_sexp = Base_String[41],
    sexp_of_string = Base_String[42],
    string_sexp_grammar = Base_String[2],
    compare_bytes_local = Base_Bytes[26];
   function compare_bytes(a, b){return compare_bytes_local(a, b);}
   var equal_bytes_local = Base_Bytes[27];
   function equal_bytes(a, b){return equal_bytes_local(a, b);}
   var
    globalize_bytes = Base_Bytes[1],
    bytes_of_sexp = Base_Bytes[2],
    sexp_of_bytes = Base_Bytes[3],
    bytes_sexp_grammar = Base_Bytes[4],
    compare_unit_local = Base_Unit[29];
   function compare_unit(a, b){return compare_unit_local(a, b);}
   var equal_unit_local = Base_Unit[28];
   function equal_unit(a, b){return equal_unit_local(a, b);}
   var
    globalize_unit = Base_Unit[2],
    hash_fold_unit = Base_Unit[4],
    func$6 = Base_Unit[5];
   function hash_unit(x){return caml_call1(func$6, x);}
   var
    unit_of_sexp = Base_Unit[6],
    sexp_of_unit = Base_Unit[7],
    unit_sexp_grammar = Base_Unit[3],
    symbol$6 = Base_List[156][1],
    a = Base_Int[75],
    symbol$7 = a[1],
    lnot = a[2],
    abs = a[3],
    zero = a[4],
    symbol$8 = a[5],
    symbol$9 = a[6],
    symbol$10 = a[7],
    b = Base_Import[97],
    ascending$0 = b[1],
    descending$0 = b[2],
    max$0 = b[3],
    min$0 = b[4],
    include = Base_Float[100],
    symbol$11 = include[1],
    symbol$12 = include[2],
    symbol$13 = include[3],
    symbol$14 = include[4],
    symbol$15 = include[5],
    symbol$16 = include[6],
    symbol$17 = include[7],
    symbol_concat = Base_String[67],
    fst = Base_Import[125],
    snd = Base_Import[127],
    failwith = Base_Import[124],
    invalid_arg = Base_Import[126],
    raise_s = Base_Error[32],
    Export =
      [0,
       compare_array_local,
       compare_array,
       equal_array_local,
       equal_array,
       globalize_array,
       array_of_sexp,
       sexp_of_array,
       array_sexp_grammar,
       compare_bool_local,
       compare_bool,
       equal_bool_local,
       equal_bool,
       globalize_bool,
       hash_fold_bool,
       hash_bool,
       bool_of_sexp,
       sexp_of_bool,
       bool_sexp_grammar,
       compare_char_local,
       compare_char,
       equal_char_local,
       equal_char,
       globalize_char,
       hash_fold_char,
       hash_char,
       char_of_sexp,
       sexp_of_char,
       char_sexp_grammar,
       sexp_of_exn,
       compare_float_local,
       compare_float,
       equal_float_local,
       equal_float,
       globalize_float,
       hash_fold_float,
       hash_float,
       float_of_sexp,
       sexp_of_float,
       float_sexp_grammar,
       compare_int_local,
       compare_int,
       equal_int_local,
       equal_int,
       globalize_int,
       hash_fold_int,
       hash_int,
       int_of_sexp,
       sexp_of_int,
       int_sexp_grammar,
       compare_int32_local,
       compare_int32,
       equal_int32_local,
       equal_int32,
       globalize_int32,
       hash_fold_int32,
       hash_int32,
       int32_of_sexp,
       sexp_of_int32,
       int32_sexp_grammar,
       compare_int64_local,
       compare_int64,
       equal_int64_local,
       equal_int64,
       globalize_int64,
       hash_fold_int64,
       hash_int64,
       int64_of_sexp,
       sexp_of_int64,
       int64_sexp_grammar,
       compare_list_local,
       compare_list,
       equal_list_local,
       equal_list,
       globalize_list,
       hash_fold_list,
       list_of_sexp,
       sexp_of_list,
       list_sexp_grammar,
       compare_nativeint_local,
       compare_nativeint,
       equal_nativeint_local,
       equal_nativeint,
       globalize_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       nativeint_of_sexp,
       sexp_of_nativeint,
       nativeint_sexp_grammar,
       compare_option_local,
       compare_option,
       equal_option_local,
       equal_option,
       globalize_option,
       hash_fold_option,
       option_of_sexp,
       sexp_of_option,
       option_sexp_grammar,
       compare_ref_local,
       compare_ref,
       equal_ref_local,
       equal_ref,
       globalize_ref,
       ref_of_sexp,
       sexp_of_ref,
       ref_sexp_grammar,
       compare_string_local,
       compare_string,
       equal_string_local,
       equal_string,
       globalize_string,
       hash_fold_string,
       hash_string,
       string_of_sexp,
       sexp_of_string,
       string_sexp_grammar,
       compare_bytes_local,
       compare_bytes,
       equal_bytes_local,
       equal_bytes,
       globalize_bytes,
       bytes_of_sexp,
       sexp_of_bytes,
       bytes_sexp_grammar,
       compare_unit_local,
       compare_unit,
       equal_unit_local,
       equal_unit,
       globalize_unit,
       hash_fold_unit,
       hash_unit,
       unit_of_sexp,
       sexp_of_unit,
       unit_sexp_grammar,
       symbol$6,
       symbol$7,
       lnot,
       abs,
       zero,
       symbol$8,
       symbol$9,
       symbol$10,
       ascending$0,
       descending$0,
       max$0,
       min$0,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol_concat,
       fst,
       snd,
       failwith,
       invalid_arg,
       raise_s],
    include$0 = Base_Container_intf[1],
    Continue_or_stop = include$0[1],
    Not_found_s$0 = Base_Import[297];
   Base_Backtrace[7].call(null, 0);
   var
    Caml = [0],
    Base =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Sexp,
       Int_conversions,
       Exported_for_specific_uses,
       Export,
       compare_array_local,
       compare_array,
       equal_array_local,
       equal_array,
       globalize_array,
       array_of_sexp,
       sexp_of_array,
       array_sexp_grammar,
       compare_bool_local,
       compare_bool,
       equal_bool_local,
       equal_bool,
       globalize_bool,
       hash_fold_bool,
       hash_bool,
       bool_of_sexp,
       sexp_of_bool,
       bool_sexp_grammar,
       compare_char_local,
       compare_char,
       equal_char_local,
       equal_char,
       globalize_char,
       hash_fold_char,
       hash_char,
       char_of_sexp,
       sexp_of_char,
       char_sexp_grammar,
       sexp_of_exn,
       compare_float_local,
       compare_float,
       equal_float_local,
       equal_float,
       globalize_float,
       hash_fold_float,
       hash_float,
       float_of_sexp,
       sexp_of_float,
       float_sexp_grammar,
       compare_int_local,
       compare_int,
       equal_int_local,
       equal_int,
       globalize_int,
       hash_fold_int,
       hash_int,
       int_of_sexp,
       sexp_of_int,
       int_sexp_grammar,
       compare_int32_local,
       compare_int32,
       equal_int32_local,
       equal_int32,
       globalize_int32,
       hash_fold_int32,
       hash_int32,
       int32_of_sexp,
       sexp_of_int32,
       int32_sexp_grammar,
       compare_int64_local,
       compare_int64,
       equal_int64_local,
       equal_int64,
       globalize_int64,
       hash_fold_int64,
       hash_int64,
       int64_of_sexp,
       sexp_of_int64,
       int64_sexp_grammar,
       compare_list_local,
       compare_list,
       equal_list_local,
       equal_list,
       globalize_list,
       hash_fold_list,
       list_of_sexp,
       sexp_of_list,
       list_sexp_grammar,
       compare_nativeint_local,
       compare_nativeint,
       equal_nativeint_local,
       equal_nativeint,
       globalize_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       nativeint_of_sexp,
       sexp_of_nativeint,
       nativeint_sexp_grammar,
       compare_option_local,
       compare_option,
       equal_option_local,
       equal_option,
       globalize_option,
       hash_fold_option,
       option_of_sexp,
       sexp_of_option,
       option_sexp_grammar,
       compare_ref_local,
       compare_ref,
       equal_ref_local,
       equal_ref,
       globalize_ref,
       ref_of_sexp,
       sexp_of_ref,
       ref_sexp_grammar,
       compare_string_local,
       compare_string,
       equal_string_local,
       equal_string,
       globalize_string,
       hash_fold_string,
       hash_string,
       string_of_sexp,
       sexp_of_string,
       string_sexp_grammar,
       compare_bytes_local,
       compare_bytes,
       equal_bytes_local,
       equal_bytes,
       globalize_bytes,
       bytes_of_sexp,
       sexp_of_bytes,
       bytes_sexp_grammar,
       compare_unit_local,
       compare_unit,
       equal_unit_local,
       equal_unit,
       globalize_unit,
       hash_fold_unit,
       hash_unit,
       unit_of_sexp,
       sexp_of_unit,
       unit_sexp_grammar,
       symbol$6,
       symbol$7,
       lnot,
       abs,
       zero,
       symbol$8,
       symbol$9,
       symbol$10,
       ascending$0,
       descending$0,
       max$0,
       min$0,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol_concat,
       fst,
       snd,
       failwith,
       invalid_arg,
       raise_s,
       Continue_or_stop,
       Not_found_s$0,
       Caml];
   runtime.caml_register_global(23, Base, "Base");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
