// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Base_bigstring
//# unitInfo: Requires: Base, Base__Blit, Base__Bool, Base__Bytes, Base__Char, Base__Hash, Base__Int, Base__List, Base__Option, Base__Ordered_collection_common, Base__Printf, Int_repr, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Sys
//# shape: Base_bigstring:[F(2),F(1),F(1),F(2),F(2),F(1),F(1),F(1),F(2),F(1),F(2),N,N,N,N,F(2),F(4),F(3),F(1),N,N,N,N,N,F(1),[N,N,N,N,N],N,N,N,F(4),F(4),F(5),F(5),F(5),F(4),F(7),F(2),F(3),F(2),F(3),F(2),F(3),F(2),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(3),F(3),F(3),F(3),N,N,[F(1)*]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_is_not_a_valid_unsigned_32 = " is not a valid unsigned 32-bit integer",
    cst_s_d_is_not_a_valid_unsigne =
      "%s: %d is not a valid unsigned 32-bit integer",
    cst = ": ",
    cst_Base_bigstring$0 = "Base_bigstring",
    cst_Bigstring_write_int16$1 = "Bigstring.write_int16",
    cst_Bigstring_write_int32_int$1 = "Bigstring.write_int32_int",
    cst_Bigstring_write_uint16$1 = "Bigstring.write_uint16",
    cst_base_bigstring$0 = "base_bigstring",
    cst_get_64$1 = "get_64",
    cst_src_base_bigstring_ml = "src/base_bigstring.ml",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_uint8_get16 = runtime.caml_ba_uint8_get16,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_ba_uint8_set16 = runtime.caml_ba_uint8_set16,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    loc$0 = "Bigstring.set_int8_exn",
    loc = "Bigstring.set_uint8_exn",
    Base_Char = global_data.Base__Char,
    Base = global_data.Base,
    Base_Bytes = global_data.Base__Bytes,
    Base_Int = global_data.Base__Int,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Bool = global_data.Base__Bool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Base_Blit = global_data.Base__Blit,
    Base_Hash = global_data.Base__Hash,
    Int_repr = global_data.Int_repr;
   Ppx_module_timer_runtime[4].call(null, cst_Base_bigstring$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_base_bigstring$0);
   Ppx_expect_runtime[1][1].call(null, cst_src_base_bigstring_ml);
   Ppx_inline_test_lib[6].call
    (null, cst_base_bigstring$0, "base_bigstring.ml");
   var
    Bigstring0 = [0],
    sprintf = Base_Printf[2],
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    not_on_32bit = 32 < Stdlib_Sys[9] ? 1 : 0,
    c =
      [0,
       [11, "create: size = ", [4, 0, 0, 0, [11, " < 0", 0]]],
       "create: size = %d < 0"];
   function create(size){
    if(size < 0){
     var a = caml_call1(sprintf(c), size);
     Base[245].call(null, a);
    }
    return runtime.bigstring_alloc_v2(size);
   }
   var
    length = caml_ba_dim_1,
    cst_pos_0 = ": pos < 0",
    cst_len_0 = ": len < 0",
    d =
      [0,
       [11, "Bigstring.", [2, 0, [11, ": length(bstr) < pos + len", 0]]],
       "Bigstring.%s: length(bstr) < pos + len"];
   function init(n, f){
    var t = create(n), a = n - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_ba_set_1(t, i, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return t;
   }
   function check_args(loc, pos, len, bstr){
    var
     bstr_len$0 = caml_ba_dim_1(bstr),
     g =
       caml_call2
        (Base_Bool[32][2],
         len < 0 ? 1 : 0,
         (bstr_len$0 - pos | 0) < len ? 1 : 0),
     b = caml_call2(Base_Bool[32][2], pos < 0 ? 1 : 0, g);
    if(! b) return b;
    if(pos < 0){
     var c = Base[241].call(null, loc, cst_pos_0);
     Base[245].call(null, c);
    }
    if(len < 0){
     var e = Base[241].call(null, loc, cst_len_0);
     Base[245].call(null, e);
    }
    var
     bstr_len = caml_ba_dim_1(bstr),
     a = (bstr_len - pos | 0) < len ? 1 : 0;
    if(! a) return a;
    var f = caml_call1(sprintf(d), loc);
    return Base[245].call(null, f);
   }
   function get_opt_len(bstr, pos, param){
    if(! param) return caml_ba_dim_1(bstr) - pos | 0;
    var len = param[1];
    return len;
   }
   function create$0(len){return create(len);}
   function create$1(len){return Base_Bytes[34].call(null, len);}
   var length$0 = caml_ml_bytes_length;
   function unsafe_blit(e, d, c, b, a){
    return runtime.bigstring_blit_stub(e, d, c, b, a);
   }
   var
    include = Base_Blit[1].call(null, [0, length, create$0, unsafe_blit]),
    blit = include[1],
    blito = include[2],
    unsafe_blit$0 = include[3],
    sub = include[4],
    subo = include[5],
    From_bytes =
      Base_Blit[2].call
       (null,
        [0, length$0],
        [0,
         length,
         create$0,
         function(e, d, c, b, a){
          return runtime.bigstring_blit_bytes_bigstring_stub(e, d, c, b, a);
         }]),
    To_bytes =
      Base_Blit[2].call
       (null,
        [0, length],
        [0,
         length$0,
         create$1,
         function(e, d, c, b, a){
          return runtime.bigstring_blit_bigstring_bytes_stub(e, d, c, b, a);
         }]),
    length$1 = runtime.caml_ml_string_length,
    From_string =
      Base_Blit[2].call
       (null,
        [0, length$1],
        [0,
         length,
         create$0,
         function(e, d, c, b, a){
          return runtime.bigstring_blit_string_bigstring_stub(e, d, c, b, a);
         }]),
    blit$0 = To_bytes[1],
    blito$0 = To_bytes[2],
    unsafe_blit$1 = To_bytes[3],
    include$2 = Base_Blit[3].call(null, Bigstring0, To_bytes),
    sub$0 = include$2[1],
    to_string = include$2[2],
    To_string = [0, blit$0, blito$0, unsafe_blit$1, sub$0, to_string],
    of_string = From_string[5],
    of_bytes = From_bytes[5],
    to_bytes = To_bytes[5],
    cst_bigstring_of_sexp_atom_nee = "bigstring_of_sexp: atom needed",
    e = [0, cst_src_base_bigstring_ml, 219, 6];
   function sexp_of_t_frozen(t){return [0, caml_call3(to_string, 0, 0, t)];}
   function t_frozen_of_sexp(sexp){
    if(0 !== sexp[0])
     return Sexplib0_Sexp_conv[27].call
             (null, cst_bigstring_of_sexp_atom_nee, sexp);
    var str = sexp[1];
    return caml_call3(of_string, 0, 0, str);
   }
   function copy(t){return caml_call3(sub, t, 0, caml_ba_dim_1(t));}
   function append(src, dst, dst_pos_ref){
    var len = caml_ba_dim_1(src), dst_pos = dst_pos_ref[1];
    caml_call5(blit, src, 0, dst, dst_pos, len);
    dst_pos_ref[1] = dst_pos + len | 0;
    return 0;
   }
   function concat(sep, list){
    if(! list) return create(0);
    var
     tail = list[2],
     head = list[1],
     head_len = caml_ba_dim_1(head),
     sep_len = Base_Option[32].call(null, sep, 0, caml_ba_dim_1),
     tail_count = Base_List[45].call(null, tail),
     len =
       (head_len + runtime.caml_mul(sep_len, tail_count) | 0)
       +
        Base_List[26].call
         (null,
          [0, Base_Int[79], function(b, a){return b + a | 0;}],
          tail,
          caml_ba_dim_1)
       | 0,
     dst = create(len),
     dst_pos_ref = [0, 0];
    append(head, dst, dst_pos_ref);
    Base_List[19].call
     (null,
      tail,
      function(src){
       if(sep){var sep$0 = sep[1]; append(sep$0, dst, dst_pos_ref);}
       return append(src, dst, dst_pos_ref);
      });
    if(dst_pos_ref[1] === len) return dst;
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   }
   function memset(t, pos, len, c){
    var a = caml_ba_dim_1(t);
    Base_Ordered_collection_common[2].call(null, pos, len, a);
    return runtime.bigstring_memset_stub(t, pos, len, c);
   }
   function memcmp(t1, pos1, t2, pos2, len){
    var b = caml_ba_dim_1(t1);
    Base_Ordered_collection_common[2].call(null, pos1, len, b);
    var a = caml_ba_dim_1(t2);
    Base_Ordered_collection_common[2].call(null, pos2, len, a);
    return runtime.bigstring_memcmp_stub(t1, pos1, t2, pos2, len);
   }
   function memcmp_bytes(t, pos1, bytes, pos2, len){
    var a = caml_ba_dim_1(t);
    Base_Ordered_collection_common[2].call(null, pos1, len, a);
    Base_Ordered_collection_common[2].call
     (null, pos2, len, caml_ml_bytes_length(bytes));
    return runtime.bigstring_memcmp_bytes_stub(t, pos1, bytes, pos2, len);
   }
   function memcmp_string(t, pos1, str, pos2, len){
    return memcmp_bytes(t, pos1, runtime.caml_bytes_of_string(str), pos2, len);
   }
   function compare_t_frozen(t1, t2){
    if(t1 === t2) return 0;
    var
     len1 = caml_ba_dim_1(t1),
     len2 = caml_ba_dim_1(t2),
     len = Base_Int[15].call(null, len1, len2),
     n = runtime.bigstring_memcmp_stub(t1, 0, t2, 0, len);
    return 0 === n ? len1 < len2 ? -1 : len2 < len1 ? 1 : 0 : n;
   }
   function hash_fold_t_frozen(b, a){
    return runtime.internalhash_fold_bigstring(b, a);
   }
   var
    f = Base_Hash[12],
    cst_find = "find",
    cst_get_16 = "get_16",
    cst_get_32 = "get_32",
    cst_get_64 = cst_get_64$1,
    cst_set_16 = "set_16",
    cst_set_32 = "set_32",
    cst_set_64 = "set_64",
    g =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 16-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 16-bit integer"],
    h =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 16-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 16-bit integer"];
   function hash_t_frozen(x){return f(hash_fold_t_frozen, x);}
   function equal(t1, t2){
    if(t1 === t2) return 1;
    var
     len1 = caml_ba_dim_1(t1),
     len2 = caml_ba_dim_1(t2),
     a = Base_Int[13].call(null, len1, len2);
    if(! a) return a;
    var b = runtime.bigstring_memcmp_stub(t1, 0, t2, 0, len1);
    return Base_Int[13].call(null, b, 0);
   }
   function find(opt, len, chr, bstr){
    var pos = opt ? opt[1] : 0, len$0 = get_opt_len(bstr, pos, len);
    check_args(cst_find, pos, len$0, bstr);
    var res = runtime.bigstring_find(bstr, chr, pos, len$0);
    return 0 <= res ? [0, res] : 0;
   }
   function memmem(haystack, needle, a, haystack_len, opt, needle_len, param){
    var
     haystack_pos = a ? a[1] : 0,
     needle_pos = opt ? opt[1] : 0,
     haystack_len$0 = get_opt_len(haystack, haystack_pos, haystack_len),
     needle_len$0 = get_opt_len(needle, needle_pos, needle_len),
     res =
       runtime.bigstring_memmem_bytecode
        (haystack,
         needle,
         haystack_pos,
         haystack_len$0,
         needle_pos,
         needle_len$0);
    return 0 <= res ? [0, res] : 0;
   }
   function get_16(t, pos){
    check_args(cst_get_16, pos, 2, t);
    return caml_ba_uint8_get16(t, pos);
   }
   function get_32(t, pos){
    check_args(cst_get_32, pos, 4, t);
    return caml_ba_uint8_get32(t, pos);
   }
   function get_64(t, pos){
    check_args(cst_get_64, pos, 8, t);
    return caml_ba_uint8_get64(t, pos);
   }
   function set_16_trunc(t, pos, v){
    check_args(cst_set_16, pos, 2, t);
    return caml_ba_uint8_set16(t, pos, v);
   }
   function set_32(t, pos, v){
    check_args(cst_set_32, pos, 4, t);
    return caml_ba_uint8_set32(t, pos, v);
   }
   function set_64(t, pos, v){
    check_args(cst_set_64, pos, 8, t);
    return caml_ba_uint8_set64(t, pos, v);
   }
   function sign_extend_16(u){
    return u << (Base_Int[64] - 16 | 0) >> (Base_Int[64] - 16 | 0);
   }
   function check_valid_uint16(x, loc){
    var b = x < 0 ? 1 : 0, a = b || (65535 < x ? 1 : 0);
    if(! a) return a;
    var c = caml_call2(sprintf(g), loc, x);
    return Base[245].call(null, c);
   }
   function check_valid_int16(x, loc){
    var b = x < -32768 ? 1 : 0, a = b || (32767 < x ? 1 : 0);
    if(! a) return a;
    var c = caml_call2(sprintf(h), loc, x);
    return Base[245].call(null, c);
   }
   var
    cst_get_64$0 = cst_get_64$1,
    cst_Bigstring_set_uint32_be_ex = "Bigstring.set_uint32_be_exn",
    cst_Bigstring_set_uint32_le_ex = "Bigstring.set_uint32_le_exn",
    cst_Bigstring_set_uint64_le_ex = "Bigstring.set_uint64_le_exn",
    cst_Bigstring_set_uint64_be_ex = "Bigstring.set_uint64_be_exn",
    r = caml_int64_create_lo_mi_hi(0, 0, 0),
    s = caml_int64_create_lo_mi_hi(0, 0, 16384),
    t = caml_int64_create_lo_mi_hi(0, 0, 0),
    u = caml_int64_create_lo_mi_hi(0, 64, 0),
    cst_unsafe_read_uint64_value_c =
      "unsafe_read_uint64: value cannot be represented unboxed!",
    cst_unsafe_read_int64_value_ca =
      "unsafe_read_int64: value cannot be represented unboxed!",
    q = caml_int64_create_lo_mi_hi(0, 0, 0),
    p = caml_int64_create_lo_mi_hi(0, 0, 0),
    o = caml_int64_create_lo_mi_hi(0, 0, 0),
    n = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Bigstring_write_int32_int$0 = cst_Bigstring_write_int32_int$1,
    cst_Bigstring_write_int32_int = cst_Bigstring_write_int32_int$1,
    cst_Bigstring_write_uint16$0 = cst_Bigstring_write_uint16$1,
    cst_Bigstring_write_uint16 = cst_Bigstring_write_uint16$1,
    cst_Bigstring_write_int16$0 = cst_Bigstring_write_int16$1,
    cst_Bigstring_write_int16 = cst_Bigstring_write_int16$1,
    m =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 64-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 64-bit integer"],
    l =
      [0,
       [2,
        0,
        [11, cst, [4, 0, 0, 0, [11, cst_is_not_a_valid_unsigned_32, 0]]]],
       cst_s_d_is_not_a_valid_unsigne],
    v =
      [0,
       [2,
        0,
        [11, cst, [4, 0, 0, 0, [11, cst_is_not_a_valid_unsigned_32, 0]]]],
       cst_s_d_is_not_a_valid_unsigne],
    k =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 32-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 32-bit integer"],
    j =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 8-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 8-bit integer"],
    i =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 8-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 8-bit integer"],
    cst_base_bigstring = cst_base_bigstring$0,
    cst_Base_bigstring = cst_Base_bigstring$0,
    check_valid_int32 =
      arch_sixtyfour
       ? function
        (x, loc){
         if(-2147483648 <= x && x < -2147483648) return;
         var a = caml_call2(sprintf(k), loc, x);
         return Base[245].call(null, a);
        }
       : function(a, param){},
    check_valid_uint32 =
      arch_sixtyfour
       ? function
        (x, loc){
         if(0 <= x && x < 1) return;
         var a = caml_call2(sprintf(l), loc, x);
         return Base[245].call(null, a);
        }
       : function
        (x, loc){
         if(0 <= x) return;
         var a = caml_call2(sprintf(v), loc, x);
         return Base[245].call(null, a);
        };
   function check_valid_uint64(x, loc){
    if(0 <= x) return;
    var a = caml_call2(sprintf(m), loc, x);
    return Base[245].call(null, a);
   }
   function unsafe_read_int16(t, pos){
    return sign_extend_16(caml_ba_uint8_get16(t, pos));
   }
   function unsafe_read_int16_swap(t, pos){
    return sign_extend_16(caml_bswap16(caml_ba_uint8_get16(t, pos)));
   }
   var unsafe_write_int16 = caml_ba_uint8_set16;
   function unsafe_write_int16_swap(t, pos, x){
    return caml_ba_uint8_set16(t, pos, caml_bswap16(x));
   }
   function read_int16(t, pos){return sign_extend_16(get_16(t, pos));}
   function read_int16_swap(t, pos){
    return sign_extend_16(caml_bswap16(get_16(t, pos)));
   }
   function write_int16_exn(t, pos, x){
    check_valid_int16(x, cst_Bigstring_write_int16);
    return set_16_trunc(t, pos, x);
   }
   function write_int16_swap_exn(t, pos, x){
    check_valid_int16(x, cst_Bigstring_write_int16$0);
    return set_16_trunc(t, pos, caml_bswap16(x));
   }
   var unsafe_read_uint16 = caml_ba_uint8_get16;
   function unsafe_read_uint16_swap(t, pos){
    return caml_bswap16(caml_ba_uint8_get16(t, pos));
   }
   var unsafe_write_uint16 = caml_ba_uint8_set16;
   function unsafe_write_uint16_swap(t, pos, x){
    return caml_ba_uint8_set16(t, pos, caml_bswap16(x));
   }
   function read_uint16(t, pos){return get_16(t, pos);}
   function read_uint16_swap(t, pos){return caml_bswap16(get_16(t, pos));}
   function write_uint16_exn(t, pos, x){
    check_valid_uint16(x, cst_Bigstring_write_uint16);
    return set_16_trunc(t, pos, x);
   }
   function write_uint16_swap_exn(t, pos, x){
    check_valid_uint16(x, cst_Bigstring_write_uint16$0);
    return set_16_trunc(t, pos, caml_bswap16(x));
   }
   function unsafe_read_int32_int(t, pos){return caml_ba_uint8_get32(t, pos);}
   function unsafe_read_int32_int_swap(t, pos){
    return caml_int32_bswap(caml_ba_uint8_get32(t, pos));
   }
   var unsafe_read_int32 = caml_ba_uint8_get32;
   function unsafe_read_int32_swap(t, pos){
    return caml_int32_bswap(caml_ba_uint8_get32(t, pos));
   }
   var unsafe_write_int32 = caml_ba_uint8_set32;
   function unsafe_write_int32_swap(t, pos, x){
    return caml_ba_uint8_set32(t, pos, caml_int32_bswap(x));
   }
   function unsafe_write_int32_int(t, pos, x){return caml_ba_uint8_set32(t, pos, x);
   }
   function unsafe_write_int32_int_swap(t, pos, x){
    return caml_ba_uint8_set32(t, pos, caml_int32_bswap(x));
   }
   function read_int32_int(t, pos){return get_32(t, pos);}
   function read_int32_int_swap(t, pos){
    return caml_int32_bswap(get_32(t, pos));
   }
   function read_int32(t, pos){return get_32(t, pos);}
   function read_int32_swap(t, pos){return caml_int32_bswap(get_32(t, pos));}
   function write_int32(t, pos, x){return set_32(t, pos, x);}
   function write_int32_swap(t, pos, x){
    return set_32(t, pos, caml_int32_bswap(x));
   }
   function write_int32_int_exn(t, pos, x){
    check_valid_int32(x, cst_Bigstring_write_int32_int);
    return set_32(t, pos, x);
   }
   function write_int32_int_swap_exn(t, pos, x){
    check_valid_int32(x, cst_Bigstring_write_int32_int$0);
    return set_32(t, pos, caml_int32_bswap(x));
   }
   function unsafe_read_int64_int(t, pos){
    return caml_int64_to_int32(caml_ba_uint8_get64(t, pos));
   }
   function unsafe_read_int64_int_swap(t, pos){
    return caml_int64_to_int32(caml_int64_bswap(caml_ba_uint8_get64(t, pos)));
   }
   var unsafe_read_int64 = caml_ba_uint8_get64;
   function unsafe_read_int64_swap(t, pos){
    return caml_int64_bswap(caml_ba_uint8_get64(t, pos));
   }
   var unsafe_write_int64 = caml_ba_uint8_set64;
   function unsafe_write_int64_swap(t, pos, x){
    return caml_ba_uint8_set64(t, pos, caml_int64_bswap(x));
   }
   function unsafe_write_int64_int(t, pos, x){
    return caml_ba_uint8_set64(t, pos, caml_int64_of_int32(x));
   }
   function unsafe_write_int64_int_swap(t, pos, x){
    return caml_ba_uint8_set64
            (t, pos, caml_int64_bswap(caml_int64_of_int32(x)));
   }
   function read_int64_int(t, pos){
    return caml_int64_to_int32(get_64(t, pos));
   }
   function read_int64_int_swap(t, pos){
    return caml_int64_to_int32(caml_int64_bswap(get_64(t, pos)));
   }
   function read_int64(t, pos){return get_64(t, pos);}
   function read_int64_swap(t, pos){return caml_int64_bswap(get_64(t, pos));}
   function write_int64(t, pos, x){return set_64(t, pos, x);}
   function write_int64_swap(t, pos, x){
    return set_64(t, pos, caml_int64_bswap(x));
   }
   function write_int64_int(t, pos, x){
    return set_64(t, pos, caml_int64_of_int32(x));
   }
   function write_int64_int_swap(t, pos, x){
    return set_64(t, pos, caml_int64_bswap(caml_int64_of_int32(x)));
   }
   var
    unsafe_get_int16_be =
      arch_big_endian ? unsafe_read_int16 : unsafe_read_int16_swap,
    unsafe_get_int16_le =
      arch_big_endian ? unsafe_read_int16_swap : unsafe_read_int16,
    unsafe_get_uint16_be =
      arch_big_endian ? unsafe_read_uint16 : unsafe_read_uint16_swap,
    unsafe_get_uint16_le =
      arch_big_endian ? unsafe_read_uint16_swap : unsafe_read_uint16,
    get_int16_be = arch_big_endian ? read_int16 : read_int16_swap,
    get_int16_le = arch_big_endian ? read_int16_swap : read_int16,
    get_uint16_be = arch_big_endian ? read_uint16 : read_uint16_swap,
    get_uint16_le = arch_big_endian ? read_uint16_swap : read_uint16,
    unsafe_set_int16_be =
      arch_big_endian ? unsafe_write_int16 : unsafe_write_int16_swap,
    unsafe_set_int16_le =
      arch_big_endian ? unsafe_write_int16_swap : unsafe_write_int16,
    unsafe_set_uint16_be =
      arch_big_endian ? unsafe_write_uint16 : unsafe_write_uint16_swap,
    unsafe_set_uint16_le =
      arch_big_endian ? unsafe_write_uint16_swap : unsafe_write_uint16,
    set_int16_be_exn =
      arch_big_endian ? write_int16_exn : write_int16_swap_exn,
    set_int16_le_exn =
      arch_big_endian ? write_int16_swap_exn : write_int16_exn,
    set_uint16_be_exn =
      arch_big_endian ? write_uint16_exn : write_uint16_swap_exn,
    set_uint16_le_exn =
      arch_big_endian ? write_uint16_swap_exn : write_uint16_exn,
    unsafe_get_int32_t_be =
      arch_big_endian ? unsafe_read_int32 : unsafe_read_int32_swap,
    unsafe_get_int32_t_le =
      arch_big_endian ? unsafe_read_int32_swap : unsafe_read_int32,
    unsafe_set_int32_t_be =
      arch_big_endian ? unsafe_write_int32 : unsafe_write_int32_swap,
    unsafe_set_int32_t_le =
      arch_big_endian ? unsafe_write_int32_swap : unsafe_write_int32,
    get_int32_t_be = arch_big_endian ? read_int32 : read_int32_swap,
    get_int32_t_le = arch_big_endian ? read_int32_swap : read_int32,
    set_int32_t_be = arch_big_endian ? write_int32 : write_int32_swap,
    set_int32_t_le = arch_big_endian ? write_int32_swap : write_int32,
    unsafe_get_int32_be =
      arch_big_endian ? unsafe_read_int32_int : unsafe_read_int32_int_swap,
    unsafe_get_int32_le =
      arch_big_endian ? unsafe_read_int32_int_swap : unsafe_read_int32_int,
    unsafe_set_int32_be =
      arch_big_endian ? unsafe_write_int32_int : unsafe_write_int32_int_swap,
    unsafe_set_int32_le =
      arch_big_endian ? unsafe_write_int32_int_swap : unsafe_write_int32_int,
    get_int32_be = arch_big_endian ? read_int32_int : read_int32_int_swap,
    get_int32_le = arch_big_endian ? read_int32_int_swap : read_int32_int,
    set_int32_be_exn =
      arch_big_endian ? write_int32_int_exn : write_int32_int_swap_exn,
    set_int32_le_exn =
      arch_big_endian ? write_int32_int_swap_exn : write_int32_int_exn,
    unsafe_get_int64_be_trunc =
      arch_big_endian ? unsafe_read_int64_int : unsafe_read_int64_int_swap,
    unsafe_get_int64_le_trunc =
      arch_big_endian ? unsafe_read_int64_int_swap : unsafe_read_int64_int,
    unsafe_set_int64_be =
      arch_big_endian ? unsafe_write_int64_int : unsafe_write_int64_int_swap,
    unsafe_set_int64_le =
      arch_big_endian ? unsafe_write_int64_int_swap : unsafe_write_int64_int,
    get_int64_be_trunc =
      arch_big_endian ? read_int64_int : read_int64_int_swap,
    get_int64_le_trunc =
      arch_big_endian ? read_int64_int_swap : read_int64_int,
    set_int64_be = arch_big_endian ? write_int64_int : write_int64_int_swap,
    set_int64_le = arch_big_endian ? write_int64_int_swap : write_int64_int,
    unsafe_get_int64_t_be =
      arch_big_endian ? unsafe_read_int64 : unsafe_read_int64_swap,
    unsafe_get_int64_t_le =
      arch_big_endian ? unsafe_read_int64_swap : unsafe_read_int64,
    unsafe_set_int64_t_be =
      arch_big_endian ? unsafe_write_int64 : unsafe_write_int64_swap,
    unsafe_set_int64_t_le =
      arch_big_endian ? unsafe_write_int64_swap : unsafe_write_int64;
   function get_string(t, pos, len){
    var bytes = Base_Bytes[34].call(null, len);
    caml_call5(To_bytes[1], t, pos, bytes, 0, len);
    return caml_string_of_bytes(bytes);
   }
   function unsafe_get_string(t, pos, len){
    var bytes = Base_Bytes[34].call(null, len);
    caml_call5(To_bytes[3], t, pos, bytes, 0, len);
    return caml_string_of_bytes(bytes);
   }
   function unsafe_read_int64_local(t, pos){
    return caml_int64_add(n, caml_ba_uint8_get64(t, pos));
   }
   function unsafe_read_int64_swap_local(t, pos){
    return caml_int64_add(o, unsafe_read_int64_swap(t, pos));
   }
   function read_int64_local(t, pos){
    return caml_int64_add(p, get_64(t, pos));
   }
   function read_int64_swap_local(t, pos){
    return caml_int64_add(q, read_int64_swap(t, pos));
   }
   var
    unsafe_get_int64_t_be$0 =
      arch_big_endian ? unsafe_read_int64_local : unsafe_read_int64_swap_local,
    unsafe_get_int64_t_le$0 =
      arch_big_endian ? unsafe_read_int64_swap_local : unsafe_read_int64_local,
    get_int64_t_be =
      arch_big_endian ? read_int64_local : read_int64_swap_local,
    get_int64_t_le =
      arch_big_endian ? read_int64_swap_local : read_int64_local;
   function get_string$0(t, pos, len){
    var bytes = Base_Bytes[35].call(null, len);
    caml_call5(To_bytes[1], t, pos, bytes, 0, len);
    return caml_string_of_bytes(bytes);
   }
   function unsafe_get_string$0(t, pos, len){
    var bytes = Base_Bytes[35].call(null, len);
    caml_call5(To_bytes[3], t, pos, bytes, 0, len);
    return caml_string_of_bytes(bytes);
   }
   var
    get_int64_t_be$0 = arch_big_endian ? read_int64 : read_int64_swap,
    get_int64_t_le$0 = arch_big_endian ? read_int64_swap : read_int64,
    set_int64_t_be = arch_big_endian ? write_int64 : write_int64_swap,
    set_int64_t_le = arch_big_endian ? write_int64_swap : write_int64;
   function uint64_conv_error(param){
    return Base[244].call(null, cst_unsafe_read_uint64_value_c);
   }
   function int64_to_int_exn(n){
    var n$0 = caml_int64_to_int32(n);
    return runtime.caml_equal(caml_int64_of_int32(n$0), n)
            ? n$0
            : Base[244].call(null, cst_unsafe_read_int64_value_ca);
   }
   function uint64_to_int_exn(n){
    if(arch_sixtyfour){
     if(caml_greaterequal(n, r) && caml_lessthan(n, s))
      return caml_int64_to_int32(n);
     return uint64_conv_error(0);
    }
    if(caml_greaterequal(n, t) && caml_lessthan(n, u))
     return caml_int64_to_int32(n);
    return uint64_conv_error(0);
   }
   function unsafe_get_int64_be_exn(t, pos){
    return int64_to_int_exn(unsafe_get_int64_t_be(t, pos));
   }
   function unsafe_get_int64_le_exn(t, pos){
    return int64_to_int_exn(unsafe_get_int64_t_le(t, pos));
   }
   function get_int64_be_exn(t, pos){
    return int64_to_int_exn(get_int64_t_be$0(t, pos));
   }
   function get_int64_le_exn(t, pos){
    return int64_to_int_exn(get_int64_t_le$0(t, pos));
   }
   function unsafe_get_uint64_be_exn(t, pos){
    return uint64_to_int_exn(unsafe_get_int64_t_be(t, pos));
   }
   function unsafe_get_uint64_le_exn(t, pos){
    return uint64_to_int_exn(unsafe_get_int64_t_le(t, pos));
   }
   function get_uint64_be_exn(t, pos){
    return uint64_to_int_exn(get_int64_t_be$0(t, pos));
   }
   function get_uint64_le_exn(t, pos){
    return uint64_to_int_exn(get_int64_t_le$0(t, pos));
   }
   function set_uint64_be_exn(t, pos, n){
    check_valid_uint64(n, cst_Bigstring_set_uint64_be_ex);
    return set_int64_be(t, pos, n);
   }
   function set_uint64_le_exn(t, pos, n){
    check_valid_uint64(n, cst_Bigstring_set_uint64_le_ex);
    return set_int64_le(t, pos, n);
   }
   function unsafe_set_uint8(t, pos, n){
    return caml_ba_set_1(t, pos, Base_Char[35].call(null, n));
   }
   function unsafe_set_int8(t, pos, n){
    var n$0 = 0 <= n ? n : n + 256 | 0;
    return caml_ba_set_1(t, pos, Base_Char[35].call(null, n$0));
   }
   function unsafe_get_uint8(t, pos){
    var a = caml_ba_get_1(t, pos);
    return Base_Char[32].call(null, a);
   }
   function unsafe_get_int8(t, pos){
    var a = caml_ba_get_1(t, pos), n = Base_Char[32].call(null, a);
    return 128 <= n ? n - 256 | 0 : n;
   }
   function set_uint8_exn(t, pos, n){
    var a = n < 0 ? 1 : 0, b = a || (255 < n ? 1 : 0);
    if(b){var c = caml_call2(sprintf(i), loc, n); Base[245].call(null, c);}
    return caml_ba_set_1(t, pos, Base_Char[35].call(null, n));
   }
   function set_int8_exn(t, pos, n){
    var a = n < -128 ? 1 : 0, b = a || (127 < n ? 1 : 0);
    if(b){var c = caml_call2(sprintf(j), loc$0, n); Base[245].call(null, c);}
    var n$0 = 0 <= n ? n : n + 256 | 0;
    return caml_ba_set_1(t, pos, Base_Char[35].call(null, n$0));
   }
   function get_uint8(t, pos){
    var a = caml_ba_get_1(t, pos);
    return Base_Char[32].call(null, a);
   }
   function get_int8(t, pos){
    var a = caml_ba_get_1(t, pos), n = Base_Char[32].call(null, a);
    return 128 <= n ? n - 256 | 0 : n;
   }
   function uint32_of_int32_t(n){return not_on_32bit ? n & -1 : n;}
   function unsafe_set_uint32_le(t, pos, n){
    return unsafe_set_int32_t_le(t, pos, n);
   }
   function unsafe_set_uint32_be(t, pos, n){
    return unsafe_set_int32_t_be(t, pos, n);
   }
   function unsafe_get_uint32_le(t, pos){
    return uint32_of_int32_t(unsafe_get_int32_t_le(t, pos));
   }
   function unsafe_get_uint32_be(t, pos){
    return uint32_of_int32_t(unsafe_get_int32_t_be(t, pos));
   }
   function set_uint32_le_exn(t, pos, n){
    check_valid_uint32(n, cst_Bigstring_set_uint32_le_ex);
    var n$0 = not_on_32bit ? -2147483648 <= n ? n - 1 | 0 : n : n;
    return set_int32_le_exn(t, pos, n$0);
   }
   function set_uint32_be_exn(t, pos, n){
    check_valid_uint32(n, cst_Bigstring_set_uint32_be_ex);
    var n$0 = not_on_32bit ? -2147483648 <= n ? n - 1 | 0 : n : n;
    return set_int32_be_exn(t, pos, n$0);
   }
   function get_uint32_le(t, pos){
    return uint32_of_int32_t(get_int32_t_le(t, pos));
   }
   function get_uint32_be(t, pos){
    return uint32_of_int32_t(get_int32_t_be(t, pos));
   }
   function get_uint8$0(t, pos){return get_uint8(t, pos);}
   function set_uint8(t, pos, x){
    return caml_ba_set_1(t, pos, Base_Char[35].call(null, x));
   }
   function get_uint16_ne(t, pos){return get_16(t, pos);}
   function set_uint16_ne(t, pos, x){return set_16_trunc(t, pos, x);}
   function get_int32_ne(t, pos){return get_32(t, pos);}
   function set_int32_ne(t, pos, x){return set_32(t, pos, x);}
   function get_int64_ne(t, pos){return get_64(t, pos);}
   function set_int64_ne(t, pos, x){return set_64(t, pos, x);}
   function get_int64_ne$0(t, pos){
    check_args(cst_get_64$0, pos, 8, t);
    return caml_ba_uint8_get64(t, pos);
   }
   var
    Local = [0, get_int64_ne$0],
    a =
      Int_repr[11].call
       (null,
        [0, get_uint8$0, get_uint16_ne, get_int32_ne, get_int64_ne, Local]),
    get_int8$0 = a[1],
    get_uint8$1 = a[2],
    get_int16_le$0 = a[3],
    get_int16_be$0 = a[4],
    get_uint16_le$0 = a[5],
    get_uint16_be$0 = a[6],
    get_int32_le$0 = a[7],
    get_int32_be$0 = a[8],
    get_uint32_le$0 = a[9],
    get_uint32_be$0 = a[10],
    get_int64_le = a[11],
    get_int64_be = a[12],
    get_uint64_le = a[13],
    get_uint64_be = a[14],
    Local$0 = a[15],
    include$0 =
      Int_repr[12].call
       (null, [0, set_uint8, set_uint16_ne, set_int32_ne, set_int64_ne]),
    set_int8 = include$0[1],
    set_uint8$0 = include$0[2],
    set_int16_le = include$0[3],
    set_int16_be = include$0[4],
    set_uint16_le = include$0[5],
    set_uint16_be = include$0[6],
    set_int32_le = include$0[7],
    set_int32_be = include$0[8],
    set_uint32_le = include$0[9],
    set_uint32_be = include$0[10],
    set_int64_le$0 = include$0[11],
    set_int64_be$0 = include$0[12],
    set_uint64_le = include$0[13],
    set_uint64_be = include$0[14];
   function get_uint8$2(t, pos){return unsafe_get_uint8(t, pos);}
   function set_uint8$1(t, pos, x){return unsafe_set_uint8(t, pos, x);}
   var
    get_uint16_ne$0 = caml_ba_uint8_get16,
    set_uint16_ne$0 = caml_ba_uint8_set16,
    get_int32_ne$0 = caml_ba_uint8_get32,
    set_int32_ne$0 = caml_ba_uint8_set32,
    get_int64_ne$1 = caml_ba_uint8_get64,
    set_int64_ne$0 = caml_ba_uint8_set64,
    get_int64_ne$2 = caml_ba_uint8_get64,
    Local$1 = [0, get_int64_ne$2],
    b =
      Int_repr[11].call
       (null,
        [0,
         get_uint8$2,
         get_uint16_ne$0,
         get_int32_ne$0,
         get_int64_ne$1,
         Local$1]),
    get_int8$1 = b[1],
    get_uint8$3 = b[2],
    get_int16_le$1 = b[3],
    get_int16_be$1 = b[4],
    get_uint16_le$1 = b[5],
    get_uint16_be$1 = b[6],
    get_int32_le$1 = b[7],
    get_int32_be$1 = b[8],
    get_uint32_le$1 = b[9],
    get_uint32_be$1 = b[10],
    get_int64_le$0 = b[11],
    get_int64_be$0 = b[12],
    get_uint64_le$0 = b[13],
    get_uint64_be$0 = b[14],
    Local$2 = b[15],
    include$1 =
      Int_repr[12].call
       (null,
        [0, set_uint8$1, set_uint16_ne$0, set_int32_ne$0, set_int64_ne$0]),
    set_int8$0 = include$1[1],
    set_uint8$2 = include$1[2],
    set_int16_le$0 = include$1[3],
    set_int16_be$0 = include$1[4],
    set_uint16_le$0 = include$1[5],
    set_uint16_be$0 = include$1[6],
    set_int32_le$0 = include$1[7],
    set_int32_be$0 = include$1[8],
    set_uint32_le$0 = include$1[9],
    set_uint32_be$0 = include$1[10],
    set_int64_le$1 = include$1[11],
    set_int64_be$1 = include$1[12],
    set_uint64_le$0 = include$1[13],
    set_uint64_be$0 = include$1[14],
    Private = [0, sign_extend_16];
   Ppx_inline_test_lib[7].call(null, cst_base_bigstring);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Base_bigstring);
   var
    Base_bigstring =
      [0,
       compare_t_frozen,
       t_frozen_of_sexp,
       sexp_of_t_frozen,
       compare_t_frozen,
       hash_fold_t_frozen,
       hash_t_frozen,
       sexp_of_t_frozen,
       t_frozen_of_sexp,
       equal,
       create,
       init,
       of_string,
       of_bytes,
       to_string,
       to_bytes,
       concat,
       check_args,
       get_opt_len,
       length,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       copy,
       To_string,
       From_string,
       To_bytes,
       From_bytes,
       memset,
       function(d, c, b, a){return runtime.bigstring_memset_stub(d, c, b, a);},
       memcmp,
       memcmp_bytes,
       memcmp_string,
       find,
       memmem,
       get_int8,
       set_int8_exn,
       get_uint8,
       set_uint8_exn,
       unsafe_get_int8,
       unsafe_set_int8,
       unsafe_get_uint8,
       unsafe_set_uint8,
       get_int16_le,
       get_int16_be,
       set_int16_le_exn,
       set_int16_be_exn,
       unsafe_get_int16_le,
       unsafe_get_int16_be,
       unsafe_set_int16_le,
       unsafe_set_int16_be,
       get_uint16_le,
       get_uint16_be,
       set_uint16_le_exn,
       set_uint16_be_exn,
       unsafe_get_uint16_le,
       unsafe_get_uint16_be,
       unsafe_set_uint16_le,
       unsafe_set_uint16_be,
       get_int32_le,
       get_int32_be,
       set_int32_le_exn,
       set_int32_be_exn,
       unsafe_get_int32_le,
       unsafe_get_int32_be,
       unsafe_set_int32_le,
       unsafe_set_int32_be,
       get_uint32_le,
       get_uint32_be,
       set_uint32_le_exn,
       set_uint32_be_exn,
       unsafe_get_uint32_le,
       unsafe_get_uint32_be,
       unsafe_set_uint32_le,
       unsafe_set_uint32_be,
       get_int64_le_exn,
       get_int64_be_exn,
       get_int64_le_trunc,
       get_int64_be_trunc,
       set_int64_le,
       set_int64_be,
       unsafe_get_int64_le_exn,
       unsafe_get_int64_be_exn,
       unsafe_get_int64_le_trunc,
       unsafe_get_int64_be_trunc,
       unsafe_set_int64_le,
       unsafe_set_int64_be,
       get_uint64_be_exn,
       get_uint64_le_exn,
       set_uint64_le_exn,
       set_uint64_be_exn,
       unsafe_get_uint64_be_exn,
       unsafe_get_uint64_le_exn,
       unsafe_set_int64_le,
       unsafe_set_int64_be,
       get_int32_t_le,
       get_int32_t_be,
       set_int32_t_le,
       set_int32_t_be,
       unsafe_get_int32_t_le,
       unsafe_get_int32_t_be,
       unsafe_set_int32_t_le,
       unsafe_set_int32_t_be,
       get_int64_t_le$0,
       get_int64_t_be$0,
       set_int64_t_le,
       set_int64_t_be,
       unsafe_get_int64_t_le,
       unsafe_get_int64_t_be,
       unsafe_set_int64_t_le,
       unsafe_set_int64_t_be,
       get_string,
       unsafe_get_string,
       [0,
        get_int64_t_le,
        get_int64_t_be,
        unsafe_get_int64_t_le$0,
        unsafe_get_int64_t_be$0,
        get_string$0,
        unsafe_get_string$0],
       [0,
        get_int8$0,
        get_uint8$1,
        get_int16_le$0,
        get_int16_be$0,
        get_uint16_le$0,
        get_uint16_be$0,
        get_int32_le$0,
        get_int32_be$0,
        get_uint32_le$0,
        get_uint32_be$0,
        get_int64_le,
        get_int64_be,
        get_uint64_le,
        get_uint64_be,
        Local$0,
        set_int8,
        set_uint8$0,
        set_int16_le,
        set_int16_be,
        set_uint16_le,
        set_uint16_be,
        set_int32_le,
        set_int32_be,
        set_uint32_le,
        set_uint32_be,
        set_int64_le$0,
        set_int64_be$0,
        set_uint64_le,
        set_uint64_be,
        [0,
         get_int8$1,
         get_uint8$3,
         get_int16_le$1,
         get_int16_be$1,
         get_uint16_le$1,
         get_uint16_be$1,
         get_int32_le$1,
         get_int32_be$1,
         get_uint32_le$1,
         get_uint32_be$1,
         get_int64_le$0,
         get_int64_be$0,
         get_uint64_le$0,
         get_uint64_be$0,
         Local$2,
         set_int8$0,
         set_uint8$2,
         set_int16_le$0,
         set_int16_be$0,
         set_uint16_le$0,
         set_uint16_be$0,
         set_int32_le$0,
         set_int32_be$0,
         set_uint32_le$0,
         set_uint32_be$0,
         set_int64_le$1,
         set_int64_be$1,
         set_uint64_le$0,
         set_uint64_be$0]],
       Private];
   runtime.caml_register_global(72, Base_bigstring, cst_Base_bigstring$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
