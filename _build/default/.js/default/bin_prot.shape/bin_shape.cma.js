// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Bin_shape
//# unitInfo: Requires: Base, Base__Comparator, Base__Int, Base__List, Base__Map, Base__Option, Base__Printf, Base__String, Md5_lib, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
//# shape: Bin_shape:[F(1),N,N,N,N,F(2),F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(3)*,F(2)*,F(2)*,F(2)*,N,N,N,N,N,F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Annotate = "Annotate",
    cst_Base = "Base",
    cst_Constr = "Constr",
    cst_Inherit = "Inherit",
    cst_Poly_variant = "Poly_variant",
    cst_Rec_app = "Rec_app",
    cst_Record = "Record",
    cst_Top_app = "Top_app",
    cst_Tuple = "Tuple",
    cst_Var = "Var",
    cst_Variant = "Variant",
    cst_annotate$0 = "annotate",
    cst_base$0 = "base",
    cst_gid$0 = "gid",
    cst_loc$0 = "loc",
    cst_members$0 = "members",
    cst_poly_variant$0 = "poly_variant",
    cst_rec_app$0 = "rec_app",
    cst_record$0 = "record",
    cst_shape_src_bin_shape_ml_Exp =
      "shape/src/bin_shape.ml.Expression.poly_constr",
    cst_top_app = "top_app",
    cst_tuple$0 = "tuple",
    cst_var$0 = "var",
    cst_variant$0 = "variant",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    error_source_263 = cst_shape_src_bin_shape_ml_Exp,
    error_source_275 = cst_shape_src_bin_shape_ml_Exp,
    error_source_317 = "shape/src/bin_shape.ml.Expression.Group.t",
    error_source_414 = "shape/src/bin_shape.ml.Expression.Stable.V1.t",
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_Map = global_data.Base__Map,
    Base_Comparator = global_data.Base__Comparator,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_String = global_data.Base__String,
    Base_Int = global_data.Base__Int,
    Base_Printf = global_data.Base__Printf,
    Md5_lib = global_data.Md5_lib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    t_of_sexp = Base_String[41],
    sexp_of_t = Base_String[42],
    of_string = Base_String[43],
    to_string = Base_String[44],
    equal = Base_String[134],
    t_of_sexp$0 = Base_String[41],
    sexp_of_t$0 = Base_String[42],
    of_string$0 = Base_String[43],
    to_string$0 = Base_String[44],
    compare = Base_String[51],
    equal$0 = Base_String[134],
    cst_Location_s = "%{Location}: %s",
    a = [11, ": ", [2, 0, 0]],
    b = [0, 0],
    c = [0, "sorted"],
    d = [0, 17724, 0],
    e =
      [0,
       [11,
        "Different shapes for duplicated polymorphic constructor: `",
        [2, 0, 0]],
       "Different shapes for duplicated polymorphic constructor: `%s"];
   function eval_fail(loc, fmt){
    return Base_Printf[4].call
            (null,
             function(s){
              var
               c =
                 caml_call2
                  (Base_Printf[2].call
                    (null,
                     [0,
                      [24,
                       b,
                       function(param, custom_printf_001){
                        return to_string(custom_printf_001);
                       },
                       a],
                      cst_Location_s]),
                   loc,
                   s);
              return Base[244].call(null, c);
             },
             fmt);
   }
   function compare$0(cmp_a, a_002, b_003){
    return a_002 === b_003
            ? 0
            : Base
               [159].call
              (null,
               function(a_004, b_005){
                var
                 t_007 = a_004[2],
                 t_006 = a_004[1],
                 t_009 = b_005[2],
                 t_008 = b_005[1],
                 n = Base[195].call(null, t_006, t_008);
                return 0 === n ? caml_call2(cmp_a, t_007, t_009) : n;
               },
               a_002[1],
               b_003[1]);
   }
   function sexp_of_t$1(of_a_019, param){
    var
     sorted_021 = param[1],
     arg_022 =
       Base[165].call
        (null,
         function(param){
          var
           arg1_024 = param[2],
           arg0_023 = param[1],
           res0_025 = Base[202].call(null, arg0_023),
           res1_026 = caml_call1(of_a_019, arg1_024);
          return [1, [0, res0_025, [0, res1_026, 0]]];
         },
         sorted_021),
     bnds_020 = [0, [1, [0, c, [0, arg_022, 0]]], 0];
    return [1, bnds_020];
   }
   function create(loc, eq, xs$1){
    var
     sorted =
       Base_List[83].call
        (null,
         xs$1,
         function(a, param){
          var s2 = param[1], s1 = a[1];
          return Base_String[51].call(null, s1, s2);
         });
    if(sorted){
     var
      xs$0 = sorted[2],
      match$0 = sorted[1],
      last_value$1 = match$0[2],
      last_key$1 = match$0[1],
      acc$1 = [0, [0, last_key$1, last_value$1], 0],
      acc = acc$1,
      last_key = last_key$1,
      last_value = last_value$1,
      param = xs$0;
     for(;;){
      if(! param){
       var match$1 = [0, 17724, Base_List[63].call(null, acc)];
       break;
      }
      var
       xs = param[2],
       match = param[1],
       last_value$0 = match[2],
       last_key$0 = match[1];
      if(Base_String[47].call(null, last_key, last_key$0)){
       if(! caml_call2(eq, last_value, last_value$0)){
        var match$1 = [0, -1062743954, last_key$0];
        break;
       }
       param = xs;
      }
      else{
       var acc$0 = [0, [0, last_key$0, last_value$0], acc];
       acc = acc$0;
       last_key = last_key$0;
       last_value = last_value$0;
       param = xs;
      }
     }
    }
    else
     var match$1 = d;
    var variant = match$1[1];
    if(17724 <= variant){var sorted$0 = match$1[2]; return [0, sorted$0];}
    var s = match$1[2];
    return caml_call2(eval_fail(loc, e), s, 0);
   }
   function expose(t){return t[1];}
   function map(t, f){
    return [0,
            Base_List[53].call
             (null,
              t[1],
              function(param){
               var v = param[2], k = param[1];
               return [0, k, caml_call1(f, v)];
              })];
   }
   var
    compare$1 = Md5_lib[1],
    to_binary = Md5_lib[3],
    to_hex = Md5_lib[7],
    of_hex_exn = Md5_lib[8],
    string = Md5_lib[9],
    f = [0, ""],
    cst_some = "some",
    cst_none = "none",
    g = [0, cst_Annotate],
    h = [0, cst_Base],
    i = [0, cst_Tuple],
    j = [0, cst_Record],
    k = [0, cst_Variant],
    l = [0, cst_Poly_variant],
    m = [0, "Application"],
    n = [0, cst_Rec_app],
    o = [0, cst_Var],
    p = [0, "..."],
    cst_annotate = cst_annotate$0,
    cst_base = cst_base$0,
    cst_tuple = cst_tuple$0,
    cst_record = cst_record$0,
    cst_variant = cst_variant$0,
    cst_poly_variant = cst_poly_variant$0,
    cst_application = "application",
    cst_rec_app = cst_rec_app$0,
    cst_var = cst_var$0;
   function to_md5(t){return t;}
   function of_md5(t){return t;}
   function sexp_of_t$2(t){var a = to_hex(t); return Base[202].call(null, a);}
   function t_of_sexp$1(s){return of_hex_exn(Base[201].call(null, s));}
   function uuid(u){return string(to_string$0(u));}
   function int(x){return string(Base_Int[12].call(null, x));}
   function pair(x, y){
    var a = to_binary(y), b = to_binary(x);
    return string(Base[241].call(null, b, a));
   }
   function list(l){
    var a = Base_List[53].call(null, l, to_binary);
    return string(Base_String[68].call(null, f, a));
   }
   function constructor(s, l){
    var a = to_binary(list(l));
    return string(Base[241].call(null, s, a));
   }
   function sexp_of_t$3(of_a_096, param){
    switch(param[0]){
      case 0:
       var
        arg1_098 = param[2],
        arg0_097 = param[1],
        res0_099 = sexp_of_t$0(arg0_097),
        res1_100 = caml_call1(of_a_096, arg1_098);
       return [1, [0, g, [0, res0_099, [0, res1_100, 0]]]];
      case 1:
       var
        arg1_102 = param[2],
        arg0_101 = param[1],
        res0_103 = sexp_of_t$0(arg0_101),
        res1_104 = Base[165].call(null, of_a_096, arg1_102);
       return [1, [0, h, [0, res0_103, [0, res1_104, 0]]]];
      case 2:
       var
        arg0_105 = param[1],
        res0_106 = Base[165].call(null, of_a_096, arg0_105);
       return [1, [0, i, [0, res0_106, 0]]];
      case 3:
       var
        arg0_111 = param[1],
        res0_112 =
          Base[165].call
           (null,
            function(param){
             var
              arg1_108 = param[2],
              arg0_107 = param[1],
              res0_109 = Base[202].call(null, arg0_107),
              res1_110 = caml_call1(of_a_096, arg1_108);
             return [1, [0, res0_109, [0, res1_110, 0]]];
            },
            arg0_111);
       return [1, [0, j, [0, res0_112, 0]]];
      case 4:
       var
        arg0_117 = param[1],
        res0_118 =
          Base[165].call
           (null,
            function(param){
             var
              arg1_114 = param[2],
              arg0_113 = param[1],
              res0_115 = Base[202].call(null, arg0_113),
              res1_116 = Base[165].call(null, of_a_096, arg1_114);
             return [1, [0, res0_115, [0, res1_116, 0]]];
            },
            arg0_117);
       return [1, [0, k, [0, res0_118, 0]]];
      case 5:
       var
        arg0_119 = param[1],
        a = Base[184],
        res0_120 = sexp_of_t$1(function(b){return a(of_a_096, b);}, arg0_119);
       return [1, [0, l, [0, res0_120, 0]]];
      case 6:
       var
        arg1_122 = param[2],
        arg0_121 = param[1],
        res0_123 = caml_call1(of_a_096, arg0_121),
        res1_124 = Base[165].call(null, of_a_096, arg1_122);
       return [1, [0, m, [0, res0_123, [0, res1_124, 0]]]];
      case 7:
       var
        arg1_126 = param[2],
        arg0_125 = param[1],
        res0_127 = caml_call1(Base[136], arg0_125),
        res1_128 = Base[165].call(null, of_a_096, arg1_126);
       return [1, [0, n, [0, res0_127, [0, res1_128, 0]]]];
      default:
       var arg0_129 = param[1], res0_130 = caml_call1(Base[136], arg0_129);
       return [1, [0, o, [0, res0_130, 0]]];
    }
   }
   function compare$2(cmp_a, a_132, b_133){
    if(a_132 === b_133) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          switch(a_132[0]){
            case 0:
             var a_134 = a_132[1];
             if(0 !== b_133[0]) return -1;
             var
              b_137 = b_133[2],
              b_135 = b_133[1],
              a_136 = a_132[2],
              n = compare(a_134, b_135);
             return 0 === n ? caml_call2(cmp_a, a_136, b_137) : n;
            case 1:
             var a_140 = a_132[2], a_138 = a_132[1];
             switch(b_133[0]){
               case 1:
                var
                 b_141 = b_133[2],
                 b_139 = b_133[1],
                 n$0 = compare(a_138, b_139);
                return 0 === n$0
                        ? Base
                           [159].call
                          (null,
                           function(a_142, b_143){
                            return caml_call2(cmp_a, a_142, b_143);
                           },
                           a_140,
                           b_141)
                        : n$0;
               case 0:
                break a;
               default: return -1;
             }
            case 2:
             var a_144 = a_132[1];
             switch(b_133[0]){
               case 2:
                var b_145 = b_133[1];
                return Base[159].call
                        (null,
                         function(a_146, b_147){
                          return caml_call2(cmp_a, a_146, b_147);
                         },
                         a_144,
                         b_145);
               case 0:
                break a;
               case 1:
                break b;
               default: return -1;
             }
            case 3:
             var a_148 = a_132[1];
             switch(b_133[0]){
               case 3:
                var b_149 = b_133[1];
                return Base[159].call
                        (null,
                         function(a_150, b_151){
                          var
                           t_153 = a_150[2],
                           t_152 = a_150[1],
                           t_155 = b_151[2],
                           t_154 = b_151[1],
                           n = Base[195].call(null, t_152, t_154);
                          return 0 === n ? caml_call2(cmp_a, t_153, t_155) : n;
                         },
                         a_148,
                         b_149);
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               default: return -1;
             }
            case 4:
             var a_156 = a_132[1];
             switch(b_133[0]){
               case 4:
                var b_157 = b_133[1];
                return Base[159].call
                        (null,
                         function(a_158, b_159){
                          var
                           t_161 = a_158[2],
                           t_160 = a_158[1],
                           t_163 = b_159[2],
                           t_162 = b_159[1],
                           n = Base[195].call(null, t_160, t_162);
                          return 0 === n
                                  ? Base
                                     [159].call
                                    (null,
                                     function(a_164, b_165){
                                      return caml_call2(cmp_a, a_164, b_165);
                                     },
                                     t_161,
                                     t_163)
                                  : n;
                         },
                         a_156,
                         b_157);
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               default: return -1;
             }
            case 5:
             var a_166 = a_132[1];
             switch(b_133[0]){
               case 5:
                var b_167 = b_133[1];
                return compare$0
                        (function(a_168, b_169){
                          return caml_call3
                                  (Base[178],
                                   function(a_170, b_171){
                                    return caml_call2(cmp_a, a_170, b_171);
                                   },
                                   a_168,
                                   b_169);
                         },
                         a_166,
                         b_167);
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               default: return -1;
             }
            case 6:
             var a_174 = a_132[2], a_172 = a_132[1];
             switch(b_133[0]){
               case 6:
                var
                 b_175 = b_133[2],
                 b_173 = b_133[1],
                 n$1 = caml_call2(cmp_a, a_172, b_173);
                return 0 === n$1
                        ? Base
                           [159].call
                          (null,
                           function(a_176, b_177){
                            return caml_call2(cmp_a, a_176, b_177);
                           },
                           a_174,
                           b_175)
                        : n$1;
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               default: return -1;
             }
            case 7:
             var a_180 = a_132[2], a_178 = a_132[1];
             switch(b_133[0]){
               case 7:
                var
                 b_181 = b_133[2],
                 b_179 = b_133[1],
                 n$2 = Base[129].call(null, a_178, b_179);
                return 0 === n$2
                        ? Base
                           [159].call
                          (null,
                           function(a_182, b_183){
                            return caml_call2(cmp_a, a_182, b_183);
                           },
                           a_180,
                           b_181)
                        : n$2;
               case 8:
                return -1;
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
             }
             break;
            default:
             var a_184 = a_132[1];
             switch(b_133[0]){
               case 7:
                return 1;
               case 8:
                var b_185 = b_133[1];
                return Base[129].call(null, a_184, b_185);
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
             }
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   function map$0(x, f){
    switch(x[0]){
      case 0:
       var x$0 = x[2], u = x[1]; return [0, u, caml_call1(f, x$0)];
      case 1:
       var xs = x[2], s = x[1];
       return [1, s, Base_List[53].call(null, xs, f)];
      case 2:
       var xs$0 = x[1]; return [2, Base_List[53].call(null, xs$0, f)];
      case 3:
       var l = x[1];
       return [3,
               Base_List[53].call
                (null,
                 l,
                 function(param){
                  var x = param[2], s = param[1];
                  return [0, s, caml_call1(f, x)];
                 })];
      case 4:
       var l$0 = x[1];
       return [4,
               Base_List[53].call
                (null,
                 l$0,
                 function(param){
                  var xs = param[2], s = param[1];
                  return [0, s, Base_List[53].call(null, xs, f)];
                 })];
      case 5:
       var t = x[1], a = Base_Option[24];
       return [5, map(t, function(b){return caml_call2(a, b, f);})];
      case 6:
       var l$1 = x[2], x$1 = x[1], b = Base_List[53].call(null, l$1, f);
       return [6, caml_call1(f, x$1), b];
      case 7:
       var l$2 = x[2], t$0 = x[1];
       return [7, t$0, Base_List[53].call(null, l$2, f)];
      default: var v = x[1]; return [8, v];
    }
   }
   function to_string$1(t){
    var a = sexp_of_t$3(function(param){return p;}, t);
    return Base[85][16].call(null, a);
   }
   function digest_layer(param){
    switch(param[0]){
      case 0:
       var x = param[2], u = param[1];
       return constructor(cst_annotate, [0, uuid(u), [0, x, 0]]);
      case 1:
       var l = param[2], u$0 = param[1], a = [0, list(l), 0];
       return constructor(cst_base, [0, uuid(u$0), a]);
      case 2:
       var l$0 = param[1]; return constructor(cst_tuple, [0, list(l$0), 0]);
      case 3:
       var l$1 = param[1];
       return constructor
               (cst_record,
                [0,
                 list
                  (Base_List[53].call
                    (null,
                     l$1,
                     function(param){
                      var t = param[2], s = param[1];
                      return pair(string(s), t);
                     })),
                 0]);
      case 4:
       var l$2 = param[1];
       return constructor
               (cst_variant,
                [0,
                 list
                  (Base_List[53].call
                    (null,
                     l$2,
                     function(param){
                      var l = param[2], s = param[1], a = list(l);
                      return pair(string(s), a);
                     })),
                 0]);
      case 5:
       var table = param[1];
       return constructor
               (cst_poly_variant,
                [0,
                 list
                  (Base_List[53].call
                    (null,
                     table[1],
                     function(param){
                      var y = param[2], x$0 = param[1];
                      if(y)
                       var x = y[1], a = constructor(cst_some, [0, x, 0]);
                      else
                       var a = constructor(cst_none, 0);
                      return pair(string(x$0), a);
                     })),
                 0]);
      case 6:
       var l$3 = param[2], x$0 = param[1];
       return constructor(cst_application, [0, x$0, [0, list(l$3), 0]]);
      case 7:
       var l$4 = param[2], n = param[1], b = [0, list(l$4), 0];
       return constructor(cst_rec_app, [0, int(n), b]);
      default:
       var n$0 = param[1]; return constructor(cst_var, [0, int(n$0), 0]);
    }
   }
   function to_digest(param){var x = param[1]; return x;}
   function to_digest$0(x){
    switch(x[0]){
      case 0:
       var x$0 = x[1]; return digest_layer([5, x$0]);
      case 1:
       var x$1 = x[1][2]; return x$1;
      default: var x$2 = x[1]; return x$2;
    }
   }
   function opaque(x){return [2, to_digest$0(x)];}
   function create$0(x){
    var x$0 = map$0(x, to_digest$0), desc = to_string$1(x$0);
    switch(x$0[0]){
      case 5:
       var l = x$0[1]; return [0, l];
      case 2:
      case 3:
      case 4:
      case 8:
       return [1, [0, desc, digest_layer(x$0)]];
      default: return [1, [0, desc, digest_layer(x$0)]];
    }
   }
   function var$(x){return create$0([8, x]);}
   function apply(def, l){return create$0([6, def, l]);}
   function recurse(tid, l){return create$0([7, tid, l]);}
   function get_poly_variant(x){
    if(1 === x[0]){var desc = x[1][1]; return [1, desc];}
    var l = x[1];
    function a(x){return [2, x];}
    var b = Base_Option[24];
    return [0, map(l, function(c){return caml_call2(b, c, a);})];
   }
   var Def = [0];
   function annotate(u, x){return create$0([0, u, x]);}
   function basetype(u, l){return create$0([1, u, l]);}
   function tuple(l){return create$0([2, l]);}
   function poly_variant(loc, l){
    return create$0
            ([5,
              create
               (loc,
                function(a, b){
                 if(a){
                  if(b){
                   var y = b[1], x = a[1], c = to_digest$0(y);
                   return 0 === compare$1(to_digest$0(x), c) ? 1 : 0;
                  }
                 }
                 else if(! b) return 1;
                 return 0;
                },
                l)]);
   }
   function define(x){return x;}
   function record(l){return create$0([3, l]);}
   function variant(l){return create$0([4, l]);}
   function create$1(e){return [0, to_digest$0(e)];}
   var
    Create =
      [0,
       annotate,
       basetype,
       tuple,
       poly_variant,
       define,
       record,
       variant,
       create$1],
    Canonical_digest =
      [0,
       to_digest,
       [0, var$, recurse, apply, opaque, get_poly_variant],
       Def,
       Create],
    q = [0, "Exp"];
   function compare_t0(a_186, b_187){
    if(a_186 === b_187) return 0;
    var b_189 = b_187[1], a_188 = a_186[1];
    return compare$2
            (function(a_190, b_191){return compare_t0(a_190, b_191);},
             a_188,
             b_189);
   }
   function sexp_of_t0(param){
    var arg0_201 = param[1], res0_202 = sexp_of_t$3(sexp_of_t0, arg0_201);
    return [1, [0, q, [0, res0_202, 0]]];
   }
   function var$0(x){return [0, [8, x]];}
   function apply$0(d, xs){return [0, [6, d, xs]];}
   function recurse$0(r, xs){return [0, [7, r, xs]];}
   function get_poly_variant$0(param){
    var cc = param[1];
    if(5 !== cc[0]) return [1, to_string$1(cc)];
    var tab = cc[1];
    return [0, tab];
   }
   function opaque$0(t){return t;}
   function to_digest$1(param){
    var e = param[1];
    return digest_layer(map$0(e, to_digest$1));
   }
   function to_digest$2(e){return to_digest$1(e);}
   function annotate$0(u, x){return [0, [0, u, x]];}
   function basetype$0(u, xs){return [0, [1, u, xs]];}
   function tuple$0(xs){return [0, [2, xs]];}
   function poly_variant$0(loc, xs){
    return [0,
            [5,
             create
              (loc,
               function(a, b){
                if(a){
                 if(b){
                  var y = b[1], x = a[1];
                  return 0 === compare_t0(x, y) ? 1 : 0;
                 }
                }
                else if(! b) return 1;
                return 0;
               },
               xs)]];
   }
   function var$1(n){return [0, [8, n]];}
   function recurse$1(r, xs){return recurse$0(r, xs);}
   function apply$1(d, xs){return apply$0(d, xs);}
   function define$0(x){return x;}
   function record$0(xs){return [0, [3, xs]];}
   function variant$0(xs){return [0, [4, xs]];}
   function create$2(exp){return exp;}
   function to_string_hum(t){
    var a = sexp_of_t0(t);
    return Base[85][14].call(null, 0, a);
   }
   var
    t_of_sexp$2 = Base_String[41],
    sexp_of_t$4 = Base_String[42],
    of_string$1 = Base_String[43],
    to_string$2 = Base_String[44],
    symbol = Base_String[47],
    compare$3 = Base_String[51],
    equal$1 = Base_String[134],
    t_of_sexp$3 = Base_String[41],
    sexp_of_t$5 = Base_String[42],
    of_string$2 = Base_String[43],
    to_string$3 = Base_String[44],
    comparator = Base_String[59],
    equal$2 = Base_String[134],
    compare$4 = Base[129],
    equal$3 = Base[131],
    t_of_sexp$4 = Base[135],
    sexp_of_t$6 = Base[136],
    r = [0, 0],
    cst_impossible_lookup_group_un =
      "impossible: lookup_group, unbound type-identifier: %{Tid}",
    x = [0, 0],
    cst_impossible_lookup_group_un$0 =
      "impossible: lookup_group, unbound type-identifier: ";
   function create$3(loc, trips){
    var gid = r[1];
    r[1] = 1 + gid | 0;
    var
     members =
       Base_List[53].call
        (null,
         trips,
         function(param){
          var t = param[3], vs = param[2], x = param[1];
          return [0, x, [0, vs, t]];
         });
    return [0, gid, loc, members];
   }
   function lookup(g, tid){
    var match = caml_call3(Base_List[137][5], g[3], symbol, tid);
    if(! match)
     return caml_call2
             (eval_fail
               (g[2],
                [0,
                 [11,
                  cst_impossible_lookup_group_un$0,
                  [24,
                   x,
                   function(param, custom_printf_345){
                    return to_string$2(custom_printf_345);
                   },
                   0]],
                 cst_impossible_lookup_group_un]),
              tid,
              0);
    var scheme = match[1];
    return scheme;
   }
   function equal$4(a_346$0, b_347$0){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 var a_346 = a_346$0, b_347 = b_347$0;
                 n:
                 for(;;){
                  if(a_346 === b_347) return 1;
                  switch(a_346[0]){
                    case 0:
                     var a_348 = a_346[1];
                     if(0 !== b_347[0]) return 0;
                     var
                      b_351 = b_347[2],
                      b_349 = b_347[1],
                      a_350 = a_346[2],
                      d = equal$0(a_348, b_349);
                     if(! d) return d;
                     a_346 = a_350;
                     b_347 = b_351;
                     break;
                    case 1:
                     break b;
                    case 2:
                     break d;
                    case 3:
                     break f;
                    case 4:
                     break h;
                    case 5:
                     break j;
                    case 6:
                     var a_390 = a_346[1];
                     switch(b_347[0]){
                       case 6:
                        var
                         b_391 = b_347[1],
                         t_393 = a_390[2],
                         t_392 = a_390[1],
                         t_395 = b_391[2],
                         t_394 = b_391[1],
                         g = equal(t_392, t_394);
                        return g ? equal$2(t_393, t_395) : g;
                       case 0:
                        break a;
                       case 1:
                        break c;
                       case 2:
                        break e;
                       case 3:
                        break g;
                       case 4:
                        break i;
                       case 5:
                        break k;
                       default: return 0;
                     }
                    case 7:
                     break m;
                    default: break n;
                  }
                 }
                 var a_406 = a_346[3], a_404 = a_346[2], a_402 = a_346[1];
                 switch(b_347[0]){
                   case 7:
                    return 0;
                   case 8:
                    var b_407 = b_347[3], b_405 = b_347[2], b_403 = b_347[1];
                    if(a_402 === b_403)
                     var a = 1;
                    else{
                     var b = equal$3(a_402[1], b_403[1]);
                     if(b)
                      var
                       c = equal(a_402[2], b_403[2]),
                       a =
                         c
                          ? Base
                             [161].call
                            (null,
                             function(a_303, b_304){
                              var
                               t_306 = a_303[2],
                               t_305 = a_303[1],
                               t_308 = b_304[2],
                               t_307 = b_304[1],
                               a = equal$1(t_305, t_307);
                              if(a){
                               var
                                t_310 = t_306[2],
                                t_309 = t_306[1],
                                t_312 = t_308[2],
                                t_311 = t_308[1],
                                b =
                                  Base[161].call
                                   (null,
                                    function(a_313, b_314){return equal$2(a_313, b_314);},
                                    t_309,
                                    t_311);
                               if(b) return equal$4(t_310, t_312);
                               var c = b;
                              }
                              else
                               var c = a;
                              return c;
                             },
                             a_402[3],
                             b_403[3])
                          : c;
                     else
                      var a = b;
                    }
                    if(a){
                     var i = equal$1(a_404, b_405);
                     if(i)
                      return Base[161].call
                              (null,
                               function(a_410, b_411){return equal$4(a_410, b_411);},
                               a_406,
                               b_407);
                     var j = i;
                    }
                    else
                     var j = a;
                    return j;
                   case 0:
                    break a;
                   case 1:
                    break c;
                   case 2:
                    break e;
                   case 3:
                    break g;
                   case 4:
                    break i;
                   case 5:
                    break k;
                   default: break l;
                 }
                }
                var a_398 = a_346[2], a_396 = a_346[1];
                switch(b_347[0]){
                  case 7:
                   var
                    b_399 = b_347[2],
                    b_397 = b_347[1],
                    h = equal$1(a_396, b_397);
                   return h
                           ? Base
                              [161].call
                             (null,
                              function(a_400, b_401){return equal$4(a_400, b_401);},
                              a_398,
                              b_399)
                           : h;
                  case 8:
                   return 0;
                  case 0:
                   break a;
                  case 1:
                   break c;
                  case 2:
                   break e;
                  case 3:
                   break g;
                  case 4:
                   break i;
                  case 5:
                   break k;
                }
               }
               return 0;
              }
              return 0;
             }
             var a_380 = a_346[1];
             switch(b_347[0]){
               case 5:
                var
                 b_381 = b_347[1],
                 t_383 = a_380[2],
                 t_382 = a_380[1],
                 t_385 = b_381[2],
                 t_384 = b_381[1],
                 f = equal(t_382, t_384);
                return f
                        ? Base
                           [161].call
                          (null,
                           function(a_386, b_387){
                            function cmp_t(a_388, b_389){return equal$4(a_388, b_389);}
                            if(a_386 === b_387) return 1;
                            if(-59723313 <= a_386[1]){
                             if(typeof b_387 !== "number"){
                              var variant = b_387[1];
                              if(-59723313 === variant){
                               var
                                right_238 = b_387[2],
                                left_237 = a_386[2],
                                t_240 = left_237[2],
                                t_239 = left_237[1],
                                t_242 = right_238[2],
                                t_241 = right_238[1],
                                a = Base[197].call(null, t_239, t_241);
                               if(! a) return a;
                               if(t_240){
                                if(t_242){
                                 var b_244 = t_242[1], a_243 = t_240[1];
                                 return cmp_t(a_243, b_244);
                                }
                               }
                               else if(! t_242) return 1;
                               return 0;
                              }
                             }
                            }
                            else if(typeof b_387 !== "number"){
                             var variant$0 = b_387[1];
                             if(-72987685 === variant$0){
                              var
                               right_246 = b_387[2],
                               left_245 = a_386[2],
                               t_248 = left_245[2],
                               t_247 = left_245[1],
                               t_250 = right_246[2],
                               t_249 = right_246[1],
                               b = equal(t_247, t_249);
                              return b ? cmp_t(t_248, t_250) : b;
                             }
                            }
                            return runtime.caml_equal(a_386, b_387);
                           },
                           t_383,
                           t_385)
                        : f;
               case 0:
                break a;
               case 1:
                break c;
               case 2:
                break e;
               case 3:
                break g;
               case 4: break;
               default: return 0;
             }
            }
            return 0;
           }
           var a_376 = a_346[1];
           switch(b_347[0]){
             case 4:
              var b_377 = b_347[1];
              return Base[161].call
                      (null,
                       function(a_378, b_379){return equal$4(a_378, b_379);},
                       a_376,
                       b_377);
             case 0:
              break a;
             case 1:
              break c;
             case 2:
              break e;
             case 3: break;
             default: return 0;
           }
          }
          return 0;
         }
         var a_366 = a_346[1];
         switch(b_347[0]){
           case 3:
            var b_367 = b_347[1];
            return Base[161].call
                    (null,
                     function(a_368, b_369){
                      var
                       t_371 = a_368[2],
                       t_370 = a_368[1],
                       t_373 = b_369[2],
                       t_372 = b_369[1],
                       a = Base[197].call(null, t_370, t_372);
                      return a
                              ? Base
                                 [161].call
                                (null,
                                 function(a_374, b_375){return equal$4(a_374, b_375);},
                                 t_371,
                                 t_373)
                              : a;
                     },
                     a_366,
                     b_367);
           case 0:
            break a;
           case 1:
            break c;
           case 2: break;
           default: return 0;
         }
        }
        return 0;
       }
       var a_358 = a_346[1];
       switch(b_347[0]){
         case 2:
          var b_359 = b_347[1];
          return Base[161].call
                  (null,
                   function(a_360, b_361){
                    var
                     t_363 = a_360[2],
                     t_362 = a_360[1],
                     t_365 = b_361[2],
                     t_364 = b_361[1],
                     a = Base[197].call(null, t_362, t_364);
                    return a ? equal$4(t_363, t_365) : a;
                   },
                   a_358,
                   b_359);
         case 0:
          break a;
         case 1: break;
         default: return 0;
       }
      }
      return 0;
     }
     var a_354 = a_346[2], a_352 = a_346[1];
     switch(b_347[0]){
       case 1:
        var b_355 = b_347[2], b_353 = b_347[1], e = equal$0(a_352, b_353);
        return e
                ? Base
                   [161].call
                  (null,
                   function(a_356, b_357){return equal$4(a_356, b_357);},
                   a_354,
                   b_355)
                : e;
       case 0: break;
       default: return 0;
     }
    }
    return 0;
   }
   var
    letrec_function_context = [],
    cst_members = cst_members$0,
    cst_loc = cst_loc$0,
    cst_gid = cst_gid$0;
   function t_of_sexp$5(sexp_416){
    a:
    {
     if(0 === sexp_416[0]){
      var a = sexp_416[1], k = caml_string_compare(a, cst_annotate$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= k){
               if(0 < k){
                if(a === cst_base$0) break i;
                if(a === cst_poly_variant$0) break h;
                if(a === cst_rec_app$0) break g;
                if(a === cst_record$0) break f;
                if(a === cst_top_app) break e;
                if(a === cst_tuple$0) break d;
                if(a === cst_var$0) break c;
                if(a !== cst_variant$0) break a;
                break b;
               }
              }
              else if(a !== cst_Annotate){
               if(a === cst_Base) break i;
               if(a === cst_Poly_variant) break h;
               if(a === cst_Rec_app) break g;
               if(a === cst_Record) break f;
               if(a === cst_Top_app) break e;
               if(a === cst_Tuple) break d;
               if(a === cst_Var) break c;
               if(a !== cst_Variant) break a;
               break b;
              }
              return Sexplib0_Sexp_conv_error[9].call
                      (null, letrec_function_context[1], sexp_416);
             }
             return Sexplib0_Sexp_conv_error[9].call
                     (null, letrec_function_context[1], sexp_416);
            }
            return Sexplib0_Sexp_conv_error[9].call
                    (null, letrec_function_context[1], sexp_416);
           }
           return Sexplib0_Sexp_conv_error[9].call
                   (null, letrec_function_context[1], sexp_416);
          }
          return Sexplib0_Sexp_conv_error[9].call
                  (null, letrec_function_context[1], sexp_416);
         }
         return Sexplib0_Sexp_conv_error[9].call
                 (null, letrec_function_context[1], sexp_416);
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context[1], sexp_416);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context[1], sexp_416);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context[1], sexp_416);
     }
     var match = sexp_416[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context[1], sexp_416);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context[1], sexp_416);
     var
      tag_417 = match$0[1],
      l = caml_string_compare(tag_417, cst_annotate$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             if(0 <= l){
              if(0 < l){
               if(tag_417 === cst_base$0) break i;
               if(tag_417 === cst_poly_variant$0) break h;
               if(tag_417 === cst_rec_app$0) break g;
               if(tag_417 === cst_record$0) break f;
               if(tag_417 === cst_top_app) break e;
               if(tag_417 === cst_tuple$0) break d;
               if(tag_417 === cst_var$0) break c;
               if(tag_417 !== cst_variant$0) break a;
               break b;
              }
             }
             else if(tag_417 !== cst_Annotate){
              if(tag_417 === cst_Base) break i;
              if(tag_417 === cst_Poly_variant) break h;
              if(tag_417 === cst_Rec_app) break g;
              if(tag_417 === cst_Record) break f;
              if(tag_417 === cst_Top_app) break e;
              if(tag_417 === cst_Tuple) break d;
              if(tag_417 === cst_Var) break c;
              if(tag_417 !== cst_Variant) break a;
              break b;
             }
             var sexp_args_418 = match[2];
             if(sexp_args_418){
              var j = sexp_args_418[2];
              if(j && ! j[2]){
               var
                arg1_420 = j[1],
                arg0_419 = sexp_args_418[1],
                res0_421 = t_of_sexp$0(arg0_419),
                res1_422 = t_of_sexp$5(arg1_420);
               return [0, res0_421, res1_422];
              }
             }
             return Sexplib0_Sexp_conv_error[8].call
                     (null, letrec_function_context[1], tag_417, sexp_416);
            }
            var sexp_args_425 = match[2];
            if(sexp_args_425){
             var i = sexp_args_425[2];
             if(i && ! i[2]){
              var
               arg1_427 = i[1],
               arg0_426 = sexp_args_425[1],
               res0_428 = t_of_sexp$0(arg0_426),
               res1_429 = Base[164].call(null, t_of_sexp$5, arg1_427);
              return [1, res0_428, res1_429];
             }
            }
            return Sexplib0_Sexp_conv_error[8].call
                    (null, letrec_function_context[1], tag_417, sexp_416);
           }
           var sexp_args_457 = match[2];
           if(sexp_args_457 && ! sexp_args_457[2]){
            var arg0_463 = sexp_args_457[1];
            h:
            {
             if(0 !== arg0_463[0]){
              var g = arg0_463[1];
              if(g){
               var h = g[2];
               if(h && ! h[2]){
                var
                 arg1_459 = h[1],
                 arg0_458 = g[1],
                 res0_460 = t_of_sexp(arg0_458),
                 res1_461 =
                   Base[164].call
                    (null,
                     function(sexp_255){
                      try{
                       a:
                       if(0 === sexp_255[0])
                        var
                         atom_253 = sexp_255[1],
                         a =
                           atom_253 !== cst_Constr
                            ? atom_253
                              !== cst_Inherit
                              ? Sexplib0_Sexp_conv_error[23].call(null, 0)
                              : Sexplib0_Sexp_conv_error
                                 [27].call
                                (null, error_source_263, sexp_255)
                            : Sexplib0_Sexp_conv_error
                               [27].call
                              (null, error_source_263, sexp_255);
                       else{
                        var match = sexp_255[1];
                        if(match){
                         var match$0 = match[1];
                         if(0 === match$0[0]){
                          var sexp_args_256 = match[2], atom_253$0 = match$0[1];
                          if(atom_253$0 !== cst_Constr)
                           if(atom_253$0 !== cst_Inherit)
                            var a = Sexplib0_Sexp_conv_error[23].call(null, 0);
                           else{
                            if(sexp_args_256 && ! sexp_args_256[2]){
                             var arg0_264 = sexp_args_256[1];
                             b:
                             {
                              if(0 !== arg0_264[0]){
                               var b = arg0_264[1];
                               if(b){
                                var c = b[2];
                                if(c && ! c[2]){
                                 var
                                  arg1_259 = c[1],
                                  arg0_258 = b[1],
                                  res0_260 = t_of_sexp(arg0_258),
                                  res1_261 = t_of_sexp$5(arg1_259),
                                  res0_265 = [0, res0_260, res1_261];
                                 break b;
                                }
                               }
                              }
                              var
                               res0_265 =
                                 Sexplib0_Sexp_conv_error[4].call
                                  (null, error_source_263, 2, arg0_264);
                             }
                             var a = [0, -72987685, res0_265];
                             break a;
                            }
                            var
                             a =
                               Sexplib0_Sexp_conv_error[26].call
                                (null, error_source_263, atom_253$0, sexp_255);
                           }
                          else{
                           if(sexp_args_256 && ! sexp_args_256[2]){
                            var arg0_272 = sexp_args_256[1];
                            b:
                            {
                             if(0 !== arg0_272[0]){
                              var d = arg0_272[1];
                              if(d){
                               var e = d[2];
                               if(e && ! e[2]){
                                var
                                 arg1_268 = e[1],
                                 arg0_267 = d[1],
                                 res0_269 = Base[201].call(null, arg0_267),
                                 res1_270 = Base[183].call(null, t_of_sexp$5, arg1_268),
                                 res0_273 = [0, res0_269, res1_270];
                                break b;
                               }
                              }
                             }
                             var
                              res0_273 =
                                Sexplib0_Sexp_conv_error[4].call
                                 (null, error_source_263, 2, arg0_272);
                            }
                            var a = [0, -59723313, res0_273];
                            break a;
                           }
                           var
                            a =
                              Sexplib0_Sexp_conv_error[26].call
                               (null, error_source_263, atom_253$0, sexp_255);
                          }
                         }
                         else
                          var
                           a =
                             Sexplib0_Sexp_conv_error[28].call
                              (null, error_source_263, sexp_255);
                        }
                        else
                         var
                          a =
                            Sexplib0_Sexp_conv_error[29].call
                             (null, error_source_263, sexp_255);
                       }
                       return a;
                      }
                      catch(exn$0){
                       var exn = caml_wrap_exception(exn$0);
                       if(exn === Sexplib0_Sexp_conv_error[22])
                        return Sexplib0_Sexp_conv_error[24].call
                                (null, error_source_275, sexp_255);
                       throw caml_maybe_attach_backtrace(exn, 0);
                      }
                     },
                     arg1_459),
                 res0_464 = [0, res0_460, res1_461];
                break h;
               }
              }
             }
             var
              res0_464 =
                Sexplib0_Sexp_conv_error[4].call
                 (null, letrec_function_context[1], 2, arg0_463);
            }
            return [5, res0_464];
           }
           return Sexplib0_Sexp_conv_error[8].call
                   (null, letrec_function_context[1], tag_417, sexp_416);
          }
          var sexp_args_477 = match[2];
          if(sexp_args_477){
           var f = sexp_args_477[2];
           if(f && ! f[2]){
            var
             arg1_479 = f[1],
             arg0_478 = sexp_args_477[1],
             res0_480 = t_of_sexp$2(arg0_478),
             res1_481 = Base[164].call(null, t_of_sexp$5, arg1_479);
            return [7, res0_480, res1_481];
           }
          }
          return Sexplib0_Sexp_conv_error[8].call
                  (null, letrec_function_context[1], tag_417, sexp_416);
         }
         var sexp_args_432 = match[2];
         if(sexp_args_432 && ! sexp_args_432[2]){
          var
           arg0_438 = sexp_args_432[1],
           res0_439 =
             Base[164].call
              (null,
               function(sexp_437){
                if(0 !== sexp_437[0]){
                 var a = sexp_437[1];
                 if(a){
                  var b = a[2];
                  if(b && ! b[2]){
                   var
                    arg1_434 = b[1],
                    arg0_433 = a[1],
                    res0_435 = Base[201].call(null, arg0_433),
                    res1_436 = t_of_sexp$5(arg1_434);
                   return [0, res0_435, res1_436];
                  }
                 }
                }
                return Sexplib0_Sexp_conv_error[4].call
                        (null, letrec_function_context[1], 2, sexp_437);
               },
               arg0_438);
          return [2, res0_439];
         }
         return Sexplib0_Sexp_conv_error[8].call
                 (null, letrec_function_context[1], tag_417, sexp_416);
        }
        var sexp_args_484 = match[2];
        if(sexp_args_484){
         var d = sexp_args_484[2];
         if(d){
          var e = d[2];
          if(e && ! e[2]){
           var
            arg2_487 = e[1],
            arg1_486 = d[1],
            arg0_485 = sexp_args_484[1],
            m =
              function(sexp_327){
               if(0 !== sexp_327[0]){
                var a = sexp_327[1];
                if(a){
                 var b = a[2];
                 if(b && ! b[2]){
                  var
                   arg1_324 = b[1],
                   arg0_323 = a[1],
                   res0_325 = t_of_sexp$2(arg0_323);
                  a:
                  {
                   if(0 !== arg1_324[0]){
                    var c = arg1_324[1];
                    if(c){
                     var d = c[2];
                     if(d && ! d[2]){
                      var
                       arg1_319 = d[1],
                       arg0_318 = c[1],
                       res0_320 = Base[164].call(null, t_of_sexp$3, arg0_318),
                       res1_321 = t_of_sexp$5(arg1_319),
                       res1_326 = [0, res0_320, res1_321];
                      break a;
                     }
                    }
                   }
                   var
                    res1_326 =
                      Sexplib0_Sexp_conv_error[4].call
                       (null, error_source_317, 2, arg1_324);
                  }
                  return [0, res0_325, res1_326];
                 }
                }
               }
               return Sexplib0_Sexp_conv_error[4].call
                       (null, error_source_317, 2, sexp_327);
              },
            n = Base[164],
            res0_488 =
              Sexplib0_Sexp_conv_record[3].call
               (null,
                error_source_317,
                [0,
                 cst_gid,
                 1,
                 t_of_sexp$4,
                 [0,
                  cst_loc,
                  1,
                  t_of_sexp,
                  [0, cst_members, 1, function(a){return n(m, a);}, 0]]],
                function(param){
                 return param !== cst_gid$0
                         ? param !== cst_loc$0 ? param !== cst_members$0 ? -1 : 2 : 1
                         : 0;
                },
                0,
                function(param){
                 var
                  a = param[2],
                  members = a[2][1],
                  loc = a[1],
                  gid = param[1];
                 return [0, gid, loc, members];
                },
                arg0_485),
            res1_489 = t_of_sexp$2(arg1_486),
            res2_490 = Base[164].call(null, t_of_sexp$5, arg2_487);
           return [8, res0_488, res1_489, res2_490];
          }
         }
        }
        return Sexplib0_Sexp_conv_error[8].call
                (null, letrec_function_context[1], tag_417, sexp_416);
       }
       var sexp_args_452 = match[2];
       if(sexp_args_452 && ! sexp_args_452[2]){
        var
         arg0_453 = sexp_args_452[1],
         res0_454 = Base[164].call(null, t_of_sexp$5, arg0_453);
        return [4, res0_454];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context[1], tag_417, sexp_416);
      }
      var sexp_args_467 = match[2];
      if(sexp_args_467 && ! sexp_args_467[2]){
       var arg0_473 = sexp_args_467[1];
       c:
       {
        if(0 !== arg0_473[0]){
         var b = arg0_473[1];
         if(b){
          var c = b[2];
          if(c && ! c[2]){
           var
            arg1_469 = c[1],
            arg0_468 = b[1],
            res0_470 = t_of_sexp(arg0_468),
            res1_471 = t_of_sexp$3(arg1_469),
            res0_474 = [0, res0_470, res1_471];
           break c;
          }
         }
        }
        var
         res0_474 =
           Sexplib0_Sexp_conv_error[4].call
            (null, letrec_function_context[1], 2, arg0_473);
       }
       return [6, res0_474];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context[1], tag_417, sexp_416);
     }
     var sexp_args_442 = match[2];
     if(sexp_args_442 && ! sexp_args_442[2]){
      var
       arg0_448 = sexp_args_442[1],
       res0_449 =
         Base[164].call
          (null,
           function(sexp_447){
            if(0 !== sexp_447[0]){
             var a = sexp_447[1];
             if(a){
              var b = a[2];
              if(b && ! b[2]){
               var
                arg1_444 = b[1],
                arg0_443 = a[1],
                res0_445 = Base[201].call(null, arg0_443),
                res1_446 = Base[164].call(null, t_of_sexp$5, arg1_444);
               return [0, res0_445, res1_446];
              }
             }
            }
            return Sexplib0_Sexp_conv_error[4].call
                    (null, letrec_function_context[1], 2, sexp_447);
           },
           arg0_448);
      return [3, res0_449];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context[1], tag_417, sexp_416);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context[1], sexp_416);
   }
   runtime.caml_update_dummy(letrec_function_context, [0, error_source_414]);
   var
    s = [0, cst_Constr],
    t = [0, cst_Inherit],
    u = [0, cst_members$0],
    v = [0, cst_loc$0],
    w = [0, cst_gid$0],
    y = [0, cst_Annotate],
    z = [0, cst_Base],
    A = [0, cst_Record],
    B = [0, cst_Variant],
    C = [0, cst_Tuple],
    D = [0, cst_Poly_variant],
    E = [0, cst_Var],
    F = [0, cst_Rec_app],
    G = [0, cst_Top_app];
   function sexp_of_t$7(param){
    switch(param[0]){
      case 0:
       var
        arg1_492 = param[2],
        arg0_491 = param[1],
        res0_493 = sexp_of_t$0(arg0_491),
        res1_494 = sexp_of_t$7(arg1_492);
       return [1, [0, y, [0, res0_493, [0, res1_494, 0]]]];
      case 1:
       var
        arg1_496 = param[2],
        arg0_495 = param[1],
        res0_497 = sexp_of_t$0(arg0_495),
        res1_498 = Base[165].call(null, sexp_of_t$7, arg1_496);
       return [1, [0, z, [0, res0_497, [0, res1_498, 0]]]];
      case 2:
       var
        arg0_503 = param[1],
        res0_504 =
          Base[165].call
           (null,
            function(param){
             var
              arg1_500 = param[2],
              arg0_499 = param[1],
              res0_501 = Base[202].call(null, arg0_499),
              res1_502 = sexp_of_t$7(arg1_500);
             return [1, [0, res0_501, [0, res1_502, 0]]];
            },
            arg0_503);
       return [1, [0, A, [0, res0_504, 0]]];
      case 3:
       var
        arg0_509 = param[1],
        res0_510 =
          Base[165].call
           (null,
            function(param){
             var
              arg1_506 = param[2],
              arg0_505 = param[1],
              res0_507 = Base[202].call(null, arg0_505),
              res1_508 = Base[165].call(null, sexp_of_t$7, arg1_506);
             return [1, [0, res0_507, [0, res1_508, 0]]];
            },
            arg0_509);
       return [1, [0, B, [0, res0_510, 0]]];
      case 4:
       var
        arg0_511 = param[1],
        res0_512 = Base[165].call(null, sexp_of_t$7, arg0_511);
       return [1, [0, C, [0, res0_512, 0]]];
      case 5:
       var
        arg0_517 = param[1],
        arg1_514 = arg0_517[2],
        arg0_513 = arg0_517[1],
        res0_515 = sexp_of_t(arg0_513),
        res1_516 =
          Base[165].call
           (null,
            function(param){
             var variant = param[1];
             if(-59723313 <= variant){
              var
               v_277 = param[2],
               arg1_279 = v_277[2],
               arg0_278 = v_277[1],
               res0_280 = Base[202].call(null, arg0_278),
               res1_281 = Base[184].call(null, sexp_of_t$7, arg1_279);
              return [1, [0, s, [0, [1, [0, res0_280, [0, res1_281, 0]]], 0]]];
             }
             var
              v_282 = param[2],
              arg1_284 = v_282[2],
              arg0_283 = v_282[1],
              res0_285 = sexp_of_t(arg0_283),
              res1_286 = sexp_of_t$7(arg1_284);
             return [1, [0, t, [0, [1, [0, res0_285, [0, res1_286, 0]]], 0]]];
            },
            arg1_514),
        res0_518 = [1, [0, res0_515, [0, res1_516, 0]]];
       return [1, [0, D, [0, res0_518, 0]]];
      case 6:
       var
        arg0_523 = param[1],
        arg1_520 = arg0_523[2],
        arg0_519 = arg0_523[1],
        res0_521 = sexp_of_t(arg0_519),
        res1_522 = sexp_of_t$5(arg1_520),
        res0_524 = [1, [0, res0_521, [0, res1_522, 0]]];
       return [1, [0, E, [0, res0_524, 0]]];
      case 7:
       var
        arg1_526 = param[2],
        arg0_525 = param[1],
        res0_527 = sexp_of_t$4(arg0_525),
        res1_528 = Base[165].call(null, sexp_of_t$7, arg1_526);
       return [1, [0, F, [0, res0_527, [0, res1_528, 0]]]];
      default:
       var
        arg2_531 = param[3],
        arg1_530 = param[2],
        arg0_529 = param[1],
        members_335 = arg0_529[3],
        loc_333 = arg0_529[2],
        gid_331 = arg0_529[1],
        arg_336 =
          Base[165].call
           (null,
            function(param){
             var
              arg1_342 = param[2],
              arg0_341 = param[1],
              res0_343 = sexp_of_t$4(arg0_341),
              arg1_338 = arg1_342[2],
              arg0_337 = arg1_342[1],
              res0_339 = Base[165].call(null, sexp_of_t$5, arg0_337),
              res1_340 = sexp_of_t$7(arg1_338),
              res1_344 = [1, [0, res0_339, [0, res1_340, 0]]];
             return [1, [0, res0_343, [0, res1_344, 0]]];
            },
            members_335),
        bnds_330 = [0, [1, [0, u, [0, arg_336, 0]]], 0],
        arg_334 = sexp_of_t(loc_333),
        bnds_330$0 = [0, [1, [0, v, [0, arg_334, 0]]], bnds_330],
        arg_332 = caml_call1(sexp_of_t$6, gid_331),
        bnds_330$1 = [0, [1, [0, w, [0, arg_332, 0]]], bnds_330$0],
        res0_532 = [1, bnds_330$1],
        res1_533 = sexp_of_t$4(arg1_530),
        res2_534 = Base[165].call(null, sexp_of_t$7, arg2_531);
       return [1, [0, G, [0, res0_532, [0, res1_533, [0, res2_534, 0]]]]];
    }
   }
   function annotate$1(v0, v1){return [0, v0, v1];}
   function basetype$1(v0, v1){return [1, v0, v1];}
   function record$1(v0){return [2, v0];}
   function variant$1(v0){return [3, v0];}
   function tuple$1(v0){return [4, v0];}
   function rec_app(v0, v1){return [7, v0, v1];}
   function top_app(v0, v1, v2){return [8, v0, v1, v2];}
   function constr(s, t){return [0, -59723313, [0, s, t]];}
   function inherit(loc, t){return [0, -72987685, [0, loc, t]];}
   function var$2(loc, t){return [6, [0, loc, t]];}
   function poly_variant$1(loc, xs){return [5, [0, loc, xs]];}
   function is_cyclic_0(via_VR){
    return function(group, tid){
     var set = [0, 0];
     function visited(tid){
      return Base_List[17].call(null, set[1], tid, equal$1);
     }
     function trav(param$0){
      a:
      {
       b:
       {
        var param = param$0;
        c:
        for(;;){
         switch(param[0]){
           case 0:
            var t = param[2]; param = t; continue;
           case 1:
            var ts = param[2]; break;
           case 2:
            break a;
           case 3:
            break b;
           case 4:
            var ts = param[1]; break;
           case 5:
            break c;
           case 6:
            return 0;
           case 7:
            var ts$0 = param[2], tid = param[1];
            if(! visited(tid)){set[1] = [0, tid, set[1]]; trav_tid(tid);}
            return Base_List[19].call(null, ts$0, trav);
           default: var ts = param[3];
         }
         return Base_List[19].call(null, ts, trav);
        }
        var cs = param[1][2];
        return Base_List[19].call
                (null,
                 cs,
                 function(param){
                  var variant = param[1];
                  if(-59723313 > variant){
                   var t$0 = param[2][2];
                   return trav(t$0);
                  }
                  var match = param[2][2];
                  if(! match) return 0;
                  var t = match[1];
                  return trav(t);
                 });
       }
       var xs$0 = param[1];
       return via_VR
               ? Base_List
                  [19].call
                 (null,
                  xs$0,
                  function(param){
                   var ts = param[2];
                   return Base_List[19].call(null, ts, trav);
                  })
               : 0;
      }
      var xs = param[1];
      return via_VR
              ? Base_List
                 [19].call
                (null, xs, function(param){var t = param[2]; return trav(t);})
              : 0;
     }
     function trav_tid(tid){
      var body = lookup(group, tid)[2];
      return trav(body);
     }
     trav_tid(tid);
     var res = visited(tid);
     return res;};
   }
   var
    is_cyclic = is_cyclic_0(1),
    is_cyclic_with_no_intervening_ = is_cyclic_0(0),
    cst_Free_type_variable_Vid = "Free type variable: '%{Vid}",
    H = [0, 0],
    cst_Free_type_variable = "Free type variable: '",
    I =
      [0,
       [11,
        "The shape for an inherited type is not described as a polymorphic-variant: ",
        [2, 0, 0]],
       "The shape for an inherited type is not described as a polymorphic-variant: %s"],
    cst_apply_incorrect_type_appli = "apply, incorrect type application arity",
    cst_top_level = "top-level";
   function Evaluation(Canonical){
    function arg(t, param){
     var v = param[2], k = param[1];
     return Base_Map[34].call(null, t, k, v);
    }
    var b = Base_Map[6].call(null, [0, comparator]), c = Base_List[20];
    function lookup$0(t, k){return Base_Map[42].call(null, t, k);}
    function compare(a_535, b_536){
     var
      t_538 = a_535[2],
      t_537 = a_535[1],
      t_540 = b_536[2],
      t_539 = b_536[1],
      n = compare$4(t_537, t_539);
     return 0 === n ? compare$3(t_538, t_540) : n;
    }
    function sexp_of_t(param){
     var
      arg1_542 = param[2],
      arg0_541 = param[1],
      res0_543 = caml_call1(sexp_of_t$6, arg0_541),
      res1_544 = sexp_of_t$4(arg1_542);
     return [1, [0, res0_543, [0, res1_544, 0]]];
    }
    var
     T = [0, compare, sexp_of_t],
     include = Base_Comparator[7].call(null, T),
     comparator$0 = include[1];
    function find(t, k){return Base_Map[42].call(null, t, k);}
    var empty = Base_Map[6].call(null, [0, comparator$0]);
    function extend(t, k, v){return Base_Map[34].call(null, t, k, v);}
    function look_env(key, param, tenv){
     var result = find(tenv, key);
     return caml_call2
             (Base_Option[24],
              result,
              function(param){var x = param[2]; return [0, x];});
    }
    function extend_new_tid(key, def_t, depth, tenv){
     var value = [0, -271630457, depth], tenv$0 = extend(tenv, key, value);
     return [1, caml_call2(def_t, depth + 1 | 0, tenv$0)];
    }
    function exec(t){return caml_call2(t, 0, empty);}
    function sequence_defining(xs, f){
     function loop(acc_ys, param){
      if(param){
       var xs = param[2], x = param[1], t = caml_call1(f, x);
       return function(depth, tenv){
        var x = caml_call2(t, depth, tenv);
        return loop([0, x, acc_ys], xs)(depth, tenv);};
      }
      var x$0 = Base_List[63].call(null, acc_ys);
      return function(param, tenv){return x$0;};
     }
     return loop(0, xs);
    }
    function a(group, venv, t){
     switch(t[0]){
       case 0:
        var t$0 = t[2], s = t[1], t$1 = a(group, venv, t$0);
        return function(depth, tenv){
         var
          x$0 = caml_call2(t$1, depth, tenv),
          x = caml_call2(Canonical[4][1], s, x$0);
         return x;};
       case 1:
        var ts = t[2], s$0 = t[1], t$2 = eval_list(group, venv, ts);
        return function(depth, tenv){
         var vs = t$2(depth, tenv), x = caml_call2(Canonical[4][2], s$0, vs);
         return x;};
       case 2:
        var
         binds = t[1],
         t$3 =
           sequence_defining
            (binds,
             function(param){
              var x = param[2], s = param[1], t = a(group, venv, x);
              return function(depth, tenv){
               var x$0 = caml_call2(t, depth, tenv), x = [0, s, x$0];
               return x;};
             });
        return function(depth, tenv){
         var binds = t$3(depth, tenv), x = caml_call1(Canonical[4][6], binds);
         return x;};
       case 3:
        var
         alts = t[1],
         t$4 =
           sequence_defining
            (alts,
             function(param){
              var xs = param[2], s = param[1], t = eval_list(group, venv, xs);
              return function(depth, tenv){
               var ys = t(depth, tenv), x = [0, s, ys];
               return x;};
             });
        return function(depth, tenv){
         var alts = t$4(depth, tenv), x = caml_call1(Canonical[4][7], alts);
         return x;};
       case 4:
        var ts$0 = t[1], t$5 = eval_list(group, venv, ts$0);
        return function(depth, tenv){
         var vs = t$5(depth, tenv), x = caml_call1(Canonical[4][3], vs);
         return x;};
       case 5:
        var
         match = t[1],
         cs = match[2],
         loc = match[1],
         t$6 =
           sequence_defining
            (cs, function(a){return eval_poly_constr(group, venv, a);});
        return function(depth, tenv){
         var
          xss = t$6(depth, tenv),
          a = Base_List[11].call(null, xss),
          x = caml_call2(Canonical[4][4], loc, a);
         return x;};
       case 6:
        var
         match$0 = t[1],
         vid = match$0[2],
         loc$0 = match$0[1],
         match$1 = lookup$0(venv, vid);
        if(! match$1)
         return caml_call2
                 (eval_fail
                   (loc$0,
                    [0,
                     [11,
                      cst_Free_type_variable,
                      [24,
                       H,
                       function(param, custom_printf_545){
                        return to_string$3(custom_printf_545);
                       },
                       0]],
                     cst_Free_type_variable_Vid]),
                  vid,
                  0);
        var x = match$1[1];
        return function(param, tenv){return x;};
       case 7:
        var args = t[2], tid = t[1], t$7 = eval_list(group, venv, args);
        return function(depth, tenv){
         var args = t$7(depth, tenv);
         return caml_call2(eval_app(group, tid, args), depth, tenv);};
       default:
        var
         args$0 = t[3],
         tid$0 = t[2],
         in_group = t[1],
         t$8 = eval_list(group, venv, args$0);
        return function(depth, tenv){
         var args = t$8(depth, tenv);
         return caml_call2(eval_app(in_group, tid$0, args), depth, tenv);};
     }
    }
    function eval_list(group, venv, ts){
     return sequence_defining(ts, function(b){return a(group, venv, b);});
    }
    function eval_poly_constr(group, venv, c){
     var variant = c[1];
     if(-59723313 > variant){
      var
       match$0 = c[2],
       t$1 = match$0[2],
       loc = match$0[1],
       t$2 = a(group, venv, t$1);
      return function(depth, tenv){
       var
        x$0 = caml_call2(t$2, depth, tenv),
        match = caml_call1(Canonical[2][5], x$0);
       if(0 === match[0])
        var tab = match[1], x = tab[1], a = function(param, tenv){return x;};
       else
        var desc = match[1], a = caml_call2(eval_fail(loc, I), desc, 0);
       return caml_call2(a, depth, tenv);};
     }
     var b = c[2], match = b[2], s = b[1];
     if(match){
      var t = match[1], t$0 = a(group, venv, t);
      return function(depth, tenv){
       var
        x$0 = caml_call2(t$0, depth, tenv),
        x = [0, [0, s, [0, caml_call1(Canonical[2][4], x$0)]], 0];
       return x;};
     }
     var x = [0, [0, s, 0], 0];
     return function(param, tenv){return x;};
    }
    function eval_definition(group, formals, body){
     var
      venv =
        c
         (Base_List[41].call
           (null,
            formals,
            function(i, x){return [0, x, caml_call1(Canonical[2][1], i)];}),
          b,
          arg),
      t = a(group, venv, body);
     return function(depth, tenv){
      var
       x$0 = caml_call2(t, depth, tenv),
       x = caml_call1(Canonical[4][5], x$0);
      return x;};
    }
    function eval_app(group, tid, args){
     var
      gid = group[1],
      match = lookup(group, tid),
      body = match[2],
      formals = match[1],
      record_or_normal_variant = body[0] - 2 >>> 0 < 2 ? 1 : 0,
      cyclic = is_cyclic(group, tid),
      cyclic_no_VR = is_cyclic_with_no_intervening_(group, tid);
     a:
     {
      if(record_or_normal_variant && cyclic) break a;
      if(! cyclic_no_VR){
       var match$0 = Base_List[109].call(null, formals, args);
       if(match$0)
        var x = match$0[1], venv = c(x, b, arg);
       else
        var venv = Base[244].call(null, cst_apply_incorrect_type_appli);
       return a(group, venv, body);
      }
     }
     var d = [0, gid, tid];
     function t(depth, tenv){
      var x = look_env(d, depth, tenv);
      if(x)
       var recurse = x[1], a = function(param, tenv){return recurse;};
      else
       var
        b = eval_definition(group, formals, body),
        c = [0, gid, tid],
        a = function(a, d){return extend_new_tid(c, b, a, d);};
      return a(depth, tenv);
     }
     return function(depth, tenv){
      var x$1 = t(depth, tenv);
      if(0 === x$1[0])
       var
        r = x$1[1],
        x = caml_call2(Canonical[2][2], r, args),
        a = function(param, tenv){return x;};
      else
       var
        def = x$1[1],
        x$0 = caml_call2(Canonical[2][3], def, args),
        a = function(param, tenv){return x$0;};
      return a(depth, tenv);};
    }
    function eval$(t){
     var
      group = create$3(of_string(cst_top_level), 0),
      venv = c(0, b, arg),
      v = exec(a(group, venv, t));
     return caml_call1(Canonical[4][8], v);
    }
    return [0, , , , , , , , , , , , eval$];
   }
   var
    Exp = [0],
    include =
      Evaluation
       ([0,
         to_digest$2,
         [0, var$0, recurse$0, apply$0, opaque$0, get_poly_variant$0],
         [0],
         [0,
          annotate$0,
          basetype$0,
          tuple$0,
          poly_variant$0,
          define$0,
          record$0,
          variant$0,
          create$2]]),
    eval$ = include[12],
    Evaluation_to_digest = Evaluation(Canonical_digest);
   function eval_to_digest(exp){
    var x = Evaluation_to_digest[12].call(null, exp)[1];
    return x;
   }
   function eval_to_digest_string(exp){return to_hex(eval_to_digest(exp));}
   var
    Not_a_tuple =
      [248, "Bin_shape.For_typerep.Not_a_tuple", runtime.caml_fresh_oo_id(0)],
    J = [0, "shape/src/bin_shape.ml.For_typerep.Not_a_tuple"],
    K = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Not_a_tuple,
     function(param){
      var tag = param[1];
      if(tag !== Not_a_tuple)
       throw caml_maybe_attach_backtrace([0, Assert_failure, K], 1);
      var arg0_546 = param[2], res0_547 = sexp_of_t$7(arg0_546);
      return [1, [0, J, [0, res0_547, 0]]];
     });
   function deconstruct_tuple_exn(t){
    if(4 !== t[0]) throw caml_maybe_attach_backtrace([0, Not_a_tuple, t], 1);
    var ts = t[1];
    return ts;
   }
   var
    Bin_shape =
      [0,
       sexp_of_t$7,
       [0, of_string$1],
       [0, of_string$2],
       [0, of_string],
       [0, of_string$0, to_string$0],
       create$3,
       tuple$1,
       record$1,
       variant$1,
       constr,
       inherit,
       poly_variant$1,
       rec_app,
       top_app,
       var$2,
       basetype$1,
       annotate$1,
       [0, [0, equal$4, t_of_sexp$5, sexp_of_t$7]],
       [0, compare$1, t_of_sexp$1, sexp_of_t$2, to_hex, to_md5, of_md5],
       [0,
        [0, compare$0, sexp_of_t$1, expose],
        [0, compare$2, sexp_of_t$3],
        [0, [0, compare_t0, sexp_of_t0], compare_t0, sexp_of_t0]],
       [0,
        compare_t0,
        sexp_of_t0,
        to_string_hum,
        to_digest$2,
        Exp,
        [0],
        [0,
         annotate$0,
         basetype$0,
         tuple$0,
         poly_variant$0,
         var$1,
         apply$1,
         recurse$1,
         define$0,
         record$0,
         variant$0,
         create$2]],
       eval$,
       eval_to_digest,
       eval_to_digest_string,
       [0, deconstruct_tuple_exn]];
   runtime.caml_register_global(182, Bin_shape, "Bin_shape");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluX3NoYXBlLmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6MTAsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluX3NoYXBlLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMvZHMvRG9jdW1lbnRzL3BhdGNod29yay9fb3BhbS9saWIvYmluX3Byb3Qvc2hhcGUvYmluX3NoYXBlLm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwib3BlbiEgQmFzZVxuXG5tb2R1bGUgTG9jYXRpb24gOiBzaWdcbiAgaW5jbHVkZSBJZGVudGlmaWFibGUuU1xuZW5kID0gc3RydWN0XG4gIGluY2x1ZGUgU3RyaW5nXG5lbmRcblxubW9kdWxlIFV1aWQgOiBzaWdcbiAgaW5jbHVkZSBJZGVudGlmaWFibGUuU1xuZW5kID0gc3RydWN0XG4gIGluY2x1ZGUgU3RyaW5nXG5lbmRcblxubGV0IGV2YWxfZmFpbCBsb2MgZm10ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChmdW4gcyAtPiBmYWlsd2l0aCAoUHJpbnRmLnNwcmludGYgIVwiJXtMb2NhdGlvbn06ICVzXCIgbG9jIHMpKSBmbXRcbjs7XG5cbmxldCBlcXVhbF9vcHRpb24gZXF1YWwgYSBiID1cbiAgbWF0Y2ggYSwgYiB3aXRoXG4gIHwgU29tZSBfLCBOb25lIHwgTm9uZSwgU29tZSBfIC0+IGZhbHNlXG4gIHwgTm9uZSwgTm9uZSAtPiB0cnVlXG4gIHwgU29tZSB4LCBTb21lIHkgLT4gZXF1YWwgeCB5XG47O1xuXG5tb2R1bGUgU29ydGVkX3RhYmxlIDogc2lnXG4gIHR5cGUgJ2EgdCBbQEBkZXJpdmluZyBjb21wYXJlLCBzZXhwXVxuXG4gIHZhbCBjcmVhdGUgOiBMb2NhdGlvbi50IC0+IGVxOignYSAtPiAnYSAtPiBib29sKSAtPiAoc3RyaW5nICogJ2EpIGxpc3QgLT4gJ2EgdFxuICB2YWwgZXhwb3NlIDogJ2EgdCAtPiAoc3RyaW5nICogJ2EpIGxpc3RcbiAgdmFsIG1hcCA6ICdhIHQgLT4gZjooJ2EgLT4gJ2IpIC0+ICdiIHRcbmVuZCA9IHN0cnVjdFxuICB0eXBlICdhIHQgPSB7IHNvcnRlZCA6IChzdHJpbmcgKiAnYSkgbGlzdCB9IFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBdXG5cbiAgbGV0IG1lcmdlX2NoZWNrX2FkamFjZW50X2R1cHNcbiAgICA6ICBlcTooJ2EgLT4gJ2EgLT4gYm9vbCkgLT4gKHN0cmluZyAqICdhKSBsaXN0XG4gICAgLT4gWyBgT2sgb2YgKHN0cmluZyAqICdhKSBsaXN0IHwgYE1pc21hdGNoIG9mIHN0cmluZyBdXG4gICAgPVxuICAgIGZ1biB+ZXEgLT5cbiAgICBsZXQgcmVjIGxvb3AgYWNjIH5sYXN0X2tleSB+bGFzdF92YWx1ZSA9IGZ1bmN0aW9uXG4gICAgICB8IFtdIC0+IGBPayAoTGlzdC5yZXYgYWNjKVxuICAgICAgfCAoa2V5LCB2YWx1ZSkgOjogeHMgLT5cbiAgICAgICAgaWYgU3RyaW5nLihsYXN0X2tleSA9IGtleSlcbiAgICAgICAgdGhlblxuICAgICAgICAgIGlmIGVxIGxhc3RfdmFsdWUgdmFsdWUgdGhlbiBsb29wIGFjYyB+bGFzdF9rZXkgfmxhc3RfdmFsdWUgeHMgZWxzZSBgTWlzbWF0Y2gga2V5XG4gICAgICAgIGVsc2UgbG9vcCAoKGtleSwgdmFsdWUpIDo6IGFjYykgfmxhc3Rfa2V5OmtleSB+bGFzdF92YWx1ZTp2YWx1ZSB4c1xuICAgIGluXG4gICAgZnVuY3Rpb25cbiAgICB8IFtdIC0+IGBPayBbXVxuICAgIHwgKGtleSwgdmFsdWUpIDo6IHhzIC0+IGxvb3AgWyBrZXksIHZhbHVlIF0gfmxhc3Rfa2V5OmtleSB+bGFzdF92YWx1ZTp2YWx1ZSB4c1xuICA7O1xuXG4gIGxldCBjcmVhdGUgbG9jIH5lcSB4cyA9XG4gICAgbGV0IHNvcnRlZCA9IExpc3Quc29ydCB+Y29tcGFyZTooZnVuIChzMSwgXykgKHMyLCBfKSAtPiBTdHJpbmcuY29tcGFyZSBzMSBzMikgeHMgaW5cbiAgICBtYXRjaCBtZXJnZV9jaGVja19hZGphY2VudF9kdXBzIH5lcSBzb3J0ZWQgd2l0aFxuICAgIHwgYE9rIHNvcnRlZCAtPiB7IHNvcnRlZCB9XG4gICAgfCBgTWlzbWF0Y2ggcyAtPlxuICAgICAgZXZhbF9mYWlsIGxvYyBcIkRpZmZlcmVudCBzaGFwZXMgZm9yIGR1cGxpY2F0ZWQgcG9seW1vcnBoaWMgY29uc3RydWN0b3I6IGAlc1wiIHMgKClcbiAgOztcblxuICBsZXQgZXhwb3NlIHQgPSB0LnNvcnRlZFxuICBsZXQgbWFwIHQgfmYgPSB7IHNvcnRlZCA9IExpc3QubWFwIHQuc29ydGVkIH5mOihmdW4gKGssIHYpIC0+IGssIGYgdikgfVxuZW5kXG5cbm1vZHVsZSBEaWdlc3QgOiBzaWdcbiAgdHlwZSB0ID0gTWQ1X2xpYi50IFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBdXG5cbiAgdmFsIHRvX21kNSA6IHQgLT4gTWQ1X2xpYi50XG4gIHZhbCBvZl9tZDUgOiBNZDVfbGliLnQgLT4gdFxuICB2YWwgdG9faGV4IDogdCAtPiBzdHJpbmdcbiAgdmFsIGNvbnN0cnVjdG9yIDogc3RyaW5nIC0+IHQgbGlzdCAtPiB0XG4gIHZhbCBsaXN0IDogdCBsaXN0IC0+IHRcbiAgdmFsIHBhaXIgOiB0IC0+IHQgLT4gdFxuICB2YWwgc3RyaW5nIDogc3RyaW5nIC0+IHRcbiAgdmFsIHV1aWQgOiBVdWlkLnQgLT4gdFxuICB2YWwgaW50IDogaW50IC0+IHRcbiAgdmFsIG9wdGlvbiA6IHQgb3B0aW9uIC0+IHRcbmVuZCA9IHN0cnVjdFxuICBpbmNsdWRlIE1kNV9saWJcblxuICBsZXQgdG9fbWQ1IHQgPSB0XG4gIGxldCBvZl9tZDUgdCA9IHRcbiAgbGV0IHNleHBfb2ZfdCB0ID0gdCB8PiB0b19oZXggfD4gc2V4cF9vZl9zdHJpbmdcbiAgbGV0IHRfb2Zfc2V4cCBzID0gcyB8PiBzdHJpbmdfb2Zfc2V4cCB8PiBvZl9oZXhfZXhuXG4gIGxldCB1dWlkIHUgPSBzdHJpbmcgKFV1aWQudG9fc3RyaW5nIHUpXG4gIGxldCBpbnQgeCA9IHN0cmluZyAoSW50LnRvX3N0cmluZyB4KVxuICBsZXQgcGFpciB4IHkgPSBzdHJpbmcgKHRvX2JpbmFyeSB4IF4gdG9fYmluYXJ5IHkpXG4gIGxldCBsaXN0IGwgPSBzdHJpbmcgKFN0cmluZy5jb25jYXQgfnNlcDpcIlwiIChMaXN0Lm1hcCB+Zjp0b19iaW5hcnkgbCkpXG4gIGxldCBjb25zdHJ1Y3RvciBzIGwgPSBzdHJpbmcgKHMgXiB0b19iaW5hcnkgKGxpc3QgbCkpXG5cbiAgbGV0IG9wdGlvbiA9IGZ1bmN0aW9uXG4gICAgfCBOb25lIC0+IGNvbnN0cnVjdG9yIFwibm9uZVwiIFtdXG4gICAgfCBTb21lIHggLT4gY29uc3RydWN0b3IgXCJzb21lXCIgWyB4IF1cbiAgOztcbmVuZFxuXG5tb2R1bGUgQ2Fub25pY2FsX2V4cF9jb25zdHJ1Y3RvciA9IHN0cnVjdFxuICAoKiBbJ2EgdF0gaXMgYSBub24tcmVjdXJzaXZlIHR5cGUsIHVzZWQgdG8gcmVwcmVzZW50IDEtbGF5ZXIgb2YgZXhwcmVzc2lvbi4gIFRoZVxuICAgICByZWN1cnNpdmUga25vdCBpcyB0aWVkIGJlbG93IGluIFtDYW5vbmljYWxfZnVsbC5FeHAudF0uICopXG4gIHR5cGUgJ2EgdCA9XG4gICAgfCBBbm5vdGF0ZSBvZiBVdWlkLnQgKiAnYVxuICAgIHwgQmFzZSBvZiBVdWlkLnQgKiAnYSBsaXN0XG4gICAgfCBUdXBsZSBvZiAnYSBsaXN0XG4gICAgfCBSZWNvcmQgb2YgKHN0cmluZyAqICdhKSBsaXN0XG4gICAgfCBWYXJpYW50IG9mIChzdHJpbmcgKiAnYSBsaXN0KSBsaXN0XG4gICAgKCogUG9seW1vcnBoaWMgdmFyaWFudHMgYXJlIGluc2Vuc2l0aXZlIHRvIHRoZSBvcmRlciB0aGUgY29uc3RydWN0b3JzIGFyZSBsaXN0ZWQgKilcbiAgICB8IFBvbHlfdmFyaWFudCBvZiAnYSBvcHRpb24gU29ydGVkX3RhYmxlLnRcbiAgICAoKiBMZWZ0LWhhbmQtc2lkZSBvZiBbQXBwbGljYXRpb25dIGlzIGEgcG90ZW50aWFsbHkgcmVjdXJzaXZlIGRlZmluaXRpb246IGl0XG4gICAgICAgY2FuIHJlZmVyIHRvIGl0c2VsZiB1c2luZyBbUmVjX2FwcCAoaSwgXyldIHdoZXJlIFtpXSBpcyB0aGUgZGVwdGggb2YgdGhpc1xuICAgICAgIGFwcGxpY2F0aW9uIG5vZGUgKGhvdyBtYW55IGFwcGxpY2F0aW9uIG5vZGVzIGFyZSBhYm92ZSBpdCkuXG4gICAgICAgSXQgYWxzbyBoYXMgaXRzIG93biBzY29wZSBvZiB0eXBlIHZhcmlhYmxlcyBzbyBpdCBjYW4gbm90IHJlZmVyIHRvIHR5cGUgdmFyaWFibGVzXG4gICAgICAgb2YgdGhlIGVuY2xvc2luZyBzY29wZS5cbiAgICAqKVxuICAgIHwgQXBwbGljYXRpb24gb2YgJ2EgKiAnYSBsaXN0XG4gICAgfCBSZWNfYXBwIG9mIGludCAqICdhIGxpc3RcbiAgICB8IFZhciBvZiBpbnRcbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZV1cblxuICBsZXQgbWFwIHggfmYgPVxuICAgIG1hdGNoIHggd2l0aFxuICAgIHwgQW5ub3RhdGUgKHUsIHgpIC0+IEFubm90YXRlICh1LCBmIHgpXG4gICAgfCBCYXNlIChzLCB4cykgLT4gQmFzZSAocywgTGlzdC5tYXAgfmYgeHMpXG4gICAgfCBUdXBsZSB4cyAtPiBUdXBsZSAoTGlzdC5tYXAgfmYgeHMpXG4gICAgfCBSZWNvcmQgbCAtPiBSZWNvcmQgKExpc3QubWFwIGwgfmY6KGZ1biAocywgeCkgLT4gcywgZiB4KSlcbiAgICB8IFZhcmlhbnQgbCAtPiBWYXJpYW50IChMaXN0Lm1hcCBsIH5mOihmdW4gKHMsIHhzKSAtPiBzLCBMaXN0Lm1hcCB+ZiB4cykpXG4gICAgfCBQb2x5X3ZhcmlhbnQgdCAtPiBQb2x5X3ZhcmlhbnQgKFNvcnRlZF90YWJsZS5tYXAgdCB+ZjooT3B0aW9uLm1hcCB+ZikpXG4gICAgfCBBcHBsaWNhdGlvbiAoeCwgbCkgLT4gQXBwbGljYXRpb24gKGYgeCwgTGlzdC5tYXAgfmYgbClcbiAgICB8IFJlY19hcHAgKHQsIGwpIC0+IFJlY19hcHAgKHQsIExpc3QubWFwIH5mIGwpXG4gICAgfCBWYXIgdiAtPiBWYXIgdlxuICA7O1xuXG4gIGxldCB0b19zdHJpbmcgdCA9IFNleHAudG9fc3RyaW5nIChzZXhwX29mX3QgKGZ1biBfIC0+IEF0b20gXCIuLi5cIikgdClcbmVuZFxuXG5tb2R1bGUgQ3JlYXRlX2RpZ2VzdCA6IHNpZ1xuICAoKiBEaWdlc3QgdmFyaW91cyBleHByZXNzaW9uIGZvcm1zICopXG5cbiAgdmFsIGRpZ2VzdF9sYXllciA6IERpZ2VzdC50IENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IudCAtPiBEaWdlc3QudFxuZW5kID0gc3RydWN0XG4gIGxldCBkaWdlc3RfbGF5ZXIgPSBmdW5jdGlvblxuICAgIHwgQ2Fub25pY2FsX2V4cF9jb25zdHJ1Y3Rvci5Bbm5vdGF0ZSAodSwgeCkgLT5cbiAgICAgIERpZ2VzdC5jb25zdHJ1Y3RvciBcImFubm90YXRlXCIgWyBEaWdlc3QudXVpZCB1OyB4IF1cbiAgICB8IEJhc2UgKHUsIGwpIC0+IERpZ2VzdC5jb25zdHJ1Y3RvciBcImJhc2VcIiBbIERpZ2VzdC51dWlkIHU7IERpZ2VzdC5saXN0IGwgXVxuICAgIHwgVHVwbGUgbCAtPiBEaWdlc3QuY29uc3RydWN0b3IgXCJ0dXBsZVwiIFsgRGlnZXN0Lmxpc3QgbCBdXG4gICAgfCBSZWNvcmQgbCAtPlxuICAgICAgRGlnZXN0LmNvbnN0cnVjdG9yXG4gICAgICAgIFwicmVjb3JkXCJcbiAgICAgICAgWyBEaWdlc3QubGlzdCAoTGlzdC5tYXAgbCB+ZjooZnVuIChzLCB0KSAtPiBEaWdlc3QucGFpciAoRGlnZXN0LnN0cmluZyBzKSB0KSkgXVxuICAgIHwgVmFyaWFudCBsIC0+XG4gICAgICBEaWdlc3QuY29uc3RydWN0b3JcbiAgICAgICAgXCJ2YXJpYW50XCJcbiAgICAgICAgWyBEaWdlc3QubGlzdFxuICAgICAgICAgICAgKExpc3QubWFwIGwgfmY6KGZ1biAocywgbCkgLT4gRGlnZXN0LnBhaXIgKERpZ2VzdC5zdHJpbmcgcykgKERpZ2VzdC5saXN0IGwpKSlcbiAgICAgICAgXVxuICAgIHwgUG9seV92YXJpYW50IHRhYmxlIC0+XG4gICAgICBEaWdlc3QuY29uc3RydWN0b3JcbiAgICAgICAgXCJwb2x5X3ZhcmlhbnRcIlxuICAgICAgICBbIERpZ2VzdC5saXN0XG4gICAgICAgICAgICAoTGlzdC5tYXAgKFNvcnRlZF90YWJsZS5leHBvc2UgdGFibGUpIH5mOihmdW4gKHgsIHkpIC0+XG4gICAgICAgICAgICAgICBEaWdlc3QucGFpciAoRGlnZXN0LnN0cmluZyB4KSAoRGlnZXN0Lm9wdGlvbiB5KSkpXG4gICAgICAgIF1cbiAgICB8IEFwcGxpY2F0aW9uICh4LCBsKSAtPiBEaWdlc3QuY29uc3RydWN0b3IgXCJhcHBsaWNhdGlvblwiIFsgeDsgRGlnZXN0Lmxpc3QgbCBdXG4gICAgfCBSZWNfYXBwIChuLCBsKSAtPiBEaWdlc3QuY29uc3RydWN0b3IgXCJyZWNfYXBwXCIgWyBEaWdlc3QuaW50IG47IERpZ2VzdC5saXN0IGwgXVxuICAgIHwgVmFyIG4gLT4gRGlnZXN0LmNvbnN0cnVjdG9yIFwidmFyXCIgWyBEaWdlc3QuaW50IG4gXVxuICA7O1xuZW5kXG5cbm1vZHVsZSBWaXNpYmlsaXR5ID0gc3RydWN0XG4gIHR5cGUgdmlzaWJsZSA9IFZpc2libGVcbiAgdHlwZSBvcGFxdWUgPSBPcGFxdWVcblxuICBsZXQgXyA9IFZpc2libGVcbiAgbGV0IF8gPSBPcGFxdWVcbmVuZFxuXG5tb2R1bGUgdHlwZSBDYW5vbmljYWwgPSBzaWdcbiAgdHlwZSB0XG5cbiAgdmFsIHRvX2RpZ2VzdCA6IHQgLT4gRGlnZXN0LnRcblxuICBtb2R1bGUgRXhwMSA6IHNpZ1xuICAgIHR5cGUgXyB0XG5cbiAgICB2YWwgdmFyIDogaW50IC0+IF8gdFxuICAgIHZhbCByZWN1cnNlIDogaW50IC0+IF8gdCBsaXN0IC0+IF8gdFxuICAgIHZhbCBhcHBseSA6ICdhIHQgLT4gJ2EgdCBsaXN0IC0+IF8gdFxuICAgIHZhbCBvcGFxdWUgOiBfIHQgLT4gVmlzaWJpbGl0eS5vcGFxdWUgdFxuXG4gICAgdmFsIGdldF9wb2x5X3ZhcmlhbnRcbiAgICAgIDogIFZpc2liaWxpdHkudmlzaWJsZSB0XG4gICAgICAtPiAoVmlzaWJpbGl0eS5vcGFxdWUgdCBvcHRpb24gU29ydGVkX3RhYmxlLnQsIHN0cmluZykgUmVzdWx0LnRcbiAgZW5kXG5cbiAgbW9kdWxlIERlZiA6IHNpZ1xuICAgIHR5cGUgdCA9IFZpc2liaWxpdHkudmlzaWJsZSBFeHAxLnRcbiAgZW5kXG5cbiAgbW9kdWxlIENyZWF0ZSA6IHNpZ1xuICAgIHZhbCBhbm5vdGF0ZSA6IFV1aWQudCAtPiBfIEV4cDEudCAtPiBfIEV4cDEudFxuICAgIHZhbCBiYXNldHlwZSA6IFV1aWQudCAtPiBfIEV4cDEudCBsaXN0IC0+IF8gRXhwMS50XG4gICAgdmFsIHR1cGxlIDogXyBFeHAxLnQgbGlzdCAtPiBfIEV4cDEudFxuICAgIHZhbCBwb2x5X3ZhcmlhbnQgOiBMb2NhdGlvbi50IC0+IChzdHJpbmcgKiBfIEV4cDEudCBvcHRpb24pIGxpc3QgLT4gXyBFeHAxLnRcbiAgICB2YWwgZGVmaW5lIDogVmlzaWJpbGl0eS52aXNpYmxlIEV4cDEudCAtPiBEZWYudFxuICAgIHZhbCByZWNvcmQgOiAoc3RyaW5nICogXyBFeHAxLnQpIGxpc3QgLT4gXyBFeHAxLnRcbiAgICB2YWwgdmFyaWFudCA6IChzdHJpbmcgKiBfIEV4cDEudCBsaXN0KSBsaXN0IC0+IF8gRXhwMS50XG4gICAgdmFsIGNyZWF0ZSA6IF8gRXhwMS50IC0+IHRcbiAgZW5kXG5lbmRcblxubW9kdWxlIENhbm9uaWNhbF9kaWdlc3QgOiBDYW5vbmljYWwgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gQ2Fub25pY2FsIG9mIERpZ2VzdC50XG5cbiAgbGV0IHRvX2RpZ2VzdCAoQ2Fub25pY2FsIHgpID0geFxuXG4gIG1vZHVsZSBDRCA9IENyZWF0ZV9kaWdlc3RcblxuICBtb2R1bGUgRXhwMSA9IHN0cnVjdFxuICAgIHR5cGUgb3BhcXVlID0gRGlnZXN0LnRcblxuICAgIHR5cGUgJ2EgdCA9XG4gICAgICB8IFBvbHlfdmFyaWFudCBvZiBvcGFxdWUgb3B0aW9uIFNvcnRlZF90YWJsZS50XG4gICAgICB8IE5vbl9wb2x5X3ZhcmlhbnQgb2YgKHN0cmluZyAqIG9wYXF1ZSlcbiAgICAgIHwgT3BhcXVlIDogb3BhcXVlIC0+IFZpc2liaWxpdHkub3BhcXVlIHRcblxuICAgIGxldCB0b19kaWdlc3QgKHR5cGUgYSkgKHggOiBhIHQpID1cbiAgICAgIG1hdGNoIHggd2l0aFxuICAgICAgfCBPcGFxdWUgeCAtPiB4XG4gICAgICB8IE5vbl9wb2x5X3ZhcmlhbnQgKF8sIHgpIC0+IHhcbiAgICAgIHwgUG9seV92YXJpYW50IHggLT4gQ0QuZGlnZXN0X2xheWVyIChQb2x5X3ZhcmlhbnQgeClcbiAgICA7O1xuXG4gICAgbGV0IGVxdWFsICh0eXBlIGEpICh4IDogYSB0KSAoeSA6IGEgdCkgPVxuICAgICAgRGlnZXN0LmNvbXBhcmUgKHRvX2RpZ2VzdCB4KSAodG9fZGlnZXN0IHkpID0gMFxuICAgIDs7XG5cbiAgICBsZXQgb3BhcXVlIHggPSBPcGFxdWUgKHRvX2RpZ2VzdCB4KVxuXG4gICAgbGV0IGNyZWF0ZSB4ID1cbiAgICAgIGxldCB4ID0gQ2Fub25pY2FsX2V4cF9jb25zdHJ1Y3Rvci5tYXAgfmY6dG9fZGlnZXN0IHggaW5cbiAgICAgIGxldCBkZXNjID0gQ2Fub25pY2FsX2V4cF9jb25zdHJ1Y3Rvci50b19zdHJpbmcgeCBpblxuICAgICAgbWF0Y2ggeCB3aXRoXG4gICAgICB8IENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IuUG9seV92YXJpYW50IGwgLT4gUG9seV92YXJpYW50IGxcbiAgICAgIHwgQmFzZSBfIC0+IE5vbl9wb2x5X3ZhcmlhbnQgKGRlc2MsIENELmRpZ2VzdF9sYXllciB4KVxuICAgICAgfCBBbm5vdGF0ZSBfIC0+XG4gICAgICAgICgqIEl0J3MgdW5zYWZlIHRvIHVzZSBkZXJpdmluZyBiaW5faW8gd2hlbiBpbmhlcml0aW5nIGZyb20gYSBwb2x5bW9ycGhpYyB2YXJpYW50XG4gICAgICAgICAgIHRoYXQgaGFzIGEgY3VzdG9tIGJpbl9pby4gIElmIHdlIGZvcmJpZCB0aGF0LCB3ZSBjYW4gaGFwcGlseSByZWplY3QgaGVyZVxuICAgICAgICAgICBhbnl0aGluZyB0aGF0J3MgYW5ub3RhdGVkLiAqKVxuICAgICAgICBOb25fcG9seV92YXJpYW50IChkZXNjLCBDRC5kaWdlc3RfbGF5ZXIgeClcbiAgICAgIHwgQXBwbGljYXRpb24gXyAtPlxuICAgICAgICAoKiBBcHBsaWNhdGlvbiBjYW4gcmVhbGx5IGJlIGEgcG9seS12YXJpYW50IHlvdSBjYW4gaW5oZXJpdCBmcm9tISAgQnV0IGl0J3MgYVxuICAgICAgICAgICByYXJlIHNpdHVhdGlvbiB0aGF0IG1vc3RseSAob25seT8pIGFyaXNlcyB3aXRoIGluaGVyaXRhbmNlIGZyb20gcmVjdXJzaXZlXG4gICAgICAgICAgIHBvbHltb3JwaWMgdmFyaWFudHMsIHdoaWNoIHdlJ3ZlIG5vdCBzZWVuIGFueXdoZXJlIHlldC4gIFNvIHdlIHJlamVjdCBpdC4gKilcbiAgICAgICAgTm9uX3BvbHlfdmFyaWFudCAoZGVzYywgQ0QuZGlnZXN0X2xheWVyIHgpXG4gICAgICB8IFJlY19hcHAgXyAtPlxuICAgICAgICAoKiBZb3UgY2FuIG9ubHkgZ2V0IHRoZSBbUmVjX2FwcF0gY29uc3RydWN0b3IgZm9yIHR5cGUtcmVmZXJlbmNlcyB3aXRoaW4gdGhlXG4gICAgICAgICAgIG11dHVhbCBncm91cCBiZWluZyBkZWZpbmVkLiBSZWZlcmVuY2VzIHdoaWNoXG4gICAgICAgICAgIGZvbGxvdyBhZnRlciB0aGUgY3VycmVudCBncm91cCB3aWxsIGFsd2F5cyBiZSBbQXBwbGljYXRpb25dcy5cblxuICAgICAgICAgICBBbmQgc2luY2Ugb2NhbWwgcmVqZWN0cyByZWZlcmVuY2VzIGluIGBpbmhlcml0YW5jZScgcG9zaXRpb24gdG8gdHlwZXMgd2l0aGluXG4gICAgICAgICAgIHRoZSBjdXJyZW50IGdyb3VwIChzZWUgZXhhbXBsZSkgd2l0aDpcblxuICAgICAgICAgICBFcnJvcjogVGhlIHR5cGUgY29uc3RydWN0b3IgdFxuICAgICAgICAgICBpcyBub3QgeWV0IGNvbXBsZXRlbHkgZGVmaW5lZFxuXG4gICAgICAgICAgIHRoZW4gaXRzIG9rIHRvIHNheSB0aGF0IGEgcmVjLWFwcCBpcyBzb21ldGhpbmcgdGhhdCBjYW4ndCBiZSBpbmhlcml0ZWQgZnJvbSBhbmRcbiAgICAgICAgICAgcmV0dXJuIFtOb25fcG9seV92YXJpYW50XS5cblxuICAgICAgICAgICBBbmQgdW5saWtlIHRoZSBbQXBwbGljYXRpb25dIGNhc2UsIGl0IHNob3VsZCBuZXZlciBiZSBwb3NzaWJsZSB0byBzZWVcbiAgICAgICAgICAgYW4gZXJyb3IgbWVzc2FnZSB3aXRoIHRoZSBbZGVzY10gPSBbUmVjX2FwcF0uXG5cbiAgICAgICAgICAgRXhhbXBsZTogW3R5cGUgdCA9IFtgYSBvZiBbIHwgdF0gXV1cbiAgICAgICAgICAgSGVyZSwgW3wgdF0gd291bGQgYmUgYW4gZXhhbXBsZSBvZiBpbmhlcml0YW5jZSBmcm9tIGEgUmVjX2FwcCwgd2hpY2hcbiAgICAgICAgICAgaXMgcmVqZWN0ZWQgYnkgdGhlIGNvbXBpbGVyLlxuICAgICAgICAqKVxuICAgICAgICBOb25fcG9seV92YXJpYW50IChkZXNjLCBDRC5kaWdlc3RfbGF5ZXIgeClcbiAgICAgIHwgVmFyIF8gfCBUdXBsZSBfIHwgUmVjb3JkIF8gfCBWYXJpYW50IF8gLT5cbiAgICAgICAgTm9uX3BvbHlfdmFyaWFudCAoZGVzYywgQ0QuZGlnZXN0X2xheWVyIHgpXG4gICAgOztcblxuICAgIGxldCB2YXIgeCA9IGNyZWF0ZSAoVmFyIHgpXG4gICAgbGV0IGFwcGx5IGRlZiBsID0gY3JlYXRlIChBcHBsaWNhdGlvbiAoZGVmLCBsKSlcbiAgICBsZXQgcmVjdXJzZSB0aWQgbCA9IGNyZWF0ZSAoUmVjX2FwcCAodGlkLCBsKSlcblxuICAgIGxldCBnZXRfcG9seV92YXJpYW50ICh4IDogVmlzaWJpbGl0eS52aXNpYmxlIHQpID1cbiAgICAgIG1hdGNoIHggd2l0aFxuICAgICAgfCBOb25fcG9seV92YXJpYW50IChkZXNjLCBfKSAtPiBFcnJvciBkZXNjXG4gICAgICB8IFBvbHlfdmFyaWFudCBsIC0+IE9rIChTb3J0ZWRfdGFibGUubWFwIH5mOihPcHRpb24ubWFwIH5mOihmdW4geCAtPiBPcGFxdWUgeCkpIGwpXG4gICAgOztcbiAgZW5kXG5cbiAgbW9kdWxlIERlZiA9IHN0cnVjdFxuICAgIHR5cGUgdCA9IFZpc2liaWxpdHkudmlzaWJsZSBFeHAxLnRcbiAgZW5kXG5cbiAgbW9kdWxlIENyZWF0ZSA9IHN0cnVjdFxuICAgIGxldCBhbm5vdGF0ZSB1IHggPSBFeHAxLmNyZWF0ZSAoQW5ub3RhdGUgKHUsIHgpKVxuICAgIGxldCBiYXNldHlwZSB1IGwgPSBFeHAxLmNyZWF0ZSAoQmFzZSAodSwgbCkpXG4gICAgbGV0IHR1cGxlIGwgPSBFeHAxLmNyZWF0ZSAoVHVwbGUgbClcblxuICAgIGxldCBwb2x5X3ZhcmlhbnQgbG9jIGwgPVxuICAgICAgRXhwMS5jcmVhdGUgKFBvbHlfdmFyaWFudCAoU29ydGVkX3RhYmxlLmNyZWF0ZSBsb2MgfmVxOihlcXVhbF9vcHRpb24gRXhwMS5lcXVhbCkgbCkpXG4gICAgOztcblxuICAgIGxldCBkZWZpbmUgeCA9IHhcbiAgICBsZXQgcmVjb3JkIGwgPSBFeHAxLmNyZWF0ZSAoUmVjb3JkIGwpXG4gICAgbGV0IHZhcmlhbnQgbCA9IEV4cDEuY3JlYXRlIChWYXJpYW50IGwpXG4gICAgbGV0IGNyZWF0ZSBlID0gQ2Fub25pY2FsIChFeHAxLnRvX2RpZ2VzdCBlKVxuICBlbmRcbmVuZFxuXG5tb2R1bGUgQ2Fub25pY2FsX2Z1bGwgPSBzdHJ1Y3RcbiAgbW9kdWxlIENEID0gQ3JlYXRlX2RpZ2VzdFxuXG4gIG1vZHVsZSBFeHAxID0gc3RydWN0XG4gICAgdHlwZSB0MCA9IEV4cCBvZiB0MCBDYW5vbmljYWxfZXhwX2NvbnN0cnVjdG9yLnQgW0BAZGVyaXZpbmcgY29tcGFyZSwgc2V4cF1cblxuICAgIGxldCBlcXVhbF90MCB4IHkgPSBjb21wYXJlX3QwIHggeSA9IDBcblxuICAgIHR5cGUgJ2EgdCA9IHQwIFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBdXG5cbiAgICBsZXQgdmFyIHggPSBFeHAgKENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IuVmFyIHgpXG4gICAgbGV0IGFwcGx5IGQgeHMgPSBFeHAgKENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IuQXBwbGljYXRpb24gKGQsIHhzKSlcbiAgICBsZXQgcmVjdXJzZSByIHhzID0gRXhwIChDYW5vbmljYWxfZXhwX2NvbnN0cnVjdG9yLlJlY19hcHAgKHIsIHhzKSlcblxuICAgIGxldCBwb2x5X3ZhcmlhbnQgbG9jIHhzID1cbiAgICAgIEV4cFxuICAgICAgICAoQ2Fub25pY2FsX2V4cF9jb25zdHJ1Y3Rvci5Qb2x5X3ZhcmlhbnRcbiAgICAgICAgICAgKFNvcnRlZF90YWJsZS5jcmVhdGUgbG9jIH5lcTooZXF1YWxfb3B0aW9uIGVxdWFsX3QwKSB4cykpXG4gICAgOztcblxuICAgIGxldCBnZXRfcG9seV92YXJpYW50ID0gZnVuY3Rpb25cbiAgICAgIHwgRXhwIChQb2x5X3ZhcmlhbnQgdGFiKSAtPiBPayB0YWJcbiAgICAgIHwgRXhwIGNjIC0+IEVycm9yIChDYW5vbmljYWxfZXhwX2NvbnN0cnVjdG9yLnRvX3N0cmluZyBjYylcbiAgICA7O1xuXG4gICAgbGV0IG9wYXF1ZSB0ID0gdFxuXG4gICAgbGV0IHJlYyB0b19kaWdlc3QgPSBmdW5jdGlvblxuICAgICAgfCBFeHAgZSAtPiBDRC5kaWdlc3RfbGF5ZXIgKENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IubWFwIH5mOnRvX2RpZ2VzdCBlKVxuICAgIDs7XG4gIGVuZFxuXG4gIG1vZHVsZSBEZWYgPSBzdHJ1Y3RcbiAgICAoKiBBIFtEZWYudF0gaXMgYW4gZXhwcmVzc2lvbiB3aGljaCBtYXkgYmUgYXBwbGllZCAqKVxuICAgIHR5cGUgdCA9IEV4cDEudDAgW0BAZGVyaXZpbmcgY29tcGFyZSwgc2V4cF1cbiAgZW5kXG5cbiAgKCogQSBjYW5vbmljYWwgc2hhcGUgW3RdIGlzIGFuIFtFeHAxLnRdLiAqKVxuICB0eXBlIHQgPSBFeHAxLnQwIFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBdXG5cbiAgbGV0IHRvX2RpZ2VzdCBlID0gRXhwMS50b19kaWdlc3QgZVxuXG4gIG1vZHVsZSBDcmVhdGUgPSBzdHJ1Y3RcbiAgICBsZXQgYW5ub3RhdGUgdSB4ID0gRXhwMS5FeHAgKEFubm90YXRlICh1LCB4KSlcbiAgICBsZXQgYmFzZXR5cGUgdSB4cyA9IEV4cDEuRXhwIChCYXNlICh1LCB4cykpXG4gICAgbGV0IHR1cGxlIHhzID0gRXhwMS5FeHAgKFR1cGxlIHhzKVxuICAgIGxldCBwb2x5X3ZhcmlhbnQgbG9jIHhzID0gRXhwMS5wb2x5X3ZhcmlhbnQgbG9jIHhzXG4gICAgbGV0IHZhciBuID0gRXhwMS5FeHAgKFZhciBuKVxuICAgIGxldCByZWN1cnNlIHIgeHMgPSBFeHAxLnJlY3Vyc2UgciB4c1xuICAgIGxldCBhcHBseSBkIHhzID0gRXhwMS5hcHBseSBkIHhzXG4gICAgbGV0IGRlZmluZSB4ID0geFxuICAgIGxldCByZWNvcmQgeHMgPSBFeHAxLkV4cCAoUmVjb3JkIHhzKVxuICAgIGxldCB2YXJpYW50IHhzID0gRXhwMS5FeHAgKFZhcmlhbnQgeHMpXG4gICAgbGV0IGNyZWF0ZSBleHAgPSBleHBcbiAgZW5kXG5cbiAgbGV0IHRvX3N0cmluZ19odW0gdCA9IFNleHAudG9fc3RyaW5nX2h1bSAoc2V4cF9vZl90IHQpXG5lbmRcblxubW9kdWxlIFRpZCA6IHNpZ1xuICBpbmNsdWRlIElkZW50aWZpYWJsZS5TXG5lbmQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBTdHJpbmdcbmVuZFxuXG5tb2R1bGUgVmlkIDogc2lnXG4gIGluY2x1ZGUgSWRlbnRpZmlhYmxlLlNcbmVuZCA9IHN0cnVjdFxuICBpbmNsdWRlIFN0cmluZ1xuZW5kXG5cbm1vZHVsZSBHaWQgOiBzaWdcbiAgKCogdW5pcXVlIGdyb3VwLWlkLCB1c2VkIGFzIGtleSBmb3IgVGVudiBiZWxvdyAqKVxuICB0eXBlIHQgW0BAZGVyaXZpbmcgY29tcGFyZSwgZXF1YWwsIHNleHBdXG5cbiAgdmFsIGNyZWF0ZSA6IHVuaXQgLT4gdFxuZW5kID0gc3RydWN0XG4gIHR5cGUgdCA9IGludCBbQEBkZXJpdmluZyBjb21wYXJlLCBlcXVhbCwgc2V4cF1cblxuICBsZXQgciA9IHJlZiAwXG5cbiAgbGV0IGNyZWF0ZSAoKSA9XG4gICAgbGV0IHUgPSAhciBpblxuICAgIHIgOj0gMSArIHU7XG4gICAgdVxuICA7O1xuZW5kXG5cbm1vZHVsZSBFeHByZXNzaW9uID0gc3RydWN0XG4gIHR5cGUgJ3QgcG9seV9jb25zdHIgPVxuICAgIFsgYENvbnN0ciBvZiBzdHJpbmcgKiAndCBvcHRpb25cbiAgICB8IGBJbmhlcml0IG9mIExvY2F0aW9uLnQgKiAndFxuICAgIF1cbiAgW0BAZGVyaXZpbmcgY29tcGFyZSwgZXF1YWwsIHNleHBdXG5cbiAgbW9kdWxlIEdyb3VwIDogc2lnXG4gICAgdHlwZSAnYSB0IFtAQGRlcml2aW5nIGNvbXBhcmUsIGVxdWFsLCBzZXhwXVxuXG4gICAgdmFsIGNyZWF0ZSA6IExvY2F0aW9uLnQgLT4gKFRpZC50ICogVmlkLnQgbGlzdCAqICdhKSBsaXN0IC0+ICdhIHRcbiAgICB2YWwgaWQgOiAnYSB0IC0+IEdpZC50XG4gICAgdmFsIGxvb2t1cCA6ICdhIHQgLT4gVGlkLnQgLT4gVmlkLnQgbGlzdCAqICdhXG4gIGVuZCA9IHN0cnVjdFxuICAgIHR5cGUgJ2EgdCA9XG4gICAgICB7IGdpZCA6IEdpZC50XG4gICAgICA7IGxvYyA6IExvY2F0aW9uLnRcbiAgICAgIDsgbWVtYmVycyA6IChUaWQudCAqIChWaWQudCBsaXN0ICogJ2EpKSBsaXN0XG4gICAgICB9XG4gICAgW0BAZGVyaXZpbmcgY29tcGFyZSwgZXF1YWwsIHNleHBdXG5cbiAgICBsZXQgY3JlYXRlIGxvYyB0cmlwcyA9XG4gICAgICBsZXQgZ2lkID0gR2lkLmNyZWF0ZSAoKSBpblxuICAgICAgbGV0IG1lbWJlcnMgPSBMaXN0Lm1hcCB0cmlwcyB+ZjooZnVuICh4LCB2cywgdCkgLT4geCwgKHZzLCB0KSkgaW5cbiAgICAgIHsgZ2lkOyBsb2M7IG1lbWJlcnMgfVxuICAgIDs7XG5cbiAgICBsZXQgaWQgZyA9IGcuZ2lkXG5cbiAgICBsZXQgbG9va3VwIGcgdGlkID1cbiAgICAgIG1hdGNoIExpc3QuQXNzb2MuZmluZCBnLm1lbWJlcnMgfmVxdWFsOlRpZC4oID0gKSB0aWQgd2l0aFxuICAgICAgfCBTb21lIHNjaGVtZSAtPiBzY2hlbWVcbiAgICAgIHwgTm9uZSAtPlxuICAgICAgICBldmFsX2ZhaWxcbiAgICAgICAgICBnLmxvY1xuICAgICAgICAgICFcImltcG9zc2libGU6IGxvb2t1cF9ncm91cCwgdW5ib3VuZCB0eXBlLWlkZW50aWZpZXI6ICV7VGlkfVwiXG4gICAgICAgICAgdGlkXG4gICAgICAgICAgKClcbiAgICA7O1xuICBlbmRcblxuICBtb2R1bGUgU3RhYmxlID0gc3RydWN0XG4gICAgbW9kdWxlIFYxID0gc3RydWN0XG4gICAgICB0eXBlIHQgPVxuICAgICAgICB8IEFubm90YXRlIG9mIFV1aWQudCAqIHRcbiAgICAgICAgfCBCYXNlIG9mIFV1aWQudCAqIHQgbGlzdFxuICAgICAgICB8IFJlY29yZCBvZiAoc3RyaW5nICogdCkgbGlzdFxuICAgICAgICB8IFZhcmlhbnQgb2YgKHN0cmluZyAqIHQgbGlzdCkgbGlzdFxuICAgICAgICB8IFR1cGxlIG9mIHQgbGlzdFxuICAgICAgICB8IFBvbHlfdmFyaWFudCBvZiAoTG9jYXRpb24udCAqIHQgcG9seV9jb25zdHIgbGlzdClcbiAgICAgICAgfCBWYXIgb2YgKExvY2F0aW9uLnQgKiBWaWQudClcbiAgICAgICAgfCBSZWNfYXBwIG9mIFRpZC50ICogdCBsaXN0XG4gICAgICAgIHwgVG9wX2FwcCBvZiB0IEdyb3VwLnQgKiBUaWQudCAqIHQgbGlzdFxuICAgICAgW0BAZGVyaXZpbmcgZXF1YWwsIHNleHAsIHZhcmlhbnRzXVxuICAgIGVuZFxuICBlbmRcblxuICBpbmNsdWRlIFN0YWJsZS5WMVxuXG4gIHR5cGUgZ3JvdXAgPSB0IEdyb3VwLnRcblxuICBsZXQgZ3JvdXAgPSBHcm91cC5jcmVhdGVcblxuICB0eXBlIHBvbHlfdmFyaWFudF9yb3cgPSB0IHBvbHlfY29uc3RyXG5cbiAgbGV0IGNvbnN0ciBzIHQgPSBgQ29uc3RyIChzLCB0KVxuICBsZXQgaW5oZXJpdF8gbG9jIHQgPSBgSW5oZXJpdCAobG9jLCB0KVxuICBsZXQgdmFyIGxvYyB0ID0gVmFyIChsb2MsIHQpXG4gIGxldCBwb2x5X3ZhcmlhbnQgbG9jIHhzID0gUG9seV92YXJpYW50IChsb2MsIHhzKVxuICBsZXQgYmFzZXR5cGUgPSBiYXNlXG5cbiAgKCogXCJWUlwiIHN0YW5kcyBmb3IgXCJ2YXJpYW50IG9yIHJlY29yZFwiICopXG5cbiAgbGV0IGlzX2N5Y2xpY18wIH4odmlhX1ZSIDogYm9vbCkgOiBncm91cCAtPiBUaWQudCAtPiBib29sID1cbiAgICBmdW4gZ3JvdXAgdGlkIC0+XG4gICAgbGV0IHNldCA9IHJlZiBbXSBpblxuICAgIGxldCB2aXNpdGVkIHRpZCA9IExpc3QubWVtICFzZXQgdGlkIH5lcXVhbDpUaWQuZXF1YWwgaW5cbiAgICBsZXQgYWRkIHRpZCA9IHNldCA6PSB0aWQgOjogIXNldCBpblxuICAgIGxldCByZWMgdHJhdiA9IGZ1bmN0aW9uXG4gICAgICAoKiBXZSBsb29rIGZvciBjeWNsZXMgYnkgdHJhdmVyc2luZyB0aGUgc3RydWN0dXJlIG9mIHR5cGUtZXhwcmVzc2lvbnMgKilcbiAgICAgIHwgQW5ub3RhdGUgKF8sIHQpIC0+IHRyYXYgdFxuICAgICAgfCBCYXNlIChfLCB0cykgfCBUdXBsZSB0cyB8IFRvcF9hcHAgKF8sIF8sIHRzKSAtPiBMaXN0Lml0ZXIgdHMgfmY6dHJhdlxuICAgICAgKCogLi5pbmNsdWRpbmcgcG9seS12YXJpYW50cyAqKVxuICAgICAgfCBQb2x5X3ZhcmlhbnQgKF8sIGNzKSAtPlxuICAgICAgICBMaXN0Lml0ZXIgY3MgfmY6KGZ1bmN0aW9uXG4gICAgICAgICAgfCBgQ29uc3RyIChfLCBOb25lKSAtPiAoKVxuICAgICAgICAgIHwgYENvbnN0ciAoXywgU29tZSB0KSAtPiB0cmF2IHRcbiAgICAgICAgICB8IGBJbmhlcml0IChfbG9jLCB0KSAtPiB0cmF2IHQpXG4gICAgICAoKiAuLiBhbmQgcmVjb3JkcyAmIChub3JtYWwpIHZhcmlhbnRzICopXG4gICAgICB8IFJlY29yZCB4cyAtPiBpZiB2aWFfVlIgdGhlbiBMaXN0Lml0ZXIgeHMgfmY6KGZ1biAoXywgdCkgLT4gdHJhdiB0KSBlbHNlICgpXG4gICAgICB8IFZhcmlhbnQgeHMgLT5cbiAgICAgICAgaWYgdmlhX1ZSIHRoZW4gTGlzdC5pdGVyIHhzIH5mOihmdW4gKF8sIHRzKSAtPiBMaXN0Lml0ZXIgfmY6dHJhdiB0cykgZWxzZSAoKVxuICAgICAgKCogV2UgZG9udCBmb2xsb3cgdHlwZS12YXJzICopXG4gICAgICB8IFZhciBfIC0+ICgpXG4gICAgICAoKiB0cmF2ZXJzZSAocmVjdXJzaXZlKSB0eXBlLWFwcHMgd2hlbiBmaXJzdCBlbmNvdW50ZXJlZCAqKVxuICAgICAgfCBSZWNfYXBwICh0aWQsIHRzKSAtPlxuICAgICAgICBpZiB2aXNpdGVkIHRpZFxuICAgICAgICB0aGVuICgpXG4gICAgICAgIGVsc2UgKFxuICAgICAgICAgIGFkZCB0aWQ7XG4gICAgICAgICAgdHJhdl90aWQgdGlkKTtcbiAgICAgICAgTGlzdC5pdGVyIHRzIH5mOnRyYXZcbiAgICBhbmQgdHJhdl90aWQgdGlkID1cbiAgICAgIGxldCBfLCBib2R5ID0gR3JvdXAubG9va3VwIGdyb3VwIHRpZCBpblxuICAgICAgdHJhdiBib2R5XG4gICAgaW5cbiAgICB0cmF2X3RpZCB0aWQ7XG4gICAgbGV0IHJlcyA9IHZpc2l0ZWQgdGlkIGluXG4gICAgKCpsZXQgX3NzID0gU3RyaW5nLmNvbmNhdCB+c2VwOlwiLFwiIChMaXN0Lm1hcCAoIXNldCkgfmY6KHNwcmludGYgIVwiJXtUaWR9XCIpKSBpbiopXG4gICAgKCpQcmludGYucHJpbnRmICFcImlzX2N5bGljOiAle1RpZH0gLS0+ICglcykgJWIgIC0tICVzJSFcIiB0aWQgX3NzIHJlcyAoR3JvdXAubG9jIGdyb3VwKTsqKVxuICAgIHJlc1xuICA7O1xuXG4gIGxldCBpc19jeWNsaWMgPSBpc19jeWNsaWNfMCB+dmlhX1ZSOnRydWVcbiAgbGV0IGlzX2N5Y2xpY193aXRoX25vX2ludGVydmVuaW5nX1ZSID0gaXNfY3ljbGljXzAgfnZpYV9WUjpmYWxzZVxuZW5kXG5cbmluY2x1ZGUgRXhwcmVzc2lvblxuXG5tb2R1bGUgRXZhbHVhdGlvbiAoQ2Fub25pY2FsIDogQ2Fub25pY2FsKSA9IHN0cnVjdFxuICAoKiBbVmVudi50XVxuICAgICBFbnZpcm9ubWVudCBmb3IgcmVzb2x2aW5nIHR5cGUtdmFycyAqKVxuICBtb2R1bGUgVmVudiA6IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgdmFsIGxvb2t1cCA6IHQgLT4gVmlkLnQgLT4gVmlzaWJpbGl0eS52aXNpYmxlIENhbm9uaWNhbC5FeHAxLnQgb3B0aW9uXG4gICAgdmFsIGNyZWF0ZSA6IChWaWQudCAqIFZpc2liaWxpdHkudmlzaWJsZSBDYW5vbmljYWwuRXhwMS50KSBsaXN0IC0+IHRcbiAgZW5kID0gc3RydWN0XG4gICAgdHlwZSB0ID0gVmlzaWJpbGl0eS52aXNpYmxlIENhbm9uaWNhbC5FeHAxLnQgTWFwLk0oVmlkKS50XG5cbiAgICBsZXQgY3JlYXRlID1cbiAgICAgIExpc3QuZm9sZFxuICAgICAgICB+aW5pdDooTWFwLmVtcHR5IChtb2R1bGUgVmlkKSlcbiAgICAgICAgfmY6KGZ1biB0IChrLCB2KSAtPiBNYXAuc2V0IH5rZXk6ayB+ZGF0YTp2IHQpXG4gICAgOztcblxuICAgIGxldCBsb29rdXAgdCBrID0gTWFwLmZpbmQgdCBrXG4gIGVuZFxuXG4gIG1vZHVsZSBBcHBsaWNhbmQgPSBzdHJ1Y3RcbiAgICB0eXBlIHQgPVxuICAgICAgfCBSZWN1cnNpb25fbGV2ZWwgb2YgaW50XG4gICAgICB8IERlZmluaXRpb24gb2YgQ2Fub25pY2FsLkRlZi50XG4gIGVuZFxuXG4gICgqIFtUZW52LnRdXG4gICAgIEVudmlyb25tZW50IGZvciByZXNvbHZpbmcgdHlwZS1kZWZpbml0aW9ucyAqKVxuICBtb2R1bGUgVGVudiA6IHNpZ1xuICAgIHR5cGUga2V5ID0gR2lkLnQgKiBUaWQudFxuICAgIHR5cGUgdFxuXG4gICAgdmFsIGZpbmQgOiB0IC0+IGtleSAtPiBbIGBSZWN1cnNpb25fbGV2ZWwgb2YgaW50IF0gb3B0aW9uXG4gICAgdmFsIGVtcHR5IDogdFxuICAgIHZhbCBleHRlbmQgOiB0IC0+IGtleSAtPiBbIGBSZWN1cnNpb25fbGV2ZWwgb2YgaW50IF0gLT4gdFxuICBlbmQgPSBzdHJ1Y3RcbiAgICBtb2R1bGUgS2V5ID0gc3RydWN0XG4gICAgICBtb2R1bGUgVCA9IHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBHaWQudCAqIFRpZC50IFtAQGRlcml2aW5nIGNvbXBhcmUsIHNleHBfb2ZdXG4gICAgICBlbmRcblxuICAgICAgaW5jbHVkZSBUXG4gICAgICBpbmNsdWRlIENvbXBhcmF0b3IuTWFrZSAoVClcbiAgICBlbmRcblxuICAgIHR5cGUga2V5ID0gS2V5LnRcbiAgICB0eXBlIHQgPSBbIGBSZWN1cnNpb25fbGV2ZWwgb2YgaW50IF0gTWFwLk0oS2V5KS50XG5cbiAgICBsZXQgZmluZCB0IGsgPSBNYXAuZmluZCB0IGtcbiAgICBsZXQgZW1wdHkgPSBNYXAuZW1wdHkgKG1vZHVsZSBLZXkpXG4gICAgbGV0IGV4dGVuZCB0IGsgdiA9IE1hcC5zZXQgfmtleTprIH5kYXRhOnYgdFxuICBlbmRcblxuICAoKiBbRGVmaW5pbmcudF1cbiAgICAgTW9uYWQgZm9yIG1hbmFnaW5nIHVuLXJvbGxpbmcgZGVwdGgsIGFuZCBtYWludGFpbmcgYSBbVGVudi50XSAqKVxuICBtb2R1bGUgRGVmaW5pbmcgOiBzaWdcbiAgICB0eXBlICdhIHRcblxuICAgIHZhbCByZXR1cm4gOiAnYSAtPiAnYSB0XG4gICAgdmFsIGJpbmQgOiAnYSB0IC0+ICgnYSAtPiAnYiB0KSAtPiAnYiB0XG4gICAgdmFsIGxvb2tfZW52IDogVGVudi5rZXkgLT4gQXBwbGljYW5kLnQgb3B0aW9uIHRcbiAgICB2YWwgZXh0ZW5kX25ld190aWQgOiBUZW52LmtleSAtPiBDYW5vbmljYWwuRGVmLnQgdCAtPiBBcHBsaWNhbmQudCB0XG4gICAgdmFsIGV4ZWMgOiAnYSB0IC0+ICdhXG4gIGVuZCA9IHN0cnVjdFxuICAgIHR5cGUgJ2EgdCA9IGRlcHRoOmludCAtPiBUZW52LnQgLT4gJ2FcblxuICAgIGxldCByZXR1cm4geCB+ZGVwdGg6XyBfdGVudiA9IHhcblxuICAgIGxldCBiaW5kIHQgZiB+ZGVwdGggdGVudiA9XG4gICAgICBsZXQgeCA9IHQgfmRlcHRoIHRlbnYgaW5cbiAgICAgIChmIHgpIH5kZXB0aCB0ZW52XG4gICAgOztcblxuICAgIGxldCBsb29rX2VudiBrZXkgfmRlcHRoOl8gdGVudiA9XG4gICAgICBsZXQgcmVzdWx0ID0gVGVudi5maW5kIHRlbnYga2V5IGluXG4gICAgICBPcHRpb24ubWFwIH5mOihmdW4gKGBSZWN1cnNpb25fbGV2ZWwgeCkgLT4gQXBwbGljYW5kLlJlY3Vyc2lvbl9sZXZlbCB4KSByZXN1bHRcbiAgICA7O1xuXG4gICAgbGV0IGV4dGVuZF9uZXdfdGlkIGtleSBkZWZfdCB+ZGVwdGggdGVudiA9XG4gICAgICBBcHBsaWNhbmQuRGVmaW5pdGlvblxuICAgICAgICAobGV0IHZhbHVlID0gYFJlY3Vyc2lvbl9sZXZlbCBkZXB0aCBpblxuICAgICAgICAgbGV0IHRlbnYgPSBUZW52LmV4dGVuZCB0ZW52IGtleSB2YWx1ZSBpblxuICAgICAgICAgZGVmX3QgfmRlcHRoOihkZXB0aCArIDEpIHRlbnYpXG4gICAgOztcblxuICAgIGxldCBleGVjIHQgPSB0IH5kZXB0aDowIFRlbnYuZW1wdHlcbiAgZW5kXG5cbiAgdHlwZSAnYSBkZWZpbmluZyA9ICdhIERlZmluaW5nLnRcblxuICBsZXQgKCA+Pj0gKSA9IERlZmluaW5nLmJpbmRcbiAgbGV0IHJldHVybiA9IERlZmluaW5nLnJldHVyblxuXG4gIGxldCBzZXF1ZW5jZV9kZWZpbmluZyA6ICdhIGxpc3QgLT4gZjooJ2EgLT4gJ2IgZGVmaW5pbmcpIC0+ICdiIGxpc3QgZGVmaW5pbmcgPVxuICAgIGZ1biB4cyB+ZiAtPlxuICAgIGxldCByZWMgbG9vcCBhY2NfeXMgPSBmdW5jdGlvblxuICAgICAgfCBbXSAtPiByZXR1cm4gKExpc3QucmV2IGFjY195cylcbiAgICAgIHwgeCA6OiB4cyAtPiBmIHggPj49IGZ1biB5IC0+IGxvb3AgKHkgOjogYWNjX3lzKSB4c1xuICAgIGluXG4gICAgbG9vcCBbXSB4c1xuICA7O1xuXG4gICgqXG4gICAgIFNoYXBlIGV2YWx1YXRpb24uXG5cbiAgICAgU2hhcGVzIGFyZSBldmFsdWF0ZWQgdG8gY2Fub25pY2FsLXNoYXBlIChleHByZXNzaW9ucyksIHdpdGggYWRkaXRpb25hbCBkZWZzIGNvbGxlY3RlZFxuICAgICBpbiB0aGUgW2RlZmluaW5nXSBtb25hZCwgd2hpY2ggYWxzbyBtYW5hZ2VzIGdlbmVyYXRpb24vbWFwcGluZyB0byBbQ2Fub25pY2FsLlRpZC50XVxuXG4gICAgIFRoZXJlIGlzIGRvd253YXJkcyBjb250ZXh0IG9mIFtncm91cF0gYW5kIFtWZW52LnRdXG4gICAgIFRoZSAoY3VycmVudCkgW2dyb3VwXSBjaGFuZ2VzIHdoZW4gdGhlIGNhc2UgZm9yIFtUb3BfYXBwXSBjYWxscyBbZXZhbF9hcHBdLlxuXG4gICAgIFRoZSBjdXJyZW50IFtWZW52LnRdIGlzIGFiYW5kb25lZCB3aGVuIFtldmFsX2FwcF0gaXMgY2FsbGVkLCBhbmQgdGhlbiByZS1jcmVhdGVkIGFmdGVyXG4gICAgIHRoZSBkZWNpc2lvbiBoYXMgYmVlbiBtYWRlIHRvIGVpdGhlciBpbmxpbmUgdGhlIHR5cGUtYXBwbGljYXRpb24sIG9yIG1ha2UgYSByZWZlcmVuY2VcbiAgICAgdG8gYSB0eXBlLWRlZmluaXRpb24sIHdoaWNoIGlzIGNyZWF0ZWQgYXQgbW9zdCBvbmNlIGZvciBlYWNoIChHaWQudCAqIFRpZC50KS5cblxuICAgICBXZSBtYWtlIGEgdHlwZS1kZWZpbml0aW9uIGFsd2F5cyBmb3IgUmVjb3JkcyBhbmQgVmFyaWFudHMsIGFuZCBpbiBhZGRpdGlvbiBmb3IgYW55XG4gICAgIG90aGVyIGN5Y2xpYyB0eXBlLWRlZmluaXRpb24uXG4gICopXG5cbiAgbGV0IHJlYyBldmFsIDogZ3JvdXAgLT4gVmVudi50IC0+IHQgLT4gVmlzaWJpbGl0eS52aXNpYmxlIENhbm9uaWNhbC5FeHAxLnQgZGVmaW5pbmcgPVxuICAgIGZ1biBncm91cCB2ZW52IHQgLT5cbiAgICBtYXRjaCB0IHdpdGhcbiAgICB8IFJlY29yZCBiaW5kcyAtPlxuICAgICAgc2VxdWVuY2VfZGVmaW5pbmcgYmluZHMgfmY6KGZ1biAocywgeCkgLT5cbiAgICAgICAgZXZhbCBncm91cCB2ZW52IHggPj49IGZ1biB5IC0+IHJldHVybiAocywgeSkpXG4gICAgICA+Pj0gZnVuIGJpbmRzIC0+IHJldHVybiAoQ2Fub25pY2FsLkNyZWF0ZS5yZWNvcmQgYmluZHMpXG4gICAgfCBWYXJpYW50IGFsdHMgLT5cbiAgICAgIHNlcXVlbmNlX2RlZmluaW5nIGFsdHMgfmY6KGZ1biAocywgeHMpIC0+XG4gICAgICAgIGV2YWxfbGlzdCBncm91cCB2ZW52IHhzID4+PSBmdW4geXMgLT4gcmV0dXJuIChzLCB5cykpXG4gICAgICA+Pj0gZnVuIGFsdHMgLT4gcmV0dXJuIChDYW5vbmljYWwuQ3JlYXRlLnZhcmlhbnQgYWx0cylcbiAgICB8IFZhciAobG9jLCB2aWQpIC0+XG4gICAgICAobWF0Y2ggVmVudi5sb29rdXAgdmVudiB2aWQgd2l0aFxuICAgICAgIHwgU29tZSB4IC0+IHJldHVybiB4XG4gICAgICAgfCBOb25lIC0+IGV2YWxfZmFpbCBsb2MgIVwiRnJlZSB0eXBlIHZhcmlhYmxlOiAnJXtWaWR9XCIgdmlkICgpKVxuICAgIHwgQW5ub3RhdGUgKHMsIHQpIC0+XG4gICAgICBldmFsIGdyb3VwIHZlbnYgdCA+Pj0gZnVuIHYgLT4gcmV0dXJuIChDYW5vbmljYWwuQ3JlYXRlLmFubm90YXRlIHMgdilcbiAgICB8IEJhc2UgKHMsIHRzKSAtPlxuICAgICAgZXZhbF9saXN0IGdyb3VwIHZlbnYgdHMgPj49IGZ1biB2cyAtPiByZXR1cm4gKENhbm9uaWNhbC5DcmVhdGUuYmFzZXR5cGUgcyB2cylcbiAgICB8IFR1cGxlIHRzIC0+IGV2YWxfbGlzdCBncm91cCB2ZW52IHRzID4+PSBmdW4gdnMgLT4gcmV0dXJuIChDYW5vbmljYWwuQ3JlYXRlLnR1cGxlIHZzKVxuICAgIHwgVG9wX2FwcCAoaW5fZ3JvdXAsIHRpZCwgYXJncykgLT5cbiAgICAgIGV2YWxfbGlzdCBncm91cCB2ZW52IGFyZ3NcbiAgICAgID4+PSBmdW4gYXJncyAtPlxuICAgICAgKCogYXJncyBldmFsdWF0ZWQgaW4gY3VycmVudCBncm91cCAqKVxuICAgICAgZXZhbF9hcHAgaW5fZ3JvdXAgdGlkIGFyZ3NcbiAgICAoKiBncm91cCBjaGFuZ2VkIGhlcmUgKilcbiAgICB8IFJlY19hcHAgKHRpZCwgYXJncykgLT5cbiAgICAgIGV2YWxfbGlzdCBncm91cCB2ZW52IGFyZ3MgPj49IGZ1biBhcmdzIC0+IGV2YWxfYXBwIGdyb3VwIHRpZCBhcmdzXG4gICAgfCBQb2x5X3ZhcmlhbnQgKGxvYywgY3MpIC0+XG4gICAgICBzZXF1ZW5jZV9kZWZpbmluZyB+ZjooZXZhbF9wb2x5X2NvbnN0ciBncm91cCB2ZW52KSBjc1xuICAgICAgPj49IGZ1biB4c3MgLT4gcmV0dXJuIChDYW5vbmljYWwuQ3JlYXRlLnBvbHlfdmFyaWFudCBsb2MgKExpc3QuY29uY2F0IHhzcykpXG5cbiAgYW5kIGV2YWxfbGlzdCA6IGdyb3VwIC0+IFZlbnYudCAtPiB0IGxpc3QgLT4gXyBDYW5vbmljYWwuRXhwMS50IGxpc3QgZGVmaW5pbmcgPVxuICAgIGZ1biBncm91cCB2ZW52IHRzIC0+IHNlcXVlbmNlX2RlZmluaW5nIHRzIH5mOihldmFsIGdyb3VwIHZlbnYpXG5cbiAgYW5kIGV2YWxfcG9seV9jb25zdHJcbiAgICA6ICBncm91cCAtPiBWZW52LnQgLT4gdCBwb2x5X2NvbnN0clxuICAgIC0+IChzdHJpbmcgKiBWaXNpYmlsaXR5Lm9wYXF1ZSBDYW5vbmljYWwuRXhwMS50IG9wdGlvbikgbGlzdCBkZWZpbmluZ1xuICAgID1cbiAgICBmdW4gZ3JvdXAgdmVudiBjIC0+XG4gICAgbWF0Y2ggYyB3aXRoXG4gICAgfCBgQ29uc3RyIChzLCBOb25lKSAtPiByZXR1cm4gWyBzLCBOb25lIF1cbiAgICB8IGBDb25zdHIgKHMsIFNvbWUgdCkgLT5cbiAgICAgIGV2YWwgZ3JvdXAgdmVudiB0ID4+PSBmdW4gdiAtPiByZXR1cm4gWyBzLCBTb21lIChDYW5vbmljYWwuRXhwMS5vcGFxdWUgdikgXVxuICAgIHwgYEluaGVyaXQgKGxvYywgdCkgLT5cbiAgICAgIGV2YWwgZ3JvdXAgdmVudiB0XG4gICAgICA+Pj0gZnVuIHYgLT5cbiAgICAgIChtYXRjaCBDYW5vbmljYWwuRXhwMS5nZXRfcG9seV92YXJpYW50IHYgd2l0aFxuICAgICAgIHwgT2sgdGFiIC0+IHJldHVybiAoU29ydGVkX3RhYmxlLmV4cG9zZSB0YWIpXG4gICAgICAgfCBFcnJvciBkZXNjIC0+XG4gICAgICAgICBldmFsX2ZhaWxcbiAgICAgICAgICAgbG9jXG4gICAgICAgICAgIFwiVGhlIHNoYXBlIGZvciBhbiBpbmhlcml0ZWQgdHlwZSBpcyBub3QgZGVzY3JpYmVkIGFzIGEgcG9seW1vcnBoaWMtdmFyaWFudDogJXNcIlxuICAgICAgICAgICBkZXNjXG4gICAgICAgICAgICgpKVxuXG4gIGFuZCBldmFsX2RlZmluaXRpb24gOiBncm91cCAtPiBWaWQudCBsaXN0IC0+IHQgLT4gQ2Fub25pY2FsLkRlZi50IGRlZmluaW5nID1cbiAgICBmdW4gZ3JvdXAgZm9ybWFscyBib2R5IC0+XG4gICAgbGV0IHZlbnYgPSBWZW52LmNyZWF0ZSAoTGlzdC5tYXBpIGZvcm1hbHMgfmY6KGZ1biBpIHggLT4geCwgQ2Fub25pY2FsLkV4cDEudmFyIGkpKSBpblxuICAgIGV2YWwgZ3JvdXAgdmVudiBib2R5ID4+PSBmdW4gdiAtPiByZXR1cm4gKENhbm9uaWNhbC5DcmVhdGUuZGVmaW5lIHYpXG5cbiAgYW5kIGV2YWxfYXBwIDogZ3JvdXAgLT4gVGlkLnQgLT4gXyBDYW5vbmljYWwuRXhwMS50IGxpc3QgLT4gXyBDYW5vbmljYWwuRXhwMS50IGRlZmluaW5nID1cbiAgICBmdW4gZ3JvdXAgdGlkIGFyZ3MgLT5cbiAgICBsZXQgZ2lkID0gR3JvdXAuaWQgZ3JvdXAgaW5cbiAgICBsZXQgZm9ybWFscywgYm9keSA9IEdyb3VwLmxvb2t1cCBncm91cCB0aWQgaW5cbiAgICBsZXQgcmVjb3JkX29yX25vcm1hbF92YXJpYW50ID1cbiAgICAgIG1hdGNoIGJvZHkgd2l0aFxuICAgICAgfCBSZWNvcmQgXyB8IFZhcmlhbnQgXyAtPiB0cnVlXG4gICAgICB8IFR1cGxlIF8gfCBBbm5vdGF0ZSBfIHwgQmFzZSBfIHwgUG9seV92YXJpYW50IF8gfCBWYXIgXyB8IFJlY19hcHAgXyB8IFRvcF9hcHAgXyAtPlxuICAgICAgICBmYWxzZVxuICAgIGluXG4gICAgbGV0IGN5Y2xpYyA9IGlzX2N5Y2xpYyBncm91cCB0aWQgaW5cbiAgICBsZXQgY3ljbGljX25vX1ZSID0gaXNfY3ljbGljX3dpdGhfbm9faW50ZXJ2ZW5pbmdfVlIgZ3JvdXAgdGlkIGluXG4gICAgaWYgKHJlY29yZF9vcl9ub3JtYWxfdmFyaWFudCAmJiBjeWNsaWMpIHx8IGN5Y2xpY19ub19WUlxuICAgIHRoZW5cbiAgICAgIERlZmluaW5nLmxvb2tfZW52IChnaWQsIHRpZClcbiAgICAgID4+PSAoZnVuY3Rpb25cbiAgICAgICAgICAgIHwgU29tZSByZWN1cnNlIC0+IHJldHVybiByZWN1cnNlXG4gICAgICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICAgICAgRGVmaW5pbmcuZXh0ZW5kX25ld190aWQgKGdpZCwgdGlkKSAoZXZhbF9kZWZpbml0aW9uIGdyb3VwIGZvcm1hbHMgYm9keSkpXG4gICAgICA+Pj0gZnVuY3Rpb25cbiAgICAgIHwgUmVjdXJzaW9uX2xldmVsIHIgLT4gcmV0dXJuIChDYW5vbmljYWwuRXhwMS5yZWN1cnNlIHIgYXJncylcbiAgICAgIHwgRGVmaW5pdGlvbiBkZWYgLT4gcmV0dXJuIChDYW5vbmljYWwuRXhwMS5hcHBseSBkZWYgYXJncylcbiAgICBlbHNlIChcbiAgICAgIGxldCB2ZW52ID1cbiAgICAgICAgbWF0Y2ggTGlzdC56aXAgZm9ybWFscyBhcmdzIHdpdGhcbiAgICAgICAgfCBPayB4IC0+IFZlbnYuY3JlYXRlIHhcbiAgICAgICAgfCBVbmVxdWFsX2xlbmd0aHMgLT4gZmFpbHdpdGggXCJhcHBseSwgaW5jb3JyZWN0IHR5cGUgYXBwbGljYXRpb24gYXJpdHlcIlxuICAgICAgaW5cbiAgICAgIGV2YWwgZ3JvdXAgdmVudiBib2R5KVxuICA7O1xuXG4gICgqIHRvcCBsZXZlbCBlbnRyeSBwb2ludCBmb3IgZXZhbHVhdGlvbiAqKVxuICBsZXQgZXZhbCA6IHQgLT4gQ2Fub25pY2FsLnQgPVxuICAgIGZ1biB0IC0+XG4gICAgbGV0IGdyb3VwID0gZ3JvdXAgKExvY2F0aW9uLm9mX3N0cmluZyBcInRvcC1sZXZlbFwiKSBbXSBpblxuICAgIGxldCB2ZW52ID0gVmVudi5jcmVhdGUgW10gaW5cbiAgICBsZXQgdiA9IERlZmluaW5nLmV4ZWMgKGV2YWwgZ3JvdXAgdmVudiB0KSBpblxuICAgIENhbm9uaWNhbC5DcmVhdGUuY3JlYXRlIHZcbiAgOztcbmVuZFxuXG5tb2R1bGUgQ2Fub25pY2FsID0gc3RydWN0XG4gIGluY2x1ZGUgQ2Fub25pY2FsX2Z1bGxcblxuICBtb2R1bGUgRXhwID0gc3RydWN0XG4gICAgdHlwZSB0ID0gVmlzaWJpbGl0eS52aXNpYmxlIEV4cDEudFxuICBlbmRcbmVuZFxuXG5pbmNsdWRlIEV2YWx1YXRpb24gKENhbm9uaWNhbF9mdWxsKVxubW9kdWxlIENhbm9uaWNhbF9zZWxlY3RlZCA9IENhbm9uaWNhbF9kaWdlc3Rcbm1vZHVsZSBFdmFsdWF0aW9uX3RvX2RpZ2VzdCA9IEV2YWx1YXRpb24gKENhbm9uaWNhbF9zZWxlY3RlZClcblxubGV0IGV2YWxfdG9fZGlnZXN0IGV4cCA9IENhbm9uaWNhbF9zZWxlY3RlZC50b19kaWdlc3QgKEV2YWx1YXRpb25fdG9fZGlnZXN0LmV2YWwgZXhwKVxubGV0IGV2YWxfdG9fZGlnZXN0X3N0cmluZyBleHAgPSBEaWdlc3QudG9faGV4IChldmFsX3RvX2RpZ2VzdCBleHApXG5cbm1vZHVsZSBGb3JfdHlwZXJlcCA9IHN0cnVjdFxuICBleGNlcHRpb24gTm90X2FfdHVwbGUgb2YgdCBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gIGxldCBkZWNvbnN0cnVjdF90dXBsZV9leG4gdCA9XG4gICAgbWF0Y2ggdCB3aXRoXG4gICAgfCBUdXBsZSB0cyAtPiB0c1xuICAgIHwgXyAtPiByYWlzZSAoTm90X2FfdHVwbGUgdClcbiAgOztcbmVuZFxuXG5tb2R1bGUgRXhwZXJ0ID0gc3RydWN0XG4gIG1vZHVsZSBTb3J0ZWRfdGFibGUgPSBTb3J0ZWRfdGFibGVcbiAgbW9kdWxlIENhbm9uaWNhbF9leHBfY29uc3RydWN0b3IgPSBDYW5vbmljYWxfZXhwX2NvbnN0cnVjdG9yXG4gIG1vZHVsZSBDYW5vbmljYWwgPSBDYW5vbmljYWxcbmVuZFxuIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3RfQW5ub3RhdGUiLCJjc3RfQmFzZSIsImNzdF9Db25zdHIiLCJjc3RfSW5oZXJpdCIsImNzdF9Qb2x5X3ZhcmlhbnQiLCJjc3RfUmVjX2FwcCIsImNzdF9SZWNvcmQiLCJjc3RfVG9wX2FwcCIsImNzdF9UdXBsZSIsImNzdF9WYXIiLCJjc3RfVmFyaWFudCIsImNzdF9hbm5vdGF0ZSIsImNzdF9iYXNlIiwiY3N0X2dpZCIsImNzdF9sb2MiLCJjc3RfbWVtYmVycyIsImNzdF9wb2x5X3ZhcmlhbnQiLCJjc3RfcmVjX2FwcCIsImNzdF9yZWNvcmQiLCJjc3Rfc2hhcGVfc3JjX2Jpbl9zaGFwZV9tbF9FeHAiLCJjc3RfdG9wX2FwcCIsImNzdF90dXBsZSIsImNzdF92YXIiLCJjc3RfdmFyaWFudCIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImNhbWxfc3RyaW5nX2NvbXBhcmUiLCJjYW1sX3dyYXBfZXhjZXB0aW9uIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImNhbWxfY2FsbDQiLCJhMyIsImR1bW15IiwiZ2xvYmFsX2RhdGEiLCJlcnJvcl9zb3VyY2VfMjYzIiwiZXJyb3Jfc291cmNlXzI3NSIsImVycm9yX3NvdXJjZV8zMTciLCJlcnJvcl9zb3VyY2VfNDE0IiwiQXNzZXJ0X2ZhaWx1cmUiLCJCYXNlX0xpc3QiLCJCYXNlIiwiQmFzZV9PcHRpb24iLCJCYXNlX01hcCIsIkJhc2VfQ29tcGFyYXRvciIsIlNleHBsaWIwX1NleHBfY29udl9lcnJvciIsIlNleHBsaWIwX1NleHBfY29udl9yZWNvcmQiLCJCYXNlX1N0cmluZyIsIkJhc2VfSW50IiwiQmFzZV9QcmludGYiLCJNZDVfbGliIiwiU2V4cGxpYjBfU2V4cF9jb252IiwidF9vZl9zZXhwIiwic2V4cF9vZl90Iiwib2Zfc3RyaW5nIiwidG9fc3RyaW5nIiwiZXF1YWwiLCJjb21wYXJlIiwiY3N0X0xvY2F0aW9uX3MiLCJldmFsX2ZhaWwiLCJsb2MiLCJmbXQiLCJzIiwicGFyYW0iLCJjdXN0b21fcHJpbnRmXzAwMSIsImNtcF9hIiwiYV8wMDIiLCJiXzAwMyIsImFfMDA0IiwiYl8wMDUiLCJ0XzAwNyIsInRfMDA2IiwidF8wMDkiLCJ0XzAwOCIsIm4iLCJvZl9hXzAxOSIsInNvcnRlZF8wMjEiLCJhcmdfMDIyIiwiYXJnMV8wMjQiLCJhcmcwXzAyMyIsInJlczBfMDI1IiwicmVzMV8wMjYiLCJibmRzXzAyMCIsImNyZWF0ZSIsImVxIiwieHMiLCJzb3J0ZWQiLCJzMiIsInMxIiwibWF0Y2giLCJsYXN0X3ZhbHVlIiwibGFzdF9rZXkiLCJhY2MiLCJ2YXJpYW50IiwiZXhwb3NlIiwidCIsIm1hcCIsInYiLCJrIiwidG9fYmluYXJ5IiwidG9faGV4Iiwib2ZfaGV4X2V4biIsInN0cmluZyIsImNzdF9zb21lIiwiY3N0X25vbmUiLCJjc3RfYXBwbGljYXRpb24iLCJ0b19tZDUiLCJvZl9tZDUiLCJ1dWlkIiwidSIsImludCIsIngiLCJwYWlyIiwieSIsImxpc3QiLCJsIiwiY29uc3RydWN0b3IiLCJvZl9hXzA5NiIsImFyZzFfMDk4IiwiYXJnMF8wOTciLCJyZXMwXzA5OSIsInJlczFfMTAwIiwiYXJnMV8xMDIiLCJhcmcwXzEwMSIsInJlczBfMTAzIiwicmVzMV8xMDQiLCJhcmcwXzEwNSIsInJlczBfMTA2IiwiYXJnMF8xMTEiLCJyZXMwXzExMiIsImFyZzFfMTA4IiwiYXJnMF8xMDciLCJyZXMwXzEwOSIsInJlczFfMTEwIiwiYXJnMF8xMTciLCJyZXMwXzExOCIsImFyZzFfMTE0IiwiYXJnMF8xMTMiLCJyZXMwXzExNSIsInJlczFfMTE2IiwiYXJnMF8xMTkiLCJyZXMwXzEyMCIsImFyZzFfMTIyIiwiYXJnMF8xMjEiLCJyZXMwXzEyMyIsInJlczFfMTI0IiwiYXJnMV8xMjYiLCJhcmcwXzEyNSIsInJlczBfMTI3IiwicmVzMV8xMjgiLCJhcmcwXzEyOSIsInJlczBfMTMwIiwiYV8xMzIiLCJiXzEzMyIsImFfMTM0IiwiYl8xMzciLCJiXzEzNSIsImFfMTM2IiwiYV8xNDAiLCJhXzEzOCIsImJfMTQxIiwiYl8xMzkiLCJhXzE0MiIsImJfMTQzIiwiYV8xNDQiLCJiXzE0NSIsImFfMTQ2IiwiYl8xNDciLCJhXzE0OCIsImJfMTQ5IiwiYV8xNTAiLCJiXzE1MSIsInRfMTUzIiwidF8xNTIiLCJ0XzE1NSIsInRfMTU0IiwiYV8xNTYiLCJiXzE1NyIsImFfMTU4IiwiYl8xNTkiLCJ0XzE2MSIsInRfMTYwIiwidF8xNjMiLCJ0XzE2MiIsImFfMTY0IiwiYl8xNjUiLCJhXzE2NiIsImJfMTY3IiwiYV8xNjgiLCJiXzE2OSIsImFfMTcwIiwiYl8xNzEiLCJhXzE3NCIsImFfMTcyIiwiYl8xNzUiLCJiXzE3MyIsImFfMTc2IiwiYl8xNzciLCJhXzE4MCIsImFfMTc4IiwiYl8xODEiLCJiXzE3OSIsImFfMTgyIiwiYl8xODMiLCJhXzE4NCIsImJfMTg1IiwiZGlnZXN0X2xheWVyIiwidGFibGUiLCJ0b19kaWdlc3QiLCJvcGFxdWUiLCJkZXNjIiwidmFyJCIsImFwcGx5IiwiZGVmIiwicmVjdXJzZSIsInRpZCIsImdldF9wb2x5X3ZhcmlhbnQiLCJEZWYiLCJhbm5vdGF0ZSIsImJhc2V0eXBlIiwidHVwbGUiLCJwb2x5X3ZhcmlhbnQiLCJhIiwiYiIsImRlZmluZSIsInJlY29yZCIsImUiLCJDcmVhdGUiLCJDYW5vbmljYWxfZGlnZXN0IiwiY29tcGFyZV90MCIsImFfMTg2IiwiYl8xODciLCJiXzE4OSIsImFfMTg4IiwiYV8xOTAiLCJiXzE5MSIsInNleHBfb2ZfdDAiLCJhcmcwXzIwMSIsInJlczBfMjAyIiwiZCIsInIiLCJjYyIsInRhYiIsImV4cCIsInRvX3N0cmluZ19odW0iLCJzeW1ib2wiLCJjb21wYXJhdG9yIiwiY3N0X2ltcG9zc2libGVfbG9va3VwX2dyb3VwX3VuIiwidHJpcHMiLCJnaWQiLCJtZW1iZXJzIiwidnMiLCJsb29rdXAiLCJnIiwiY3VzdG9tX3ByaW50Zl8zNDUiLCJzY2hlbWUiLCJhXzM0NiIsImJfMzQ3IiwiYV8zNDgiLCJiXzM1MSIsImJfMzQ5IiwiYV8zNTAiLCJhXzM5MCIsImJfMzkxIiwidF8zOTMiLCJ0XzM5MiIsInRfMzk1IiwidF8zOTQiLCJhXzQwNiIsImFfNDA0IiwiYV80MDIiLCJiXzQwNyIsImJfNDA1IiwiYl80MDMiLCJhXzMwMyIsImJfMzA0IiwidF8zMDYiLCJ0XzMwNSIsInRfMzA4IiwidF8zMDciLCJ0XzMxMCIsInRfMzA5IiwidF8zMTIiLCJ0XzMxMSIsImFfMzEzIiwiYl8zMTQiLCJhXzQxMCIsImJfNDExIiwiYV8zOTgiLCJhXzM5NiIsImJfMzk5IiwiYl8zOTciLCJhXzQwMCIsImJfNDAxIiwiYV8zODAiLCJiXzM4MSIsInRfMzgzIiwidF8zODIiLCJ0XzM4NSIsInRfMzg0IiwiYV8zODYiLCJiXzM4NyIsImNtcF90IiwiYV8zODgiLCJiXzM4OSIsInJpZ2h0XzIzOCIsImxlZnRfMjM3IiwidF8yNDAiLCJ0XzIzOSIsInRfMjQyIiwidF8yNDEiLCJiXzI0NCIsImFfMjQzIiwicmlnaHRfMjQ2IiwibGVmdF8yNDUiLCJ0XzI0OCIsInRfMjQ3IiwidF8yNTAiLCJ0XzI0OSIsImFfMzc2IiwiYl8zNzciLCJhXzM3OCIsImJfMzc5IiwiYV8zNjYiLCJiXzM2NyIsImFfMzY4IiwiYl8zNjkiLCJ0XzM3MSIsInRfMzcwIiwidF8zNzMiLCJ0XzM3MiIsImFfMzc0IiwiYl8zNzUiLCJhXzM1OCIsImJfMzU5IiwiYV8zNjAiLCJiXzM2MSIsInRfMzYzIiwidF8zNjIiLCJ0XzM2NSIsInRfMzY0IiwiYV8zNTQiLCJhXzM1MiIsImJfMzU1IiwiYl8zNTMiLCJhXzM1NiIsImJfMzU3IiwibGV0cmVjX2Z1bmN0aW9uX2NvbnRleHQiLCJzZXhwXzQxNiIsInRhZ180MTciLCJzZXhwX2FyZ3NfNDE4IiwiYXJnMV80MjAiLCJhcmcwXzQxOSIsInJlczBfNDIxIiwicmVzMV80MjIiLCJzZXhwX2FyZ3NfNDI1IiwiYXJnMV80MjciLCJhcmcwXzQyNiIsInJlczBfNDI4IiwicmVzMV80MjkiLCJzZXhwX2FyZ3NfNDU3IiwiYXJnMF80NjMiLCJhcmcxXzQ1OSIsImFyZzBfNDU4IiwicmVzMF80NjAiLCJyZXMxXzQ2MSIsInNleHBfMjU1IiwiYXRvbV8yNTMiLCJzZXhwX2FyZ3NfMjU2IiwiYXJnMF8yNjQiLCJhcmcxXzI1OSIsImFyZzBfMjU4IiwicmVzMF8yNjAiLCJyZXMxXzI2MSIsInJlczBfMjY1IiwiYXJnMF8yNzIiLCJhcmcxXzI2OCIsImFyZzBfMjY3IiwicmVzMF8yNjkiLCJyZXMxXzI3MCIsInJlczBfMjczIiwiZXhuIiwicmVzMF80NjQiLCJzZXhwX2FyZ3NfNDc3IiwiYXJnMV80NzkiLCJhcmcwXzQ3OCIsInJlczBfNDgwIiwicmVzMV80ODEiLCJzZXhwX2FyZ3NfNDMyIiwiYXJnMF80MzgiLCJyZXMwXzQzOSIsInNleHBfNDM3IiwiYXJnMV80MzQiLCJhcmcwXzQzMyIsInJlczBfNDM1IiwicmVzMV80MzYiLCJzZXhwX2FyZ3NfNDg0IiwiYXJnMl80ODciLCJhcmcxXzQ4NiIsImFyZzBfNDg1Iiwic2V4cF8zMjciLCJhcmcxXzMyNCIsImFyZzBfMzIzIiwicmVzMF8zMjUiLCJhcmcxXzMxOSIsImFyZzBfMzE4IiwicmVzMF8zMjAiLCJyZXMxXzMyMSIsInJlczFfMzI2IiwicmVzMF80ODgiLCJyZXMxXzQ4OSIsInJlczJfNDkwIiwic2V4cF9hcmdzXzQ1MiIsImFyZzBfNDUzIiwicmVzMF80NTQiLCJzZXhwX2FyZ3NfNDY3IiwiYXJnMF80NzMiLCJhcmcxXzQ2OSIsImFyZzBfNDY4IiwicmVzMF80NzAiLCJyZXMxXzQ3MSIsInJlczBfNDc0Iiwic2V4cF9hcmdzXzQ0MiIsImFyZzBfNDQ4IiwicmVzMF80NDkiLCJzZXhwXzQ0NyIsImFyZzFfNDQ0IiwiYXJnMF80NDMiLCJyZXMwXzQ0NSIsInJlczFfNDQ2IiwiYXJnMV80OTIiLCJhcmcwXzQ5MSIsInJlczBfNDkzIiwicmVzMV80OTQiLCJhcmcxXzQ5NiIsImFyZzBfNDk1IiwicmVzMF80OTciLCJyZXMxXzQ5OCIsImFyZzBfNTAzIiwicmVzMF81MDQiLCJhcmcxXzUwMCIsImFyZzBfNDk5IiwicmVzMF81MDEiLCJyZXMxXzUwMiIsImFyZzBfNTA5IiwicmVzMF81MTAiLCJhcmcxXzUwNiIsImFyZzBfNTA1IiwicmVzMF81MDciLCJyZXMxXzUwOCIsImFyZzBfNTExIiwicmVzMF81MTIiLCJhcmcwXzUxNyIsImFyZzFfNTE0IiwiYXJnMF81MTMiLCJyZXMwXzUxNSIsInJlczFfNTE2Iiwidl8yNzciLCJhcmcxXzI3OSIsImFyZzBfMjc4IiwicmVzMF8yODAiLCJyZXMxXzI4MSIsInZfMjgyIiwiYXJnMV8yODQiLCJhcmcwXzI4MyIsInJlczBfMjg1IiwicmVzMV8yODYiLCJyZXMwXzUxOCIsImFyZzBfNTIzIiwiYXJnMV81MjAiLCJhcmcwXzUxOSIsInJlczBfNTIxIiwicmVzMV81MjIiLCJyZXMwXzUyNCIsImFyZzFfNTI2IiwiYXJnMF81MjUiLCJyZXMwXzUyNyIsInJlczFfNTI4IiwiYXJnMl81MzEiLCJhcmcxXzUzMCIsImFyZzBfNTI5IiwibWVtYmVyc18zMzUiLCJsb2NfMzMzIiwiZ2lkXzMzMSIsImFyZ18zMzYiLCJhcmcxXzM0MiIsImFyZzBfMzQxIiwicmVzMF8zNDMiLCJhcmcxXzMzOCIsImFyZzBfMzM3IiwicmVzMF8zMzkiLCJyZXMxXzM0MCIsInJlczFfMzQ0IiwiYm5kc18zMzAiLCJhcmdfMzM0IiwiYXJnXzMzMiIsInJlczBfNTMyIiwicmVzMV81MzMiLCJyZXMyXzUzNCIsInYwIiwidjEiLCJyZWNfYXBwIiwidG9wX2FwcCIsInYyIiwiY29uc3RyIiwiaW5oZXJpdCIsImlzX2N5Y2xpY18wIiwidmlhX1ZSIiwiZ3JvdXAiLCJzZXQiLCJ2aXNpdGVkIiwidHJhdiIsInRzIiwiY3MiLCJ0cmF2X3RpZCIsImJvZHkiLCJyZXMiLCJpc19jeWNsaWMiLCJpc19jeWNsaWNfd2l0aF9ub19pbnRlcnZlbmluZ18iLCJjc3RfRnJlZV90eXBlX3ZhcmlhYmxlX1ZpZCIsImNzdF9GcmVlX3R5cGVfdmFyaWFibGUiLCJjc3RfYXBwbHlfaW5jb3JyZWN0X3R5cGVfYXBwbGkiLCJjc3RfdG9wX2xldmVsIiwiRXZhbHVhdGlvbiIsIkNhbm9uaWNhbCIsImFyZyIsImFfNTM1IiwiYl81MzYiLCJ0XzUzOCIsInRfNTM3IiwidF81NDAiLCJ0XzUzOSIsImFyZzFfNTQyIiwiYXJnMF81NDEiLCJyZXMwXzU0MyIsInJlczFfNTQ0IiwiVCIsImluY2x1ZGUiLCJmaW5kIiwiZW1wdHkiLCJleHRlbmQiLCJsb29rX2VudiIsImtleSIsInRlbnYiLCJyZXN1bHQiLCJleHRlbmRfbmV3X3RpZCIsImRlZl90IiwiZGVwdGgiLCJ2YWx1ZSIsImV4ZWMiLCJzZXF1ZW5jZV9kZWZpbmluZyIsImxvb3AiLCJhY2NfeXMiLCJ2ZW52IiwiYmluZHMiLCJhbHRzIiwieXMiLCJ4c3MiLCJ2aWQiLCJjdXN0b21fcHJpbnRmXzU0NSIsImFyZ3MiLCJpbl9ncm91cCIsImV2YWxfbGlzdCIsImV2YWxfcG9seV9jb25zdHIiLCJjIiwiZXZhbF9kZWZpbml0aW9uIiwiZm9ybWFscyIsImkiLCJldmFsX2FwcCIsInJlY29yZF9vcl9ub3JtYWxfdmFyaWFudCIsImN5Y2xpYyIsImN5Y2xpY19ub19WUiIsImV2YWwkIiwiRXhwIiwiRXZhbHVhdGlvbl90b19kaWdlc3QiLCJldmFsX3RvX2RpZ2VzdCIsImV2YWxfdG9fZGlnZXN0X3N0cmluZyIsIk5vdF9hX3R1cGxlIiwidGFnIiwiYXJnMF81NDYiLCJyZXMwXzU0NyIsImRlY29uc3RydWN0X3R1cGxlX2V4biIsIkJpbl9zaGFwZSJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxlQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBQztBQUFBQSxNQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFB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
