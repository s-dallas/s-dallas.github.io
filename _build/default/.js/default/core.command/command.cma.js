// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Command__
//# shape: Command__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Command = [0],
    Command$0 = [0, Command];
   runtime.caml_register_global(0, Command$0, "Command__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Import
//# unitInfo: Requires: Base__Printf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio
//# shape: Command__Import:[F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Import = "Command__Import",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio,
    Base_Printf = global_data.Base__Printf;
   Ppx_module_timer_runtime[4].call(null, cst_Command_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   Ppx_expect_runtime[1][1].call(null, "command/src/import.ml");
   Ppx_inline_test_lib[6].call(null, cst_command, "import.ml");
   var
    eprintf = Stdio[7],
    printf = Stdio[4],
    print_s = Stdio[5],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10],
    sprintf = Base_Printf[2],
    failwithf = Base_Printf[6],
    ksprintf = Base_Printf[4];
   Ppx_inline_test_lib[7].call(null, cst_command);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Command_Import);
   var
    Command_Import =
      [0,
       eprintf,
       printf,
       print_s,
       print_string,
       print_endline,
       prerr_endline,
       sprintf,
       failwithf,
       ksprintf];
   runtime.caml_register_global(13, Command_Import, cst_Command_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Env_var
//# unitInfo: Requires: Base, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Command__Env_var:[F(2)*,N,F(1)*,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Env_var = "Command__Env_var",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Command_Env_var);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   Ppx_expect_runtime[1][1].call(null, "command/src/env_var.ml");
   Ppx_inline_test_lib[6].call(null, cst_command, "env_var.ml");
   var
    compare = runtime.caml_int_compare,
    a = [0, "COMMAND_OUTPUT_INSTALLATION_BASH"],
    b = [0, "COMMAND_OUTPUT_HELP_SEXP"],
    c = [0, "COMP_CWORD"];
   function sexp_of_t(param){
    switch(param){case 0: return a;case 1: return b;default: return c;
    }
   }
   function to_string(t){
    var a = sexp_of_t(t);
    return Base[85][16].call(null, a);
   }
   Ppx_inline_test_lib[7].call(null, cst_command);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Command_Env_var);
   var Command_Env_var = [0, compare, all, sexp_of_t, to_string];
   runtime.caml_register_global(16, Command_Env_var, cst_Command_Env_var);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Shape
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__Fn, Base__Int, Base__Invariant, Base__Lazy, Base__List, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__String, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, CamlinternalLazy, Command__Env_var, Command__Import, Expect_test_config, Filename_base, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stable_witness, Stdlib, Stdlib__List
//# shape: Command__Shape:[N,N,N,N,N,N,N,N,F(1),F(1),N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$8 = " ",
    cst$6 = ", ",
    cst$5 = "-",
    cst_Ad_hoc = "Ad_hoc",
    cst_Base = "Base",
    cst_Basic = "Basic",
    cst_Command_Shape$0 = "Command__Shape",
    cst_Concat = "Concat",
    cst_Exec = "Exec",
    cst_Grammar = "Grammar",
    cst_Group = "Group",
    cst_Lazy = "Lazy",
    cst_Many = "Many",
    cst_Maybe = "Maybe",
    cst_One = "One",
    cst_Usage = "Usage",
    cst_V1 = "V1",
    cst_V2 = "V2",
    cst_V3 = "V3",
    cst_Zero = "Zero",
    cst_build_info = "[-build-info]",
    cst_help = "[-help]",
    cst_version = "[-version]",
    cst_a = "a",
    cst_ad_hoc = "ad_hoc",
    cst_aliases$1 = "aliases",
    cst_anons$1 = "anons",
    cst_base = "base",
    cst_basic = "basic",
    cst_bug_in_command_ml$1 = "bug in command.ml",
    cst_child_subcommand$1 = "child_subcommand",
    cst_command$0 = "command",
    cst_command_src_shape_ml$0 = "command/src/shape.ml",
    cst_concat = "concat",
    cst_doc$1 = "doc",
    cst_exec = "exec",
    cst_flags$2 = "flags",
    cst_grammar = "grammar",
    cst_group = "group",
    cst_help$0 = "help",
    cst_lazy = "lazy",
    cst_many = "many",
    cst_maybe = "maybe",
    cst_name$1 = "name",
    cst_one = "one",
    cst_path_to_exe$3 = "path_to_exe",
    cst_readme$9 = "readme",
    cst_subcommands$2 = "subcommands",
    cst_summary$9 = "summary",
    cst_usage$0 = "usage",
    cst_v1 = "v1",
    cst_v2 = "v2",
    cst_v3 = "v3",
    cst_version$0 = "version",
    cst_working_dir$2 = "working_dir",
    cst_zero = "zero",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_compare = runtime.caml_string_compare,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) === 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$5,
    cst$3 = cst$5,
    cst$2 = cst$7,
    cst$1 = cst$8,
    flag_name$0 = cst_name$1,
    cst$0 = "/",
    cst = cst$7,
    error_source_022 = "command/src/shape.ml.Stable.Anons.Grammar.V1.t",
    error_source_067 = "command/src/shape.ml.Stable.Anons.V2.t",
    error_source_088 = "command/src/shape.ml.Stable.Flag_info.V1.t",
    error_source_104 = "command/src/shape.ml.Stable.Base_info.V2.t",
    error_source_118 = "command/src/shape.ml.Stable.Base_info.V1.t",
    error_source_145 = "command/src/shape.ml.Stable.Group_info.V2.t",
    error_source_178 = "command/src/shape.ml.Stable.Group_info.V1.t",
    error_source_206 = "command/src/shape.ml.Stable.Exec_info.V3.t",
    error_source_222 = "command/src/shape.ml.Stable.Exec_info.V2.t",
    error_source_236 = "command/src/shape.ml.Stable.Exec_info.V1.t",
    error_source_261 = "command/src/shape.ml.Stable.Fully_forced.V1.t",
    error_source_290 = "command/src/shape.ml.Stable.Sexpable.V3.t",
    error_source_322 = "command/src/shape.ml.Stable.Sexpable.V2.t",
    error_source_347 = "command/src/shape.ml.Stable.Sexpable.V1.t",
    error_source_372 = "command/src/shape.ml.Stable.Sexpable.Versioned.t",
    error_source_411 = "command/src/shape.ml.Anons.Grammar.t",
    error_source_456 = "command/src/shape.ml.Anons.t",
    enumerate_474 = [0, 0, [0, 1, 0]],
    enumerate_475 = [0, 0, [0, 1, 0]],
    maybe_missing_prefix = "[",
    maybe_missing_suffix = "]",
    maybe_more_suffix = " ...",
    error_source_499 = "command/src/shape.ml.Flag_info.t",
    indentation = "  ",
    spacing_dot = ". ",
    error_source_517 = "command/src/shape.ml.Base_info.t",
    error_source_546 = "command/src/shape.ml.Group_info.t",
    error_source_574 = "command/src/shape.ml.Exec_info.t",
    error_source_603 = "command/src/shape.ml.Fully_forced.t",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Set = global_data.Base__Set,
    Base_Lazy = global_data.Base__Lazy,
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base = global_data.Base,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_String = global_data.Base__String,
    Base_Error = global_data.Base__Error,
    Base_Result = global_data.Base__Result,
    Base_Or_error = global_data.Base__Or_error,
    Base_Char = global_data.Base__Char,
    Command_Import = global_data.Command__Import,
    Assert_failure = global_data.Assert_failure,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Option = global_data.Base__Option,
    Stdlib_List = global_data.Stdlib__List,
    Stable_witness = global_data.Stable_witness,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Filename_base = global_data.Filename_base;
   global_data.Bin_prot__Read;
   global_data.Bin_prot__Common;
   global_data.Bin_prot__Write;
   var
    Stdlib = global_data.Stdlib,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Base_Fn = global_data.Base__Fn,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Command_Env_var = global_data.Command__Env_var,
    Base_Int = global_data.Base__Int;
   Ppx_module_timer_runtime[4].call(null, cst_Command_Shape$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   Ppx_expect_runtime[1][1].call(null, cst_command_src_shape_ml$0);
   Ppx_inline_test_lib[6].call(null, cst_command$0, "shape.ml");
   var
    t_of_sexp = Sexplib0_Sexp_conv[40],
    sexp_of_t = Sexplib0_Sexp_conv[16],
    compare = Base_Lazy[1];
   function compare$0(a_006$0, b_007$0){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        var a_006 = a_006$0, b_007 = b_007$0;
        e:
        for(;;){
         if(a_006 === b_007) return 0;
         if(typeof a_006 === "number")
          return typeof b_007 === "number" ? 0 : -1;
         switch(a_006[0]){
           case 0:
            var a_008 = a_006[1];
            if(typeof b_007 === "number") break a;
            if(0 !== b_007[0]) return -1;
            var b_009 = b_007[1];
            return caml_call2(Ppx_compare_lib[5][8], a_008, b_009);
           case 1:
            var a_010 = a_006[1];
            if(typeof b_007 === "number") break a;
            switch(b_007[0]){
              case 1:
               var b_011 = b_007[1]; a_006 = a_010; b_007 = b_011; break;
              case 0:
               break b;
              default: return -1;
            }
            break;
           case 2:
            var a_012 = a_006[1];
            if(typeof b_007 === "number") break a;
            switch(b_007[0]){
              case 2:
               var b_013 = b_007[1]; a_006 = a_012; b_007 = b_013; break;
              case 0:
               break b;
              case 1:
               break c;
              default: return -1;
            }
            break;
           case 3:
            break e;
           default:
            var a_018 = a_006[1];
            if(typeof b_007 === "number") break a;
            switch(b_007[0]){
              case 3:
               return 1;
              case 4:
               var b_019 = b_007[1];
               return caml_call2(Ppx_compare_lib[5][8], a_018, b_019);
              case 0:
               break b;
              case 1:
               break c;
              default: break d;
            }
         }
        }
        var a_014 = a_006[1];
        if(typeof b_007 === "number") break a;
        switch(b_007[0]){
          case 3:
           var b_015 = b_007[1];
           return caml_call3
                   (Ppx_compare_lib[5][12],
                    function(a_016, b_017){return compare$0(a_016, b_017);},
                    a_014,
                    b_015);
          case 4:
           return -1;
          case 0:
           break b;
          case 1:
           break c;
        }
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   var letrec_function_context = [];
   function t_of_sexp$0(sexp_024){
    a:
    {
     if(0 === sexp_024[0]){
      var a = sexp_024[1], b = caml_string_compare(a, cst_ad_hoc);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= b){
            if(0 < b){
             if(a === cst_concat) break f;
             if(a === cst_many) break e;
             if(a === cst_maybe) break d;
             if(a === cst_one) break c;
             if(a !== cst_zero) break a;
             break b;
            }
           }
           else if(a !== cst_Ad_hoc){
            if(a === cst_Concat) break f;
            if(a === cst_Many) break e;
            if(a === cst_Maybe) break d;
            if(a === cst_One) break c;
            if(a !== cst_Zero) break a;
            break b;
           }
           return Sexplib0_Sexp_conv_error[9].call
                   (null, letrec_function_context[1], sexp_024);
          }
          return Sexplib0_Sexp_conv_error[9].call
                  (null, letrec_function_context[1], sexp_024);
         }
         return Sexplib0_Sexp_conv_error[9].call
                 (null, letrec_function_context[1], sexp_024);
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context[1], sexp_024);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context[1], sexp_024);
      }
      return 0;
     }
     var match = sexp_024[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context[1], sexp_024);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context[1], sexp_024);
     var tag_025 = match$0[1], c = caml_string_compare(tag_025, cst_ad_hoc);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= c){
           if(0 < c){
            if(tag_025 === cst_concat) break f;
            if(tag_025 === cst_many) break e;
            if(tag_025 === cst_maybe) break d;
            if(tag_025 === cst_one) break c;
            if(tag_025 !== cst_zero) break a;
            break b;
           }
          }
          else if(tag_025 !== cst_Ad_hoc){
           if(tag_025 === cst_Concat) break f;
           if(tag_025 === cst_Many) break e;
           if(tag_025 === cst_Maybe) break d;
           if(tag_025 === cst_One) break c;
           if(tag_025 !== cst_Zero) break a;
           break b;
          }
          var sexp_args_046 = match[2];
          if(sexp_args_046 && ! sexp_args_046[2]){
           var
            arg0_047 = sexp_args_046[1],
            res0_048 = Sexplib0_Sexp_conv[31].call(null, arg0_047);
           return [4, res0_048];
          }
          return Sexplib0_Sexp_conv_error[8].call
                  (null, letrec_function_context[1], tag_025, sexp_024);
         }
         var sexp_args_041 = match[2];
         if(sexp_args_041 && ! sexp_args_041[2]){
          var
           arg0_042 = sexp_args_041[1],
           res0_043 = Sexplib0_Sexp_conv[44].call(null, t_of_sexp$0, arg0_042);
          return [3, res0_043];
         }
         return Sexplib0_Sexp_conv_error[8].call
                 (null, letrec_function_context[1], tag_025, sexp_024);
        }
        var sexp_args_031 = match[2];
        if(sexp_args_031 && ! sexp_args_031[2]){
         var arg0_032 = sexp_args_031[1], res0_033 = t_of_sexp$0(arg0_032);
         return [1, res0_033];
        }
        return Sexplib0_Sexp_conv_error[8].call
                (null, letrec_function_context[1], tag_025, sexp_024);
       }
       var sexp_args_036 = match[2];
       if(sexp_args_036 && ! sexp_args_036[2]){
        var arg0_037 = sexp_args_036[1], res0_038 = t_of_sexp$0(arg0_037);
        return [2, res0_038];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context[1], tag_025, sexp_024);
      }
      var sexp_args_026 = match[2];
      if(sexp_args_026 && ! sexp_args_026[2]){
       var
        arg0_027 = sexp_args_026[1],
        res0_028 = Sexplib0_Sexp_conv[31].call(null, arg0_027);
       return [0, res0_028];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context[1], tag_025, sexp_024);
     }
     return Sexplib0_Sexp_conv_error[7].call
             (null, letrec_function_context[1], sexp_024);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context[1], sexp_024);
   }
   caml_update_dummy(letrec_function_context, [0, error_source_022]);
   var
    e = [0, cst_Zero],
    g = [0, cst_One],
    h = [0, cst_Many],
    i = [0, cst_Maybe],
    j = [0, cst_Concat],
    k = [0, cst_Ad_hoc];
   function sexp_of_t$0(param){
    if(typeof param === "number") return e;
    switch(param[0]){
      case 0:
       var
        arg0_049 = param[1],
        res0_050 = Sexplib0_Sexp_conv[7].call(null, arg0_049);
       return [1, [0, g, [0, res0_050, 0]]];
      case 1:
       var arg0_051 = param[1], res0_052 = sexp_of_t$0(arg0_051);
       return [1, [0, h, [0, res0_052, 0]]];
      case 2:
       var arg0_053 = param[1], res0_054 = sexp_of_t$0(arg0_053);
       return [1, [0, i, [0, res0_054, 0]]];
      case 3:
       var
        arg0_055 = param[1],
        res0_056 = Sexplib0_Sexp_conv[20].call(null, sexp_of_t$0, arg0_055);
       return [1, [0, j, [0, res0_056, 0]]];
      default:
       var
        arg0_057 = param[1],
        res0_058 = Sexplib0_Sexp_conv[7].call(null, arg0_057);
       return [1, [0, k, [0, res0_058, 0]]];
    }
   }
   var
    stable_witness = Stable_witness[6],
    cst_Many_Zero_should_be_just_Z = "Many Zero should be just Zero",
    cst_Maybe_Zero_should_be_just_ = "Maybe Zero should be just Zero",
    cst_Flatten_zero_and_one_eleme = "Flatten zero and one-element Concat",
    l = [0, cst_command_src_shape_ml$0, 25, 586, 621],
    cst_bug_in_command_ml = cst_bug_in_command_ml$1,
    m = [0, [12, 91, [2, 0, [11, " ...]", 0]]], "[%s ...]"],
    n = [0, [11, "[(", [2, 0, [11, ") ...]", 0]]], "[(%s) ...]"],
    cst_bug_in_command_ml$0 = cst_bug_in_command_ml$1,
    o = [0, [12, 91, [2, 0, [12, 93, 0]]], "[%s]"],
    p = [0, cst$8],
    q = [0, cst_Usage],
    r = [0, cst_Grammar];
   function invariant(t){
    return Base_Invariant[1].call
            (null,
             l,
             t,
             sexp_of_t$0,
             function(param){
              if(typeof t === "number") return 0;
              switch(t[0]){
                case 1:
                 var t$0 = t[1];
                 return typeof t$0 === "number"
                         ? Stdlib[2].call(null, cst_Many_Zero_should_be_just_Z)
                         : invariant(t$0);
                case 2:
                 var t$1 = t[1];
                 return typeof t$1 === "number"
                         ? Stdlib[2].call(null, cst_Maybe_Zero_should_be_just_)
                         : invariant(t$1);
                case 3:
                 var ts = t[1];
                 if(ts && ts[2])
                  return Base_List[19].call(null, ts, invariant);
                 return Stdlib[2].call(null, cst_Flatten_zero_and_one_eleme);
                default: return 0;
              }
             });
   }
   function t_of_sexp$1(sexp){
    var t = t_of_sexp$0(sexp);
    invariant(t);
    return t;
   }
   function usage(param){
    if(typeof param === "number") return cst;
    switch(param[0]){
      case 1:
       var t = param[1];
       if(typeof t === "number")
        return Stdlib[2].call(null, cst_bug_in_command_ml);
       if(0 === t[0]){
        var a = usage(t);
        return caml_call1(Command_Import[7].call(null, m), a);
       }
       var b = usage(t);
       return caml_call1(Command_Import[7].call(null, n), b);
      case 2:
       var t$0 = param[1];
       if(typeof t$0 === "number")
        return Stdlib[2].call(null, cst_bug_in_command_ml$0);
       var c = usage(t$0);
       return caml_call1(Command_Import[7].call(null, o), c);
      case 3:
       var ts = param[1], d = Base_List[53].call(null, ts, usage);
       return Base_String[68].call(null, p, d);
      default: var usage$0 = param[1]; return usage$0;
    }
   }
   function compare$1(a_059, b_060){
    if(a_059 === b_060) return 0;
    if(0 === a_059[0]){
     var a_061 = a_059[1];
     if(0 !== b_060[0]) return -1;
     var b_062 = b_060[1];
     return caml_call2(Ppx_compare_lib[5][8], a_061, b_062);
    }
    var a_063 = a_059[1];
    if(0 === b_060[0]) return 1;
    var b_064 = b_060[1];
    return compare$0(a_063, b_064);
   }
   function t_of_sexp$2(sexp_069){
    a:
    {
     if(0 === sexp_069[0]){
      var a = sexp_069[1];
      b:
      if(a !== cst_Grammar){
       if(a !== cst_Usage){
        if(a === cst_grammar) break b;
        if(a !== cst_usage$0) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_067, sexp_069);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_067, sexp_069);
     }
     var match = sexp_069[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_067, sexp_069);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_067, sexp_069);
     var tag_070 = match$0[1];
     b:
     if(tag_070 !== cst_Grammar){
      if(tag_070 !== cst_Usage){
       if(tag_070 === cst_grammar) break b;
       if(tag_070 !== cst_usage$0) break a;
      }
      var sexp_args_071 = match[2];
      if(sexp_args_071 && ! sexp_args_071[2]){
       var
        arg0_072 = sexp_args_071[1],
        res0_073 = Sexplib0_Sexp_conv[31].call(null, arg0_072);
       return [0, res0_073];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_067, tag_070, sexp_069);
     }
     var sexp_args_076 = match[2];
     if(sexp_args_076 && ! sexp_args_076[2]){
      var arg0_077 = sexp_args_076[1], res0_078 = t_of_sexp$1(arg0_077);
      return [1, res0_078];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_067, tag_070, sexp_069);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_067, sexp_069);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var
      arg0_079 = param[1],
      res0_080 = Sexplib0_Sexp_conv[7].call(null, arg0_079);
     return [1, [0, q, [0, res0_080, 0]]];
    }
    var arg0_081 = param[1], res0_082 = sexp_of_t$0(arg0_081);
    return [1, [0, r, [0, res0_082, 0]]];
   }
   var
    stable_witness$0 = Stable_witness[6],
    cst_aliases = cst_aliases$1,
    cst_doc = cst_doc$1,
    cst_name = cst_name$1,
    s = [0, cst_aliases$1],
    t = [0, cst_doc$1],
    u = [0, cst_name$1];
   function compare$2(a_083, b_084){
    if(a_083 === b_084) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_083[1], b_084[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Ppx_compare_lib[5][8], a_083[2], b_084[2]);
    return 0 === n$0
            ? caml_call3
              (Ppx_compare_lib[5][12],
               function(a_085, b_086){
                return caml_call2(Ppx_compare_lib[5][8], a_085, b_086);
               },
               a_083[3],
               b_084[3])
            : n$0;
   }
   function t_of_sexp$3(x_089){
    var a = Sexplib0_Sexp_conv[31], b = Sexplib0_Sexp_conv[44];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_088,
             [0,
              cst_name,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_doc,
               1,
               Sexplib0_Sexp_conv[31],
               [0, cst_aliases, 1, function(c){return b(a, c);}, 0]]],
             function(param){
              return param !== cst_aliases$1
                      ? param !== cst_doc$1 ? param !== cst_name$1 ? -1 : 0 : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               aliases = a[2][1],
               doc = a[1],
               name = param[1];
              return [0, name, doc, aliases];
             },
             x_089);
   }
   function sexp_of_t$2(param){
    var
     aliases_095 = param[3],
     doc_093 = param[2],
     name_091 = param[1],
     arg_096 =
       Sexplib0_Sexp_conv[20].call(null, Sexplib0_Sexp_conv[7], aliases_095),
     bnds_090 = [0, [1, [0, s, [0, arg_096, 0]]], 0],
     arg_094 = Sexplib0_Sexp_conv[7].call(null, doc_093),
     bnds_090$0 = [0, [1, [0, t, [0, arg_094, 0]]], bnds_090],
     arg_092 = Sexplib0_Sexp_conv[7].call(null, name_091),
     bnds_090$1 = [0, [1, [0, u, [0, arg_092, 0]]], bnds_090$0];
    return [1, bnds_090$1];
   }
   var
    stable_witness$1 = Stable_witness[6],
    cst_flags = cst_flags$2,
    cst_anons = cst_anons$1,
    cst_readme = cst_readme$9,
    cst_summary = cst_summary$9,
    v = [0, cst_flags$2],
    w = [0, cst_anons$1],
    x = [0, cst_readme$9],
    y = [0, cst_summary$9];
   function compare$3(a_097, b_098){
    if(a_097 === b_098) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_097[1], b_098[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][13],
         function(a_099, b_100){
          return caml_call2(Ppx_compare_lib[5][8], a_099, b_100);
         },
         a_097[2],
         b_098[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare$1(a_097[3], b_098[3]);
    return 0 === n$1
            ? caml_call3
              (Ppx_compare_lib[5][12],
               function(a_101, b_102){return compare$2(a_101, b_102);},
               a_097[4],
               b_098[4])
            : n$1;
   }
   function t_of_sexp$4(x_105){
    var a = Sexplib0_Sexp_conv[44];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_104,
             [0,
              cst_summary,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_anons,
                1,
                t_of_sexp$2,
                [0, cst_flags, 1, function(b){return a(t_of_sexp$3, b);}, 0]]]],
             function(param){
              return param !== cst_anons$1
                      ? param
                        !== cst_flags$2
                        ? param
                          !== cst_readme$9
                          ? param !== cst_summary$9 ? -1 : 0
                          : 1
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               flags = b[2][1],
               anons = b[1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, anons, flags];
             },
             x_105);
   }
   function sexp_of_t$3(param){
    var
     flags_115 = param[4],
     anons_113 = param[3],
     readme_109 = param[2],
     summary_107 = param[1],
     arg_116 = Sexplib0_Sexp_conv[20].call(null, sexp_of_t$2, flags_115),
     bnds_106 = [0, [1, [0, v, [0, arg_116, 0]]], 0],
     arg_114 = sexp_of_t$1(anons_113),
     bnds_106$0 = [0, [1, [0, w, [0, arg_114, 0]]], bnds_106];
    if(readme_109)
     var
      v_110 = readme_109[1],
      arg_112 = Sexplib0_Sexp_conv[7].call(null, v_110),
      bnd_111 = [1, [0, x, [0, arg_112, 0]]],
      bnds_106$1 = [0, bnd_111, bnds_106$0];
    else
     var bnds_106$1 = bnds_106$0;
    var
     arg_108 = Sexplib0_Sexp_conv[7].call(null, summary_107),
     bnds_106$2 = [0, [1, [0, y, [0, arg_108, 0]]], bnds_106$1];
    return [1, bnds_106$2];
   }
   var
    stable_witness$2 = Stable_witness[6],
    cst_flags$0 = cst_flags$2,
    cst_usage = cst_usage$0,
    cst_readme$0 = cst_readme$9,
    cst_summary$0 = cst_summary$9,
    z = [0, cst_flags$2],
    A = [0, cst_usage$0],
    B = [0, cst_readme$9],
    C = [0, cst_summary$9];
   function t_of_sexp$5(x_119){
    var a = Sexplib0_Sexp_conv[44];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_118,
             [0,
              cst_summary$0,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$0,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_usage,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_flags$0, 1, function(b){return a(t_of_sexp$3, b);}, 0]]]],
             function(param){
              return param !== cst_flags$2
                      ? param
                        !== cst_readme$9
                        ? param
                          !== cst_summary$9
                          ? param !== cst_usage$0 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               flags = b[2][1],
               usage = b[1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, usage, flags];
             },
             x_119);
   }
   function sexp_of_t$4(param){
    var
     flags_129 = param[4],
     usage_127 = param[3],
     readme_123 = param[2],
     summary_121 = param[1],
     arg_130 = Sexplib0_Sexp_conv[20].call(null, sexp_of_t$2, flags_129),
     bnds_120 = [0, [1, [0, z, [0, arg_130, 0]]], 0],
     arg_128 = Sexplib0_Sexp_conv[7].call(null, usage_127),
     bnds_120$0 = [0, [1, [0, A, [0, arg_128, 0]]], bnds_120];
    if(readme_123)
     var
      v_124 = readme_123[1],
      arg_126 = Sexplib0_Sexp_conv[7].call(null, v_124),
      bnd_125 = [1, [0, B, [0, arg_126, 0]]],
      bnds_120$1 = [0, bnd_125, bnds_120$0];
    else
     var bnds_120$1 = bnds_120$0;
    var
     arg_122 = Sexplib0_Sexp_conv[7].call(null, summary_121),
     bnds_120$2 = [0, [1, [0, C, [0, arg_122, 0]]], bnds_120$1];
    return [1, bnds_120$2];
   }
   var stable_witness$3 = Stable_witness[6];
   function to_latest(param){
    var
     flags = param[4],
     usage = param[3],
     readme = param[2],
     summary = param[1];
    return [0, summary, readme, [0, usage], flags];
   }
   function of_latest(param){
    var
     flags = param[4],
     anons = param[3],
     readme = param[2],
     summary = param[1];
    if(0 === anons[0])
     var usage$0 = anons[1], usage$1 = usage$0;
    else
     var grammar = anons[1], usage$1 = usage(grammar);
    return [0, summary, readme, usage$1, flags];
   }
   var
    D =
      Bin_prot_Shape[5].call
       (null,
        [0,
         [0,
          "Dummy_type_because_we_cannot_digest_type_constructors_only_concrete_types",
          0],
         0]),
    E = [0, [0, caml_call1(Bin_shape[2][1], cst_a), 0, D], 0],
    F = caml_call1(Bin_shape[4][1], "command/src/shape.ml:125:4");
   Bin_prot_Shape[2].call(null, F, E);
   caml_call1(Bin_shape[2][1], cst_a);
   var
    cst_subcommands = cst_subcommands$2,
    cst_readme$1 = cst_readme$9,
    cst_summary$1 = cst_summary$9,
    G = [0, cst_subcommands$2],
    H = [0, cst_readme$9],
    I = [0, cst_summary$9],
    cst_subcommands$0 = cst_subcommands$2,
    cst_readme$2 = cst_readme$9,
    cst_summary$2 = cst_summary$9,
    J = [0, cst_subcommands$2],
    K = [0, cst_readme$9],
    L = [0, cst_summary$9],
    cst_child_subcommand = cst_child_subcommand$1,
    cst_path_to_exe = cst_path_to_exe$3,
    cst_working_dir = cst_working_dir$2,
    cst_readme$3 = cst_readme$9,
    cst_summary$3 = cst_summary$9,
    M = [0, cst_child_subcommand$1],
    N = [0, cst_path_to_exe$3],
    O = [0, cst_working_dir$2],
    P = [0, cst_readme$9],
    Q = [0, cst_summary$9];
   function compare$4(cmp_a, a_131, b_132){
    if(a_131 === b_132) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_131[1], b_132[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][13],
         function(a_133, b_134){
          return caml_call2(Ppx_compare_lib[5][8], a_133, b_134);
         },
         a_131[2],
         b_132[2]);
    return 0 === n$0
            ? compare
              (function(a_135, b_136){
                return caml_call3
                        (Ppx_compare_lib[5][12],
                         function(a_137, b_138){
                          var
                           t_140 = a_137[2],
                           t_139 = a_137[1],
                           t_142 = b_138[2],
                           t_141 = b_138[1],
                           n = caml_call2(Ppx_compare_lib[5][8], t_139, t_141);
                          return 0 === n ? caml_call2(cmp_a, t_140, t_142) : n;
                         },
                         a_135,
                         b_136);
               },
               a_131[3],
               b_132[3])
            : n$0;
   }
   function t_of_sexp$6(of_a_143, x_151){
    function a(sexp_150){
     if(0 !== sexp_150[0]){
      var a = sexp_150[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         arg1_147 = b[1],
         arg0_146 = a[1],
         res0_148 = Sexplib0_Sexp_conv[31].call(null, arg0_146),
         res1_149 = caml_call1(of_a_143, arg1_147);
        return [0, res0_148, res1_149];
       }
      }
     }
     return Sexplib0_Sexp_conv_error[4].call
             (null, error_source_145, 2, sexp_150);
    }
    var b = Sexplib0_Sexp_conv[44];
    function c(c){return b(a, c);}
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_145,
             [0,
              cst_summary$1,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$1,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_subcommands,
                1,
                function(a){return t_of_sexp(c, a);},
                0]]],
             function(param){
              return param !== cst_readme$9
                      ? param
                        !== cst_subcommands$2
                        ? param !== cst_summary$9 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               a = param[2],
               subcommands = a[2][1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_151);
   }
   function sexp_of_t$5(of_a_152, param){
    var
     subcommands_160 = param[3],
     readme_156 = param[2],
     summary_154 = param[1];
    function a(param){
     var
      arg1_163 = param[2],
      arg0_162 = param[1],
      res0_164 = Sexplib0_Sexp_conv[7].call(null, arg0_162),
      res1_165 = caml_call1(of_a_152, arg1_163);
     return [1, [0, res0_164, [0, res1_165, 0]]];
    }
    var
     b = Sexplib0_Sexp_conv[20],
     arg_161 = sexp_of_t(function(c){return b(a, c);}, subcommands_160),
     bnds_153 = [0, [1, [0, G, [0, arg_161, 0]]], 0];
    if(readme_156)
     var
      v_157 = readme_156[1],
      arg_159 = Sexplib0_Sexp_conv[7].call(null, v_157),
      bnd_158 = [1, [0, H, [0, arg_159, 0]]],
      bnds_153$0 = [0, bnd_158, bnds_153];
    else
     var bnds_153$0 = bnds_153;
    var
     arg_155 = Sexplib0_Sexp_conv[7].call(null, summary_154),
     bnds_153$1 = [0, [1, [0, I, [0, arg_155, 0]]], bnds_153$0];
    return [1, bnds_153$1];
   }
   function stable_witness$4(a_stable_witness){return Stable_witness[6];}
   function map(t, f){
    var
     a = Base_List[137][9],
     b =
       caml_call2
        (Base_Lazy[15], t[3], function(b){return caml_call2(a, b, f);});
    return [0, t[1], t[2], b];
   }
   function t_of_sexp$7(of_a_176, x_184){
    function a(sexp_183){
     if(0 !== sexp_183[0]){
      var a = sexp_183[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         arg1_180 = b[1],
         arg0_179 = a[1],
         res0_181 = Sexplib0_Sexp_conv[31].call(null, arg0_179),
         res1_182 = caml_call1(of_a_176, arg1_180);
        return [0, res0_181, res1_182];
       }
      }
     }
     return Sexplib0_Sexp_conv_error[4].call
             (null, error_source_178, 2, sexp_183);
    }
    var b = Sexplib0_Sexp_conv[44];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_178,
             [0,
              cst_summary$2,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$2,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_subcommands$0, 1, function(c){return b(a, c);}, 0]]],
             function(param){
              return param !== cst_readme$9
                      ? param
                        !== cst_subcommands$2
                        ? param !== cst_summary$9 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               a = param[2],
               subcommands = a[2][1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_184);
   }
   function sexp_of_t$6(of_a_185, param){
    var
     subcommands_193 = param[3],
     readme_189 = param[2],
     summary_187 = param[1],
     arg_194 =
       Sexplib0_Sexp_conv[20].call
        (null,
         function(param){
          var
           arg1_196 = param[2],
           arg0_195 = param[1],
           res0_197 = Sexplib0_Sexp_conv[7].call(null, arg0_195),
           res1_198 = caml_call1(of_a_185, arg1_196);
          return [1, [0, res0_197, [0, res1_198, 0]]];
         },
         subcommands_193),
     bnds_186 = [0, [1, [0, J, [0, arg_194, 0]]], 0];
    if(readme_189)
     var
      v_190 = readme_189[1],
      arg_192 = Sexplib0_Sexp_conv[7].call(null, v_190),
      bnd_191 = [1, [0, K, [0, arg_192, 0]]],
      bnds_186$0 = [0, bnd_191, bnds_186];
    else
     var bnds_186$0 = bnds_186;
    var
     arg_188 = Sexplib0_Sexp_conv[7].call(null, summary_187),
     bnds_186$1 = [0, [1, [0, L, [0, arg_188, 0]]], bnds_186$0];
    return [1, bnds_186$1];
   }
   function map$0(t, f){
    var a = caml_call2(Base_List[137][9], t[3], f);
    return [0, t[1], t[2], a];
   }
   function to_latest$0(param){
    var subcommands = param[3], readme = param[2], summary = param[1];
    return [0, summary, readme, Base_Lazy[24].call(null, subcommands)];
   }
   function of_latest$0(param){
    var
     subcommands = param[3],
     readme = param[2],
     summary = param[1],
     a = caml_obj_tag(subcommands);
    a:
    if(250 === a)
     var b = subcommands[1];
    else{
     if(246 !== a && 244 !== a){var b = subcommands; break a;}
     var b = CamlinternalLazy[2].call(null, subcommands);
    }
    return [0, summary, readme, b];
   }
   function abs_path(dir, path){
    return Filename_base[30].call(null, path)
            ? path
            : Filename_base[28].call(null, dir, path);
   }
   function compare$5(a_199, b_200){
    if(a_199 === b_200) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_199[1], b_200[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][13],
         function(a_201, b_202){
          return caml_call2(Ppx_compare_lib[5][8], a_201, b_202);
         },
         a_199[2],
         b_200[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Ppx_compare_lib[5][8], a_199[3], b_200[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Ppx_compare_lib[5][8], a_199[4], b_200[4]);
    return 0 === n$2
            ? caml_call3
              (Ppx_compare_lib[5][12],
               function(a_203, b_204){
                return caml_call2(Ppx_compare_lib[5][8], a_203, b_204);
               },
               a_199[5],
               b_200[5])
            : n$2;
   }
   function t_of_sexp$8(x_207){
    var a = Sexplib0_Sexp_conv[31], b = Sexplib0_Sexp_conv[44];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_206,
             [0,
              cst_summary$3,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$3,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir,
                1,
                Sexplib0_Sexp_conv[31],
                [0,
                 cst_path_to_exe,
                 1,
                 Sexplib0_Sexp_conv[31],
                 [0, cst_child_subcommand, 1, function(c){return b(a, c);}, 0]]]]],
             function(param){
              return param !== cst_child_subcommand$1
                      ? param
                        !== cst_path_to_exe$3
                        ? param
                          !== cst_readme$9
                          ? param
                            !== cst_summary$9
                            ? param !== cst_working_dir$2 ? -1 : 2
                            : 0
                          : 1
                        : 3
                      : 4;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               child_subcommand = c[2][1],
               path_to_exe = c[1],
               working_dir = b[1],
               readme = a[1],
               summary = param[1];
              return [0,
                      summary,
                      readme,
                      working_dir,
                      path_to_exe,
                      child_subcommand];
             },
             x_207);
   }
   function sexp_of_t$7(param){
    var
     child_subcommand_219 = param[5],
     path_to_exe_217 = param[4],
     working_dir_215 = param[3],
     readme_211 = param[2],
     summary_209 = param[1],
     arg_220 =
       Sexplib0_Sexp_conv[20].call
        (null, Sexplib0_Sexp_conv[7], child_subcommand_219),
     bnds_208 = [0, [1, [0, M, [0, arg_220, 0]]], 0],
     arg_218 = Sexplib0_Sexp_conv[7].call(null, path_to_exe_217),
     bnds_208$0 = [0, [1, [0, N, [0, arg_218, 0]]], bnds_208],
     arg_216 = Sexplib0_Sexp_conv[7].call(null, working_dir_215),
     bnds_208$1 = [0, [1, [0, O, [0, arg_216, 0]]], bnds_208$0];
    if(readme_211)
     var
      v_212 = readme_211[1],
      arg_214 = Sexplib0_Sexp_conv[7].call(null, v_212),
      bnd_213 = [1, [0, P, [0, arg_214, 0]]],
      bnds_208$2 = [0, bnd_213, bnds_208$1];
    else
     var bnds_208$2 = bnds_208$1;
    var
     arg_210 = Sexplib0_Sexp_conv[7].call(null, summary_209),
     bnds_208$3 = [0, [1, [0, Q, [0, arg_210, 0]]], bnds_208$2];
    return [1, bnds_208$3];
   }
   var
    stable_witness$5 = Stable_witness[6],
    cst_path_to_exe$0 = cst_path_to_exe$3,
    cst_working_dir$0 = cst_working_dir$2,
    cst_readme$4 = cst_readme$9,
    cst_summary$4 = cst_summary$9,
    R = [0, cst_path_to_exe$3],
    S = [0, cst_working_dir$2],
    T = [0, cst_readme$9],
    U = [0, cst_summary$9];
   function to_latest$1(a){return a;}
   function of_latest$1(a){return a;}
   function t_of_sexp$9(x_223){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_222,
             [0,
              cst_summary$4,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$4,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir$0,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_path_to_exe$0, 1, Sexplib0_Sexp_conv[31], 0]]]],
             function(param){
              return param !== cst_path_to_exe$3
                      ? param
                        !== cst_readme$9
                        ? param
                          !== cst_summary$9
                          ? param !== cst_working_dir$2 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               path_to_exe = b[2][1],
               working_dir = b[1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, working_dir, path_to_exe];
             },
             x_223);
   }
   function sexp_of_t$8(param){
    var
     path_to_exe_233 = param[4],
     working_dir_231 = param[3],
     readme_227 = param[2],
     summary_225 = param[1],
     arg_234 = Sexplib0_Sexp_conv[7].call(null, path_to_exe_233),
     bnds_224 = [0, [1, [0, R, [0, arg_234, 0]]], 0],
     arg_232 = Sexplib0_Sexp_conv[7].call(null, working_dir_231),
     bnds_224$0 = [0, [1, [0, S, [0, arg_232, 0]]], bnds_224];
    if(readme_227)
     var
      v_228 = readme_227[1],
      arg_230 = Sexplib0_Sexp_conv[7].call(null, v_228),
      bnd_229 = [1, [0, T, [0, arg_230, 0]]],
      bnds_224$1 = [0, bnd_229, bnds_224$0];
    else
     var bnds_224$1 = bnds_224$0;
    var
     arg_226 = Sexplib0_Sexp_conv[7].call(null, summary_225),
     bnds_224$2 = [0, [1, [0, U, [0, arg_226, 0]]], bnds_224$1];
    return [1, bnds_224$2];
   }
   var stable_witness$6 = Stable_witness[6];
   function to_v3(t){return [0, t[1], t[2], t[3], t[4], 0];}
   function of_v3(t){
    var a = abs_path(t[3], t[4]);
    return [0, t[1], t[2], t[3], a];
   }
   var a = Base_Fn[5];
   function to_latest$2(b){return a(to_latest$1, to_v3, b);}
   var
    b = Base_Fn[5],
    cst_path_to_exe$1 = cst_path_to_exe$3,
    cst_readme$5 = cst_readme$9,
    cst_summary$5 = cst_summary$9,
    V = [0, cst_path_to_exe$3],
    W = [0, cst_readme$9],
    X = [0, cst_summary$9];
   function of_latest$2(a){return b(of_v3, of_latest$1, a);}
   function t_of_sexp$10(x_237){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_236,
             [0,
              cst_summary$5,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$5,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_path_to_exe$1, 1, Sexplib0_Sexp_conv[31], 0]]],
             function(param){
              return param !== cst_path_to_exe$3
                      ? param
                        !== cst_readme$9
                        ? param !== cst_summary$9 ? -1 : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               path_to_exe = a[2][1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, path_to_exe];
             },
             x_237);
   }
   function sexp_of_t$9(param){
    var
     path_to_exe_245 = param[3],
     readme_241 = param[2],
     summary_239 = param[1],
     arg_246 = Sexplib0_Sexp_conv[7].call(null, path_to_exe_245),
     bnds_238 = [0, [1, [0, V, [0, arg_246, 0]]], 0];
    if(readme_241)
     var
      v_242 = readme_241[1],
      arg_244 = Sexplib0_Sexp_conv[7].call(null, v_242),
      bnd_243 = [1, [0, W, [0, arg_244, 0]]],
      bnds_238$0 = [0, bnd_243, bnds_238];
    else
     var bnds_238$0 = bnds_238;
    var
     arg_240 = Sexplib0_Sexp_conv[7].call(null, summary_239),
     bnds_238$1 = [0, [1, [0, X, [0, arg_240, 0]]], bnds_238$0];
    return [1, bnds_238$1];
   }
   var stable_witness$7 = Stable_witness[6];
   function to_v2(t){return [0, t[1], t[2], cst$0, t[3]];}
   function of_v2(t){var a = abs_path(t[3], t[4]); return [0, t[1], t[2], a];}
   var c = Base_Fn[5];
   function to_latest$3(a){return c(to_latest$2, to_v2, a);}
   var d = Base_Fn[5];
   function of_latest$3(a){return d(of_v2, of_latest$2, a);}
   function compare$6(a_247$0, b_248$0){
    a:
    {
     var a_247 = a_247$0, b_248 = b_248$0;
     b:
     for(;;){
      if(a_247 === b_248) return 0;
      switch(a_247[0]){
        case 0:
         var a_249 = a_247[1];
         if(0 !== b_248[0]) return -1;
         var b_250 = b_248[1];
         return compare$3(a_249, b_250);
        case 1:
         break b;
        default:
         var a_257 = a_247[2], a_255 = a_247[1];
         switch(b_248[0]){
           case 1:
            return 1;
           case 2:
            var
             b_258 = b_248[2],
             b_256 = b_248[1],
             n = compare$5(a_255, b_256);
            if(0 !== n) return n;
            a_247 = a_257;
            b_248 = b_258;
            break;
           default: break a;
         }
      }
     }
     var a_251 = a_247[1];
     switch(b_248[0]){
       case 1:
        var b_252 = b_248[1];
        return compare$4
                (function(a_253, b_254){return compare$6(a_253, b_254);},
                 a_251,
                 b_252);
       case 2:
        return -1;
     }
    }
    return 1;
   }
   var letrec_function_context$0 = [];
   function t_of_sexp$11(sexp_263){
    a:
    {
     if(0 === sexp_263[0]){
      var a = sexp_263[1];
      b:
      if(a !== cst_Basic){
       c:
       if(a !== cst_Exec){
        if(a !== cst_Group){
         if(a === cst_basic) break b;
         if(a === cst_exec) break c;
         if(a !== cst_group) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$0[1], sexp_263);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$0[1], sexp_263);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context$0[1], sexp_263);
     }
     var match = sexp_263[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$0[1], sexp_263);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$0[1], sexp_263);
     var tag_264 = match$0[1];
     b:
     if(tag_264 !== cst_Basic){
      c:
      if(tag_264 !== cst_Exec){
       if(tag_264 !== cst_Group){
        if(tag_264 === cst_basic) break b;
        if(tag_264 === cst_exec) break c;
        if(tag_264 !== cst_group) break a;
       }
       var sexp_args_270 = match[2];
       if(sexp_args_270 && ! sexp_args_270[2]){
        var
         arg0_271 = sexp_args_270[1],
         res0_272 = t_of_sexp$6(t_of_sexp$11, arg0_271);
        return [1, res0_272];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$0[1], tag_264, sexp_263);
      }
      var sexp_args_275 = match[2];
      if(sexp_args_275){
       var b = sexp_args_275[2];
       if(b && ! b[2]){
        var
         arg1_277 = b[1],
         arg0_276 = sexp_args_275[1],
         res0_278 = t_of_sexp$8(arg0_276),
         res1_279 = t_of_sexp$11(arg1_277);
        return [2, res0_278, res1_279];
       }
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$0[1], tag_264, sexp_263);
     }
     var sexp_args_265 = match[2];
     if(sexp_args_265 && ! sexp_args_265[2]){
      var arg0_266 = sexp_args_265[1], res0_267 = t_of_sexp$4(arg0_266);
      return [0, res0_267];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context$0[1], tag_264, sexp_263);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$0[1], sexp_263);
   }
   caml_update_dummy(letrec_function_context$0, [0, error_source_261]);
   var Y = [0, cst_Basic], Z = [0, cst_Group], _ = [0, cst_Exec];
   function sexp_of_t$10(param){
    switch(param[0]){
      case 0:
       var arg0_280 = param[1], res0_281 = sexp_of_t$3(arg0_280);
       return [1, [0, Y, [0, res0_281, 0]]];
      case 1:
       var
        arg0_282 = param[1],
        res0_283 = sexp_of_t$5(sexp_of_t$10, arg0_282);
       return [1, [0, Z, [0, res0_283, 0]]];
      default:
       var
        arg1_285 = param[2],
        arg0_284 = param[1],
        res0_286 = sexp_of_t$7(arg0_284),
        res1_287 = sexp_of_t$10(arg1_285);
       return [1, [0, _, [0, res0_286, [0, res1_287, 0]]]];
    }
   }
   var stable_witness$8 = Stable_witness[6], letrec_function_context$1 = [];
   function t_of_sexp$12(sexp_292){
    a:
    {
     if(0 === sexp_292[0]){
      var a = sexp_292[1];
      b:
      if(a !== cst_Base){
       c:
       if(a !== cst_Exec){
        d:
        if(a !== cst_Group){
         if(a !== cst_Lazy){
          if(a === cst_base) break b;
          if(a === cst_exec) break c;
          if(a === cst_group) break d;
          if(a !== cst_lazy) break a;
         }
         return Sexplib0_Sexp_conv_error[9].call
                 (null, letrec_function_context$1[1], sexp_292);
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$1[1], sexp_292);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$1[1], sexp_292);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context$1[1], sexp_292);
     }
     var match = sexp_292[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$1[1], sexp_292);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$1[1], sexp_292);
     var tag_293 = match$0[1];
     b:
     if(tag_293 !== cst_Base){
      c:
      if(tag_293 !== cst_Exec){
       d:
       if(tag_293 !== cst_Group){
        if(tag_293 !== cst_Lazy){
         if(tag_293 === cst_base) break b;
         if(tag_293 === cst_exec) break c;
         if(tag_293 === cst_group) break d;
         if(tag_293 !== cst_lazy) break a;
        }
        var sexp_args_309 = match[2];
        if(sexp_args_309 && ! sexp_args_309[2]){
         var
          arg0_310 = sexp_args_309[1],
          res0_311 = t_of_sexp(t_of_sexp$12, arg0_310);
         return [3, res0_311];
        }
        return Sexplib0_Sexp_conv_error[8].call
                (null, letrec_function_context$1[1], tag_293, sexp_292);
       }
       var sexp_args_299 = match[2];
       if(sexp_args_299 && ! sexp_args_299[2]){
        var
         arg0_300 = sexp_args_299[1],
         res0_301 = t_of_sexp$6(t_of_sexp$12, arg0_300);
        return [1, res0_301];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$1[1], tag_293, sexp_292);
      }
      var sexp_args_304 = match[2];
      if(sexp_args_304 && ! sexp_args_304[2]){
       var arg0_305 = sexp_args_304[1], res0_306 = t_of_sexp$8(arg0_305);
       return [2, res0_306];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$1[1], tag_293, sexp_292);
     }
     var sexp_args_294 = match[2];
     if(sexp_args_294 && ! sexp_args_294[2]){
      var arg0_295 = sexp_args_294[1], res0_296 = t_of_sexp$4(arg0_295);
      return [0, res0_296];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context$1[1], tag_293, sexp_292);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$1[1], sexp_292);
   }
   caml_update_dummy(letrec_function_context$1, [0, error_source_290]);
   var
    $ = [0, cst_Base],
    aa = [0, cst_Group],
    ab = [0, cst_Exec],
    ac = [0, cst_Lazy];
   function sexp_of_t$11(param){
    switch(param[0]){
      case 0:
       var arg0_312 = param[1], res0_313 = sexp_of_t$3(arg0_312);
       return [1, [0, $, [0, res0_313, 0]]];
      case 1:
       var
        arg0_314 = param[1],
        res0_315 = sexp_of_t$5(sexp_of_t$11, arg0_314);
       return [1, [0, aa, [0, res0_315, 0]]];
      case 2:
       var arg0_316 = param[1], res0_317 = sexp_of_t$7(arg0_316);
       return [1, [0, ab, [0, res0_317, 0]]];
      default:
       var arg0_318 = param[1], res0_319 = sexp_of_t(sexp_of_t$11, arg0_318);
       return [1, [0, ac, [0, res0_319, 0]]];
    }
   }
   var letrec_function_context$2 = [];
   function t_of_sexp$13(sexp_324){
    a:
    {
     if(0 === sexp_324[0]){
      var a = sexp_324[1];
      b:
      if(a !== cst_Base){
       c:
       if(a !== cst_Exec){
        if(a !== cst_Group){
         if(a === cst_base) break b;
         if(a === cst_exec) break c;
         if(a !== cst_group) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$2[1], sexp_324);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$2[1], sexp_324);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context$2[1], sexp_324);
     }
     var match = sexp_324[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$2[1], sexp_324);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$2[1], sexp_324);
     var tag_325 = match$0[1];
     b:
     if(tag_325 !== cst_Base){
      c:
      if(tag_325 !== cst_Exec){
       if(tag_325 !== cst_Group){
        if(tag_325 === cst_base) break b;
        if(tag_325 === cst_exec) break c;
        if(tag_325 !== cst_group) break a;
       }
       var sexp_args_331 = match[2];
       if(sexp_args_331 && ! sexp_args_331[2]){
        var
         arg0_332 = sexp_args_331[1],
         res0_333 = t_of_sexp$7(t_of_sexp$13, arg0_332);
        return [1, res0_333];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$2[1], tag_325, sexp_324);
      }
      var sexp_args_336 = match[2];
      if(sexp_args_336 && ! sexp_args_336[2]){
       var arg0_337 = sexp_args_336[1], res0_338 = t_of_sexp$9(arg0_337);
       return [2, res0_338];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$2[1], tag_325, sexp_324);
     }
     var sexp_args_326 = match[2];
     if(sexp_args_326 && ! sexp_args_326[2]){
      var arg0_327 = sexp_args_326[1], res0_328 = t_of_sexp$4(arg0_327);
      return [0, res0_328];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context$2[1], tag_325, sexp_324);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$2[1], sexp_324);
   }
   caml_update_dummy(letrec_function_context$2, [0, error_source_322]);
   var ad = [0, cst_Base], ae = [0, cst_Group], af = [0, cst_Exec];
   function sexp_of_t$12(param){
    switch(param[0]){
      case 0:
       var arg0_339 = param[1], res0_340 = sexp_of_t$3(arg0_339);
       return [1, [0, ad, [0, res0_340, 0]]];
      case 1:
       var
        arg0_341 = param[1],
        res0_342 = sexp_of_t$6(sexp_of_t$12, arg0_341);
       return [1, [0, ae, [0, res0_342, 0]]];
      default:
       var arg0_343 = param[1], res0_344 = sexp_of_t$8(arg0_343);
       return [1, [0, af, [0, res0_344, 0]]];
    }
   }
   function to_latest$4(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, b];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$4))];
      default: var e = param[1]; return [2, a(to_latest$1, to_v3, e)];
    }
   }
   function of_latest$4(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var b$0 = param[1]; return [0, b$0];
       case 1:
        var g = param[1]; return [1, map$0(of_latest$0(g), of_latest$4)];
       case 2:
        var e = param[1]; return [2, b(of_v3, of_latest$1, e)];
       default:
        var thunk = param[1], a = caml_obj_tag(thunk);
        if(250 === a)
         param = thunk[1];
        else{
         if(246 !== a && 244 !== a){param = thunk; break;}
         param = CamlinternalLazy[2].call(null, thunk);
        }
     }
   }
   var letrec_function_context$3 = [];
   function t_of_sexp$14(sexp_349){
    a:
    {
     if(0 === sexp_349[0]){
      var a = sexp_349[1];
      b:
      if(a !== cst_Base){
       c:
       if(a !== cst_Exec){
        if(a !== cst_Group){
         if(a === cst_base) break b;
         if(a === cst_exec) break c;
         if(a !== cst_group) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$3[1], sexp_349);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$3[1], sexp_349);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context$3[1], sexp_349);
     }
     var match = sexp_349[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$3[1], sexp_349);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$3[1], sexp_349);
     var tag_350 = match$0[1];
     b:
     if(tag_350 !== cst_Base){
      c:
      if(tag_350 !== cst_Exec){
       if(tag_350 !== cst_Group){
        if(tag_350 === cst_base) break b;
        if(tag_350 === cst_exec) break c;
        if(tag_350 !== cst_group) break a;
       }
       var sexp_args_356 = match[2];
       if(sexp_args_356 && ! sexp_args_356[2]){
        var
         arg0_357 = sexp_args_356[1],
         res0_358 = t_of_sexp$7(t_of_sexp$14, arg0_357);
        return [1, res0_358];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$3[1], tag_350, sexp_349);
      }
      var sexp_args_361 = match[2];
      if(sexp_args_361 && ! sexp_args_361[2]){
       var arg0_362 = sexp_args_361[1], res0_363 = t_of_sexp$10(arg0_362);
       return [2, res0_363];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$3[1], tag_350, sexp_349);
     }
     var sexp_args_351 = match[2];
     if(sexp_args_351 && ! sexp_args_351[2]){
      var arg0_352 = sexp_args_351[1], res0_353 = t_of_sexp$5(arg0_352);
      return [0, res0_353];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context$3[1], tag_350, sexp_349);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$3[1], sexp_349);
   }
   caml_update_dummy(letrec_function_context$3, [0, error_source_347]);
   var
    ag = [0, cst_Base],
    ah = [0, cst_Group],
    ai = [0, cst_Exec],
    aj = [0, cst_V1],
    ak = [0, cst_V2],
    al = [0, cst_V3];
   function sexp_of_t$13(param){
    switch(param[0]){
      case 0:
       var arg0_364 = param[1], res0_365 = sexp_of_t$4(arg0_364);
       return [1, [0, ag, [0, res0_365, 0]]];
      case 1:
       var
        arg0_366 = param[1],
        res0_367 = sexp_of_t$6(sexp_of_t$13, arg0_366);
       return [1, [0, ah, [0, res0_367, 0]]];
      default:
       var arg0_368 = param[1], res0_369 = sexp_of_t$9(arg0_368);
       return [1, [0, ai, [0, res0_369, 0]]];
    }
   }
   function to_latest$5(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, to_latest(b)];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$5))];
      default: var e = param[1]; return [2, c(to_latest$2, to_v2, e)];
    }
   }
   function of_latest$5(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var b = param[1]; return [0, of_latest(b)];
       case 1:
        var g = param[1]; return [1, map$0(of_latest$0(g), of_latest$5)];
       case 2:
        var e = param[1]; return [2, d(of_v2, of_latest$2, e)];
       default:
        var thunk = param[1], a = caml_obj_tag(thunk);
        if(250 === a)
         param = thunk[1];
        else{
         if(246 !== a && 244 !== a){param = thunk; break;}
         param = CamlinternalLazy[2].call(null, thunk);
        }
     }
   }
   function t_of_sexp$15(sexp_374){
    a:
    {
     if(0 === sexp_374[0]){
      var a = sexp_374[1];
      b:
      if(a !== cst_V1){
       c:
       if(a !== cst_V2){
        if(a !== cst_V3){
         if(a === cst_v1) break b;
         if(a === cst_v2) break c;
         if(a !== cst_v3) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, error_source_372, sexp_374);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_372, sexp_374);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_372, sexp_374);
     }
     var match = sexp_374[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_372, sexp_374);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_372, sexp_374);
     var tag_375 = match$0[1];
     b:
     if(tag_375 !== cst_V1){
      c:
      if(tag_375 !== cst_V2){
       if(tag_375 !== cst_V3){
        if(tag_375 === cst_v1) break b;
        if(tag_375 === cst_v2) break c;
        if(tag_375 !== cst_v3) break a;
       }
       var sexp_args_386 = match[2];
       if(sexp_args_386 && ! sexp_args_386[2]){
        var arg0_387 = sexp_args_386[1], res0_388 = t_of_sexp$12(arg0_387);
        return [2, res0_388];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, error_source_372, tag_375, sexp_374);
      }
      var sexp_args_381 = match[2];
      if(sexp_args_381 && ! sexp_args_381[2]){
       var arg0_382 = sexp_args_381[1], res0_383 = t_of_sexp$13(arg0_382);
       return [1, res0_383];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_372, tag_375, sexp_374);
     }
     var sexp_args_376 = match[2];
     if(sexp_args_376 && ! sexp_args_376[2]){
      var arg0_377 = sexp_args_376[1], res0_378 = t_of_sexp$14(arg0_377);
      return [0, res0_378];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_372, tag_375, sexp_374);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_372, sexp_374);
   }
   function sexp_of_t$14(param){
    switch(param[0]){
      case 0:
       var arg0_389 = param[1], res0_390 = sexp_of_t$13(arg0_389);
       return [1, [0, aj, [0, res0_390, 0]]];
      case 1:
       var arg0_391 = param[1], res0_392 = sexp_of_t$12(arg0_391);
       return [1, [0, ak, [0, res0_392, 0]]];
      default:
       var arg0_393 = param[1], res0_394 = sexp_of_t$11(arg0_393);
       return [1, [0, al, [0, res0_394, 0]]];
    }
   }
   function v1(v0){return [0, v0];}
   function v2(v0){return [1, v0];}
   function v3(v0){return [2, v0];}
   var
    v1$0 = [0, cst_V1, 0, v1],
    v2$0 = [0, cst_V2, 1, v2],
    v3$0 = [0, cst_V3, 2, v3];
   function of_versioned(param){
    switch(param[0]){
      case 0:
       var t = param[1]; return to_latest$5(t);
      case 1:
       var t$0 = param[1]; return to_latest$4(t$0);
      default: var t$1 = param[1]; return t$1;
    }
   }
   function compare$7(a_395$0, b_396$0){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        var a_395 = a_395$0, b_396 = b_396$0;
        e:
        for(;;){
         if(a_395 === b_396) return 0;
         if(typeof a_395 === "number")
          return typeof b_396 === "number" ? 0 : -1;
         switch(a_395[0]){
           case 0:
            var a_397 = a_395[1];
            if(typeof b_396 === "number") break a;
            if(0 !== b_396[0]) return -1;
            var b_398 = b_396[1];
            return Base[195].call(null, a_397, b_398);
           case 1:
            var a_399 = a_395[1];
            if(typeof b_396 === "number") break a;
            switch(b_396[0]){
              case 1:
               var b_400 = b_396[1]; a_395 = a_399; b_396 = b_400; break;
              case 0:
               break b;
              default: return -1;
            }
            break;
           case 2:
            var a_401 = a_395[1];
            if(typeof b_396 === "number") break a;
            switch(b_396[0]){
              case 2:
               var b_402 = b_396[1]; a_395 = a_401; b_396 = b_402; break;
              case 0:
               break b;
              case 1:
               break c;
              default: return -1;
            }
            break;
           case 3:
            break e;
           default:
            var a_407 = a_395[1];
            if(typeof b_396 === "number") break a;
            switch(b_396[0]){
              case 3:
               return 1;
              case 4:
               var b_408 = b_396[1];
               return Base[195].call(null, a_407, b_408);
              case 0:
               break b;
              case 1:
               break c;
              default: break d;
            }
         }
        }
        var a_403 = a_395[1];
        if(typeof b_396 === "number") break a;
        switch(b_396[0]){
          case 3:
           var b_404 = b_396[1];
           return Base[159].call
                   (null,
                    function(a_405, b_406){return compare$7(a_405, b_406);},
                    a_403,
                    b_404);
          case 4:
           return -1;
          case 0:
           break b;
          case 1:
           break c;
        }
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   var letrec_function_context$4 = [];
   function t_of_sexp$16(sexp_413){
    a:
    {
     if(0 === sexp_413[0]){
      var a = sexp_413[1], b = caml_string_compare(a, cst_ad_hoc);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= b){
            if(0 < b){
             if(a === cst_concat) break f;
             if(a === cst_many) break e;
             if(a === cst_maybe) break d;
             if(a === cst_one) break c;
             if(a !== cst_zero) break a;
             break b;
            }
           }
           else if(a !== cst_Ad_hoc){
            if(a === cst_Concat) break f;
            if(a === cst_Many) break e;
            if(a === cst_Maybe) break d;
            if(a === cst_One) break c;
            if(a !== cst_Zero) break a;
            break b;
           }
           return Sexplib0_Sexp_conv_error[9].call
                   (null, letrec_function_context$4[1], sexp_413);
          }
          return Sexplib0_Sexp_conv_error[9].call
                  (null, letrec_function_context$4[1], sexp_413);
         }
         return Sexplib0_Sexp_conv_error[9].call
                 (null, letrec_function_context$4[1], sexp_413);
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$4[1], sexp_413);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$4[1], sexp_413);
      }
      return 0;
     }
     var match = sexp_413[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$4[1], sexp_413);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$4[1], sexp_413);
     var tag_414 = match$0[1], c = caml_string_compare(tag_414, cst_ad_hoc);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= c){
           if(0 < c){
            if(tag_414 === cst_concat) break f;
            if(tag_414 === cst_many) break e;
            if(tag_414 === cst_maybe) break d;
            if(tag_414 === cst_one) break c;
            if(tag_414 !== cst_zero) break a;
            break b;
           }
          }
          else if(tag_414 !== cst_Ad_hoc){
           if(tag_414 === cst_Concat) break f;
           if(tag_414 === cst_Many) break e;
           if(tag_414 === cst_Maybe) break d;
           if(tag_414 === cst_One) break c;
           if(tag_414 !== cst_Zero) break a;
           break b;
          }
          var sexp_args_435 = match[2];
          if(sexp_args_435 && ! sexp_args_435[2]){
           var
            arg0_436 = sexp_args_435[1],
            res0_437 = Base[201].call(null, arg0_436);
           return [4, res0_437];
          }
          return Sexplib0_Sexp_conv_error[8].call
                  (null, letrec_function_context$4[1], tag_414, sexp_413);
         }
         var sexp_args_430 = match[2];
         if(sexp_args_430 && ! sexp_args_430[2]){
          var
           arg0_431 = sexp_args_430[1],
           res0_432 = Base[164].call(null, t_of_sexp$16, arg0_431);
          return [3, res0_432];
         }
         return Sexplib0_Sexp_conv_error[8].call
                 (null, letrec_function_context$4[1], tag_414, sexp_413);
        }
        var sexp_args_420 = match[2];
        if(sexp_args_420 && ! sexp_args_420[2]){
         var arg0_421 = sexp_args_420[1], res0_422 = t_of_sexp$16(arg0_421);
         return [1, res0_422];
        }
        return Sexplib0_Sexp_conv_error[8].call
                (null, letrec_function_context$4[1], tag_414, sexp_413);
       }
       var sexp_args_425 = match[2];
       if(sexp_args_425 && ! sexp_args_425[2]){
        var arg0_426 = sexp_args_425[1], res0_427 = t_of_sexp$16(arg0_426);
        return [2, res0_427];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$4[1], tag_414, sexp_413);
      }
      var sexp_args_415 = match[2];
      if(sexp_args_415 && ! sexp_args_415[2]){
       var
        arg0_416 = sexp_args_415[1],
        res0_417 = Base[201].call(null, arg0_416);
       return [0, res0_417];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$4[1], tag_414, sexp_413);
     }
     return Sexplib0_Sexp_conv_error[7].call
             (null, letrec_function_context$4[1], sexp_413);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$4[1], sexp_413);
   }
   caml_update_dummy(letrec_function_context$4, [0, error_source_411]);
   var
    an = [0, cst_Zero],
    ao = [0, cst_One],
    ap = [0, cst_Many],
    aq = [0, cst_Maybe],
    ar = [0, cst_Concat],
    as = [0, cst_Ad_hoc],
    at = [0, cst_Usage],
    au = [0, cst_Grammar];
   function sexp_of_t$15(param){
    if(typeof param === "number") return an;
    switch(param[0]){
      case 0:
       var arg0_438 = param[1], res0_439 = Base[202].call(null, arg0_438);
       return [1, [0, ao, [0, res0_439, 0]]];
      case 1:
       var arg0_440 = param[1], res0_441 = sexp_of_t$15(arg0_440);
       return [1, [0, ap, [0, res0_441, 0]]];
      case 2:
       var arg0_442 = param[1], res0_443 = sexp_of_t$15(arg0_442);
       return [1, [0, aq, [0, res0_443, 0]]];
      case 3:
       var
        arg0_444 = param[1],
        res0_445 = Base[165].call(null, sexp_of_t$15, arg0_444);
       return [1, [0, ar, [0, res0_445, 0]]];
      default:
       var arg0_446 = param[1], res0_447 = Base[202].call(null, arg0_446);
       return [1, [0, as, [0, res0_447, 0]]];
    }
   }
   function compare$8(a_448, b_449){
    if(a_448 === b_449) return 0;
    if(0 === a_448[0]){
     var a_450 = a_448[1];
     if(0 !== b_449[0]) return -1;
     var b_451 = b_449[1];
     return Base[195].call(null, a_450, b_451);
    }
    var a_452 = a_448[1];
    if(0 === b_449[0]) return 1;
    var b_453 = b_449[1];
    return compare$7(a_452, b_453);
   }
   function t_of_sexp$17(sexp_458){
    a:
    {
     if(0 === sexp_458[0]){
      var a = sexp_458[1];
      b:
      if(a !== cst_Grammar){
       if(a !== cst_Usage){
        if(a === cst_grammar) break b;
        if(a !== cst_usage$0) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_456, sexp_458);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_456, sexp_458);
     }
     var match = sexp_458[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_456, sexp_458);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_456, sexp_458);
     var tag_459 = match$0[1];
     b:
     if(tag_459 !== cst_Grammar){
      if(tag_459 !== cst_Usage){
       if(tag_459 === cst_grammar) break b;
       if(tag_459 !== cst_usage$0) break a;
      }
      var sexp_args_460 = match[2];
      if(sexp_args_460 && ! sexp_args_460[2]){
       var
        arg0_461 = sexp_args_460[1],
        res0_462 = Base[201].call(null, arg0_461);
       return [0, res0_462];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_456, tag_459, sexp_458);
     }
     var sexp_args_465 = match[2];
     if(sexp_args_465 && ! sexp_args_465[2]){
      var arg0_466 = sexp_args_465[1], res0_467 = t_of_sexp$16(arg0_466);
      return [1, res0_467];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_456, tag_459, sexp_458);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_456, sexp_458);
   }
   function sexp_of_t$16(param){
    if(0 === param[0]){
     var arg0_468 = param[1], res0_469 = Base[202].call(null, arg0_468);
     return [1, [0, at, [0, res0_469, 0]]];
    }
    var arg0_470 = param[1], res0_471 = sexp_of_t$15(arg0_470);
    return [1, [0, au, [0, res0_471, 0]]];
   }
   function compare$9(a_472, b_473){
    if(a_472 === b_473) return 0;
    var n = Base[98].call(null, a_472[1], b_473[1]);
    return 0 === n ? Base[98].call(null, a_472[2], b_473[2]) : n;
   }
   function loop(acc$1, enumerate_478$0, enumerate_479$0){
    var
     acc = acc$1,
     enumerate_478 = enumerate_478$0,
     enumerate_479 = enumerate_479$0;
    for(;;){
     if(! enumerate_479) return Stdlib_List[10].call(null, acc);
     if(enumerate_478){
      var
       enumerate_477 = enumerate_479[1],
       enumerate_480 = enumerate_478[2],
       enumerate_476 = enumerate_478[1],
       acc$0 = [0, [0, enumerate_476, enumerate_477], acc];
      acc = acc$0;
      enumerate_478 = enumerate_480;
     }
     else{
      var enumerate_480$0 = enumerate_479[2];
      enumerate_478 = enumerate_474;
      enumerate_479 = enumerate_480$0;
     }
    }
   }
   var
    all = loop(0, enumerate_474, enumerate_475),
    av = [0, "at_most_once"],
    aw = [0, "at_least_once"];
   function sexp_of_t$17(param){
    var
     at_most_once_484 = param[2],
     at_least_once_482 = param[1],
     arg_485 = Base[105].call(null, at_most_once_484),
     bnds_481 = [0, [1, [0, av, [0, arg_485, 0]]], 0],
     arg_483 = Base[105].call(null, at_least_once_482),
     bnds_481$0 = [0, [1, [0, aw, [0, arg_483, 0]]], bnds_481];
    return [1, bnds_481$0];
   }
   function to_help_string(t, flag_name){
    var
     at_most_once = t[2],
     at_least_once = t[1],
     description =
       at_least_once
        ? flag_name
        : Base_String
           [68].call
          (null,
           0,
           [0,
            maybe_missing_prefix,
            [0, flag_name, [0, maybe_missing_suffix, 0]]]);
    return at_most_once
            ? description
            : Base_String
               [68].call
              (null, 0, [0, description, [0, maybe_more_suffix, 0]]);
   }
   function of_help_string(name){
    var match = Base_String[116].call(null, name, maybe_more_suffix);
    if(match)
     var name$0 = match[1], name$1 = name$0, at_most_once = 0;
    else
     var name$1 = name, at_most_once = 1;
    var
     a = Base_String[116],
     b = Base_String[117].call(null, name$1, maybe_missing_prefix),
     match$0 =
       caml_call2
        (Base_Option[22], b, function(b){return a(b, maybe_missing_suffix);});
    if(match$0)
     var name$2 = match$0[1], name$3 = name$2, at_least_once = 0;
    else
     var name$3 = name$1, at_least_once = 1;
    return [0, [0, at_least_once, at_most_once], name$3];
   }
   var
    aZ = [0, cst_Base],
    a0 = [0, cst_Group],
    a1 = [0, cst_Exec],
    a2 = [0, cst_Lazy],
    aY = [0, 0, 0],
    aV = [0, cst_Basic],
    aW = [0, cst_Group],
    aX = [0, cst_Exec],
    aQ = [0, cst_child_subcommand$1],
    aR = [0, cst_path_to_exe$3],
    aS = [0, cst_working_dir$2],
    aT = [0, cst_readme$9],
    aU = [0, cst_summary$9],
    cst_child_subcommand$0 = cst_child_subcommand$1,
    cst_path_to_exe$2 = cst_path_to_exe$3,
    cst_working_dir$1 = cst_working_dir$2,
    cst_readme$8 = cst_readme$9,
    cst_summary$8 = cst_summary$9,
    cst_Subcommands_must_not_begin = "Subcommands must not begin with '-'",
    aN = [0, cst_subcommands$2],
    aO = [0, cst_readme$9],
    aP = [0, cst_summary$9],
    cst_subcommands$1 = cst_subcommands$2,
    cst_readme$7 = cst_readme$9,
    cst_summary$7 = cst_summary$9,
    cst_Flags_must_begin_with = "Flags must begin with '-'",
    aJ = [0, cst_flags$2],
    aK = [0, cst_anons$1],
    aL = [0, cst_readme$9],
    aM = [0, cst_summary$9],
    cst_flags$1 = cst_flags$2,
    cst_anons$0 = cst_anons$1,
    cst_readme$6 = cst_readme$9,
    cst_summary$6 = cst_summary$9,
    aE = [0, cst$6],
    cst_Key_type_s_is_an_ambiguous =
      "%{Key_type} %s is an ambiguous prefix: %s",
    aF = [12, 32, [2, 0, [11, " is an ambiguous prefix: ", [2, 0, 0]]]],
    aG = [0, 0],
    cst_unknown_Key_type_s = "unknown %{Key_type} %s",
    aH = [12, 32, [2, 0, 0]],
    aI = [0, 0],
    cst_unknown = "unknown ",
    cst_flag = "flag",
    cst_subcommand = "subcommand",
    aD = [0, cst$6],
    aA = [0, [0, "\n", 0], 0],
    cst_Unable_to_parse = "Unable to parse",
    ax = [0, cst_aliases$1],
    ay = [0, cst_doc$1],
    az = [0, cst_name$1],
    cst_aliases$0 = cst_aliases$1,
    cst_doc$0 = cst_doc$1,
    cst_name$0 = cst_name$1,
    a4 = [0, cst_command_src_shape_ml$0, 414, 6],
    a3 = [0, cst_command_src_shape_ml$0, 415, 6],
    cst_unsupported_version_to_use = "unsupported version_to_use",
    am = [0, [0, cst_command_src_shape_ml$0, 336, 8993, 9011]],
    a5 =
      [0,
       [0,
        [0,
         '\n      (((at_least_once false) (at_most_once false)) "[name] ...")\n      (((at_least_once true) (at_most_once false)) "name ...")\n      (((at_least_once false) (at_most_once true)) [name])\n      (((at_least_once true) (at_most_once true)) name)\n      ',
         [0, cst$7]],
        [0, 11098, 11104, 11359]]],
    a6 = [0, 11085, 11089, 11360],
    a9 = [0, "to_help_string"],
    ba = [0, 10743, 10745, 11360],
    bb = [0, 11351, 11360, 11360],
    bc = [0, 10743, 10745, 11360],
    cst_command_src_shape_ml = cst_command_src_shape_ml$0,
    cst_command = cst_command$0,
    cst_Command_Shape = cst_Command_Shape$0;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       Ppx_expect_runtime_Test_block[1].call(null, Expect_test_config),
     a7 =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], a6, a5),
     a8 = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), a7], 0],
     a_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     a$ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_command_src_shape_ml,
      408,
      bc,
      bb,
      ba,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      a$,
      a_,
      a9,
      0,
      Inline_test_config,
      a8,
      function(param){
       Base_List[19].call
        (null,
         all,
         function(x_486){
          var
           s = to_help_string(x_486, flag_name$0),
           a = [0, Sexplib0_Sexp_conv[7].call(null, s), 0],
           b = [1, [0, sexp_of_t$17(x_486), a]];
          Command_Import[3].call(null, 0, b);
          var
           match = of_help_string(s),
           flag_name = match[2],
           x_487 = match[1],
           c = 0 === compare$9(x_486, x_487) ? 1 : 0;
          if(! c)
           throw caml_maybe_attach_backtrace([0, Assert_failure, a4], 1);
          var d = 0 === Base[195].call(null, flag_name$0, flag_name) ? 1 : 0;
          if(d) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, a3], 1);
         });
       var a = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
       return caml_call1(Ppx_expect_test_block[2], a);
      });
   }
   function compare$10(a_494, b_495){
    if(a_494 === b_495) return 0;
    var n = Base[195].call(null, a_494[1], b_495[1]);
    if(0 !== n) return n;
    var n$0 = Base[195].call(null, a_494[2], b_495[2]);
    return 0 === n$0
            ? Base
               [159].call
              (null,
               function(a_496, b_497){
                return Base[195].call(null, a_496, b_497);
               },
               a_494[3],
               b_495[3])
            : n$0;
   }
   function aliases(r){return r[3];}
   function doc(r){return r[2];}
   function name(r){return r[1];}
   function t_of_sexp$18(x_500){
    var a = Base[201], b = Base[164];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_499,
             [0,
              cst_name$0,
              1,
              Base[201],
              [0,
               cst_doc$0,
               1,
               Base[201],
               [0, cst_aliases$0, 1, function(c){return b(a, c);}, 0]]],
             function(param){
              return param !== cst_aliases$1
                      ? param !== cst_doc$1 ? param !== cst_name$1 ? -1 : 0 : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               aliases = a[2][1],
               doc = a[1],
               name = param[1];
              return [0, name, doc, aliases];
             },
             x_500);
   }
   function sexp_of_t$18(param){
    var
     aliases_506 = param[3],
     doc_504 = param[2],
     name_502 = param[1],
     arg_507 = Base[165].call(null, Base[202], aliases_506),
     bnds_501 = [0, [1, [0, ax, [0, arg_507, 0]]], 0],
     arg_505 = Base[202].call(null, doc_504),
     bnds_501$0 = [0, [1, [0, ay, [0, arg_505, 0]]], bnds_501],
     arg_503 = Base[202].call(null, name_502),
     bnds_501$1 = [0, [1, [0, az, [0, arg_503, 0]]], bnds_501$0];
    return [1, bnds_501$1];
   }
   function parse_name(t){
    var
     match = of_help_string(t[1]),
     flag_name = match[2],
     num_occurrences = match[1],
     match$0 = Base_String[102].call(null, flag_name, 32);
    if(match$0){
     var match$1 = match$0[2], flag_name$0 = match$0[1];
     if(! match$1) return [0, [0, num_occurrences, 0, flag_name$0]];
     if(! match$1[2]) return [0, [0, num_occurrences, 1, flag_name$0]];
    }
    var
     a = [0, Sexplib0_Sexp_conv[7].call(null, flag_name), 0],
     b = [1, [0, Sexplib0_Sexp_conv[7].call(null, cst_Unable_to_parse), a]];
    return [1, Base_Error[20].call(null, b)];
   }
   function flag_name(t){
    var a = parse_name(t);
    return caml_call2
            (Base_Or_error[47],
             a,
             function(param){var flag_name = param[3]; return flag_name;});
   }
   function num_occurrences(t){
    var a = parse_name(t);
    return caml_call2
            (Base_Or_error[47],
             a,
             function(param){
              var num_occurrences = param[1];
              return num_occurrences;
             });
   }
   function requires_arg(t){
    var a = parse_name(t);
    return caml_call2
            (Base_Or_error[47],
             a,
             function(param){
              var requires_arg = param[2];
              return requires_arg;
             });
   }
   function help_screen_compare(a, b){
    return b !== cst_help
            ? a
              !== cst_help
              ? b
                !== cst_version
                ? a
                  !== cst_version
                  ? b
                    !== cst_build_info
                    ? a
                      !== cst_build_info
                      ? b
                        !== cst_help$0
                        ? a
                          !== cst_help$0
                          ? b !== cst_version$0 ? a !== cst_version$0 ? 0 : 1 : -1
                          : 1
                        : -1
                      : 1
                    : -1
                  : 1
                : -1
              : 1
            : -1;
   }
   function sort(t){
    return Base_List[84].call
            (null, t, function(a, b){return help_screen_compare(a[1], b[1]);});
   }
   function word_wrap_and_strip(text, width){
    var chunks = Base_String[102].call(null, text, 10);
    return Base_List[14].call
            (null,
             chunks,
             function(text){
              var
               a = Base_String[102].call(null, text, 32),
               words =
                 Base_List[12].call
                  (null,
                   a,
                   function(word){return 1 - Base_String[14].call(null, word);}),
               match =
                 Base_List[20].call
                  (null,
                   words,
                   0,
                   function(acc, word){
                    if(acc)
                     var
                      match = acc[1],
                      line = match[2],
                      lines = match[1],
                      b = Base[241].call(null, cst$1, word),
                      line_and_word = Base[241].call(null, line, b),
                      a =
                        caml_ml_string_length(line_and_word) <= width
                         ? [0, lines, line_and_word]
                         : [0, [0, line, lines], word];
                    else
                     var a = [0, 0, word];
                    return [0, a];
                   });
              if(! match) return 0;
              var match$0 = match[1], line = match$0[2], lines = match$0[1];
              return Base_List[63].call(null, [0, line, lines]);
             });
   }
   function spaces_string(width){
    return Base_String[66].call(null, width, 32);
   }
   function pad_spaces_to_suffix(x, width){
    var
     slack = width - caml_ml_string_length(x) | 0,
     a = spaces_string(slack);
    return Base[241].call(null, x, a);
   }
   function indent_and_newline(x){
    return Base_List[11].call(null, [0, [0, indentation, 0], [0, x, aA]]);
   }
   var dot_indentation_offset = 27, lhs_pad = spaces_string(29);
   function aB(v){return indent_and_newline([0, lhs_pad, [0, v, 0]]);}
   var aC = Base_List[53];
   function rows(flag_name_with_aliases, documentation){
    var
     flag_width = 2 + caml_ml_string_length(flag_name_with_aliases) | 0,
     flag_on_its_own_line =
       29 <= flag_width
        ? indent_and_newline([0, flag_name_with_aliases, 0])
        : indent_and_newline
          ([0,
            pad_spaces_to_suffix
             (flag_name_with_aliases, dot_indentation_offset),
            [0, spacing_dot, 0]]),
     wrapped_documentation = word_wrap_and_strip(documentation, 49);
    if(! wrapped_documentation) return [0, flag_on_its_own_line, 0];
    var
     doc_wrapped_rest_lines = wrapped_documentation[2],
     doc_wrapped_first_line = wrapped_documentation[1],
     wrapped_doc_lines = aC(doc_wrapped_rest_lines, aB);
    function prefix_doc_wrapped_first_line_(x){
     return indent_and_newline
             ([0,
               pad_spaces_to_suffix(x, dot_indentation_offset),
               [0, spacing_dot, [0, doc_wrapped_first_line, 0]]]);
    }
    return 27 <= caml_ml_string_length(flag_name_with_aliases)
            ? [0,
              flag_on_its_own_line,
              [0, prefix_doc_wrapped_first_line_(cst$2), wrapped_doc_lines]]
            : [0,
              prefix_doc_wrapped_first_line_(flag_name_with_aliases),
              wrapped_doc_lines];
   }
   function to_string(t){
    var
     a =
       Base_List[14].call
        (null,
         t,
         function(t){
          var
           flag = t[1],
           flag_name_with_aliases =
             Base_String[68].call(null, aD, [0, flag, t[3]]),
           a = rows(flag_name_with_aliases, t[2]);
          return Base_List[11].call(null, a);
         });
    return Base_String[68].call(null, 0, a);
   }
   function to_string$0(param){return param ? cst_flag : cst_subcommand;}
   var Key_type = [0, to_string$0];
   function lookup_expand(alist, prefix, key_type){
    var c = 45, d = Base_Char[16];
    function is_dash(a){return d(c, a);}
    var
     alist$0 =
       Base_String[20].call(null, prefix, is_dash)
        ? Base_List
           [53].call
          (null,
           alist,
           function(param){
            var data = param[2][1], key = param[1];
            return [0, key, [0, data, -461087063]];
           })
        : alist,
     matches =
       Base_List[12].call
        (null,
         alist$0,
         function(param){
          var key = param[1];
          return -461087063 <= param[2][2]
                  ? Base_String[47].call(null, key, prefix)
                  : Base_String[97].call(null, key, prefix);
         });
    if(! matches)
     return [1,
             caml_call2
              (Command_Import[7].call
                (null,
                 [0,
                  [11,
                   cst_unknown,
                   [24,
                    aI,
                    function(param, custom_printf_508){
                     return to_string$0(custom_printf_508);
                    },
                    aH]],
                  cst_unknown_Key_type_s]),
               key_type,
               prefix)];
    if(! matches[2]){
     var b = matches[1], data$0 = b[2][1], key$0 = b[1];
     return [0, [0, key$0, data$0]];
    }
    var
     match =
       Base_List[27].call
        (null,
         matches,
         function(param){
          var key = param[1];
          return Base_String[47].call(null, key, prefix);
         });
    if(match){
     var a = match[1], data = a[2][1], key = a[1];
     return [0, [0, key, data]];
    }
    var
     matching_keys = Base_List[53].call(null, matches, Base[242]),
     e = Base_String[68].call(null, aE, matching_keys);
    return [1,
            caml_call3
             (Command_Import[7].call
               (null,
                [0,
                 [24,
                  aG,
                  function(param, custom_printf_509){
                   return to_string$0(custom_printf_509);
                  },
                  aF],
                 cst_Key_type_s_is_an_ambiguous]),
              key_type,
              prefix,
              e)];
   }
   function compare$11(a_510, b_511){
    if(a_510 === b_511) return 0;
    var n = Base[195].call(null, a_510[1], b_511[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[178],
         function(a_512, b_513){return Base[195].call(null, a_512, b_513);},
         a_510[2],
         b_511[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare$8(a_510[3], b_511[3]);
    return 0 === n$1
            ? Base
               [159].call
              (null,
               function(a_514, b_515){return compare$10(a_514, b_515);},
               a_510[4],
               b_511[4])
            : n$1;
   }
   function flags(r){return r[4];}
   function anons(r){return r[3];}
   function readme(r){return r[2];}
   function summary(r){return r[1];}
   function t_of_sexp$19(x_518){
    var a = Base[164];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_517,
             [0,
              cst_summary$6,
              1,
              Base[201],
              [0,
               cst_readme$6,
               5,
               Base[201],
               [0,
                cst_anons$0,
                1,
                t_of_sexp$17,
                [0,
                 cst_flags$1,
                 1,
                 function(b){return a(t_of_sexp$18, b);},
                 0]]]],
             function(param){
              return param !== cst_anons$1
                      ? param
                        !== cst_flags$2
                        ? param
                          !== cst_readme$9
                          ? param !== cst_summary$9 ? -1 : 0
                          : 1
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               flags = b[2][1],
               anons = b[1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, anons, flags];
             },
             x_518);
   }
   function sexp_of_t$19(param){
    var
     flags_528 = param[4],
     anons_526 = param[3],
     readme_522 = param[2],
     summary_520 = param[1],
     arg_529 = Base[165].call(null, sexp_of_t$18, flags_528),
     bnds_519 = [0, [1, [0, aJ, [0, arg_529, 0]]], 0],
     arg_527 = sexp_of_t$16(anons_526),
     bnds_519$0 = [0, [1, [0, aK, [0, arg_527, 0]]], bnds_519];
    if(readme_522)
     var
      v_523 = readme_522[1],
      arg_525 = Base[202].call(null, v_523),
      bnd_524 = [1, [0, aL, [0, arg_525, 0]]],
      bnds_519$1 = [0, bnd_524, bnds_519$0];
    else
     var bnds_519$1 = bnds_519$0;
    var
     arg_521 = Base[202].call(null, summary_520),
     bnds_519$2 = [0, [1, [0, aM, [0, arg_521, 0]]], bnds_519$1];
    return [1, bnds_519$2];
   }
   function find_flag(t, prefix){
    if(Base_String[97].call(null, prefix, cst$3)){
     var
      a =
        Base_List[53].call
         (null,
          t[4],
          function(flag_info){
           var a = flag_name(flag_info);
           return caml_call2
                   (Base_Or_error[28][4][2],
                    a,
                    function(flag_name){
                     return [0,
                             Base_List[53].call
                              (null,
                               [0, flag_name, flag_info[3]],
                               function(key){return [0, key, [0, flag_info, -481604174]];})];
                    });
          }),
      b = Base_Or_error[50].call(null, a);
     return caml_call2
             (Base_Or_error[28][4][2],
              b,
              function(choices){
               var
                a = Base[243],
                b = Base_Error[14],
                c =
                  lookup_expand(Base_List[11].call(null, choices), prefix, 1),
                d = Base_Result[34].call(null, c, b);
               return caml_call2(Base_Or_error[47], d, a);
              });
    }
    var
     c = [0, Sexplib0_Sexp_conv[7].call(null, prefix), 0],
     d =
       [1,
        [0, Sexplib0_Sexp_conv[7].call(null, cst_Flags_must_begin_with), c]];
    return [1, Base_Error[20].call(null, d)];
   }
   function get_usage(t){
    var match = t[3];
    if(0 === match[0]){var usage$0 = match[1]; return usage$0;}
    var grammar = match[1];
    return usage(grammar);
   }
   function compare$12(cmp_a, a_532, b_533){
    if(a_532 === b_533) return 0;
    var n = Base[195].call(null, a_532[1], b_533[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[178],
         function(a_534, b_535){return Base[195].call(null, a_534, b_535);},
         a_532[2],
         b_533[2]);
    return 0 === n$0
            ? Base_Lazy
               [1].call
              (null,
               function(a_536, b_537){
                return Base_List[1].call
                        (null,
                         function(a_538, b_539){
                          var
                           t_541 = a_538[2],
                           t_540 = a_538[1],
                           t_543 = b_539[2],
                           t_542 = b_539[1],
                           n = Base[195].call(null, t_540, t_542);
                          return 0 === n ? caml_call2(cmp_a, t_541, t_543) : n;
                         },
                         a_536,
                         b_537);
               },
               a_532[3],
               b_533[3])
            : n$0;
   }
   function subcommands(r){return r[3];}
   function readme$0(r){return r[2];}
   function summary$0(r){return r[1];}
   function t_of_sexp$20(of_a_544, x_552){
    function a(sexp_551){
     if(0 !== sexp_551[0]){
      var a = sexp_551[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         arg1_548 = b[1],
         arg0_547 = a[1],
         res0_549 = Base[201].call(null, arg0_547),
         res1_550 = caml_call1(of_a_544, arg1_548);
        return [0, res0_549, res1_550];
       }
      }
     }
     return Sexplib0_Sexp_conv_error[4].call
             (null, error_source_546, 2, sexp_551);
    }
    var b = Base_List[5];
    function c(c){return b(a, c);}
    var d = Base_Lazy[7];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_546,
             [0,
              cst_summary$7,
              1,
              Base[201],
              [0,
               cst_readme$7,
               5,
               Base[201],
               [0, cst_subcommands$1, 1, function(a){return d(c, a);}, 0]]],
             function(param){
              return param !== cst_readme$9
                      ? param
                        !== cst_subcommands$2
                        ? param !== cst_summary$9 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               a = param[2],
               subcommands = a[2][1],
               readme = a[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_552);
   }
   function sexp_of_t$20(of_a_553, param){
    var
     subcommands_561 = param[3],
     readme_557 = param[2],
     summary_555 = param[1];
    function a(param){
     var
      arg1_564 = param[2],
      arg0_563 = param[1],
      res0_565 = Base[202].call(null, arg0_563),
      res1_566 = caml_call1(of_a_553, arg1_564);
     return [1, [0, res0_565, [0, res1_566, 0]]];
    }
    var
     b = Base_List[6],
     arg_562 =
       Base_Lazy[8].call(null, function(c){return b(a, c);}, subcommands_561),
     bnds_554 = [0, [1, [0, aN, [0, arg_562, 0]]], 0];
    if(readme_557)
     var
      v_558 = readme_557[1],
      arg_560 = Base[202].call(null, v_558),
      bnd_559 = [1, [0, aO, [0, arg_560, 0]]],
      bnds_554$0 = [0, bnd_559, bnds_554];
    else
     var bnds_554$0 = bnds_554;
    var
     arg_556 = Base[202].call(null, summary_555),
     bnds_554$1 = [0, [1, [0, aP, [0, arg_556, 0]]], bnds_554$0];
    return [1, bnds_554$1];
   }
   function find_subcommand(t, prefix){
    if(Base_String[97].call(null, prefix, cst$4)){
     var
      d = [0, Sexplib0_Sexp_conv[7].call(null, prefix), 0],
      e =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Subcommands_must_not_begin),
          d]];
     return [1, Base_Error[20].call(null, e)];
    }
    var a = t[3], b = caml_obj_tag(a);
    a:
    {
     var
      f =
        function(param){
         var a = param[2], key = param[1];
         return [0, key, [0, a, -481604174]];
        };
     if(250 === b)
      var c = a[1];
     else{
      if(246 !== b && 244 !== b){var c = a; break a;}
      var c = CamlinternalLazy[2].call(null, a);
     }
    }
    var
     choices = Base_List[53].call(null, c, f),
     g = Base[243],
     h = Base_Error[14],
     i = lookup_expand(choices, prefix, 0),
     j = Base_Result[34].call(null, i, h);
    return caml_call2(Base_Or_error[47], j, g);
   }
   function compare$13(a_567, b_568){
    if(a_567 === b_568) return 0;
    var n = Base[195].call(null, a_567[1], b_568[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[178],
         function(a_569, b_570){return Base[195].call(null, a_569, b_570);},
         a_567[2],
         b_568[2]);
    if(0 !== n$0) return n$0;
    var n$1 = Base[195].call(null, a_567[3], b_568[3]);
    if(0 !== n$1) return n$1;
    var n$2 = Base[195].call(null, a_567[4], b_568[4]);
    return 0 === n$2
            ? Base
               [159].call
              (null,
               function(a_571, b_572){
                return Base[195].call(null, a_571, b_572);
               },
               a_567[5],
               b_568[5])
            : n$2;
   }
   function t_of_sexp$21(x_575){
    var a = Base[201], b = Base[164];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_574,
             [0,
              cst_summary$8,
              1,
              Base[201],
              [0,
               cst_readme$8,
               5,
               Base[201],
               [0,
                cst_working_dir$1,
                1,
                Base[201],
                [0,
                 cst_path_to_exe$2,
                 1,
                 Base[201],
                 [0,
                  cst_child_subcommand$0,
                  1,
                  function(c){return b(a, c);},
                  0]]]]],
             function(param){
              return param !== cst_child_subcommand$1
                      ? param
                        !== cst_path_to_exe$3
                        ? param
                          !== cst_readme$9
                          ? param
                            !== cst_summary$9
                            ? param !== cst_working_dir$2 ? -1 : 2
                            : 0
                          : 1
                        : 3
                      : 4;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               child_subcommand = c[2][1],
               path_to_exe = c[1],
               working_dir = b[1],
               readme = a[1],
               summary = param[1];
              return [0,
                      summary,
                      readme,
                      working_dir,
                      path_to_exe,
                      child_subcommand];
             },
             x_575);
   }
   function sexp_of_t$21(param){
    var
     child_subcommand_587 = param[5],
     path_to_exe_585 = param[4],
     working_dir_583 = param[3],
     readme_579 = param[2],
     summary_577 = param[1],
     arg_588 = Base[165].call(null, Base[202], child_subcommand_587),
     bnds_576 = [0, [1, [0, aQ, [0, arg_588, 0]]], 0],
     arg_586 = Base[202].call(null, path_to_exe_585),
     bnds_576$0 = [0, [1, [0, aR, [0, arg_586, 0]]], bnds_576],
     arg_584 = Base[202].call(null, working_dir_583),
     bnds_576$1 = [0, [1, [0, aS, [0, arg_584, 0]]], bnds_576$0];
    if(readme_579)
     var
      v_580 = readme_579[1],
      arg_582 = Base[202].call(null, v_580),
      bnd_581 = [1, [0, aT, [0, arg_582, 0]]],
      bnds_576$2 = [0, bnd_581, bnds_576$1];
    else
     var bnds_576$2 = bnds_576$1;
    var
     arg_578 = Base[202].call(null, summary_577),
     bnds_576$3 = [0, [1, [0, aU, [0, arg_578, 0]]], bnds_576$2];
    return [1, bnds_576$3];
   }
   function compare$14(a_589$0, b_590$0){
    a:
    {
     var a_589 = a_589$0, b_590 = b_590$0;
     b:
     for(;;){
      if(a_589 === b_590) return 0;
      switch(a_589[0]){
        case 0:
         var a_591 = a_589[1];
         if(0 !== b_590[0]) return -1;
         var b_592 = b_590[1];
         return compare$11(a_591, b_592);
        case 1:
         break b;
        default:
         var a_599 = a_589[2], a_597 = a_589[1];
         switch(b_590[0]){
           case 1:
            return 1;
           case 2:
            var
             b_600 = b_590[2],
             b_598 = b_590[1],
             n = compare$13(a_597, b_598);
            if(0 !== n) return n;
            a_589 = a_599;
            b_590 = b_600;
            break;
           default: break a;
         }
      }
     }
     var a_593 = a_589[1];
     switch(b_590[0]){
       case 1:
        var b_594 = b_590[1];
        return compare$12
                (function(a_595, b_596){return compare$14(a_595, b_596);},
                 a_593,
                 b_594);
       case 2:
        return -1;
     }
    }
    return 1;
   }
   var letrec_function_context$5 = [];
   function t_of_sexp$22(sexp_605){
    a:
    {
     if(0 === sexp_605[0]){
      var a = sexp_605[1];
      b:
      if(a !== cst_Basic){
       c:
       if(a !== cst_Exec){
        if(a !== cst_Group){
         if(a === cst_basic) break b;
         if(a === cst_exec) break c;
         if(a !== cst_group) break a;
        }
        return Sexplib0_Sexp_conv_error[9].call
                (null, letrec_function_context$5[1], sexp_605);
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, letrec_function_context$5[1], sexp_605);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, letrec_function_context$5[1], sexp_605);
     }
     var match = sexp_605[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, letrec_function_context$5[1], sexp_605);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, letrec_function_context$5[1], sexp_605);
     var tag_606 = match$0[1];
     b:
     if(tag_606 !== cst_Basic){
      c:
      if(tag_606 !== cst_Exec){
       if(tag_606 !== cst_Group){
        if(tag_606 === cst_basic) break b;
        if(tag_606 === cst_exec) break c;
        if(tag_606 !== cst_group) break a;
       }
       var sexp_args_612 = match[2];
       if(sexp_args_612 && ! sexp_args_612[2]){
        var
         arg0_613 = sexp_args_612[1],
         res0_614 = t_of_sexp$20(t_of_sexp$22, arg0_613);
        return [1, res0_614];
       }
       return Sexplib0_Sexp_conv_error[8].call
               (null, letrec_function_context$5[1], tag_606, sexp_605);
      }
      var sexp_args_617 = match[2];
      if(sexp_args_617){
       var b = sexp_args_617[2];
       if(b && ! b[2]){
        var
         arg1_619 = b[1],
         arg0_618 = sexp_args_617[1],
         res0_620 = t_of_sexp$21(arg0_618),
         res1_621 = t_of_sexp$22(arg1_619);
        return [2, res0_620, res1_621];
       }
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, letrec_function_context$5[1], tag_606, sexp_605);
     }
     var sexp_args_607 = match[2];
     if(sexp_args_607 && ! sexp_args_607[2]){
      var arg0_608 = sexp_args_607[1], res0_609 = t_of_sexp$19(arg0_608);
      return [0, res0_609];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, letrec_function_context$5[1], tag_606, sexp_605);
    }
    return Sexplib0_Sexp_conv_error[12].call
            (null, letrec_function_context$5[1], sexp_605);
   }
   caml_update_dummy(letrec_function_context$5, [0, error_source_603]);
   function sexp_of_t$22(param){
    switch(param[0]){
      case 0:
       var arg0_622 = param[1], res0_623 = sexp_of_t$19(arg0_622);
       return [1, [0, aV, [0, res0_623, 0]]];
      case 1:
       var
        arg0_624 = param[1],
        res0_625 = sexp_of_t$20(sexp_of_t$22, arg0_624);
       return [1, [0, aW, [0, res0_625, 0]]];
      default:
       var
        arg1_627 = param[2],
        arg0_626 = param[1],
        res0_628 = sexp_of_t$21(arg0_626),
        res1_629 = sexp_of_t$22(arg1_627);
       return [1, [0, aX, [0, res0_628, [0, res1_629, 0]]]];
    }
   }
   function expanded_subcommands(t){
    function expand(param$0){
     var param = param$0;
     a:
     for(;;)
      switch(param[0]){
        case 0:
         return aY;
        case 1:
         break a;
        default: var t = param[2]; param = t;
      }
     var subcommands = param[1][3], a = caml_obj_tag(subcommands);
     a:
     {
      var
       c =
         function(param){
          var t = param[2], name = param[1], a = expand(t);
          return Base_List[53].call
                  (null, a, function(path){return [0, name, path];});
         };
      if(250 === a)
       var b = subcommands[1];
      else{
       if(246 !== a && 244 !== a){var b = subcommands; break a;}
       var b = CamlinternalLazy[2].call(null, subcommands);
      }
     }
     return Base_List[14].call(null, b, c);
    }
    var a = expand(t);
    return Base_List[63].call(null, a);
   }
   function sexp_of_t$23(param){
    switch(param[0]){
      case 0:
       var arg0_630 = param[1], res0_631 = sexp_of_t$19(arg0_630);
       return [1, [0, aZ, [0, res0_631, 0]]];
      case 1:
       var
        arg0_632 = param[1],
        res0_633 = sexp_of_t$20(sexp_of_t$23, arg0_632);
       return [1, [0, a0, [0, res0_633, 0]]];
      case 2:
       var arg0_634 = param[1], res0_635 = sexp_of_t$21(arg0_634);
       return [1, [0, a1, [0, res0_635, 0]]];
      default:
       var
        arg0_636 = param[1],
        res0_637 = Base_Lazy[8].call(null, sexp_of_t$23, arg0_636);
       return [1, [0, a2, [0, res0_637, 0]]];
    }
   }
   var extraction_var = Command_Env_var[4].call(null, 1);
   function f(i, supported, param){
    return Base_Set[10].call(null, supported, i);
   }
   var
    init = Base_Set[5].call(null, [0, Base_Int[22]]),
    supported_versions = f(3, f(2, f(1, init, v1$0), v2$0), v3$0);
   function to_versioned(latest, version_to_use){
    var switcher = version_to_use - 1 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return [0, of_latest$5(latest)];
       case 1:
        return [1, of_latest$4(latest)];
       default: return [2, latest];
     }
    var
     a =
       Base_Error[19].call
        (null,
         am,
         0,
         cst_unsupported_version_to_use,
         version_to_use,
         Sexplib0_Sexp_conv[10]);
    return Base_Error[31].call(null, a);
   }
   function fully_forced(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var b = param[1]; return [0, b];
       case 1:
        var g = param[1]; return [1, map(g, fully_forced)];
       case 2:
        var f = param[2], e = param[1];
        return [2, e, fully_forced(caml_call1(f, 0))];
       default:
        var thunk = param[1], a = caml_obj_tag(thunk);
        if(250 === a)
         param = thunk[1];
        else{
         if(246 !== a && 244 !== a){param = thunk; break;}
         param = CamlinternalLazy[2].call(null, thunk);
        }
     }
   }
   function get_summary(param$0){
    var param = param$0;
    for(;;){
     if(3 !== param[0]){var b = param[1]; return b[1];}
     var thunk = param[1], a = caml_obj_tag(thunk);
     if(250 === a)
      param = thunk[1];
     else{
      if(246 !== a && 244 !== a){param = thunk; continue;}
      param = CamlinternalLazy[2].call(null, thunk);
     }
    }
   }
   Ppx_inline_test_lib[7].call(null, cst_command);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Command_Shape);
   var
    Command_Shape =
      [0,
       [0,
        [0, compare$7, sexp_of_t$15, invariant, usage],
        compare$8,
        sexp_of_t$16],
       [0, compare$9, all, sexp_of_t$17, to_help_string],
       [0,
        compare$10,
        aliases,
        doc,
        name,
        sexp_of_t$18,
        flag_name,
        num_occurrences,
        requires_arg,
        t_of_sexp$18],
       [0, sort, to_string],
       [0,
        compare$11,
        flags,
        anons,
        readme,
        summary,
        sexp_of_t$19,
        find_flag,
        get_usage,
        t_of_sexp$19],
       [0,
        compare$12,
        subcommands,
        readme$0,
        summary$0,
        sexp_of_t$20,
        find_subcommand,
        map,
        t_of_sexp$20],
       [0, compare$13, sexp_of_t$21, t_of_sexp$21],
       [0, compare$14, sexp_of_t$22, expanded_subcommands, t_of_sexp$22],
       fully_forced,
       get_summary,
       [0,
        sexp_of_t$23,
        extraction_var,
        supported_versions,
        [0, t_of_sexp$15, sexp_of_t$14],
        of_versioned,
        to_versioned],
       228660148,
       [0,
        [0,
         [0, [0, compare$0, t_of_sexp$1, sexp_of_t$0, stable_witness]],
         [0, compare$1, t_of_sexp$2, sexp_of_t$1, stable_witness$0]],
        [0, [0, compare$2, t_of_sexp$3, sexp_of_t$2, stable_witness$1]],
        [0,
         [0, compare$3, t_of_sexp$4, sexp_of_t$3, stable_witness$2],
         [0, t_of_sexp$5, sexp_of_t$4, stable_witness$3, to_latest, of_latest]],
        [0, [0, compare$4, t_of_sexp$6, sexp_of_t$5, stable_witness$4, map]],
        [0,
         [0, compare$5, t_of_sexp$8, sexp_of_t$7, stable_witness$5],
         [0,
          t_of_sexp$9,
          sexp_of_t$8,
          stable_witness$6,
          to_latest$2,
          of_latest$2],
         [0,
          t_of_sexp$10,
          sexp_of_t$9,
          stable_witness$7,
          to_latest$3,
          of_latest$3]],
        [0, [0, compare$6, t_of_sexp$11, sexp_of_t$10, stable_witness$8]]],
       [0,
        Key_type,
        abs_path,
        help_screen_compare,
        lookup_expand,
        word_wrap_and_strip]];
   runtime.caml_register_global(455, Command_Shape, cst_Command_Shape$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Command_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Command__Command_intf:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Command_intf = "Command__Command_intf",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Command_Command_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   Ppx_expect_runtime[1][1].call(null, "command/src/command_intf.ml");
   Ppx_inline_test_lib[6].call(null, cst_command, "command_intf.ml");
   Ppx_inline_test_lib[7].call(null, cst_command);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Command_Command_intf);
   var Command_Command_intf = [0];
   runtime.caml_register_global
    (11, Command_Command_intf, cst_Command_Command_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command
//# unitInfo: Requires: Base, Base__Applicative, Base__Array, Base__Bool, Base__Char, Base__Comparator, Base__Error, Base__Exn, Base__Float, Base__Fn, Base__Info, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Nothing, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__Staged, Base__String, Base__Type_equal, CamlinternalLazy, Command__Command_intf, Command__Env_var, Command__Import, Command__Shape, Expect_test_config, Filename_base, Inline_test_config, Parsexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Sexplib__Conv, Sexplib__Sexp, Stdio, Stdio__In_channel, Stdlib, Stdlib__List, Stdlib__Sys, Univ_map
//# shape: Command:[[[]],N,N,N,N,N,N,F(4),F(3),F(3),F(5),F(5),F(6),F(1)*,F(1),F(1),[F(1),F(1)*],N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$23 = "",
    cst$26 = "\n",
    cst$28 = "\n\n",
    cst$21 = " ",
    cst$22 = "  ",
    cst_passed_more_than_once = " passed more than once",
    cst_value = " value ",
    cst_s = "%s",
    cst$27 = ",",
    cst$24 = "-",
    cst_build_info$1 = "--build-info",
    cst_help$9 = "--help",
    cst_version$2 = "--version",
    cst_build_info$2 = "-build-info",
    cst_expand_dots$1 = "-expand-dots",
    cst_flags$1 = "-flags",
    cst_help$8 = "-help",
    cst_version$3 = "-version",
    cst$25 = ".",
    cst_Command$0 = "Command",
    cst$29 = "_",
    cst_command$0 = "command",
    cst_command_src_command_ml$3 = "command/src/command.ml",
    cst_failed_to_parse = "failed to parse ",
    cst_flag = "flag ",
    cst_flag_s_passed_more_than_on = "flag %s passed more than once",
    cst_help$7 = "help",
    cst_invalid$1 = "invalid ",
    cst_missing_required_flag$0 = "missing required flag: ",
    cst_missing_required_flag_s = "missing required flag: %s",
    cst_multiple_flags_named = "multiple flags named ",
    cst_multiple_flags_named_s = "multiple flags named %s",
    cst_same_as = 'same as "',
    cst_same_as_s = 'same as "%s"',
    cst_stderr$0 = "stderr",
    cst_stdout$0 = "stdout",
    cst_too_many_anonymous_argumen = "too many anonymous arguments",
    cst_unknown_subcommand = "unknown subcommand ",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) === 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$19 = cst$21,
    cst$20 = cst$22,
    name = "-validate-parsing",
    cst$18 = cst$22,
    cst$17 = cst$24,
    partial = [12, 32, [2, 0, [12, 10, [10, 0]]]],
    cst$15 = cst$21,
    cst$16 = cst$25,
    version_list =
      [0, "hg://some/path_0xdeadbeef", [0, "ssh://a/path_8badf00d", 0]],
    a =
      [0,
       [11, "there is already a ", [2, 0, [11, " named ", [2, 0, 0]]]],
       "there is already a %s named %s"],
    cst$9 = cst$24,
    cst$10 = cst$24,
    cst$14 = cst$23,
    cst$13 = cst$23,
    cst$12 = cst$21,
    cst$11 = cst$22,
    cst$8 = cst$22,
    cst$5 = cst$24,
    cst$6 = cst$24,
    cst$7 = cst$24,
    cst$4 = cst$25,
    cst$3 = cst$21,
    cst$2 = cst$21,
    m = [0, cst$29],
    cst$1 = cst$27,
    cst$0 = cst$23,
    cst = ")",
    enumerate_008 = [0, 0, [0, 1, 0]],
    enumerate_009 = [0, 0, [0, 1, 0]],
    any = [0, 0, 0],
    at_least_once = [0, 1, 0],
    at_most_once = [0, 0, 1],
    exactly_once = [0, 1, 1],
    Base_Lazy = global_data.Base__Lazy,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Option = global_data.Base__Option,
    Base_Error = global_data.Base__Error,
    Stdio = global_data.Stdio,
    Base_String = global_data.Base__String,
    Command_Shape = global_data.Command__Shape,
    Base_Int = global_data.Base__Int,
    Command_Import = global_data.Command__Import,
    Base_Array = global_data.Base__Array,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Base_Set = global_data.Base__Set,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Info = global_data.Base__Info,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_Result = global_data.Base__Result,
    Base_Staged = global_data.Base__Staged,
    Base_Nothing = global_data.Base__Nothing,
    Command_Env_var = global_data.Command__Env_var,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Map = global_data.Base__Map,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Filename_base = global_data.Filename_base,
    Univ_map = global_data.Univ_map,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Base_Char = global_data.Base__Char,
    Base_Fn = global_data.Base__Fn,
    Base_Type_equal = global_data.Base__Type_equal,
    Stdlib_List = global_data.Stdlib__List,
    Parsexp = global_data.Parsexp,
    Base_Or_error = global_data.Base__Or_error,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Base_Exn = global_data.Base__Exn,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Base_Applicative = global_data.Base__Applicative,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base_Comparator = global_data.Base__Comparator;
   Ppx_module_timer_runtime[4].call(null, cst_Command$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   Ppx_expect_runtime[1][1].call(null, cst_command_src_command_ml$3);
   Ppx_inline_test_lib[6].call(null, cst_command$0, "command.ml");
   var match = Ppx_inline_test_lib[3];
   a:
   {
    var
     dummy = 0,
     aT = [0, "=== flags ==="],
     cst_help$5 = cst_help$7,
     a2 =
       [0,
        [11, "missing subcommand for command ", [2, 0, 0]],
        "missing subcommand for command %s"],
     a3 = [0, cst$21],
     a0 = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
     a1 = [0, [2, 0, 0], cst_s],
     cst_expand_dots$0 = cst_expand_dots$1,
     cst_flags$0 = cst_flags$1,
     cst_r = "-r",
     cst_help$6 = cst_help$8,
     cst_validate_arguments_are_par =
       " validate arguments are parsed correctly and exit immediately",
     aZ = [0, "--validate-parsing", 0],
     aY = [0, cst$23, 0],
     cst_missing_executable_name = "missing executable name",
     cst_Couldn_t_choose_a_supporte =
       "Couldn't choose a supported help output version for Command.exec from the given supported versions.",
     aX = [0, [0, cst_command_src_command_ml$3, 3102, 96602, 96616]],
     aW = [0, [2, 0, 0], cst_s],
     aV = [0, cst_command_src_command_ml$3, 3047, 22],
     aU =
       [0,
        [11,
         cst_unknown_subcommand,
         [2, 0, [11, " for command ", [2, 0, [11, ": ", [2, 0, 0]]]]]],
        "unknown subcommand %s for command %s: %s"],
     cst_SUBCOMMAND = "SUBCOMMAND",
     cst_expand_subcommands_in_recu = " expand subcommands in recursive help",
     cst_expand_dots = cst_expand_dots$1,
     cst_show_flags_as_well_in_recu = " show flags as well in recursive help",
     cst_flags = cst_flags$1,
     cst_show_subcommands_of_subcom = " show subcommands of subcommands, etc.",
     cst_recursive = "-recursive",
     cst_explain_a_given_subcommand =
       "explain a given subcommand (perhaps recursively)",
     cst_subcommands_and_flags = "=== subcommands and flags ===",
     cst_subcommands$0 = "=== subcommands ===",
     aS = [0, " SUBCOMMAND", 0],
     cst_help$4 = "[-help]",
     cst_help$3 = cst_help$7,
     aQ =
       [0,
        [11, "unexpected subcommand ", [3, 0, 0]],
        "unexpected subcommand %S"],
     aR =
       [0, [11, cst_unknown_subcommand, [3, 0, 0]], "unknown subcommand %S"],
     aO = [0, cst_stderr$0],
     aP = [0, cst_stdout$0],
     cst_cannot_parse_command_shape = "cannot parse command shape",
     aN = [0, "info"],
     cst_BUG_failed_to_read = "BUG failed to read",
     cst_stdout = cst_stdout$0,
     cst_stderr = cst_stderr$0,
     cst_argv_0 = "<argv_0>",
     aL =
       [0, [11, "_jsautocom_", [4, 0, [0, 2, 10], 0, 0]], "_jsautocom_%010d"],
     aM =
       [0,
        [11,
         "function ",
         [2,
          0,
          [11,
           " {\n  export COMP_CWORD\n  COMP_WORDS[0]=",
           [2,
            0,
            [11,
             '\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[',
             [17,
              0,
              [11,
               '}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[',
               [17, 0, [11, '}")\n  fi\n}\ncomplete -F ', [2, 0, partial]]]]]]]]]],
        'function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!'],
     aJ = [0, cst_command_src_command_ml$3, 2670, 26],
     aK = [0, 0],
     cst_some_build_info = "some build info",
     aD =
       [0,
        [0,
         [0,
          "\n        hg://some/path_0xdeadbeef\n        ssh://a/path_8badf00d\n        ",
          [0, cst$23]],
         [0, 79767, 79775, 79852]]],
     aE = [0, 79752, 79758, 79853],
     aF = [0, "print version where multiple repos are used"],
     aG = [0, 79612, 79616, 79853],
     aH = [0, 79842, 79853, 79853],
     aI = [0, 79612, 79616, 79853],
     cst_command_src_command_ml$0 = cst_command_src_command_ml$3,
     ax =
       [0,
        [0, [0, " some build info ", [0, cst$23]], [0, 79977, 79992, 80013]]],
     ay = [0, 79977, 79983, 80014],
     az = [0, "print build info"],
     aA = [0, 79862, 79866, 80014],
     aB = [0, 79977, 80014, 80014],
     aC = [0, 79862, 79866, 80014],
     cst_command_src_command_ml = cst_command_src_command_ml$3,
     cst_version$1 = "version",
     cst_the_version_of_this_build = "the version of this build",
     au = [0, cst_version$2, 0],
     cst_version$0 = cst_version$3,
     cst_info_about_this_build = "info about this build",
     av = [0, cst_build_info$1, 0],
     cst_build_info$0 = cst_build_info$2,
     aw = [0, cst$26],
     cst_print_build_info_for_this_ = " print build info for this build",
     cst_build_info = cst_build_info$2,
     cst_print_the_version_of_this_ = " print the version of this build",
     cst_version = cst_version$3,
     cst_print_version_information = "print version information",
     cst_Path_passed_to_Absolute_mu =
       "Path passed to `Absolute must be absolute",
     cst_Path_passed_to_Relative_to =
       "Path passed to `Relative_to_me must be relative",
     at =
       [0,
        [11, "multiple subcommands named ", [2, 0, 0]],
        "multiple subcommands named %s"],
     aq = [0, [2, 0, 0], cst_s],
     cst_this_help_text = "this help text",
     ar = [0, cst_help$9, 0],
     as = [0, "-?", 0],
     cst_help$2 = cst_help$8,
     ap =
       [0,
        [11, " print ", [2, 0, [11, " and exit", 0]]],
        " print %s and exit"],
     cst_Arg_Tuple_is_not_supported =
       "Arg.Tuple is not supported by Command.Spec.flags_of_args_exn",
     ao = [0, 0],
     cst_Arg_Rest_all_is_not_suppor =
       "Arg.Rest_all is not supported by Command.Spec.flags_of_args_exn",
     cst_Arg_Expand_is_not_supporte =
       "Arg.Expand is not supported by Command.Spec.flags_of_args_exn",
     cst_No_help_for_parsing = "No help for parsing",
     am = [0, 1],
     an = [0, [0, cst_command_src_command_ml$3, 2155, 65352, 65381]],
     cst_and_arg_name_expects_exact =
       "[and_arg_name] expects exactly one name, got",
     cst_missing_required_flag = "missing required flag",
     al = [0, 0],
     cst_Cannot_pass_more_than_one_ =
       "Cannot pass more than one of these: \n  %{Choice_name.list_to_string}",
     ag = [0, 0],
     cst_Cannot_pass_more_than_one_$0 =
       "Cannot pass more than one of these: \n  ",
     aj =
       [0,
        [11,
         'Not all flags in group "',
         [2, 0, [11, '" are given: ', [2, 0, 0]]]],
        'Not all flags in group "%s" are given: %s'],
     ah = [0, 0],
     cst_Must_pass_one_of_these_Cho =
       "Must pass one of these:\n  %{Choice_name.list_to_string}",
     ai = [0, 0],
     cst_Must_pass_one_of_these = "Must pass one of these:\n  ",
     ae =
       [0, [11, ' [requires: "', [2, 0, [11, '"]', 0]]], ' [requires: "%s"]'],
     af = [0, [2, 0, [2, 0, 0]], "%s%s"],
     cst_Command_Spec_choose_one_ca =
       "[Command.Spec.choose_one] called with duplicate name",
     ak = [0, [0, cst_command_src_command_ml$3, 2018, 60195, 60213]],
     ad = [0, "\n  "],
     ac = [0, cst$27],
     aa = [0, cst$27],
     ab = [0, cst$27],
     cst_choose_one_expects_choices =
       "[choose_one] expects choices to read command-line arguments.",
     cst_For_simplicity_Command_Spe =
       "For simplicity, [Command.Spec.choose_one] does not support names with commas.",
     $ = [0, [0, cst_command_src_command_ml$3, 1936, 57337, 57357]],
     cst_optional_to_required_got_a =
       "[optional_to_required] got a [None] result",
     cst_s_default_Sexp = "%s (default: %{Sexp})",
     Z = [12, 41, 0],
     _ = [0, 0],
     cst_default = " (default: ",
     cst_ARG = "ARG",
     cst_help$1 = " -help\n",
     cst_For_usage_information_run = "For usage information, run",
     cst_Error_parsing_command_line = "Error parsing command line:",
     Y = [0, cst$28],
     X =
       [0,
        [11, "missing argument for flag ", [2, 0, 0]],
        "missing argument for flag %s"],
     W = [0, [2, 0, 0], cst_s],
     V = [0, cst$26],
     cst_help = cst_help$8,
     U =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     cst_invalid_Key_type_name_S = "invalid %{Key_type} name: %S",
     P = [11, " name: ", [3, 0, 0]],
     Q = [0, 0],
     cst_invalid = cst_invalid$1,
     cst_invalid_Key_type_name_cont =
       "invalid %{Key_type} name (contains whitespace): %S",
     R = [11, " name (contains whitespace): ", [3, 0, 0]],
     S = [0, 0],
     cst_invalid$0 = cst_invalid$1,
     O =
       [0,
        [2,
         0,
         [12,
          32,
          [2, 0, [11, " contains an underscore. Use a dash instead.", 0]]]],
        "%s %s contains an underscore. Use a dash instead."],
     cst_WILL_NEVER_BE_PRINTED = "WILL NEVER BE PRINTED",
     cst_Empty_anonymous_argument_n = "Empty anonymous argument name provided",
     M =
       [0,
        [11, "argument name ", [3, 0, [11, " has surrounding whitespace", 0]]],
        "argument name %S has surrounding whitespace"],
     N =
       [0,
        60,
        [0, 62, [0, 91, [0, 93, [0, 40, [0, 41, [0, 123, [0, 125, 0]]]]]]]],
     J = [0, cst_command_src_command_ml$3, 1210, 8],
     cst_BUG_asked_for_final_value_ =
       "BUG: asked for final value when doing completion",
     K =
       [0,
        [11, cst_too_many_anonymous_argumen, 0],
        cst_too_many_anonymous_argumen],
     L = [3, 0],
     I =
       [0,
        [11, "missing anonymous argument: ", [2, 0, 0]],
        "missing anonymous argument: %s"],
     G = [3, 0],
     H =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [12, 10, [2, 0, 0]]]]]],
        "failed to parse %s value %S\n%s"],
     D = [0, cst_command_src_command_ml$3, 959, 11],
     cst_bug_in_command_ml = "bug in command.ml",
     F =
       [0,
        [11,
         "the grammar ",
         [2,
          0,
          [11,
           " for anonymous arguments is not supported because there is the possibility for arguments (",
           [2,
            0,
            [11,
             ") following a variable number of arguments (",
             [2,
              0,
              [11,
               ").  Supporting such grammars would complicate the implementation significantly.",
               0]]]]]]],
        "the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly."],
     E =
       [0,
        [11,
         "iteration of variable-length grammars such as ",
         [2, 0, [11, " is disallowed", 0]]],
        "iteration of variable-length grammars such as %s is disallowed"],
     C = [0, cst_command_src_command_ml$3, 909, 11],
     B =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     A = [0, cst$29],
     z = [0, cst$29],
     y = [0, cst_command_src_command_ml$3, 764, 19],
     x =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     w =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     v = [0, cst$29],
     u =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     t = [0, cst$29],
     s =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     r =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [11, ".\n", [2, 0, 0]]]]]],
        "failed to parse %s value %S.\n%s"],
     p =
       [0,
        [11, "multiple flags or aliases named ", [2, 0, 0]],
        "multiple flags or aliases named %s"],
     q =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     o = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     n = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     cst_Command_Spec_Arg_type_comm =
       "Command.Spec.Arg_type.comma_separated: empty list not allowed",
     l = [0, cst$27],
     cst_case_insensitive = " (case insensitive)",
     i = [0, cst$27],
     j =
       [0,
        [11, "valid arguments", [2, 0, [11, ": {", [2, 0, [12, 125, 0]]]]],
        "valid arguments%s: {%s}"],
     h = [0, ", "],
     cst_can_be = "(can be: ",
     g = [0, "duplicate_keys"],
     cst_Command_Spec_Arg_type_of_a = "Command.Spec.Arg_type.of_alist_exn",
     f = [0, cst$28],
     e = [0, cst$21],
     b = [0, "status"],
     c = [0, "command/src/command.ml.Exit_called"],
     d = [0, "_none_", 0, -1],
     cst_Command_Exit_called = "Command.Exit_called",
     cst_Command_Failed_to_parse_co = "Command.Failed_to_parse_command_line",
     cst_internal_validate_parsing = "----internal-validate-parsing",
     k = [0, 0],
     cst_path = "path",
     cst_args = "args",
     cst_help$0 = cst_help$7,
     cst_subcommands = "subcommands",
     cst_command_src_command_ml$1 = cst_command_src_command_ml$3,
     cst_Version_info = "Version_info",
     a4 =
       [0,
        [0,
         [0,
          '\n    function _jsautocom_0000012345 {\n      export COMP_CWORD\n      COMP_WORDS[0]=<argv_0>\n      if type readarray > /dev/null\n      then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n      else IFS="\n    " read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n      fi\n    }\n    complete -F _jsautocom_0000012345 <argv_0>\n    ',
          [0, cst$23]],
         [0, 83018, 83022, 83348]]],
     a5 = [0, 83007, 83009, 83349],
     a8 = [0, "Demonstrate [autocomplete_function]"],
     a$ = [0, 82879, 82879, 83349],
     ba = [0, 83342, 83349, 83349],
     bb = [0, 82879, 82879, 83349],
     cst_command_src_command_ml$2 = cst_command_src_command_ml$3,
     cst_command = cst_command$0,
     cst_Command = cst_Command$0;
    if(typeof match !== "number" && 545942154 <= match[2]){var raise_instead_of_exit = 1; break a;}
    var raise_instead_of_exit = 0;
   }
   var Exit_called = [248, cst_Command_Exit_called, caml_fresh_oo_id(0)];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Exit_called,
     function(param){
      var tag = param[1];
      if(tag !== Exit_called)
       throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
      var
       status_002 = param[2],
       arg_003 = caml_call1(Base[136], status_002),
       bnds_001 = [0, [1, [0, b, [0, arg_003, 0]]], 0];
      return [1, [0, c, bnds_001]];
     });
   function exit(status){
    if(raise_instead_of_exit)
     throw caml_maybe_attach_backtrace([0, Exit_called, status], 1);
    return Stdlib[99].call(null, status);
   }
   function unparagraphs(xs){return Base_String[68].call(null, f, xs);}
   var
    Failed_to_parse_command_line =
      [248, cst_Command_Failed_to_parse_co, caml_fresh_oo_id(0)];
   function die(fmt){
    return Command_Import[9].call
            (null,
             function(msg, param){
              throw caml_maybe_attach_backtrace
                     ([0, Failed_to_parse_command_line, msg], 1);
             },
             fmt);
   }
   var
    help_screen_compare = Command_Shape[14][3],
    empty = Univ_map[4],
    set = Univ_map[7],
    mem = Univ_map[8],
    find = Univ_map[10],
    find_exn = Univ_map[11],
    update = Univ_map[16],
    With_default = Univ_map[30];
   function key_create(name){
    return caml_call2(Base_Type_equal[12][4], name, Sexplib_Conv[23]);
   }
   var
    multi_add = Univ_map[32][4],
    set_with_default = Univ_map[30][2],
    key_internal_validate_parsing =
      caml_call2
       (Base_Type_equal[12][4], cst_internal_validate_parsing, Base[220]);
   function apply(f, x){
    var a = f[2], b = a || x[2];
    return [0,
            Base_Result[35].call
             (null,
              f[1],
              x[1],
              function(f, x){return caml_call1(f, x);},
              function(a, param){
               var err_1 = a[2];
               return [0, 696341824, err_1];
              }),
            b];
   }
   function introduce_missing_required_fla(t){
    var a = t[2];
    return [0, caml_call1(Base_Result[16], t[1]), a];
   }
   function return_no_arg(v){return [0, [0, v], 0];}
   function return_with_arg(v){return [0, [0, v], 1];}
   function error(has_arg, err){return [0, [1, err], has_arg];}
   var
    map =
      [0,
       -198771759,
       function(param, f){
        var has_arg = param[2], result = param[1];
        return [0, caml_call2(Base_Result[33], result, f), has_arg];
       }],
    include = Base_Applicative[7].call(null, [0, return_no_arg, apply, map]),
    return$ = include[1],
    map$0 = include[2],
    symbol = include[4],
    apply$0 = include[8],
    For_escape = [0],
    Auto_complete = [0, For_escape];
   function run_and_exit(t, env, part){
    Base_Option[37].call
     (null,
      t,
      function(completions){
       var a = Command_Import[5], b = caml_call2(completions, env, part);
       return Base_List[19].call(null, b, a);
      });
    return exit(0);
   }
   function extra_doc(r){return r[4];}
   function parse(t, s){
    return Base_Or_error[31].call
            (null, 0, function(param){return caml_call1(t[1], s);});
   }
   function create(complete, key, of_string){
    var extra_doc = Base_Lazy[24].call(null, 0);
    return [0, of_string, complete, key, extra_doc];
   }
   function map$1(key, t, f){
    return [0,
            function(s){return caml_call1(f, caml_call1(t[1], s));},
            t[2],
            key,
            t[4]];
   }
   function of_lazy(key, t){
    function parse(str){
     var a = caml_obj_tag(t);
     a:
     if(250 === a)
      var b = t[1];
     else{
      if(246 !== a && 244 !== a){var b = t; break a;}
      var b = CamlinternalLazy[2].call(null, t);
     }
     return caml_call1(b[1], str);
    }
    function complete(env, part){
     var a = caml_obj_tag(t);
     a:
     if(250 === a)
      var b = t[1];
     else{
      if(246 !== a && 244 !== a){var b = t; break a;}
      var b = CamlinternalLazy[2].call(null, t);
     }
     var match = b[2];
     if(! match) return 0;
     var complete = match[1];
     return caml_call2(complete, env, part);
    }
    var extra_doc$0 = caml_call2(Base_Lazy[13], t, extra_doc);
    return [0, parse, [0, complete], key, extra_doc$0];
   }
   var
    string = create(0, 0, function(a){return a;}),
    int = create(0, 0, Base_Int[11]),
    char = create(0, 0, Base_Char[8]),
    float = create(0, 0, Base_Float[9]),
    sexp = create(0, 0, Parsexp[3][10]);
   function sexp_conv(complete, of_sexp){
    return create
            (complete,
             0,
             function(s){
              return caml_call1(of_sexp, caml_call1(Parsexp[3][10], s));
             });
   }
   function of_alist_exn
   (accept_unique_prefixes$0,
    opt,
    list_values_in_help$0,
    auto_complete,
    key,
    alist){
    var
     case_sensitive = opt ? opt[1] : 1,
     accept_unique_prefixes =
       accept_unique_prefixes$0 ? accept_unique_prefixes$0[1] : 1,
     list_values_in_help =
       list_values_in_help$0 ? list_values_in_help$0[1] : 1;
    function make(cmp){
     var
      match = Base_Map[8].call(null, [0, cmp[1]], alist),
      variant = match[1];
     if(17724 <= variant)
      var map = match[2], a = map;
     else
      var
       b =
         Base_List[53].call
          (null, alist, function(param){var k = param[1]; return [0, k, k];}),
       c = Base_Map[11].call(null, [0, cmp[1]], b),
       d =
         Base_Map[60].call
          (null,
           c,
           function(param){if(param && param[2]) return 1; return 0;}),
       duplicate_keys = Base_Map[74].call(null, d),
       e = Base[202],
       f = Base[165],
       h =
         [0,
          [1,
           [0,
            g,
            [0,
             Base[165].call
              (null, function(a){return f(e, a);}, duplicate_keys),
             0]]],
          0],
       i =
         [1,
          [0,
           Sexplib0_Sexp_conv[7].call(null, cst_Command_Spec_Arg_type_of_a),
           h]],
       a = Base[246].call(null, i);
     return [0, cmp, a];
    }
    if(case_sensitive)
     var match = make([0, Base_String[59], Base_String[97]]);
    else
     var a = Base_String[75], match = make([0, a[21], a[24]]);
    var map = match[2], S = match[1];
    function complete(univ_map, prefix){
     if(auto_complete){
      var complete = auto_complete[1];
      return caml_call2(complete, univ_map, prefix);
     }
     var a = Base_Map[75].call(null, 0, map);
     return Base_List[13].call
             (null,
              a,
              function(param){
               var name = param[1];
               if(! caml_call2(S[2], name, prefix)) return 0;
               var
                suffix =
                  Base_String[5].call
                   (null, [0, caml_ml_string_length(prefix)], 0, name),
                name$0 = Base[241].call(null, prefix, suffix);
               return [0, name$0];
              });
    }
    var
     extra_doc =
       [246,
        function(param){
         if(! list_values_in_help) return 0;
         var
          a = Base_Map[73].call(null, map),
          values = Base_String[68].call(null, h, a),
          b = [0, values, [0, Ppx_string_runtime[1][2].call(null, cst), 0]],
          c = [0, Ppx_string_runtime[1][2].call(null, cst_can_be), b];
         return [0, Ppx_string_runtime[1][4].call(null, c)];
        }];
    function parse(arg){
     var s = Base_Map[42].call(null, map, arg);
     a:
     if(s)
      var match$0 = s;
     else if(accept_unique_prefixes){
      var
       a = Base_Map[75].call(null, 0, map),
       match =
         Base_List[12].call
          (null,
           a,
           function(param){
            var name = param[1];
            return caml_call2(S[2], name, arg);
           });
      if(match && ! match[2]){var v = match[1][2], match$0 = [0, v]; break a;}
      var match$0 = 0;
     }
     else
      var match$0 = 0;
     if(match$0){var v$0 = match$0[1]; return v$0;}
     var
      valid_arguments_extra = case_sensitive ? cst$0 : cst_case_insensitive,
      b = Base_Map[73].call(null, map),
      c = Base_String[68].call(null, i, b);
     return caml_call3
             (Command_Import[8].call(null, j), valid_arguments_extra, c, 0);
    }
    var complete$0 = [0, complete];
    return [0, parse, complete$0, key, extra_doc];
   }
   function of_map
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    map){
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             Base_Map[75].call(null, 0, map));
   }
   function enumerated
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             caml_call2
              (Base_List[58][4][3],
               E[1],
               function(t){return [0, caml_call1(E[2], t), t];}));
   }
   function enumerated_sexpable
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    var all = E[1];
    function to_string(t){
     var a = caml_call1(E[2], t);
     return Base[85][16].call(null, a);
    }
    return enumerated
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             [0, all, to_string]);
   }
   var bool = enumerated(0, 0, k, 0, 0, [0, Base_Bool[1], Base_Bool[9]]);
   function comma_separated(b, key, a, opt, t){
    var
     allow_empty = b ? b[1] : 0,
     strip_whitespace = a ? a[1] : 0,
     unique_values = opt ? opt[1] : 0,
     strip =
       strip_whitespace
        ? function(str){return Base_String[109].call(null, 0, str);}
        : function(a){return a;},
     complete =
       caml_call2
        (Base_Option[24],
         t[2],
         function(complete_elt, env, part){
          var
           a = Base_String[102].call(null, part, 44),
           match = Base_List[63].call(null, a);
          if(match)
           var
            tl = match[2],
            hd = match[1],
            suffix = hd,
            prefixes = Base_List[63].call(null, tl);
          else
           var suffix = part, prefixes = 0;
          if(unique_values)
           var
            b = Base_List[53].call(null, prefixes, strip),
            seen_already = Base_Set[32].call(null, [0, Base_String[59]], b),
            is_allowed =
              function(choice){
               var a = strip(choice);
               return 1 - Base_Set[9].call(null, seen_already, a);
              };
          else
           var is_allowed = function(param){return 1;};
          var
           c = caml_call2(complete_elt, env, suffix),
           choices =
             Base_List[12].call
              (null,
               c,
               function(choice){
                var a = 1 - Base_String[65].call(null, choice, 44);
                return a ? is_allowed(choice) : a;
               });
          if(choices && ! choices[2])
           var
            choice = choices[1],
            choices$0 =
              [0, choice, [0, Base[241].call(null, choice, cst$1), 0]];
          else
           var choices$0 = choices;
          return Base_List[53].call
                  (null,
                   choices$0,
                   function(choice){
                    var a = Base[222].call(null, prefixes, [0, choice, 0]);
                    return Base_String[68].call(null, l, a);
                   });
         });
    function of_string(string){
     var string$0 = strip(string);
     if(Base_String[14].call(null, string$0))
      return allow_empty
              ? 0
              : Base[244].call(null, cst_Command_Spec_Arg_type_comm);
     var a = Base_String[102].call(null, string$0, 44);
     return Base_List[53].call
             (null,
              a,
              function(str){var a = strip(str); return caml_call1(t[1], a);});
    }
    return create(complete, key, of_string);
   }
   var include$0 = [0, string, int, char, float, bool, sexp, sexp_conv];
   function auto_complete(t){
    var match = t[2];
    if(! match) return function(a, param){return 0;};
    var f = match[1];
    return f;
   }
   function loop(acc$1, enumerate_012$0, enumerate_013$0){
    var
     acc = acc$1,
     enumerate_012 = enumerate_012$0,
     enumerate_013 = enumerate_013$0;
    for(;;){
     if(! enumerate_013) return Stdlib_List[10].call(null, acc);
     if(enumerate_012){
      var
       enumerate_011 = enumerate_013[1],
       enumerate_014 = enumerate_012[2],
       enumerate_010 = enumerate_012[1],
       acc$0 = [0, [0, enumerate_010, enumerate_011], acc];
      acc = acc$0;
      enumerate_012 = enumerate_014;
     }
     else{
      var enumerate_014$0 = enumerate_013[2];
      enumerate_012 = enumerate_008;
      enumerate_013 = enumerate_014$0;
     }
    }
   }
   loop(0, enumerate_008, enumerate_009);
   var to_help_string = Command_Shape[2][4];
   function parse$0(action, doc){
    var match = Base_String[100].call(null, doc, 32);
    a:
    {
     switch(action[0]){
       case 2:
        if(! match || match[1][1] === cst$23){
         var doc$0 = doc, arg_doc = m;
         break a;
        }
        break;
       case 3:
        if(match && match[1][1] !== cst$23) break;
        var doc$0 = doc, arg_doc = 0;
        break a;
       default: var doc$0 = doc, arg_doc = 0; break a;
     }
     var
      match$0 = match[1],
      doc$1 = match$0[2],
      arg = match$0[1],
      arg_doc$0 = [0, arg],
      doc$0 = doc$1,
      arg_doc = arg_doc$0;
    }
    return [0, arg_doc, Base_String[109].call(null, 0, doc$0)];
   }
   function concat(name, arg_doc){
    if(! arg_doc) return name;
    var arg_doc$0 = arg_doc[1], a = Base[241].call(null, cst$2, arg_doc$0);
    return Base[241].call(null, name, a);
   }
   function wrap_if_optional(t, flag_name){
    var at_least_once = t[6][1];
    return caml_call2(to_help_string, [0, at_least_once, 1], flag_name);
   }
   function help(t){
    var doc = t[5], action = t[4], aliases = t[2], name = t[1];
    if(Base_String[97].call(null, doc, cst$3)){
     var
      a =
        Base_List[53].call
         (null,
          aliases,
          function(x){
           return [0, x, caml_call1(Command_Import[7].call(null, n), name)];
          });
     return [0, [0, name, Base_String[107].call(null, 0, doc)], a];
    }
    var
     match = parse$0(action, doc),
     doc$0 = match[2],
     arg_doc = match[1],
     b =
       Base_List[53].call
        (null,
         aliases,
         function(x){
          var a = caml_call1(Command_Import[7].call(null, o), name);
          return [0, wrap_if_optional(t, concat(x, arg_doc)), a];
         });
    return [0, [0, wrap_if_optional(t, concat(name, arg_doc)), doc$0], b];
   }
   function align(t){
    var
     doc = t[5],
     action = t[4],
     aliases = t[2],
     name$0 = t[1],
     match = parse$0(action, doc),
     doc$0 = match[2],
     arg_doc = match[1],
     flag_name = concat(name$0, arg_doc),
     name = caml_call2(to_help_string, t[6], flag_name);
    return [0, name, doc$0, aliases];
   }
   function create$0(flags){
    var
     a =
       Base_List[53].call
        (null, flags, function(flag){return [0, flag[1], flag];}),
     match = Base_Map[8].call(null, [0, Base_String[59]], a),
     variant = match[1];
    if(17724 <= variant){
     var
      map = match[2],
      b =
        Base_List[14].call
         (null, flags, function(flag){return [0, flag[1], flag[2]];}),
      c =
        Base_List[128].call
         (null,
          b,
          function(a_020, b_021){return Base[195].call(null, a_020, b_021);});
     Base_Option[37].call
      (null,
       c,
       function(x){return caml_call2(Command_Import[8].call(null, p), x, 0);});
     return map;
    }
    var flag = match[2];
    return caml_call2(Command_Import[8].call(null, q), flag, 0);
   }
   function arg_flag(name, arg_type, read, write, num_occurrences){
    function update(env, arg){
     var match$0 = parse(arg_type, arg);
     if(0 !== match$0[0]){
      var error = match$0[1], a = Base_Error[12].call(null, error);
      return caml_call4(die(r), name, arg, a, 0);
     }
     var
      arg$0 = match$0[1],
      env$0 = caml_call2(write, env, arg$0),
      match = arg_type[3];
     if(! match) return env$0;
     var key = match[1];
     return multi_add(env$0, key, arg$0);
    }
    return [0, [2, update, arg_type[2]], read, num_occurrences, arg_type[4]];
   }
   function map_flag(t, f, input){
    var
     match = caml_call1(t, input),
     extra_doc = match[4],
     num_occurrences = match[3],
     read = match[2],
     action = match[1];
    return [0,
            action,
            function(env){return caml_call2(map$0, caml_call1(read, env), f);},
            num_occurrences,
            extra_doc];
   }
   function write_option(name, key, env, arg){
    return caml_call3
            (update,
             env,
             key,
             function(param){
              return param ? caml_call2(die(s), name, 0) : arg;
             });
   }
   function required_value(default$, arg_type, name, num_occurrences){
    var
     key =
       caml_call2(Base_Type_equal[12][4], name, function(param){return t;});
    function read(env){
     var match = caml_call2(find, env, key);
     if(match){var v = match[1]; return return_with_arg(v);}
     if(default$){var v$0 = default$[1]; return return_no_arg(v$0);}
     var a = caml_call1(Command_Import[7].call(null, u), name);
     return error(0, [0, 696341824, Base_Error[14].call(null, a)]);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, num_occurrences);
   }
   function required(arg_type, name){
    return required_value(0, arg_type, name, exactly_once);
   }
   function optional_with_default(default$, arg_type, name){
    return required_value([0, default$], arg_type, name, at_most_once);
   }
   function optional(arg_type, name){
    var
     key =
       caml_call2(Base_Type_equal[12][4], name, function(param){return v;});
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, at_most_once);
   }
   function no_arg_general(is_required, key_value, deprecated_hook, name){
    var key = caml_call2(Base_Type_equal[12][4], name, Base[220]);
    function read(env){
     if(caml_call2(mem, env, key)) return return_with_arg(1);
     if(! is_required) return return_no_arg(0);
     var a = caml_call1(Command_Import[7].call(null, w), name);
     return error(0, [0, 696341824, Base_Error[14].call(null, a)]);
    }
    function action(env){
     var
      env$0 =
        Base_Option[34].call
         (null,
          key_value,
          env,
          function(env, param){
           var value = param[2], key = param[1];
           return caml_call3(set_with_default, env, key, value);
          });
     return caml_call2(mem, env$0, key)
             ? caml_call2(die(x), name, 0)
             : caml_call3(set, env$0, key, 0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 =
        function(env){
         var env$0 = action(env);
         caml_call1(f, 0);
         return env$0;
        };
    else
     var action$0 = action;
    var
     a = Base_Lazy[24].call(null, 0),
     b = is_required ? exactly_once : at_most_once;
    return [0, [0, action$0], read, b, a];
   }
   function no_arg(name){return no_arg_general(0, 0, 0, name);}
   function no_arg_required(v, name){
    var a = 0, b = 0, c = 1;
    return map_flag
            (function(d){return no_arg_general(c, b, a, d);},
             function(param){
              if(param) return v;
              throw caml_maybe_attach_backtrace([0, Assert_failure, y], 1);
             },
             name);
   }
   function no_arg_register(key, value, name){
    return no_arg_general(0, [0, [0, key, value]], 0, name);
   }
   function no_arg_some(value){
    function a(param){return param ? [0, value] : 0;}
    return function(b){return map_flag(no_arg, a, b);};
   }
   function listed(arg_type, name){
    var
     key =
       caml_call3
        (With_default[1][1],
         0,
         name,
         function(x_022){
          return Base[165].call(null, function(param){return z;}, x_022);
         });
    function read(env){
     var
      a = caml_call2(With_default[3], env, key),
      value_list = Base_List[63].call(null, a);
     return value_list ? return_with_arg(value_list) : return_no_arg(0);
    }
    function write(env, arg){
     return caml_call3
             (With_default[4],
              env,
              key,
              function(list){return [0, arg, list];});
    }
    return arg_flag(name, arg_type, read, write, any);
   }
   function one_or_more_as_pair(arg_type, name){
    var
     key =
       caml_call3
        (With_default[1][1],
         0,
         name,
         function(x_023){
          return Base[165].call(null, function(param){return A;}, x_023);
         });
    function read(env){
     var
      a = caml_call2(With_default[3], env, key),
      match = Base_List[63].call(null, a);
     if(match){
      var rest = match[2], first = match[1];
      return return_with_arg([0, first, rest]);
     }
     var b = caml_call1(Command_Import[7].call(null, B), name);
     return error(0, [0, 696341824, Base_Error[14].call(null, b)]);
    }
    function write(env, arg){
     return caml_call3
             (With_default[4], env, key, function(q){return [0, arg, q];});
    }
    return arg_flag(name, arg_type, read, write, at_least_once);
   }
   function one_or_more_as_list(arg_type){
    function a(param){var xs = param[2], x = param[1]; return [0, x, xs];}
    function b(a){return one_or_more_as_pair(arg_type, a);}
    return function(c){return map_flag(b, a, c);};
   }
   function escape_general(complete, deprecated_hook, name){
    var
     key =
       caml_call2
        (Base_Type_equal[12][4],
         name,
         function(x_024){return Base[165].call(null, Base[202], x_024);});
    function action(env, cmd_line){
     return caml_call3(set, env, key, cmd_line);
    }
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 =
        function(env, cmd_line){
         caml_call1(f, cmd_line);
         return caml_call3(set, env, key, cmd_line);
        };
    else
     var action$0 = action;
    return [0,
            [3, action$0, complete],
            read,
            at_most_once,
            Base_Lazy[24].call(null, 0)];
   }
   function no_arg_abort(exit, name){
    return [0,
            [0,
             function(param){
              var a = caml_call1(exit, 0);
              return Base_Nothing[4].call(null, a);
             }],
            function(param){return return_no_arg(0);},
            at_most_once,
            Base_Lazy[24].call(null, 0)];
   }
   function escape(name){return escape_general(0, 0, name);}
   function escape_with_autocomplete(complete, name){return escape_general([0, complete], 0, name);
   }
   function no_arg$0(hook, name){
    return no_arg_general(0, 0, [0, hook], name);
   }
   function escape$0(hook){
    var a = [0, hook], b = 0;
    return function(c){return escape_general(b, a, c);};
   }
   var empty$0 = 0;
   function create$1(path_to_exe){return [0, path_to_exe, 0];}
   function append(t, subcommand){return [0, subcommand, t];}
   var parts = Base_List[63];
   function parts_exe_basename(t){
    var match = Base_List[63].call(null, t);
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    return [0, Filename_base[37].call(null, hd), tl];
   }
   function to_string(t){
    var xs = parts_exe_basename(t);
    return Base_String[68].call(null, e, xs);
   }
   var length = Base_List[45];
   function replace_first(t, from, to){
    var parts$2 = parts(t), parts$0 = parts$2, acc = 0;
    for(;;){
     if(! parts$0) return acc;
     var parts$1 = parts$0[2], hd = parts$0[1];
     if(Base_String[47].call(null, hd, from))
      return Base_List[64].call(null, parts$1, [0, to, acc]);
     var acc$0 = [0, hd, acc];
     parts$0 = parts$1;
     acc = acc$0;
    }
   }
   function to_string_dots(t){
    if(t)
     var
      init = t[2],
      last = t[1],
      b = Base_Fn[1],
      a =
        [0,
         last,
         Base_List[53].call(null, init, function(a){return b(cst$4, a);})];
    else
     var a = 0;
    return to_string(a);
   }
   var
    is_empty = Base_List[18],
    invariant = Command_Shape[1][1][3],
    usage = Command_Shape[1][1][4];
   function is_fixed_arity(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        return 1;
       case 3:
        var ts = param[1], match = Base_List[63].call(null, ts);
        if(! match) return Base[244].call(null, cst_bug_in_command_ml);
        var others = match[2], last = match[1];
        if(! Base_List[24].call(null, others, is_fixed_arity))
         throw caml_maybe_attach_backtrace([0, Assert_failure, D], 1);
        param = last;
        break;
       default: return 0;
     }
    }
   }
   function names(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     switch(param[0]){
       case 3:
        var ts = param[1]; return Base_List[14].call(null, ts, names);
       case 0:
       case 4:
        var s = param[1]; return [0, s, 0];
       default: var t = param[1]; param = t;
     }
    }
   }
   var zero = 0;
   function concat$0(param){
    if(! param) return 0;
    var
     cdr = param[2],
     car = param[1],
     match =
       Base_List[20].call
        (null,
         cdr,
         [0, car, 0],
         function(param, t2){
          var acc = param[2], t1 = param[1];
          if(typeof t1 === "number")
           var t = t2;
          else{
           if(typeof t2 !== "number"){
            if(is_fixed_arity(t1)) return [0, t2, [0, t1, acc]];
            var
             a = caml_call1(usage, t1),
             b = caml_call1(usage, t2),
             c =
               caml_call1
                (usage, [3, Base_List[63].call(null, [0, t2, [0, t1, acc]])]);
            return caml_call4(Command_Import[8].call(null, F), c, b, a, 0);
           }
           var t = t1;
          }
          return [0, t, acc];
         }),
     cdr$0 = match[2],
     car$0 = match[1];
    return cdr$0 ? [3, Base_List[63].call(null, [0, car$0, cdr$0])] : car$0;
   }
   function parse_more(param, f){
    var complete = param[3], parse = param[2], name = param[1];
    function parse$0(arg, for_completion){
     var
      match = caml_call2(parse, arg, for_completion),
      update_env = match[2],
      parser = match[1];
     return [0, caml_call1(f, parser), update_env];
    }
    return [1, [0, name, parse$0, complete]];
   }
   function pack_for_completion(x){
    switch(x[0]){
      case 0:
       return 0;
      case 3:
       var ps = x[1]; return ps;
      default: return [0, [0, x], 0];
    }
   }
   function symbol$0(t_left, t_right){
    a:
    {
     switch(t_left[0]){
       case 0:
        var f = t_left[1];
        switch(t_right[0]){
          case 0:
           var x = t_right[1];
           return [0,
                   function(env){
                    var
                     f_outcome = caml_call1(f, env),
                     x_outcome = caml_call1(x, env);
                    return caml_call1(f_outcome, x_outcome);
                   }];
          case 1:
           var more = t_right[1];
           return parse_more(more, function(tr){return symbol$0(t_left, tr);});
          case 2:
           var test = t_right[1];
           return [2,
                   function(more){
                    return symbol$0(t_left, caml_call1(test, more));
                   }];
          case 4:
           var tr = t_right[1], tl = t_left; break a;
        }
        break;
       case 1:
        var more$0 = t_left[1];
        return parse_more(more$0, function(tl){return symbol$0(tl, t_right);});
       case 2:
        var test$0 = t_left[1];
        return [2,
                function(more){
                 return symbol$0(caml_call1(test$0, more), t_right);
                }];
       case 4:
        var tr = t_right, tl = t_left[1]; break a;
     }
     var a = pack_for_completion(t_right), b = pack_for_completion(t_left);
     return [3, Base[222].call(null, b, a)];
    }
    return [4, symbol$0(tl, tr)];
   }
   function return$0(a){return [0, function(param){return a;}];}
   function symbol_map(t, f){return symbol$0(return$0(f), t);}
   function from_env(f){
    return [0, function(env){return caml_call1(f, env);}];
   }
   function symbol_map$0(t, f){
    return symbol_map(t, function(a){return caml_call2(map$0, a, f);});
   }
   function symbol$1(t_left, t_right){
    return symbol$0(symbol$0(return$0(symbol), t_left), t_right);
   }
   function return$1(a){return return$0(caml_call1(return$, a));}
   function return_with_arg$0(a){
    return [0, function(param){return return_with_arg(a);}];
   }
   function one_more(name, arg_type){
    function parse$0(anon, for_completion){
     var match = parse(arg_type, anon);
     if(0 === match[0]){
      var v = match[1];
      return [0,
              return_with_arg$0(v),
              function(env){
               return Base_Option[34].call
                       (null,
                        arg_type[3],
                        env,
                        function(env, key){return multi_add(env, key, v);});
              }];
     }
     var error = match[1];
     if(for_completion) return [0, G, function(a){return a;}];
     var a = Base_Error[12].call(null, error);
     return caml_call4(die(H), name, anon, a, 0);
    }
    return [1, [0, name, parse$0, arg_type[2]]];
   }
   function one(name, arg_type){
    return [2,
            function(more){
             return more
                     ? one_more(name, arg_type)
                     : [0,
                       function(param){
                        var a = caml_call1(Command_Import[7].call(null, I), name);
                        return error
                                (0, [0, 696341824, Base_Error[14].call(null, a)]);
                       }];
            }];
   }
   function sequence(t){
    var loop = [];
    runtime.caml_update_dummy
     (loop,
      [2,
       function(more){
        return more
                ? symbol$1
                  (symbol$1
                    (return$1(function(v, acc){return [0, v, acc];}), t),
                   loop)
                : return$1(0);
       }]);
    return loop;
   }
   function consume(t$3, arg, for_completion){
    var t = t$3;
    a:
    for(;;)
     switch(t[0]){
       case 0:
        return caml_call1(die(K), 0);
       case 1:
        var
         parse = t[1][2],
         match = caml_call2(parse, arg, for_completion),
         update_env = match[2],
         parser = match[1];
        return [0, parser, 1, update_env];
       case 2:
        var f = t[1], t$0 = caml_call1(f, 1); t = t$0; break;
       case 3:
        break a;
       default:
        var t$2 = t[1], a = consume(t$2, arg, for_completion);
        return [0, a[1], 0, a[3]];
     }
    var packed = t[1];
    if(! packed) return [0, L, 1, function(a){return a;}];
    var
     rest = packed[2],
     t$1 = packed[1][1],
     match$0 = consume(t$1, arg, for_completion),
     update_env$0 = match$0[3],
     parse_flags = match$0[2],
     parser$0 = match$0[1],
     b = pack_for_completion(parser$0);
    return [0, [3, Base[222].call(null, b, rest)], parse_flags, update_env$0];
   }
   function t2(t1, t2){
    var a = concat$0([0, t1[2], [0, t2[2], 0]]), b = t2[1], c = t1[1];
    return [0,
            symbol$1
             (symbol$1(return$1(function(a1, a2){return [0, a1, a2];}), c), b),
            a];
   }
   function t3(t1, t2, t3){
    var
     a = concat$0([0, t1[2], [0, t2[2], [0, t3[2], 0]]]),
     b = t3[1],
     c = t2[1],
     d = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (return$1(function(a1, a2, a3){return [0, a1, a2, a3];}), d),
                c),
              b),
            a];
   }
   function t4(t1, t2, t3, t4){
    var
     a = concat$0([0, t1[2], [0, t2[2], [0, t3[2], [0, t4[2], 0]]]]),
     b = t4[1],
     c = t3[1],
     d = t2[1],
     e = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (symbol$1
                   (return$1
                     (function(a1, a2, a3, a4){return [0, a1, a2, a3, a4];}),
                    e),
                  d),
                c),
              b),
            a];
   }
   function normalize(str){
    var strlen = caml_ml_string_length(str);
    if(0 === strlen) Base[244].call(null, cst_Empty_anonymous_argument_n);
    var a = Base_String[109].call(null, 0, str);
    if(Base_String[50].call(null, a, str))
     caml_call2(Command_Import[8].call(null, M), str, 0);
    var
     special_chars = Base_Set[32].call(null, [0, Base_Char[25]], N),
     b = Base_Set[9],
     has_special_chars =
       Base_String[19].call
        (null, str, function(a){return b(special_chars, a);});
    return has_special_chars ? str : Base_String[71].call(null, str);
   }
   function symbol$2(name, arg_type){
    var name$0 = normalize(name);
    return [0, one(name$0, arg_type), [0, name$0]];
   }
   function map_anons(t, f){
    var a = t[2];
    return [0, symbol_map$0(t[1], f), a];
   }
   function maybe(t){
    var t$0 = t[2], a = typeof t$0 === "number" ? 0 : [2, t$0], t$1 = t[1];
    return [0,
            [2,
             function(more){
              return more
                      ? symbol$1
                        (return_with_arg$0(function(a){return [0, a];}), t$1)
                      : return$1(0);
             }],
            a];
   }
   function maybe_with_default(default$, t){
    var t$0 = maybe(t), a = t$0[2];
    return [0,
            symbol_map$0
             (t$0[1],
              function(v){return Base_Option[30].call(null, v, default$);}),
            a];
   }
   function sequence$0(t){
    var t$0 = t[2];
    if(typeof t$0 === "number")
     var a = 0;
    else{
     if(1 - is_fixed_arity(t$0)){
      var b = caml_call1(usage, t$0);
      caml_call2(Command_Import[8].call(null, E), b, 0);
     }
     var a = [1, t$0];
    }
    return [0, sequence(t[1]), a];
   }
   function non_empty_sequence_as_pair(t){return t2(t, sequence$0(t));}
   function non_empty_sequence_as_list(t){
    var t$0 = non_empty_sequence_as_pair(t), a = t$0[2];
    return [0,
            symbol_map$0
             (t$0[1],
              function(param){
               var xs = param[2], x = param[1];
               return [0, x, xs];
              }),
            a];
   }
   function ad_hoc(usage_arg){
    return [0,
            sequence(one(cst_WILL_NEVER_BE_PRINTED, string)),
            [4, usage_arg]];
   }
   function compare(a_025$0, b_026$0){
    var a_025 = a_025$0, b_026 = b_026$0;
    for(;;){
     if(a_025 === b_026) return 0;
     if(typeof a_025 === "number") return typeof b_026 === "number" ? 0 : -1;
     if(0 === a_025[0]){
      var a_029 = a_025[2], a_027 = a_025[1];
      if(typeof b_026 !== "number"){
       if(0 !== b_026[0]) return -1;
       var
        b_030 = b_026[2],
        b_028 = b_026[1],
        n = Base[195].call(null, a_027, b_028);
       if(0 !== n) return n;
       a_025 = a_029;
       b_026 = b_030;
       continue;
      }
     }
     else{
      var a_031 = a_025[1];
      if(typeof b_026 !== "number"){
       if(0 === b_026[0]) return 1;
       var b_032 = b_026[1];
       return Base[195].call(null, a_031, b_032);
      }
     }
     return 1;
    }
   }
   function of_list(args){
    return Base_List[105].call
            (null, args, function(arg, args){return [0, arg, args];}, 0);
   }
   function to_list(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){
     var xs = param[2], x = param[1];
     return [0, x, to_list(xs)];
    }
    var x$0 = param[1];
    return [0, x$0, 0];
   }
   function ends_in_complete(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 !== param[0]) return 1;
     var args = param[2];
     param = args;
    }
   }
   function extend(t, extend, path){
    if(ends_in_complete(t)) return t;
    var
     a = parts(path),
     b = Base_List[87].call(null, a),
     path_list = Base_Option[30].call(null, b, 0),
     c = caml_call1(extend, path_list),
     d = to_list(t);
    return of_list(Base[222].call(null, d, c));
   }
   function normalize$0(key_type, flag_or_subcommand){
    if
     (Base_String[19].call
       (null,
        flag_or_subcommand,
        function(c){return Base_Char[12].call(null, c, 95);})){
     var a = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call3(Command_Import[8].call(null, O), a, flag_or_subcommand, 0);
    }
    if(! key_type) return Base_String[72].call(null, flag_or_subcommand);
    if(Base_String[134].call(null, flag_or_subcommand, cst$5))
     caml_call3
      (Command_Import[8].call
        (null,
         [0,
          [11,
           cst_invalid,
           [24,
            Q,
            function(param, custom_printf_033){
             return caml_call1(Command_Shape[14][1][1], custom_printf_033);
            },
            P]],
          cst_invalid_Key_type_name_S]),
       key_type,
       flag_or_subcommand,
       0);
    if(Base_String[19].call(null, flag_or_subcommand, Base_Char[45]))
     caml_call3
      (Command_Import[8].call
        (null,
         [0,
          [11,
           cst_invalid$0,
           [24,
            S,
            function(param, custom_printf_034){
             return caml_call1(Command_Shape[14][1][1], custom_printf_034);
            },
            R]],
          cst_invalid_Key_type_name_cont]),
       key_type,
       flag_or_subcommand,
       0);
    return Base_String[97].call(null, flag_or_subcommand, cst$6)
            ? flag_or_subcommand
            : Base[241].call(null, cst$7, flag_or_subcommand);
   }
   var lookup_expand = Command_Shape[14][4];
   function subcommand_cmp_fst(b, param){
    var c = param[1], a = b[1];
    return caml_call2(help_screen_compare, a, c);
   }
   function flags_help(opt, t){
    var
     display_help_flags = opt ? opt[1] : 1,
     flags = Base_Map[74].call(null, t[3]),
     flags$0 =
       display_help_flags
        ? flags
        : Base_List
           [12].call
          (null,
           flags,
           function(f){return Base_String[50].call(null, f[1], cst_help);});
    return Base_List[14].call(null, flags$0, help);
   }
   function shape(t){
    var
     a = Base_Map[74].call(null, t[3]),
     b = Base_List[53].call(null, a, align),
     c =
       Base_List[83].call
        (null,
         b,
         function(a, b){return Base_String[51].call(null, a[1], b[1]);}),
     d = caml_call1(Command_Shape[4][1], c),
     e = [1, t[5]],
     f =
       caml_call2
        (Base_Option[24],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], f, e, d];
   }
   var
    path_key = key_create(cst_path),
    args_key = key_create(cst_args),
    help_key = key_create(cst_help$0),
    normalized_path = [0, 0],
    normalized_args = [0, 0];
   function get_flag_and_action(t, prefix){
    var
     map = t[3],
     a = Base_Map[74].call(null, map),
     alist =
       Base_List[14].call
        (null,
         a,
         function(flag){
          var
           name_matching = flag[8],
           aliases_excluded_from_help = flag[3],
           aliases = flag[2],
           name = flag[1],
           data = [0, flag, name_matching],
           aliases$0 =
             Base[222].call(null, aliases_excluded_from_help, aliases);
          return [0,
                  [0, name, data],
                  Base_List[53].call
                   (null, aliases$0, function(alias){return [0, alias, data];})];
         }),
     match =
       Base_List[128].call
        (null,
         alist,
         function(a, param){
          var s2 = param[1], s1 = a[1];
          return Base_String[51].call(null, s1, s2);
         }),
     key_type = 1;
    if(match)
     var
      flag = match[1][1],
      match$0 = caml_call2(Command_Import[8].call(null, U), flag, 0);
    else
     var match$0 = caml_call3(lookup_expand, alist, prefix, key_type);
    if(0 === match$0[0]){
     var match$1 = match$0[1], flag$0 = match$1[2], flag_name = match$1[1];
     return [0, flag_name, flag$0[4]];
    }
    var msg = match$0[1];
    return caml_call2(die(W), msg, 0);
   }
   function run_cmdline
   (t$7,
    env$3,
    parser$1,
    cmdline$2,
    for_completion,
    parse_flags$1,
    normalized_args$2){
    a:
    {
     var
      env$0 = env$3,
      parser = parser$1,
      cmdline = cmdline$2,
      parse_flags = parse_flags$1,
      normalized_args = normalized_args$2;
     for(;;){
      if(typeof cmdline === "number") break;
      if(0 !== cmdline[0]) break a;
      var args = cmdline[2], arg$1 = cmdline[1];
      b:
      if(parse_flags)
       if(arg$1 !== cst$24){
        if(arg$1 === "-anon" && typeof args !== "number" && 0 === args[0]){
         var
          args$0 = args[2],
          arg$3 = args[1],
          arg_is_flag = 0,
          cmdline$0 = args$0,
          arg$2 = arg$3;
         break b;
        }
        var
         arg_is_flag = Base_String[97].call(null, arg$1, cst$9),
         cmdline$0 = args,
         arg$2 = arg$1;
       }
       else
        var arg_is_flag = 0, cmdline$0 = args, arg$2 = arg$1;
      else
       var arg_is_flag = 0, cmdline$0 = args, arg$2 = arg$1;
      if(arg_is_flag){
       var
        match = get_flag_and_action(t$7, arg$2),
        action = match[2],
        flag = match[1];
       switch(action[0]){
         case 2:
          if(typeof cmdline$0 !== "number" && 0 === cmdline$0[0]){
           var arg = cmdline$0[1], b = [0, flag, [0, arg, 0]];
           break;
          }
          var b = 0;
          break;
         case 3:
          var b = [0, flag, to_list(cmdline$0)]; break;
         default: var b = [0, flag, 0];
       }
       var
        normalized_args$0 = [0, b, normalized_args],
        match$0 = get_flag_and_action(t$7, arg$2),
        action$0 = match$0[2],
        flag$0 = match$0[1];
       switch(action$0[0]){
         case 0:
          var
           f$1 = action$0[1],
           match$1 = [0, caml_call1(f$1, env$0), cmdline$0];
          break;
         case 1:
          var info = action$0[1], completing = ends_in_complete(cmdline$0);
          if(completing)
           var match$1 = [0, env$0, cmdline$0];
          else{
           var g = caml_call1(info, env$0);
           Command_Import[5].call(null, g);
           var match$1 = exit(0);
          }
          break;
         case 2:
          var comp = action$0[2], f$2 = action$0[1];
          if(typeof cmdline$0 === "number")
           var match$1 = caml_call2(die(X), flag$0, 0);
          else if(0 === cmdline$0[0]){
           var rest = cmdline$0[2], arg$0 = cmdline$0[1];
           try{var h = caml_call2(f$2, env$0, arg$0), env = h;}
           catch(e$0){
            var e = caml_wrap_exception(e$0), tag = e[1];
            if(tag !== Failed_to_parse_command_line)
             throw caml_maybe_attach_backtrace(e, 0);
            if(! ends_in_complete(rest))
             throw caml_maybe_attach_backtrace(e, 0);
            var env = env$0;
           }
           var match$1 = [0, env, rest];
          }
          else
           var
            part = cmdline$0[1],
            i = run_and_exit(comp, env$0, part),
            match$1 = Base_Nothing[4].call(null, i);
          break;
         default:
          var
           comp$0 = action$0[2],
           f$3 = action$0[1],
           arg_list = to_list(cmdline$0);
          if(ends_in_complete(cmdline$0)){
           var j = run_and_exit(comp$0, env$0, arg_list);
           Base_Nothing[4].call(null, j);
          }
          var match$1 = [0, caml_call2(f$3, env$0, arg_list), 0];
       }
       var cmdline$1 = match$1[2], env$1 = match$1[1];
       env$0 = env$1;
       cmdline = cmdline$1;
       normalized_args = normalized_args$0;
      }
      else{
       var
        match$2 = consume(parser, arg$2, for_completion),
        update_env = match$2[3],
        parse_flags2 = match$2[2],
        parser$0 = match$2[1],
        env$2 = caml_call1(update_env, env$0),
        parse_flags$0 = parse_flags ? parse_flags2 : parse_flags,
        normalized_args$1 = [0, [0, arg$2, 0], normalized_args];
       env$0 = env$2;
       parser = parser$0;
       cmdline = cmdline$0;
       parse_flags = parse_flags$0;
       normalized_args = normalized_args$1;
      }
     }
     var k = Base_Map[74].call(null, t$7[3]);
     Base_List[19].call
      (null, k, function(flag){return caml_call1(flag[7], env$0);});
     var
      l = Base_List[63].call(null, normalized_args),
      t = parser,
      m = Base_List[11].call(null, l);
     for(;;){
      switch(t[0]){
        case 0:
         var a = t[1], d = caml_call1(a, env$0); break;
        case 1:
         throw caml_maybe_attach_backtrace([0, Assert_failure, J], 1);
        case 2:
         var f = t[1], t$0 = caml_call1(f, 0); t = t$0; continue;
        case 3:
         var d = Base[244].call(null, cst_BUG_asked_for_final_value_); break;
        default: var t$1 = t[1]; t = t$1; continue;
      }
      return [0,
              [0,
               -1061020774,
               caml_call2(mem, env$0, key_internal_validate_parsing)],
              d,
              m];
     }
    }
    var part$0 = cmdline[1];
    if(parse_flags){
     if(Base_String[97].call(null, part$0, cst$10)){
      var n = Base_Map[73].call(null, t$7[3]);
      Base_List[19].call
       (null,
        n,
        function(name){
         var a = Base_String[97].call(null, name, part$0);
         return a ? Command_Import[5].call(null, name) : a;
        });
      return exit(0);
     }
     var t$2 = parser;
    }
    else
     var t$2 = parser;
    for(;;){
     switch(t$2[0]){
       case 0:
        var c = exit(0); break;
       case 1:
        var complete = t$2[1][3], c = run_and_exit(complete, env$0, part$0);
        break;
       case 2:
        var f$0 = t$2[1], t$3 = caml_call1(f$0, 1); t$2 = t$3; continue;
       case 3:
        var t$4 = t$2[1];
        if(t$4){var t$5 = t$4[1][1]; t$2 = t$5; continue;}
        var c = exit(0);
        break;
       default: var t$6 = t$2[1]; t$2 = t$6; continue;
     }
     return Base_Nothing[4].call(null, c);
    }
   }
   function run_exn(exn, for_completion, path, verbose_on_parse_error){
    var tag = exn[1];
    if(tag === Failed_to_parse_command_line && for_completion) return exit(0);
    var tag$0 = exn[1];
    if(tag$0 === Exit_called){var status = exn[2]; return exit(status);}
    var tag$1 = exn[1];
    if(tag$1 === Failed_to_parse_command_line)
     var msg = exn[2], exn_str = msg;
    else
     var
      g = Base[117].call(null, exn),
      exn_str = Base[85][14].call(null, 0, g);
    var verbose = Base_Option[30].call(null, verbose_on_parse_error, 1);
    if(verbose)
     var
      c = to_string(path),
      d = Base[241].call(null, c, cst_help$1),
      e =
        [0,
         cst_For_usage_information_run,
         [0, Base[241].call(null, cst$11, d), 0]],
      a = Base_String[102].call(null, exn_str, 10),
      b =
        Base_List[53].call
         (null, a, function(line){return Base[241].call(null, cst$8, line);}),
      f =
        [0,
         cst_Error_parsing_command_line,
         [0, Base_String[68].call(null, V, b), e]],
      error_msg = Base_String[68].call(null, Y, f);
    else
     var error_msg = exn_str;
    Command_Import[6].call(null, error_msg);
    return exit(1);
   }
   function run
   (t,
    env,
    when_parsing_succeeds,
    path,
    args,
    verbose_on_parse_error,
    help_text,
    on_failure){
    var
     for_completion = ends_in_complete(args),
     b = to_list(args),
     env$0 =
       caml_call3
        (set,
         caml_call3(set, caml_call3(set, env, path_key, path), args_key, b),
         help_key,
         help_text),
     match =
       Base_Result[41].call
        (null,
         function(param){
          var
           match =
             run_cmdline
              (t, env$0, caml_call1(t[4], 0), args, for_completion, 1, 0),
           parsed_normalized_args = match[3],
           main = match[2],
           is_using_validate_parsing = match[1];
          normalized_path[1] = [0, path];
          normalized_args[1] = [0, parsed_normalized_args];
          return [0, is_using_validate_parsing, caml_call1(main, 15369289)];
         });
    if(0 !== match[0]){
     var exn = match[1];
     return caml_call4
             (on_failure, exn, for_completion, path, verbose_on_parse_error);
    }
    var a = match[1];
    if(a[1][2]){caml_call1(when_parsing_succeeds, 0); return exit(0);}
    var thunk = a[2];
    caml_call1(when_parsing_succeeds, 0);
    return caml_call1(thunk, -903816947);
   }
   function wrap_value(v, param){return return_no_arg(v);}
   function apply$1(f, x){
    return [0,
            function(param){
             var a = caml_call1(x[1], 0), b = caml_call1(f[1], 0);
             return symbol$0
                     (symbol$0
                       (return$0
                         (function(f, x, param){
                           var
                            f_outcome = caml_call1(f, 0),
                            x_outcome = caml_call1(x, 0);
                           return caml_call2(apply$0, f_outcome, x_outcome);
                          }),
                        b),
                      a);
            },
            function(param){
             var a = [0, caml_call1(x[2], 0), 0];
             return concat$0([0, caml_call1(f[2], 0), a]);
            },
            function(param){
             var a = caml_call1(f[3], 0), b = caml_call1(x[3], 0);
             return Base[222].call(null, b, a);
            }];
   }
   var
    empty_spec =
      [0,
       function(param){
        return return$0
                (function(param){
                  return return_no_arg(function(a){return a;});
                 });
       },
       function(param){return zero;},
       function(param){return 0;}];
   function map_outcome(x, f){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(x[1], 0),
                      function(x, param){
                       var x_outcome = caml_call1(x, 0);
                       return caml_call1(f, x_outcome);
                      });
            },
            x[2],
            x[3]];
   }
   function map$2(x, f){
    return map_outcome(x, function(a){return caml_call2(map$0, a, f);});
   }
   function lookup(key){
    return [0,
            function(param){
             return symbol_map
                     (from_env
                       (function(env){return caml_call2(find_exn, env, key);}),
                      wrap_value);
            },
            function(param){return zero;},
            function(param){return 0;}];
   }
   var
    path = lookup(path_key),
    args = lookup(args_key),
    help$0 = lookup(help_key),
    env =
      [0,
       function(param){
        return symbol_map(from_env(function(env){return env;}), wrap_value);
       },
       function(param){return zero;},
       function(param){return 0;}];
   function anon(spec){
    caml_call1(invariant, spec[2]);
    return [0,
            function(param){
             return symbol_map
                     (spec[1], function(outcome, param){return outcome;});
            },
            function(param){return spec[2];},
            function(param){return 0;}];
   }
   function escape_anon(final_anon){
    var
     t$0 = t2(final_anon, sequence$0(symbol$2(cst_ARG, string))),
     t = t$0[1];
    return anon([0, [4, t], t$0[2]]);
   }
   function flag_internal
   (opt, full_flag_required, name, mode, doc, aliases_excluded_from_help){
    var aliases = opt ? opt[1] : 0;
    function normalize(flag){return normalize$0(1, flag);}
    var
     name$0 = normalize(name),
     aliases$0 = Base_List[53].call(null, aliases, normalize),
     match = caml_call1(mode, name$0),
     extra_doc = match[4],
     num_occurrences = match[3],
     read = match[2],
     action = match[1],
     check_available =
       num_occurrences[1]
        ? function(env){caml_call1(read, env); return 0;}
        : function(a){return 0;},
     name_matching =
       Base_Option[53].call(null, full_flag_required)
        ? -461087063
        : -481604174;
    return [0,
            function(param){
             return symbol_map
                     (from_env(function(env){return caml_call1(read, env);}),
                      function(v, param){return v;});
            },
            function(param){return zero;},
            function(param){
             var a = caml_obj_tag(extra_doc);
             a:
             {
              var c = 0;
              if(250 === a)
               var match = extra_doc[1];
              else{
               if(246 !== a && 244 !== a){var match = extra_doc; break a;}
               var match = CamlinternalLazy[2].call(null, extra_doc);
              }
             }
             if(match)
              var
               extra_doc$0 = match[1],
               d =
                 [0,
                  doc,
                  [0,
                   Ppx_string_runtime[1][2].call(null, cst$12),
                   [0, extra_doc$0, 0]]],
               b = Ppx_string_runtime[1][4].call(null, d);
             else
              var b = doc;
             return [0,
                     [0,
                      name$0,
                      aliases$0,
                      aliases_excluded_from_help,
                      action,
                      b,
                      num_occurrences,
                      check_available,
                      name_matching],
                     c];
            }];
   }
   function flag(c, b, a){
    return function(e){
     function d(d, f){return flag_internal(c, b, a, e, d, f);}
     return function(a){return d(a, 0);};};
   }
   function flag_optional_with_default_doc
   (aliases,
    full_flag_required,
    name,
    arg_type,
    sexp_of_default,
    default$,
    doc){
    var default_sexp = caml_call1(sexp_of_default, default$);
    a:
    {
     if(0 === default_sexp[0] && default_sexp[1] === cst$29){var doc$0 = doc; break a;}
     var
      doc$0 =
        caml_call2
         (Command_Import[7].call
           (null,
            [0,
             [2,
              0,
              [11,
               cst_default,
               [24,
                _,
                function(param, custom_printf_035){
                 return Base[85][16].call(null, custom_printf_035);
                },
                Z]]],
             cst_s_default_Sexp]),
          doc,
          default_sexp);
    }
    return caml_call1
            (flag(aliases, full_flag_required, name)
              (function(a){
                return optional_with_default(default$, arg_type, a);
               }),
             doc$0);
   }
   function return$2(v){
    return [0,
            function(param){
             return return$0(function(param){return return_no_arg(v);});
            },
            function(param){return zero;},
            function(param){return 0;}];
   }
   function recover_from_missing_required_(t){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(t[1], 0),
                      function(f, param){
                       var outcome = caml_call1(f, 0);
                       return [0, [0, outcome], outcome[2]];
                      });
            },
            t[2],
            t[3]];
   }
   function introduce_missing_required_fla$0(t){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(t[1], 0),
                      function(f, param){
                       var outcome = caml_call1(f, 0);
                       return introduce_missing_required_fla(outcome);
                      });
            },
            t[2],
            t[3]];
   }
   function optional_to_required(t){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(t[1], 0),
                      function(f, param){
                       var outcome = caml_call1(f, 0);
                       return introduce_missing_required_fla
                               (caml_call2
                                 (map$0,
                                  outcome,
                                  function(param){
                                   if(! param)
                                    return [1,
                                            [0,
                                             696341824,
                                             Base_Error[14].call(null, cst_optional_to_required_got_a)]];
                                   var v = param[1];
                                   return [0, v];
                                  }));
                      });
            },
            t[2],
            t[3]];
   }
   var
    map$3 = [0, -198771759, map$2],
    include$1 = Base_Applicative[7].call(null, [0, return$2, apply$1, map$3]),
    return$3 = include$1[1],
    map$4 = include$1[2],
    both = include$1[3],
    symbol$3 = include$1[4],
    symbol$4 = include$1[5],
    symbol$5 = include$1[6],
    symbol_map$1 = include$1[7],
    apply$2 = include$1[8],
    map2 = include$1[9],
    map3 = include$1[10],
    all = include$1[11],
    all_unit = include$1[12],
    Applicative_infix = include$1[13];
   function arg_names(t){
    var
     flags = create$0(caml_call1(t[3], 0)),
     flag_names = Base_Map[73].call(null, flags),
     anon_names = names(caml_call1(t[2], 0));
    return Base_List[11].call(null, [0, flag_names, [0, anon_names, 0]]);
   }
   function required_arg_names(t){
    var
     flags = create$0(caml_call1(t[3], 0)),
     a = Base_Map[75].call(null, 0, flags);
    return Base_List[13].call
            (null,
             a,
             function(param){
              var flag = param[2], name = param[1];
              return flag[6][1] ? [0, name] : 0;
             });
   }
   function compare$0(a_036, b_037){
    if(a_036 === b_037) return 0;
    var
     n =
       Base[159].call
        (null,
         function(a_038, b_039){return Base[195].call(null, a_038, b_039);},
         a_036[1],
         b_037[1]);
    return 0 === n
            ? Base
               [159].call
              (null,
               function(a_040, b_041){
                return Base[195].call(null, a_040, b_041);
               },
               a_036[2],
               b_037[2])
            : n;
   }
   function sexp_of_t(t){
    var x_042 = t[1];
    return Base[165].call(null, Base[202], x_042);
   }
   var
    T = [0, compare$0, sexp_of_t],
    include$2 = Base_Comparator[7].call(null, T),
    comparator = include$2[1];
   function create_exn(param){
    var
     required_args = required_arg_names(param),
     names = arg_names(param),
     names_with_commas =
       Base_List[12].call
        (null,
         names,
         function(s){return Base_String[70].call(null, 0, 0, s, 44);});
    if(1 - Base_List[18].call(null, names_with_commas)){
     var
      a =
        Base_Error[19].call
         (null,
          $,
          0,
          cst_For_simplicity_Command_Spe,
          names_with_commas,
          function(x_043){return Base[165].call(null, Base[202], x_043);});
     Base_Error[31].call(null, a);
    }
    if(names) return [0, names, required_args];
    var b = Sexplib0_Sexp_conv[7].call(null, cst_choose_one_expects_choices);
    return Base[246].call(null, b);
   }
   function to_string$0(t){
    return t[2]
            ? Base_String[68].call(null, aa, t[2])
            : Base_String[68].call(null, ab, t[1]);
   }
   function enumerate_required_flags(t, except){
    var
     l =
       Base_List[12].call
        (null,
         t[2],
         function(x){return 1 - Base_String[134].call(null, except, x);});
    return l ? [0, Base_String[68].call(null, ac, l)] : 0;
   }
   function list_to_string(ts){
    var a = Base_List[53].call(null, ts, to_string$0);
    return Base_String[68].call(null, ad, a);
   }
   var If_nothing_chosen = [0];
   function choose_one_non_optional(opt, ts, if_nothing_chosen){
    var
     new_behavior = opt ? opt[1] : 1,
     a =
       Base_List[53].call
        (null,
         ts,
         function(t){
          if(new_behavior)
           var
            name_of_the_group = create_exn(t),
            a =
              [0,
               t[1],
               function(param){
                var anon = caml_call1(t[2], 0);
                if(typeof anon === "number") return 0;
                switch(anon[0]){
                  case 1:
                   var t$0 = anon[1]; return [1, t$0];
                  case 2:
                   var t$1 = anon[1]; return [2, t$1];
                  default: return [2, anon];
                }
               },
               function(param){
                var a = caml_call1(t[3], 0);
                return Base_List[53].call
                        (null,
                         a,
                         function(flag_internal){
                          var
                           a = flag_internal[1],
                           c = flag_internal[8],
                           d = flag_internal[7],
                           e = [0, 0, flag_internal[6][2]],
                           f = flag_internal[5],
                           g = flag_internal[4],
                           h = flag_internal[3],
                           i = flag_internal[2],
                           match = enumerate_required_flags(name_of_the_group, a);
                          if(match)
                           var
                            group = match[1],
                            b = caml_call1(Command_Import[7].call(null, ae), group);
                          else
                           var b = cst$13;
                          return [0,
                                  a,
                                  i,
                                  h,
                                  g,
                                  caml_call2(Command_Import[7].call(null, af), f, b),
                                  e,
                                  d,
                                  c];
                         });
               }];
          else
           var a = t;
          return [0, create_exn(t), a];
         }),
     match = Base_Map[8].call(null, [0, comparator], a),
     variant = match[1];
    if(17724 <= variant){
     var ts$0 = match[2], b = caml_call1(return$3, 0);
     return introduce_missing_required_fla$0
             (caml_call2
               (map$4,
                Base_Map[55].call
                 (null,
                  ts$0,
                  b,
                  function(name, t, acc){
                   return caml_call3
                           (map2,
                            acc,
                            recover_from_missing_required_(t),
                            function(acc, param){
                             var has_arg = param[2], value = param[1];
                             return has_arg ? [0, [0, name, value], acc] : acc;
                            });
                  }),
                function(value_list){
                 var arg_counter = Base_List[45].call(null, value_list);
                 function more_than_one_error(passed){
                  var a = Base_List[53].call(null, passed, Base[242]);
                  return caml_call2
                          (die
                            ([0,
                              [11,
                               cst_Cannot_pass_more_than_one_$0,
                               [24,
                                ag,
                                function(param, custom_printf_044){
                                 return list_to_string(custom_printf_044);
                                },
                                0]],
                              cst_Cannot_pass_more_than_one_]),
                           a,
                           0);
                 }
                 var
                  match =
                    Base_List[16].call
                     (null,
                      value_list,
                      function(param){
                       var match = param[2], name = param[1];
                       if(0 === match[0]){
                        var value = match[1];
                        return [0, [0, name, value]];
                       }
                       var err = match[1];
                       return [1, [0, name, err]];
                      }),
                  error_list = match[2],
                  success_list = match[1];
                 if(success_list){
                  var b = success_list[1];
                  if(success_list[2])
                   return more_than_one_error(success_list);
                  var value = b[2];
                  if(1 < arg_counter) return more_than_one_error(value_list);
                  var
                   c =
                     typeof if_nothing_chosen === "number"
                      ? if_nothing_chosen ? [0, value] : value
                      : value;
                  return [0, c];
                 }
                 if(error_list && ! error_list[2]){
                  var
                   a = error_list[1],
                   err = a[2][2],
                   name = a[1],
                   e = Base_Error[12].call(null, err),
                   f = to_string$0(name),
                   g = caml_call2(Command_Import[7].call(null, aj), f, e);
                  return [1, [0, 696341824, Base_Error[14].call(null, g)]];
                 }
                 if(typeof if_nothing_chosen !== "number"){
                  var value$0 = if_nothing_chosen[1];
                  return [0, value$0];
                 }
                 if(if_nothing_chosen) return ah;
                 var
                  fmt =
                    [0,
                     [11,
                      cst_Must_pass_one_of_these,
                      [24,
                       ai,
                       function(param, custom_printf_045){
                        return list_to_string(custom_printf_045);
                       },
                       0]],
                     cst_Must_pass_one_of_these_Cho],
                  d = Base_Map[73].call(null, ts$0);
                 return caml_call2
                         (Command_Import[9].call
                           (null,
                            function(msg, param){
                             return [1, [0, 696341824, Base_Error[14].call(null, msg)]];
                            },
                            fmt),
                          d,
                          0);
                }));
    }
    var
     name = match[2],
     c =
       Base_Error[19].call
        (null, ak, 0, cst_Command_Spec_choose_one_ca, name, sexp_of_t);
    return Base_Error[31].call(null, c);
   }
   function choose_one(ts, if_nothing_chosen){
    return choose_one_non_optional
            (al,
             Base_List[53].call
              (null,
               ts,
               function(t){
                return map_outcome
                        (t,
                         function(param){
                          var has_arg = param[2], result = param[1];
                          if(0 !== result[0]) return [0, result, has_arg];
                          var match = result[1];
                          if(! match)
                           return [0,
                                   [1,
                                    [0,
                                     696341824,
                                     Base_Error[14].call(null, cst_missing_required_flag)]],
                                   0];
                          var value = match[1];
                          return [0, [0, value], 1];
                         });
               }),
             if_nothing_chosen);
   }
   function choose_one_non_optional$0(lst, if_nothing_chosen){
    return choose_one_non_optional(0, lst, if_nothing_chosen);
   }
   function and_arg_names(t){
    return caml_call2
            (map$4, t, function(value){return [0, value, arg_names(t)];});
   }
   function and_arg_name(t){
    var names = arg_names(t);
    if(names && ! names[2]){
     var name = names[1];
     return caml_call2(map$4, t, function(value){return [0, value, name];});
    }
    var
     a = [0, Base[165].call(null, Base[202], names), 0],
     b =
       [1,
        [0,
         Sexplib0_Sexp_conv[7].call(null, cst_and_arg_name_expects_exact),
         a]];
    return Base[246].call(null, b);
   }
   function parse$1(param, args){
    var
     flags = param[3],
     f = param[1],
     cmdline = of_list(args),
     result = [0, 0],
     a = Univ_map[4];
    run
     ([0,
       cst$14,
       0,
       create$0(caml_call1(flags, 0)),
       function(param){
        return symbol_map
                (caml_call1(f, 0),
                 function(params, a, param){
                  var outcome = caml_call1(params, 0), match = outcome[1];
                  if(0 === match[0]){
                   var x = match[1];
                   result[1] = [0, [0, x]];
                   return 0;
                  }
                  var err = match[1][2];
                  result[1] = [0, [1, err]];
                  return 0;
                 });
       },
       zero],
      a,
      function(a){return a;},
      empty$0,
      cmdline,
      am,
      cst_No_help_for_parsing,
      function(exn, b, a, param){
       result[1] = [0, [1, Base_Error[27].call(null, 0, exn)]];
       return 0;
      });
    return Base_Option[31].call(null, an, 0, 0, result[1]);
   }
   function symbol$6(t1, t2){
    return caml_call3
            (map2,
             t1,
             t2,
             function(f1, f2, x){return caml_call1(f2, caml_call1(f1, x));});
   }
   function symbol$7(t1, p2){
    return caml_call3
            (map2,
             t1,
             p2,
             function(f1, p2, x){return caml_call1(caml_call1(f1, x), p2);});
   }
   function symbol$8(t1, p2){
    return caml_call3
            (map2,
             p2,
             t1,
             function(p2, f1, x){return caml_call1(f1, caml_call1(x, p2));});
   }
   function step(f){return caml_call1(return$3, f);}
   function const$(x){return caml_call1(return$3, x);}
   function wrap(f, t){
    return caml_call2
            (map$4, t, function(run, main){return caml_call2(f, run, main);});
   }
   function of_param(p){
    return caml_call2(map$4, p, function(f, k){return caml_call1(k, f);});
   }
   function to_param(t, m){
    return caml_call2(map$4, t, function(f){return caml_call1(f, m);});
   }
   var
    map$5 = [0, -198771759, map$4],
    include$3 = Base_Applicative[7].call(null, [0, return$3, apply$2, map$5]),
    return$4 = include$3[1],
    map$6 = include$3[2],
    both$0 = include$3[3],
    symbol$9 = include$3[4],
    symbol$10 = include$3[5],
    symbol$11 = include$3[6],
    symbol_map$2 = include$3[7],
    apply$3 = include$3[8],
    map2$0 = include$3[9],
    map3$0 = include$3[10],
    all$0 = include$3[11],
    all_unit$0 = include$3[12],
    Applicative_infix$0 = include$3[13];
   function flags_of_args_exn(args){
    return Base_List[20].call
            (null,
             args,
             empty_spec,
             function(acc, param){
              var doc = param[3], spec = param[2], name = param[1];
              function gen(f, flag_type){
               function f$0(m, x){caml_call1(f, x); return m;}
               var a = caml_call1(flag(0, 0, name)(flag_type), doc);
               return symbol$7(caml_call1(return$3, f$0), a);
              }
              function call(f, arg_type){
               return gen
                       (function(x){return Base_Option[37].call(null, x, f);},
                        function(a){return optional(arg_type, a);});
              }
              function set(r, arg_type){
               return call(function(x){r[1] = x; return 0;}, arg_type);
              }
              function set_bool(r, b){
               return gen
                       (function(passed){
                         var a = passed ? (r[1] = b, 0) : passed;
                         return a;
                        },
                        no_arg);
              }
              switch(spec[0]){
                case 0:
                 var
                  f = spec[1],
                  a =
                    gen
                     (function(passed){
                       return passed ? caml_call1(f, 0) : passed;
                      },
                      no_arg);
                 break;
                case 1:
                 var f$0 = spec[1], a = call(f$0, bool); break;
                case 2:
                 var r = spec[1], a = set_bool(r, 1); break;
                case 3:
                 var r$0 = spec[1], a = set_bool(r$0, 0); break;
                case 4:
                 var f$1 = spec[1], a = call(f$1, string); break;
                case 5:
                 var r$1 = spec[1], a = set(r$1, string); break;
                case 6:
                 var f$2 = spec[1], a = call(f$2, int); break;
                case 7:
                 var r$2 = spec[1], a = set(r$2, int); break;
                case 8:
                 var f$3 = spec[1], a = call(f$3, float); break;
                case 9:
                 var r$3 = spec[1], a = set(r$3, float); break;
                case 10:
                 var a = Base[244].call(null, cst_Arg_Tuple_is_not_supported);
                 break;
                case 11:
                 var
                  f$4 = spec[2],
                  syms = spec[1],
                  arg_type =
                    of_alist_exn
                     (0,
                      0,
                      ao,
                      0,
                      0,
                      Base_List[53].call
                       (null, syms, function(sym){return [0, sym, sym];})),
                  a = call(f$4, arg_type);
                 break;
                case 12:
                 var
                  f$5 = spec[1],
                  a =
                    gen
                     (function(x){
                       var a = Base_List[19];
                       return Base_Option[37].call
                               (null, x, function(b){return a(b, f$5);});
                      },
                      escape);
                 break;
                case 13:
                 var a = Base[244].call(null, cst_Arg_Rest_all_is_not_suppor);
                 break;
                default:
                 var a = Base[244].call(null, cst_Arg_Expand_is_not_supporte);
              }
              return symbol$6(acc, a);
             });
   }
   var Deprecated = [0, no_arg$0, escape$0, ad_hoc];
   function shape$0(subcommand_to_shape, t){
    var
     a = Base_List[137][9],
     b =
       caml_call2
        (Base_Lazy[15],
         t[3],
         function(b){return caml_call2(a, b, subcommand_to_shape);}),
     c =
       caml_call2
        (Base_Option[24],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], c, b];
   }
   var abs_path = Command_Shape[14][2], comp_cword = 2;
   function shape$1(t){
    var
     a = t[5],
     b = t[4],
     c = t[3],
     d =
       caml_call2
        (Base_Option[24],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], d, c, b, a];
   }
   function sexpable_shape(param){
    switch(param[0]){
      case 0:
       var base = param[1]; return [0, shape(base)];
      case 1:
       var group = param[1]; return [1, shape$0(sexpable_shape, group)];
      case 2:
       var exec = param[1]; return [2, shape$1(exec)];
      default:
       var thunk = param[1];
       return [3, caml_call2(Base_Lazy[15], thunk, sexpable_shape)];
    }
   }
   function extend_map_exn(map, key_type, key, data){
    var add = Base_Map[34], mem = Base_Map[45];
    if(mem(map, key)){
     var b = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call3(Command_Import[8].call(null, a), b, key, 0);
    }
    return add(map, key, data);
   }
   function extend_alist_exn(alist, key_type, key, data){
    if(caml_call3(Base_List[137][7], alist, Base_String[134], key)){
     var b = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call3(Command_Import[8].call(null, a), b, key, 0);
    }
    return caml_call4(Base_List[137][4], alist, Base_String[134], key, data);
   }
   function add
   (base, name, aliases, aliases_excluded_from_help, text, text_summary){
    var
     flags = base[3],
     flags$0 =
       extend_map_exn
        (flags,
         1,
         name,
         [0,
          name,
          aliases,
          aliases_excluded_from_help,
          [1, function(env){return caml_call1(text, env);}],
          caml_call1(Command_Import[7].call(null, ap), text_summary),
          at_most_once,
          function(a){return 0;},
          -481604174]);
    return [0, base[1], base[2], flags$0, base[4], base[5]];
   }
   function basic(summary, readme, param){
    var
     flags = param[3],
     usage = param[2],
     f = param[1],
     flags$0 = caml_call1(flags, 0),
     usage$0 = caml_call1(usage, 0);
    function anons(param){
     return symbol_map
             (caml_call1(f, 0),
              function(params, param){
               var outcome = caml_call1(params, 0), match = outcome[1];
               if(0 === match[0]){
                var thunk = match[1];
                return function(param){return caml_call1(thunk, 0);};
               }
               var err = match[1][2], a = Base_Error[12].call(null, err);
               return caml_call2(die(aq), a, 0);
              });
    }
    var
     flags$1 = create$0(flags$0),
     base = [0, summary, readme, flags$1, anons, usage$0],
     base$0 =
       add
        (base,
         cst_help$2,
         as,
         ar,
         function(env){
          var a = caml_call2(find_exn, env, help_key), b = caml_obj_tag(a);
          if(250 === b) return a[1];
          if(246 !== b && 244 !== b) return a;
          return CamlinternalLazy[2].call(null, a);
         },
         cst_this_help_text);
    return [0, base$0];
   }
   function basic_spec(summary, readme, spec, main){
    return basic(summary, readme, to_param(spec, main));
   }
   var subs_key = key_create(cst_subcommands);
   function lazy_group
   (summary, readme, preserve_subcommand_order, body, alist){
    var
     subcommands =
       caml_call2
        (Base_Lazy[15],
         alist,
         function(alist){
          var
           alist$0 =
             Base_List[53].call
              (null,
               alist,
               function(param){
                var t = param[2], name = param[1];
                return [0, normalize$0(0, name), t];
               }),
           match = Base_Map[8].call(null, [0, Base_String[59]], alist$0),
           variant = match[1];
          if(17724 <= variant){
           var map = match[2];
           return preserve_subcommand_order
                   ? alist$0
                   : Base_Map[75].call(null, 0, map);
          }
          var name = match[2];
          return caml_call2(Command_Import[8].call(null, at), name, 0);
         });
    return [1, [0, summary, readme, subcommands, body]];
   }
   function group(summary, readme, preserve_subcommand_order, body, alist){
    var
     readme$0 =
       caml_call2
        (Base_Option[24],
         readme,
         function(f, param){
          var a = caml_call1(f, 0);
          return Base_String[109].call(null, 0, a);
         });
    return lazy_group
            (summary,
             readme$0,
             preserve_subcommand_order,
             body,
             Base_Lazy[24].call(null, alist));
   }
   function exec(summary, readme, opt, env, path_to_exe, param){
    var
     child_subcommand = opt ? opt[1] : 0,
     variant = path_to_exe[1],
     a =
       -310138871 <= variant
        ? Stdlib_Sys[1]
        : caml_check_bound(caml_sys_argv(0), 0)[1],
     working_dir = Filename_base[38].call(null, a),
     variant$0 = path_to_exe[1];
    if(491227799 <= variant$0)
     var
      p = path_to_exe[2],
      path_to_exe$0 =
        Filename_base[30].call(null, p)
         ? p
         : Base[244].call(null, cst_Path_passed_to_Absolute_mu);
    else
     var
      p$0 = path_to_exe[2],
      path_to_exe$0 =
        Filename_base[29].call(null, p$0)
         ? p$0
         : Base[244].call(null, cst_Path_passed_to_Relative_to);
    return [2,
            [0,
             summary,
             readme,
             working_dir,
             path_to_exe$0,
             child_subcommand,
             env]];
   }
   function of_lazy$0(thunk){return [3, thunk];}
   function proxy_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    var
     kind =
       kind_of_sexpable
        (sexpable,
         working_dir,
         path_to_exe,
         child_subcommand,
         path_to_subcommand);
    return [0,
            working_dir,
            path_to_exe,
            path_to_subcommand,
            child_subcommand,
            kind];
   }
   function kind_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    switch(sexpable[0]){
      case 0:
       var b = sexpable[1]; return [0, b];
      case 1:
       var
        g = sexpable[1],
        a =
          function(param){
           var
            sexpable = param[2],
            str = param[1],
            path_to_subcommand$0 =
              Base[222].call(null, path_to_subcommand, [0, str, 0]),
            proxy =
              proxy_of_sexpable
               (sexpable,
                working_dir,
                path_to_exe,
                child_subcommand,
                path_to_subcommand$0);
           return [0, str, proxy];
          },
        c = Base_List[53],
        d = caml_call2(Base_Lazy[15], g[3], function(b){return c(b, a);});
       return [1, [0, g[1], g[2], d]];
      case 2:
       var e = sexpable[1]; return [2, e];
      default:
       var l = sexpable[1];
       return [3,
               caml_call2
                (Base_Lazy[15],
                 l,
                 function(sexpable){
                  return kind_of_sexpable
                          (sexpable,
                           working_dir,
                           path_to_exe,
                           child_subcommand,
                           path_to_subcommand);
                 })];
    }
   }
   function Version_info(Version_util){
    function print_version(version){
     var a = caml_obj_tag(version);
     a:
     if(250 === a)
      var b = version[1];
     else{
      if(246 !== a && 244 !== a){var b = version; break a;}
      var b = CamlinternalLazy[2].call(null, version);
     }
     return Command_Import[5].call(null, b);
    }
    function print_build_info(build_info){
     var a = caml_obj_tag(build_info);
     a:
     if(250 === a)
      var b = build_info[1];
     else{
      if(246 !== a && 244 !== a){var b = build_info; break a;}
      var b = CamlinternalLazy[2].call(null, build_info);
     }
     return Command_Import[5].call(null, b);
    }
    function command(version, build_info){
     var
      a =
        caml_call1
         (flag(0, 0, cst_build_info)(no_arg), cst_print_build_info_for_this_),
      b =
        caml_call1
         (flag(0, 0, cst_version)(no_arg), cst_print_the_version_of_this_);
     return basic
             (cst_print_version_information,
              0,
              caml_call2
               (symbol$3,
                caml_call2
                 (symbol$3,
                  caml_call1
                   (return$3,
                    function(version_flag, build_info_flag){
                     if(build_info_flag)
                      print_build_info(build_info);
                     else if(version_flag)
                      print_version(version);
                     else{print_build_info(build_info); print_version(version);}
                     return exit(0);
                    }),
                  b),
                a));
    }
    function add$0(version, build_info, unversioned){
     switch(unversioned[0]){
       case 0:
        var
         base = unversioned[1],
         base$0 =
           add
            (base,
             cst_version$0,
             0,
             au,
             function(param){
              var a = caml_obj_tag(version);
              if(250 === a) return version[1];
              if(246 !== a && 244 !== a) return version;
              return CamlinternalLazy[2].call(null, version);
             },
             cst_the_version_of_this_build),
         base$1 =
           add
            (base$0,
             cst_build_info$0,
             0,
             av,
             function(param){
              var a = caml_obj_tag(build_info);
              if(250 === a) return build_info[1];
              if(246 !== a && 244 !== a) return build_info;
              return CamlinternalLazy[2].call(null, build_info);
             },
             cst_info_about_this_build);
        return [0, base$1];
       case 1:
        var
         group = unversioned[1],
         subcommands =
           caml_call2
            (Base_Lazy[15],
             group[3],
             function(subcommands){
              return extend_alist_exn
                      (subcommands,
                       0,
                       cst_version$1,
                       command(version, build_info));
             });
        return [1, [0, group[1], group[2], subcommands, group[4]]];
       case 2:
        var exec = unversioned[1]; return [2, exec];
       default:
        var thunk = unversioned[1];
        return [3,
                [246,
                 function(param){
                  var a = caml_obj_tag(thunk);
                  a:
                  if(250 === a)
                   var b = thunk[1];
                  else{
                   if(246 !== a && 244 !== a){var b = thunk; break a;}
                   var b = CamlinternalLazy[2].call(null, thunk);
                  }
                  return add$0(version, build_info, b);
                 }]];
     }
    }
    function normalize_version_lines(lines){
     var a = Base_List[83].call(null, lines, Base_String[51]);
     return Base_String[68].call(null, aw, a);
    }
    var
     default_version =
       [246, function(a){return normalize_version_lines(Version_util[2]);}],
     default_build_info =
       [246,
        function(a){return caml_call1(Version_util[3], Version_util[1][1]);}];
    return [0,
            print_version,
            print_build_info,
            ,
            add$0,
            normalize_version_lines,
            default_version,
            default_build_info];
   }
   Ppx_inline_test_lib[10].call
    (null,
     Inline_test_config,
     cst_Version_info,
     0,
     cst_command_src_command_ml$1,
     2622,
     0,
     752,
     function(param){
      function reprint_build_info(to_sexp){
       var a = caml_call1(to_sexp, 0);
       return Base[85][16].call(null, a);
      }
      var
       sexp_of_t = Base[220],
       Time = [0, sexp_of_t],
       Version_info$0 =
         Version_info([0, Time, version_list, reprint_build_info]);
      if(typeof Ppx_inline_test_lib[3] !== "number"){
       var
        Ppx_expect_test_block$0 =
          Ppx_expect_runtime_Test_block[1].call(null, Expect_test_config),
        e =
          Ppx_expect_runtime_Test_node[1][1].call
           (null, [0, Ppx_expect_runtime_Types[1][1]], aE, aD),
        f = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), e], 0],
        g = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
        h = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
       caml_call14
        (Ppx_expect_test_block$0[3],
         cst_command_src_command_ml$0,
         2633,
         aI,
         aH,
         aG,
         [0, Ppx_expect_runtime_Types[1][1]],
         0,
         h,
         g,
         aF,
         0,
         Inline_test_config,
         f,
         function(param){
          Version_info$0[1].call(null, Version_info$0[6]);
          var a = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
          return caml_call1(Ppx_expect_test_block$0[2], a);
         });
      }
      if(typeof Ppx_inline_test_lib[3] !== "number"){
       var
        Ppx_expect_test_block =
          Ppx_expect_runtime_Test_block[1].call(null, Expect_test_config),
        a =
          Ppx_expect_runtime_Test_node[1][1].call
           (null, [0, Ppx_expect_runtime_Types[1][1]], ay, ax),
        b = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), a], 0],
        c = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
        d = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
       caml_call14
        (Ppx_expect_test_block[3],
         cst_command_src_command_ml,
         2642,
         aC,
         aB,
         aA,
         [0, Ppx_expect_runtime_Types[1][1]],
         0,
         d,
         c,
         az,
         0,
         Inline_test_config,
         b,
         function(param){
          Version_info$0[2].call(null, cst_some_build_info);
          var a = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
          return caml_call1(Ppx_expect_test_block[2], a);
         });
      }
      return 0;
     });
   function summary(param$0){
    var param = param$0;
    for(;;){
     if(3 !== param[0]){var x = param[1]; return x[1];}
     var thunk = param[1], a = caml_obj_tag(thunk);
     if(250 === a)
      param = thunk[1];
     else{
      if(246 !== a && 244 !== a){param = thunk; continue;}
      param = CamlinternalLazy[2].call(null, thunk);
     }
    }
   }
   var path$0 = caml_call2(map$6, path, parts_exe_basename);
   function get_flag_names(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var base = param[1]; return Base_Map[73].call(null, base[3]);
       case 3:
        var thunk = param[1], a = caml_obj_tag(thunk);
        if(250 === a)
         param = thunk[1];
        else{
         if(246 !== a && 244 !== a){param = thunk; break;}
         param = CamlinternalLazy[2].call(null, thunk);
        }
        break;
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, aJ], 1);
     }
   }
   function help_recursive(cmd, with_flags, expand_dots, t, s){
    function help_recursive_rec(cmd$0, t$0, s){
     a:
     {
      var t = t$0;
      b:
      for(;;){
       var
        cmd = expand_dots ? cmd$0 : cst$16,
        d = Base[241].call(null, cmd, cst$15),
        new_s = Base[241].call(null, s, d);
       switch(t[0]){
         case 0:
          break a;
         case 1:
          break b;
         case 2:
          return 0;
         default:
          var thunk = t[1], c = caml_obj_tag(thunk);
          if(250 === c)
           t = thunk[1];
          else{
           if(246 !== c && 244 !== c){t = thunk; break;}
           t = CamlinternalLazy[2].call(null, thunk);
          }
       }
      }
      var
       match = t[1],
       subcommands = match[3],
       summary$0 = match[1],
       a = caml_obj_tag(subcommands);
      b:
      {
       var
        h =
          function(param){
           var t = param[2], cmd = param[1];
           return help_recursive_rec(cmd, t, new_s);
          };
       if(250 === a)
        var b = subcommands[1];
       else{
        if(246 !== a && 244 !== a){var b = subcommands; break b;}
        var b = CamlinternalLazy[2].call(null, subcommands);
       }
      }
      var
       i = Base_List[83].call(null, b, subcommand_cmp_fst),
       j = Base_List[14].call(null, i, h);
      return [0, [0, Base[241].call(null, s, cmd$0), summary$0], j];
     }
     var
      base = t[1],
      e = summary([0, base]),
      base_help = [0, Base[241].call(null, s, cmd$0), e];
     if(! with_flags) return [0, base_help, 0];
     var
      f = flags_help(aK, base),
      g = Base_List[83].call(null, f, subcommand_cmp_fst);
     return [0,
             base_help,
             Base_List[53].call
              (null,
               g,
               function(param){
                var h = param[2], flag = param[1];
                return [0, Base[241].call(null, new_s, flag), h];
               })];
    }
    return help_recursive_rec(cmd, t, s);
   }
   function autocomplete_function(argv_0, pid){
    var fname = caml_call1(Command_Import[7].call(null, aL), pid);
    return caml_call4
            (Command_Import[7].call(null, aM), fname, argv_0, fname, argv_0);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       Ppx_expect_runtime_Test_block[1].call(null, Expect_test_config),
     a6 =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], a5, a4),
     a7 = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), a6], 0],
     a9 = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     a_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_command_src_command_ml$2,
      2736,
      bb,
      ba,
      a$,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      a_,
      a9,
      a8,
      0,
      Inline_test_config,
      a7,
      function(param){
       var a = autocomplete_function(cst_argv_0, 12345);
       Command_Import[5].call(null, a);
       var b = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
       return caml_call1(Ppx_expect_test_block[2], b);
      });
   }
   var path$1 = caml_call2(map$4, path, parts_exe_basename);
   function basic$0(summary, readme, param){
    var
     readme$0 =
       caml_call2
        (Base_Option[24],
         readme,
         function(f, param){
          var a = caml_call1(f, 0);
          return Base_String[109].call(null, 0, a);
         });
    return basic(summary, readme$0, param);
   }
   function basic_or_error(summary, readme, param){
    return basic$0
            (summary,
             readme,
             caml_call2
              (map$4,
               param,
               function(run, param){
                var match = caml_call1(run, 0);
                if(0 === match[0]) return 0;
                var e = match[1], a = Base_Error[12].call(null, e);
                Stdio[10].call(null, a);
                return exit(1);
               }));
   }
   function normalized_path$0(param){
    return caml_call2(Base_Option[24], normalized_path[1], parts);
   }
   function normalized_args$0(param){return normalized_args[1];}
   var
    For_telemetry = [0, normalized_path$0, normalized_args$0],
    word_wrap = Command_Shape[14][5];
   function to_string_for_choose_one(param){return to_string$0(create_exn(param));
   }
   Ppx_inline_test_lib[7].call(null, cst_command);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Command);
   var
    Command =
      [0,
       Auto_complete,
       [0,
        create,
        parse,
        map$1,
        of_lazy,
        of_map,
        of_alist_exn,
        enumerated,
        enumerated_sexpable,
        comma_separated,
        include$0,
        auto_complete],
       [0,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag],
       [0,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$3,
        map$4,
        both,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        apply$2,
        map2,
        map3,
        all,
        all_unit,
        Applicative_infix,
        help$0,
        path$1,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        optional_to_required,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string,
        int,
        char,
        float,
        bool,
        sexp,
        sexp_conv,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        parse$1],
       [0,
        return$3,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        [0, return$3, map$4, both]],
       [0,
        return$4,
        map$6,
        both$0,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol_map$2,
        apply$3,
        map2$0,
        map3$0,
        all$0,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        const$,
        both,
        empty_spec,
        symbol$6,
        symbol$7,
        symbol$8,
        step,
        wrap,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string,
        int,
        char,
        float,
        bool,
        sexp,
        sexp_conv,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        flags_of_args_exn,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic_spec,
       basic$0,
       basic_or_error,
       group,
       lazy_group,
       exec,
       of_lazy$0,
       summary,
       exit,
       For_telemetry,
       [0, Deprecated, summary, help_recursive, get_flag_names],
       228660148,
       [0],
       228660148,
       [0,
        abs_path,
        word_wrap,
        [0, normalize],
        [0,
         empty$0,
         create$1,
         append,
         parts,
         replace_first,
         to_string,
         to_string_dots],
        [0, compare, of_list, extend],
        [0, flags_of_args_exn, to_string_for_choose_one],
        function(For_unix_with_string_env_var){
         var
          Version_info$0 = Version_info(For_unix_with_string_env_var[1]),
          Pid = For_unix_with_string_env_var[2],
          Thread = For_unix_with_string_env_var[4],
          Unix = For_unix_with_string_env_var[5],
          getpid = Unix[2],
          close = Unix[3],
          in_channel_of_descr = Unix[4],
          wait = Unix[11],
          a = Unix[5],
          b = Unix[6],
          c = Unix[7],
          d = Unix[10];
         function create_process_env
         (working_dir, prog_search_path, argv0, prog, args, env, param){
          function convert_command_env_var_to_str(list){
           return Base_List[53].call
                   (null,
                    list,
                    function(param){
                     var str = param[2], env_var = param[1];
                     return [0, Command_Env_var[4].call(null, env_var), str];
                    });
          }
          var variant = env[1], b = 0;
          if(-72399366 <= variant)
           if(584703596 <= variant)
            var
             list = env[2],
             a = [0, 584703596, convert_command_env_var_to_str(list)];
           else
            var
             list$0 = env[2],
             a = [0, -72399366, convert_command_env_var_to_str(list$0)];
          else if(-126259180 <= variant)
           var
            list$1 = env[2],
            a = [0, -126259180, convert_command_env_var_to_str(list$1)];
          else
           var a = env;
          return caml_call7
                  (d, working_dir, prog_search_path, argv0, prog, args, a, b);
         }
         function getenv_and_clear(var$){
          var value = caml_call1(c, Command_Env_var[4].call(null, var$));
          if(Base_Option[53].call(null, value))
           caml_call1(b, Command_Env_var[4].call(null, var$));
          return value;
         }
         function exec_with_args(t, args, maybe_new_comp_cword){
          var
           prog = caml_call2(abs_path, t[3], t[4]),
           args$0 = Base[222].call(null, t[5], args),
           env = t[6];
          Base_Option[37].call
           (null,
            maybe_new_comp_cword,
            function(n){
             var
              new_value$0 = n + Base_List[45].call(null, t[5]) | 0,
              new_value = Base_Int[12].call(null, new_value$0);
             return caml_call2
                     (a, Command_Env_var[4].call(null, comp_cword), new_value);
            });
          var
           b =
             caml_call5
              (For_unix_with_string_env_var[5][8],
               prog,
               [0, prog, args$0],
               0,
               env,
               0);
          return Base_Nothing[4].call(null, b);
         }
         var
          include = Command_Shape[11],
          supported_versions = include[3],
          Versioned = include[4],
          of_versioned = include[5],
          to_versioned = include[6];
         function of_external(working_dir, path_to_exe, child_subcommand){
          var
           c = Base_Set[68].call(null, [0, Base_Int[10]], supported_versions),
           help_sexp = Base[85][16].call(null, c),
           process_info =
             create_process_env
              (0,
               0,
               0,
               caml_call2(abs_path, working_dir, path_to_exe),
               child_subcommand,
               [0, -72399366, [0, [0, 1, help_sexp], 0]],
               0);
          caml_call2(close, 0, process_info[2]);
          function start_reading(descr, info){
           var
            output = [0, 0],
            thread =
              caml_call3
               (Thread[1],
                890699316,
                function(param){
                 var
                  result =
                    Base_Result[41].call
                     (null,
                      function(param){
                       var a = caml_call1(in_channel_of_descr, descr);
                       return Stdio_In_channel[14].call(null, a);
                      });
                 output[1] = [0, result];
                 return 0;
                },
                0);
           return Base_Staged[1].call
                   (null,
                    function(param){
                     caml_call1(Thread[2], thread);
                     caml_call2(close, 0, descr);
                     var match = output[1];
                     if(! match){
                      var
                       a =
                         [0, [1, [0, aN, [0, Base_Info[9].call(null, info), 0]]], 0],
                       b =
                         [1,
                          [0,
                           Sexplib0_Sexp_conv[7].call(null, cst_BUG_failed_to_read),
                           a]];
                      return Base[246].call(null, b);
                     }
                     var match$0 = match[1];
                     if(0 === match$0[0]){
                      var output$0 = match$0[1];
                      return output$0;
                     }
                     var exn = match$0[1];
                     throw caml_maybe_attach_backtrace(exn, 1);
                    });
          }
          var
           a = Base_Info[14].call(null, cst_stdout),
           finish_stdout = start_reading(process_info[3], a),
           b = Base_Info[14].call(null, cst_stderr),
           finish_stderr = start_reading(process_info[4], b),
           stderr = caml_call1(Base_Staged[2].call(null, finish_stderr), 0),
           stdout = caml_call1(Base_Staged[2].call(null, finish_stdout), 0);
          caml_call1(wait, process_info[1]);
          try{
           var
            h = Sexplib_Sexp[43].call(null, stdout),
            t = caml_call1(of_versioned, caml_call1(Versioned[1], h));
           return t;
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            d = [0, [1, [0, aO, [0, Base[202].call(null, stderr), 0]]], 0],
            e = [0, [1, [0, aP, [0, Base[202].call(null, stdout), 0]]], d],
            f = [0, Base[117].call(null, exn), e],
            g =
              [1,
               [0,
                Sexplib0_Sexp_conv[7].call
                 (null, cst_cannot_parse_command_shape),
                f]];
           return Base[246].call(null, g);
          }
         }
         function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5]);}
         function shape_of_exe
         (param, child_subcommand, path_to_exe, working_dir){
          return shape_of_proxy
                  (proxy_of_sexpable
                    (of_external(working_dir, path_to_exe, child_subcommand),
                     working_dir,
                     path_to_exe,
                     child_subcommand,
                     0));
         }
         function shape_of_proxy_kind(kind){
          switch(kind[0]){
            case 0:
             var b = kind[1]; return [0, b];
            case 1:
             var
              g = kind[1],
              a = Base_List[137][9],
              c =
                caml_call2
                 (Base_Lazy[15],
                  g[3],
                  function(b){return caml_call2(a, b, shape_of_proxy);});
             return [1, [0, g[1], g[2], c]];
            case 2:
             var
              e = kind[1],
              child_subcommand = e[5],
              path_to_exe = e[4],
              working_dir = e[3];
             return [2,
                     e,
                     function(a){
                      return shape_of_exe
                              (a, child_subcommand, path_to_exe, working_dir);
                     }];
            default:
             var l = kind[1];
             return [3, caml_call2(Base_Lazy[15], l, shape_of_proxy_kind)];
          }
         }
         function shape$2(t$0){
          var t = t$0;
          a:
          for(;;)
           switch(t[0]){
             case 0:
              var b = t[1]; return [0, shape(b)];
             case 1:
              var g = t[1]; return [1, shape$0(shape$2, g)];
             case 2:
              break a;
             default:
              var thunk = t[1], a = caml_obj_tag(thunk);
              if(250 === a)
               t = thunk[1];
              else{
               if(246 !== a && 244 !== a){t = thunk; break;}
               t = CamlinternalLazy[2].call(null, thunk);
              }
           }
          var
           e = t[1],
           child_subcommand = e[5],
           path_to_exe = e[4],
           working_dir = e[3];
          return [2,
                  shape$1(e),
                  function(a){
                   return shape_of_exe
                           (a, child_subcommand, path_to_exe, working_dir);
                  }];
         }
         function help_for_shape(shape$0, path, expand_dots, flags, recursive){
          a:
          {
           var shape = shape$0;
           b:
           for(;;){
            var
             loop =
               function(path, acc, shape$1){
                a:
                {
                 var shape = shape$1;
                 b:
                 for(;;){
                  var
                   string_of_path = expand_dots ? to_string : to_string_dots;
                  switch(shape[0]){
                    case 0:
                     break a;
                    case 1:
                     break b;
                    case 2:
                     var shape$0 = shape[2];
                     try{
                      var h = loop$0(path, acc, caml_call1(shape$0, 0));
                      return h;
                     }
                     catch(exn){return acc;}
                    default:
                     var thunk = shape[1], d = caml_obj_tag(thunk);
                     if(250 === d)
                      shape = thunk[1];
                     else{
                      if(246 !== d && 244 !== d){shape = thunk; break;}
                      shape = CamlinternalLazy[2].call(null, thunk);
                     }
                  }
                 }
                 var g = shape[1], a = g[3], c = caml_obj_tag(a);
                 b:
                 if(250 === c)
                  var subcommands = a[1];
                 else{
                  if(246 !== c && 244 !== c){var subcommands = a; break b;}
                  var subcommands = CamlinternalLazy[2].call(null, a);
                 }
                 var
                  filtered_subcommands =
                    is_empty(path)
                     ? subcommands
                     : caml_call3
                       (Base_List[137][8],
                        subcommands,
                        Base_String[47],
                        cst_help$3),
                  e =
                    Base_List[84].call
                     (null,
                      filtered_subcommands,
                      function(a, b){
                       var c = Base[242].call(null, b);
                       return caml_call2
                               (help_screen_compare, Base[242].call(null, a), c);
                      });
                 return Base_List[20].call
                         (null,
                          e,
                          acc,
                          function(acc, param){
                           var
                            shape = param[2],
                            subcommand = param[1],
                            path$0 = [0, subcommand, path],
                            name = string_of_path(path$0),
                            doc = Command_Shape[10].call(null, shape),
                            acc$0 = [0, [0, name, doc, 0], acc];
                           return recursive ? loop$0(path$0, acc$0, shape) : acc$0;
                          });
                }
                var b = shape[1];
                if(! flags) return acc;
                var
                 f =
                   Base_List[12].call
                    (null,
                     b[4],
                     function(fmt){
                      return Base_String[50].call(null, fmt[1], cst_help$4);
                     });
                return Base_List[20].call
                        (null,
                         f,
                         acc,
                         function(acc, fmt){
                          var
                           subcommand = fmt[1],
                           path$0 = [0, subcommand, path],
                           a = fmt[3],
                           b = fmt[2],
                           fmt$0 = [0, string_of_path(path$0), b, a];
                          return [0, fmt$0, acc];
                         });
               };
            let loop$0 = loop;
            var
             c = loop(empty$0, 0, shape),
             format_list = Base_List[63].call(null, c);
            switch(shape[0]){
              case 0:
               break a;
              case 3:
               var thunk = shape[1], a = caml_obj_tag(thunk);
               if(250 === a)
                shape = thunk[1];
               else{
                if(246 !== a && 244 !== a){shape = thunk; break;}
                shape = CamlinternalLazy[2].call(null, thunk);
               }
               break;
              default: break b;
            }
           }
           var
            g = shape[1],
            readme = g[2],
            summary = g[1],
            d = [0, [0, caml_call1(Command_Shape[4][2], format_list)], 0],
            e = flags ? cst_subcommands_and_flags : cst_subcommands$0,
            f = [0, cst$18, [0, to_string(path), aS]],
            h =
              [0,
               [0, summary],
               [0,
                [0, Base_String[68].call(null, 0, f)],
                [0, readme, [0, [0, e], d]]]];
           return unparagraphs(Base_List[136].call(null, h));
          }
          var
           b = shape[1],
           usage = caml_call1(Command_Shape[5][8], b),
           i = [0, aT, [0, [0, caml_call1(Command_Shape[4][2], b[4])], 0]],
           j = [0, b[2], i],
           k = Base[241].call(null, cst$19, usage),
           l = to_string(path),
           m = Base[241].call(null, l, k),
           n = [0, [0, Base[241].call(null, cst$20, m)], j];
          return unparagraphs(Base_List[136].call(null, [0, [0, b[1]], n]));
         }
         function help_subcommand(summary, readme){
          var
           a = anon(maybe(symbol$2(cst_SUBCOMMAND, string))),
           b =
             caml_call1
              (flag(0, 0, cst_expand_dots)(no_arg),
               cst_expand_subcommands_in_recu),
           c =
             caml_call1
              (flag(0, 0, cst_flags)(no_arg), cst_show_flags_as_well_in_recu),
           d =
             caml_call1
              (flag(0, 0, cst_recursive)(no_arg),
               cst_show_subcommands_of_subcom);
          return basic
                  (cst_explain_a_given_subcommand,
                   0,
                   caml_call2
                    (symbol$3,
                     caml_call2
                      (symbol$3,
                       caml_call2
                        (symbol$3,
                         caml_call2
                          (symbol$3,
                           caml_call2
                            (symbol$3,
                             caml_call2
                              (symbol$3,
                               caml_call1
                                (return$3,
                                 function
                                 (recursive, flags, expand_dots, path$0, env, cmd_opt, param){
                                  var match = caml_call2(find, env, subs_key);
                                  if(! match)
                                   throw caml_maybe_attach_backtrace
                                          ([0, Assert_failure, aV], 1);
                                  var subs = match[1];
                                  if(path$0 && path$0[1] === cst_help$7){
                                   var
                                    path = path$0[2],
                                    path$1 =
                                      Base_Option[34].call
                                       (null,
                                        cmd_opt,
                                        path,
                                        function(path, subcommand){return [0, subcommand, path];});
                                   if(cmd_opt){
                                    var
                                     cmd = cmd_opt[1],
                                     match$0 =
                                       caml_call3
                                        (lookup_expand,
                                         caml_call2
                                          (Base_List[137][9],
                                           subs,
                                           function(x){return [0, x, -481604174];}),
                                         cmd,
                                         0);
                                    if(0 === match$0[0])
                                     var
                                      match$1 = match$0[1],
                                      t = match$1[2],
                                      possibly_expanded_name = match$1[1],
                                      path$2 = replace_first(path$1, cmd, possibly_expanded_name),
                                      shape = shape$2(t),
                                      path$3 = path$2;
                                    else
                                     var
                                      e = match$0[1],
                                      c = to_string(path$1),
                                      a = caml_call4(die(aU), cmd, c, e, 0),
                                      shape = a[2],
                                      path$3 = a[1];
                                   }
                                   else
                                    var
                                     d = caml_call2(Base_List[137][9], subs, shape$2),
                                     subcommands = Base_Lazy[24].call(null, d),
                                     readme$0 =
                                       caml_call2
                                        (Base_Option[24],
                                         readme,
                                         function(readme){return caml_call1(readme, 0);}),
                                     shape$0 = [1, [0, summary, readme$0, subcommands]],
                                     shape = shape$0,
                                     path$3 = path$1;
                                   var
                                    b =
                                      help_for_shape(shape, path$3, expand_dots, flags, recursive);
                                   return Command_Import[5].call(null, b);
                                  }
                                  throw caml_maybe_attach_backtrace([0, Assert_failure, C], 1);
                                 }),
                               d),
                             c),
                           b),
                         path),
                       env),
                     a));
         }
         function dump_help_sexp
         (supported_versions$0, t$2, path_to_subcommand$2){
          var
           h =
             Base_Set[14].call(null, supported_versions, supported_versions$0),
           param = Base_Set[54].call(null, h);
          if(! param){
           var
            l = [0, Base_Int[10]],
            m = Base_Set[68],
            n =
              Base_Error[19].call
               (null,
                aX,
                0,
                cst_Couldn_t_choose_a_supporte,
                supported_versions,
                function(a){return m(l, a);});
           return Base_Error[31].call(null, n);
          }
          var
           version_to_use = param[1],
           t$3 = sexpable_shape(t$2),
           t = t$3,
           path_to_subcommand = path_to_subcommand$2;
          for(;;){
           if(path_to_subcommand){
            var
             path_to_subcommand$0 = path_to_subcommand[2],
             sub = path_to_subcommand[1];
            if(Base_String[97].call(null, sub, cst$17))
             var b = t;
            else
             switch(t[0]){
               case 0:
                var b = caml_call2(Command_Import[8].call(null, aQ), sub, 0);
                break;
               case 1:
                var
                 g = t[1],
                 a = g[3],
                 f = Base_String[134],
                 c = caml_obj_tag(a);
                a:
                if(250 === c)
                 var d = a[1];
                else{
                 if(246 !== c && 244 !== c){var d = a; break a;}
                 var d = CamlinternalLazy[2].call(null, a);
                }
                var match = caml_call3(Base_List[137][5], d, f, sub);
                if(match){
                 var t$0 = match[1];
                 t = t$0;
                 path_to_subcommand = path_to_subcommand$0;
                 continue;
                }
                var b = caml_call2(Command_Import[8].call(null, aR), sub, 0);
                break;
               case 2:
                var
                 match$0 = t[1],
                 child_subcommand = match$0[5],
                 path_to_exe = match$0[4],
                 working_dir = match$0[3],
                 path_to_subcommand$1 =
                   [0,
                    sub,
                    Base[222].call(null, path_to_subcommand$0, child_subcommand)],
                 t$1 = of_external(working_dir, path_to_exe, child_subcommand);
                t = t$1;
                path_to_subcommand = path_to_subcommand$1;
                continue;
               default:
                var thunk = t[1], e = caml_obj_tag(thunk);
                if(250 === e){t = thunk[1]; continue;}
                if(246 !== e && 244 !== e){t = thunk; continue;}
                t = CamlinternalLazy[2].call(null, thunk);
                continue;
             }
           }
           else
            var b = t;
           var
            i = caml_call2(to_versioned, b, version_to_use),
            j = caml_call1(Versioned[2], i),
            k = Base[85][16].call(null, j);
           return Command_Import[4].call(null, k);
          }
         }
         function handle_environment(t, argv){
          if(! argv) return Base[244].call(null, cst_missing_executable_name);
          var args = argv[2], cmd = argv[1], a = getenv_and_clear(1);
          Base_Option[37].call
           (null,
            a,
            function(version){
             var
              a = Sexplib_Sexp[43].call(null, version),
              supported_versions =
                Base_Set[69].call(null, [0, Base_Int[9], Base_Int[22]], a);
             dump_help_sexp(supported_versions, t, args);
             return exit(0);
            });
          var b = getenv_and_clear(0);
          Base_Option[37].call
           (null,
            b,
            function(param){
             var
              a = caml_call1(getpid, 0),
              b = caml_call1(Pid[1], a),
              c =
                autocomplete_function
                 (caml_check_bound(caml_sys_argv(0), 0)[1], b);
             caml_call1(Command_Import[2].call(null, aW), c);
             return exit(0);
            });
          return [0, cmd, args];
         }
         function process_args(cmd, args){
          var
           a = Base_Int[11],
           b = getenv_and_clear(comp_cword),
           maybe_comp_cword = caml_call2(Base_Option[24], b, a);
          if(maybe_comp_cword)
           var
            comp_cword$0 = maybe_comp_cword[1],
            c = Base[222].call(null, args, aY),
            args$0 = Base_List[139].call(null, c, comp_cword$0),
            args$1 =
              Base_List[105].call
               (null,
                args$0,
                function(arg, args){
                 return typeof args === "number" ? [1, arg] : [0, arg, args];
                },
                0);
          else
           var args$1 = of_list(args);
          return [0, create$1(cmd), args$1, maybe_comp_cword];
         }
         function flag$0(base){
          var
           flags = base[3],
           flags$0 =
             extend_map_exn
              (flags,
               1,
               name,
               [0,
                name,
                0,
                aZ,
                [0,
                 function(env){
                  return caml_call3
                          (set, env, key_internal_validate_parsing, 0);
                 }],
                cst_validate_arguments_are_par,
                at_most_once,
                function(a){return 0;},
                -481604174]);
          return [0, base[1], base[2], flags$0, base[4], base[5]];
         }
         function add(t){
          switch(t[0]){
            case 0:
             var base = t[1]; return [0, flag$0(base)];
            case 1:
             var
              match = t[1],
              body = match[4],
              subcommands = match[3],
              readme = match[2],
              summary = match[1],
              subcommands$0 =
                caml_call2
                 (Base_Lazy[15],
                  subcommands,
                  function(subcommands){
                   return Base_List[53].call
                           (null,
                            subcommands,
                            function(param){
                             var command = param[2], name = param[1];
                             return [0, name, add(command)];
                            });
                  });
             return [1, [0, summary, readme, subcommands$0, body]];
            case 2:
             return t;
            default:
             var thunk = t[1];
             return [3,
                     [246,
                      function(param){
                       var a = caml_obj_tag(thunk);
                       a:
                       if(250 === a)
                        var b = thunk[1];
                       else{
                        if(246 !== a && 244 !== a){var b = thunk; break a;}
                        var b = CamlinternalLazy[2].call(null, thunk);
                       }
                       return add(b);
                      }]];
          }
         }
         function add_help_subcommands(t){
          switch(t[0]){
            case 1:
             var
              match = t[1],
              body = match[4],
              subcommands = match[3],
              readme = match[2],
              summary = match[1],
              subcommands$0 =
                caml_call2
                 (Base_Lazy[15],
                  subcommands,
                  function(subcommands){
                   var a = help_subcommand(summary, readme);
                   return extend_alist_exn
                           (caml_call2
                             (Base_List[137][9], subcommands, add_help_subcommands),
                            0,
                            cst_help$5,
                            a);
                  });
             return [1, [0, summary, readme, subcommands$0, body]];
            case 3:
             var thunk = t[1];
             return [3,
                     [246,
                      function(param){
                       var a = caml_obj_tag(thunk);
                       a:
                       if(250 === a)
                        var b = thunk[1];
                       else{
                        if(246 !== a && 244 !== a){var b = thunk; break a;}
                        var b = CamlinternalLazy[2].call(null, thunk);
                       }
                       return add_help_subcommands(b);
                      }]];
            default: return t;
          }
         }
         function maybe_apply_extend(args, extend$0, path){
          return Base_Option[32].call
                  (null,
                   extend$0,
                   args,
                   function(f){return extend(args, f, path);});
         }
         function dispatch
         (t$0,
          env$0,
          extend,
          path,
          args$1,
          maybe_new_comp_cword,
          version,
          build_info,
          verbose_on_parse_error,
          when_parsing_succeeds,
          complete_subcommands){
          a:
          {
           var t = t$0;
           b:
           for(;;)
            switch(t[0]){
              case 0:
               break a;
              case 1:
               break b;
              case 2:
               var
                exec = t[1],
                args$0 = to_list(maybe_apply_extend(args$1, extend, path));
               return exec_with_args(exec, args$0, maybe_new_comp_cword);
              default:
               var thunk = t[1], c = caml_obj_tag(thunk);
               if(250 === c)
                t = thunk[1];
               else{
                if(246 !== c && 244 !== c){t = thunk; break;}
                t = CamlinternalLazy[2].call(null, thunk);
               }
            }
           var
            group = t[1],
            body = group[4],
            subs = group[3],
            readme = group[2],
            summary = group[1],
            completing = ends_in_complete(args$1),
            a = caml_obj_tag(subs);
           b:
           if(250 === a)
            var b = subs[1];
           else{
            if(246 !== a && 244 !== a){var b = subs; break b;}
            var b = CamlinternalLazy[2].call(null, subs);
           }
           var
            env = caml_call3(set, env$0, subs_key, b),
            die_showing_help =
              function(msg){
               if(completing) return exit(0);
               var
                a =
                  help_for_shape
                   (shape$2([1, [0, summary, readme, subs, body]]),
                    path,
                    0,
                    0,
                    0);
               caml_call1(Command_Import[1].call(null, a0), a);
               return caml_call2(die(a1), msg, 0);
              },
            parse_group =
              function(args, maybe_new_comp_cword){
               var
                maybe_new_comp_cword$0 =
                  caml_call2
                   (Base_Option[24], maybe_new_comp_cword, Base_Int[46]);
               function skip(rest){
                return parse_group(rest, maybe_new_comp_cword$0);
               }
               function resolve(sub, rest){
                var a = caml_obj_tag(subs);
                a:
                {
                 var c = function(x){return [0, x, -481604174];};
                 if(250 === a)
                  var b = subs[1];
                 else{
                  if(246 !== a && 244 !== a){var b = subs; break a;}
                  var b = CamlinternalLazy[2].call(null, subs);
                 }
                }
                var
                 subs$0 = caml_call2(Base_List[137][9], b, c),
                 match = caml_call3(lookup_expand, subs$0, sub, 0);
                if(0 === match[0]){
                 var
                  match$0 = match[1],
                  t = match$0[2],
                  subcommand = match$0[1];
                 return dispatch
                         (t,
                          env,
                          extend,
                          [0, subcommand, path],
                          rest,
                          maybe_new_comp_cword$0,
                          version,
                          build_info,
                          verbose_on_parse_error,
                          when_parsing_succeeds,
                          complete_subcommands);
                }
                var msg = match[1];
                return die_showing_help(msg);
               }
               if(typeof args === "number"){
                if(body){
                 var body$0 = body[1];
                 return caml_call1(body$0, parts_exe_basename(path));
                }
                var c = to_string(path);
                return die_showing_help
                        (caml_call1(Command_Import[7].call(null, a2), c));
               }
               if(0 !== args[0]){
                var
                 part = args[1],
                 e = Base_String[51],
                 h = Base[242],
                 a = caml_obj_tag(subs);
                a:
                {
                 var
                  g =
                    function(name){
                     return Base_String[97].call(null, name, part);
                    };
                 if(250 === a)
                  var b = subs[1];
                 else{
                  if(246 !== a && 244 !== a){var b = subs; break a;}
                  var b = CamlinternalLazy[2].call(null, subs);
                 }
                }
                var
                 i = Base_List[53].call(null, b, h),
                 j = Base_List[12].call(null, i, g),
                 subs$0 = Base_List[83].call(null, j, e);
                if(! complete_subcommands){
                 Base_List[19].call(null, subs$0, Command_Import[5]);
                 return exit(0);
                }
                var
                 f = complete_subcommands[1],
                 k = shape$2(t),
                 l = Command_Shape[9].call(null, k),
                 subcommands = caml_call1(Command_Shape[8][3], l),
                 match = caml_call3(f, parts(path), part, subcommands);
                if(! match) return exit(1);
                var
                 to_output = match[1],
                 m = Base_String[68].call(null, a3, to_output);
                Command_Import[5].call(null, m);
                return exit(0);
               }
               var rest = args[2], sub = args[1];
               a:
               {
                b:
                if(sub !== cst_build_info$1){
                 c:
                 if(sub !== cst_help$9){
                  if(sub !== cst_version$2){
                   if(sub === cst_build_info$2) break b;
                   if(sub === cst_help$8) break c;
                   if(sub !== cst_version$3) break a;
                  }
                  if(1 === length(path))
                   return completing
                           ? skip(rest)
                           : (Version_info$0[1].call(null, version), exit(0));
                  break a;
                 }
                 if(completing) return skip(rest);
                 if(typeof rest !== "number" && 0 === rest[0]){
                  var rest_of_rest = rest[2], first_of_rest = rest[1];
                  return resolve(first_of_rest, [0, sub, rest_of_rest]);
                 }
                 var
                  d =
                    help_for_shape
                     (shape$2([1, [0, group[1], group[2], subs, group[4]]]),
                      path,
                      0,
                      0,
                      0);
                 Command_Import[5].call(null, d);
                 return exit(0);
                }
                if(1 === length(path))
                 return completing
                         ? skip(rest)
                         : (Version_info$0[2].call(null, build_info), exit(0));
               }
               return resolve(sub, rest);
              };
           return parse_group(args$1, maybe_new_comp_cword);
          }
          var
           base = t[1],
           args = maybe_apply_extend(args$1, extend, path),
           help_text =
             [246,
              function(param){
               return help_for_shape(shape$2(t), path, 0, 1, 0);
              }];
          return run
                  (base,
                   env$0,
                   when_parsing_succeeds,
                   path,
                   args,
                   verbose_on_parse_error,
                   help_text,
                   run_exn);
         }
         function run$0
         (d,
          verbose_on_parse_error,
          version,
          build_info,
          c,
          extend,
          opt,
          complete_subcommands,
          t){
          var add_validate_parsing_flag = d ? d[1] : 0;
          if(c)
           var argv = c[1];
          else
           var e = caml_sys_argv(0), argv = Base_Array[30].call(null, e);
          var when_parsing_succeeds = opt ? opt[1] : function(a){return a;};
          if(build_info)
           var v = build_info[1], build_info$0 = v;
          else
           var build_info$0 = Version_info$0[7];
          if(version)
           var
            v$0 = version[1],
            version$0 =
              [246,
               function(param){
                var
                 a = Base_String[102],
                 b = Base_String[102].call(null, v$0, 32),
                 c =
                   Base_List[14].call(null, b, function(b){return a(b, 10);});
                return Version_info$0[5].call(null, c);
               }];
          else
           var version$0 = Version_info$0[6];
          function f(param){
           var
            t$0 = Version_info$0[4].call(null, version$0, build_info$0, t),
            t$1 = add_help_subcommands(t$0),
            t$2 = add_validate_parsing_flag ? add(t$1) : t$1,
            match = handle_environment(t$2, argv),
            args = match[2],
            cmd = match[1],
            match$0 = process_args(cmd, args),
            maybe_new_comp_cword = match$0[3],
            args$0 = match$0[2],
            path = match$0[1];
           try{
            var
             a =
               dispatch
                (t$2,
                 empty,
                 extend,
                 path,
                 args$0,
                 maybe_new_comp_cword,
                 version$0,
                 build_info$0,
                 verbose_on_parse_error,
                 when_parsing_succeeds,
                 complete_subcommands);
            return a;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0), tag = exn[1];
            if(tag !== Failed_to_parse_command_line)
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return ends_in_complete(args$0)
                    ? exit(0)
                    : (Command_Import[6].call(null, msg), exit(1));
           }
          }
          if(! raise_instead_of_exit) return Base_Exn[15].call(null, f);
          try{var b = f(0); return b;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0), tag = exn[1];
           if(tag === Exit_called && 0 === exn[2]){
            var a = Base[117].call(null, exn);
            return Command_Import[3].call(null, 0, a);
           }
           throw caml_maybe_attach_backtrace(exn, 0);
          }
         }
         function deprecated_run
         (t,
          cmd,
          args,
          is_help,
          is_help_rec,
          is_help_rec_flags,
          is_expand_dots){
          var
           path_strings = Base_String[102].call(null, cmd, 32),
           path = Base_List[63].call(null, path_strings),
           args$0 = is_expand_dots ? [0, cst_expand_dots$0, args] : args,
           args$1 = is_help_rec_flags ? [0, cst_flags$0, args$0] : args$0,
           args$2 = is_help_rec ? [0, cst_r, args$1] : args$1,
           args$3 = is_help ? [0, cst_help$6, args$2] : args$2,
           args$4 = of_list(args$3),
           t$0 = add_help_subcommands(t);
          return dispatch
                  (t$0,
                   empty,
                   0,
                   path,
                   args$4,
                   0,
                   Version_info$0[6],
                   Version_info$0[7],
                   0,
                   function(a){return a;},
                   0);
         }
         return [0, shape$2, help_for_shape, run$0, deprecated_run];
        }]];
   runtime.caml_register_global(300, Command, cst_Command$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
