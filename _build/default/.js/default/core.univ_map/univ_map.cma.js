// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Univ_map__
//# shape: Univ_map__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Univ_map = [0],
    Univ_map$0 = [0, Univ_map];
   runtime.caml_register_global(0, Univ_map$0, "Univ_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map__Univ_map_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Univ_map__Univ_map_intf:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map_Univ_map_intf = "Univ_map__Univ_map_intf",
    cst_univ_map = "univ_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Univ_map_Univ_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map);
   Ppx_expect_runtime[1][1].call(null, "univ_map/src/univ_map_intf.ml");
   Ppx_inline_test_lib[6].call(null, cst_univ_map, "univ_map_intf.ml");
   Ppx_inline_test_lib[7].call(null, cst_univ_map);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Univ_map_Univ_map_intf);
   var Univ_map_Univ_map_intf = [0];
   runtime.caml_register_global
    (11, Univ_map_Univ_map_intf, cst_Univ_map_Univ_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map
//# unitInfo: Requires: Base, Base__Invariant, Base__List, Base__Map, Base__Option, Base__Printf, Base__Set, Base__String, Base__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map__Univ_map_intf
//# shape: Univ_map:[[N,F(1)*],N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)*,F(2)*,F(4)*,F(4)*,N,N,[[F(2),F(1)*],F(3),F(2),F(3),F(3)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map = "Univ_map",
    cst = "_",
    cst_univ_map = "univ_map",
    cst_univ_map_src_univ_map_ml = "univ_map/src/univ_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Base_Option = global_data.Base__Option,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Map = global_data.Base__Map,
    Base = global_data.Base,
    Base_Set = global_data.Base__Set,
    Base_Printf = global_data.Base__Printf,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Base_String = global_data.Base__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   Ppx_module_timer_runtime[4].call(null, cst_Univ_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map);
   Ppx_expect_runtime[1][1].call(null, cst_univ_map_src_univ_map_ml);
   Ppx_inline_test_lib[6].call(null, cst_univ_map, "univ_map.ml");
   var
    b = [0, "<uid>"],
    c = [0, "uid"],
    d = [0, "name"],
    e = [0, "type_id2"],
    f = [0, "type_id1"],
    g = [0, cst],
    h = [0, "key"],
    cst_Key_type_id_must_not_provi =
      "[Key.type_id] must not provide different type ids when called on the same input",
    i = [0, cst_univ_map_src_univ_map_ml, 82, 40],
    j = [0, cst],
    k = [0, cst_univ_map_src_univ_map_ml, 81, 2431, 2455],
    l =
      [0,
       [11, "Univ_map.find_exn on unknown key ", [2, 0, 0]],
       "Univ_map.find_exn on unknown key %s"],
    m =
      [0,
       [11, "Univ_map.add_exn on existing key ", [2, 0, 0]],
       "Univ_map.add_exn on existing key %s"],
    n =
      [0,
       [11, "Univ_map.change_exn on unknown key ", [2, 0, 0]],
       "Univ_map.change_exn on unknown key %s"];
   function Make1(Key, Data){
    var sexp_of_t = Key[1];
    function sexp_of_type_id(type_id){
     var e = 0, f = 0;
     if(Ppx_inline_test_lib[1])
      var a = b;
     else
      var
       i = caml_call1(Base_Type_equal[12][3], type_id),
       a = caml_call1(Base_Type_equal[12][2][3], i);
     var
      g = [0, [1, [0, c, [0, Base[85][5].call(null, a), f]]], e],
      h = caml_call1(Base_Type_equal[12][6], type_id);
     return [1, [0, [1, [0, d, [0, Base[202].call(null, h), 0]]], g]];
    }
    function type_id(x_003){
     var
      type_id1 = caml_call1(Key[2], x_003),
      type_id2 = caml_call1(Key[2], x_003);
     if(caml_call2(Base_Type_equal[12][9], type_id1, type_id2))
      return type_id1;
     var
      a = [0, [1, [0, e, [0, sexp_of_type_id(type_id2), 0]]], 0],
      b = [0, [1, [0, f, [0, sexp_of_type_id(type_id1), 0]]], a],
      c =
        [0,
         [1,
          [0,
           h,
           [0, caml_call2(Key[1], function(param){return g;}, x_003), 0]]],
         b],
      d =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Key_type_id_must_not_provi),
          c]];
     return Base[246].call(null, d);
    }
    var Key$0 = [0, sexp_of_t, , type_id];
    function name_of_key(key){
     var a = type_id(key);
     return caml_call1(Base_Type_equal[12][6], a);
    }
    function uid_of_key(key){
     var a = type_id(key);
     return caml_call1(Base_Type_equal[12][3], a);
    }
    function sexp_of_t$0(sexp_of_a, param){
     var
      data = param[2],
      key = param[1],
      a = type_id(key),
      b = caml_call1(Base_Type_equal[12][7], a);
     return caml_call3(Data[1], sexp_of_a, b, data);
    }
    function type_id_name(param){var key = param[1]; return name_of_key(key);}
    function type_id_uid(param){var key = param[1]; return uid_of_key(key);}
    function compare(t1, t2){
     var
      a = type_id_name(t2),
      b = type_id_name(t1),
      c = Base_String[51].call(null, b, a);
     if(0 !== c) return c;
     var d = type_id_uid(t2), e = type_id_uid(t1);
     return caml_call2(Base_Type_equal[12][2][11], e, d);
    }
    function to_alist(t){
     var a = Base_Map[74].call(null, t);
     return Base_List[83].call(null, a, compare);
    }
    function sexp_of_t$1(sexp_of_a, t){
     var
      a = to_alist(t),
      x_008 =
        Base_List[53].call
         (null,
          a,
          function(packed){return [0, type_id_name(packed), packed];});
     return Base[165].call
             (null,
              function(param){
               var
                arg1_005 = param[2],
                arg0_004 = param[1],
                res0_006 = Base[202].call(null, arg0_004),
                res1_007 = sexp_of_t$0(sexp_of_a, arg1_005);
               return [1, [0, res0_006, [0, res1_007, 0]]];
              },
              x_008);
    }
    function invariant(t){
     return Base_Invariant[1].call
             (null,
              k,
              t,
              function(x_009){
               return sexp_of_t$1(function(param){return j;}, x_009);
              },
              function(param){
               return Base_Map[48].call
                       (null,
                        t,
                        function(key, data){
                         var a = type_id_uid(data);
                         if(caml_call2(Base_Type_equal[12][2][10], key, a)) return 0;
                         throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
                        });
              });
    }
    function set(t, key, data){
     var a = uid_of_key(key);
     return Base_Map[34].call(null, t, a, [0, key, data]);
    }
    function mem_by_id(t, id){return Base_Map[45].call(null, t, id);}
    function mem(t, key){return mem_by_id(t, uid_of_key(key));}
    function remove_by_id(t, id){return Base_Map[44].call(null, t, id);}
    function remove(t, key){return remove_by_id(t, uid_of_key(key));}
    var empty = Base_Map[6].call(null, [0, Base_Type_equal[12][2][19]]);
    function singleton(key, data){
     var a = uid_of_key(key);
     return Base_Map[7].call(null, [0, Base_Type_equal[12][2][19]], a)
             ([0, key, data]);
    }
    var is_empty = Base_Map[32];
    function find(t, key){
     var a = uid_of_key(key), match = Base_Map[42].call(null, t, a);
     if(! match) return 0;
     var
      match$0 = match[1],
      value = match$0[2],
      key$0 = match$0[1],
      b = type_id(key$0),
      c = type_id(key);
     caml_call2(Base_Type_equal[12][11], c, b);
     return [0, value];
    }
    function find_exn(t, key){
     var match = find(t, key);
     if(match){var data = match[1]; return data;}
     var a = name_of_key(key);
     return caml_call2(Base_Printf[6].call(null, l), a, 0);
    }
    function add(t, key, data){
     return mem(t, key) ? -1024851605 : [0, 17724, set(t, key, data)];
    }
    function add_exn(t, key, data){
     var match = add(t, key, data);
     if(typeof match === "number"){
      var a = name_of_key(key);
      return caml_call2(Base_Printf[6].call(null, m), a, 0);
     }
     var t$0 = match[2];
     return t$0;
    }
    function change_exn(t, key, update){
     var match = find(t, key);
     if(match){
      var data = match[1];
      return set(t, key, caml_call1(update, data));
     }
     var a = name_of_key(key);
     return caml_call2(Base_Printf[6].call(null, n), a, 0);
    }
    function change(t, key, update){
     var orig = find(t, key), next = caml_call1(update, orig);
     if(! next) return Base_Option[52].call(null, orig) ? t : remove(t, key);
     var data = next[1];
     return set(t, key, data);
    }
    function update(t, key, f){
     var orig = find(t, key), data = caml_call1(f, orig);
     return set(t, key, data);
    }
    function key_id_set(t){
     var a = Base_Map[73].call(null, t);
     return Base_Set[32].call(null, [0, Base_Type_equal[12][2][19]], a);
    }
    function of_alist_exn(t){
     var
      a =
        Base_List[53].call
         (null, t, function(p){return [0, type_id_uid(p), p];});
     return Base_Map[10].call(null, [0, Base_Type_equal[12][2][19]], a);
    }
    var
     find_packed_by_id = Base_Map[42],
     find_packed_by_id_exn = Base_Map[43];
    return [0,
            Key$0,
            ,
            ,
            ,
            to_alist,
            sexp_of_t$1,
            invariant,
            set,
            mem_by_id,
            mem,
            remove_by_id,
            remove,
            empty,
            singleton,
            is_empty,
            find,
            find_exn,
            add,
            add_exn,
            change_exn,
            change,
            update,
            key_id_set,
            of_alist_exn,
            find_packed_by_id,
            find_packed_by_id_exn,
            0];
   }
   function Make(Key, Data){
    function sexp_of_t(of_a_011, of_a_012, x_013){return caml_call2(Data[1], of_a_012, x_013);
    }
    var M = Make1(Key, [0, sexp_of_t]);
    function sexp_of_t$0(x_014){return M[6].call(null, Base[220], x_014);}
    var
     invariant = M[7],
     empty = M[13],
     singleton = M[14],
     is_empty = M[15],
     set = M[8],
     mem = M[10],
     mem_by_id = M[9],
     find = M[16],
     find_exn = M[17],
     add = M[18],
     add_exn = M[19],
     change = M[21],
     change_exn = M[20],
     update = M[22],
     remove = M[12],
     remove_by_id = M[11],
     Packed = [0],
     key_id_set = M[23],
     to_alist = M[5],
     of_alist_exn = M[24],
     find_packed_by_id = M[25],
     find_packed_by_id_exn = M[26];
    return [0,
            ,
            sexp_of_t$0,
            Key,
            invariant,
            empty,
            singleton,
            is_empty,
            set,
            mem,
            mem_by_id,
            find,
            find_exn,
            add,
            add_exn,
            change,
            change_exn,
            update,
            remove,
            remove_by_id,
            Packed,
            key_id_set,
            to_alist,
            of_alist_exn,
            find_packed_by_id,
            find_packed_by_id_exn,
            0];
   }
   var sexp_of_t = Base_Type_equal[12][1];
   function type_id(a){return a;}
   var Type_id_key = [0, sexp_of_t, type_id];
   function sexp_of_t$0(of_a_017){return of_a_017;}
   var
    a = Make(Type_id_key, [0, sexp_of_t$0]),
    type_equal = a[26],
    find_packed_by_id_exn = a[25],
    find_packed_by_id = a[24],
    of_alist_exn = a[23],
    to_alist = a[22],
    key_id_set = a[21],
    Packed = a[20],
    remove_by_id = a[19],
    remove = a[18],
    update = a[17],
    change_exn = a[16],
    change = a[15],
    add_exn = a[14],
    add = a[13],
    find_exn = a[12],
    find = a[11],
    mem_by_id = a[10],
    mem = a[9],
    set = a[8],
    is_empty = a[7],
    singleton = a[6],
    empty = a[5],
    invariant = a[4],
    sexp_of_t$1 = a[2];
   function create(default$, name, sexp_of){
    return [0, caml_call2(Base_Type_equal[12][4], name, sexp_of), default$];
   }
   function id(t){return t[1];}
   var Key = [0, create, id];
   function find$0(t, param){
    var default$ = param[2], key = param[1], a = find(t, key);
    return Base_Option[30].call(null, a, default$);
   }
   function set$0(t, param, data){
    var key = param[1];
    return set(t, key, data);
   }
   function change$0(t, key, update){
    return set$0(t, key, caml_call1(update, find$0(t, key)));
   }
   function create$0(init, f, name, sexp_of){
    return [0, create(init, name, sexp_of), f];
   }
   function id$0(t){var t$0 = t[1]; return t$0[1];}
   var Key$0 = [0, create$0, id$0];
   function find$1(t, param){var key = param[1]; return find$0(t, key);}
   function set$1(t, param, data){
    var key = param[1];
    return set$0(t, key, data);
   }
   function change$1(t, param, update){
    var key = param[1];
    return change$0(t, key, update);
   }
   function add$0(t, param, data){
    var f = param[2], key = param[1], acc = find$0(t, key);
    return set$0(t, key, caml_call2(f, acc, data));
   }
   function create$1(name, sexp_of){
    var a = Base_List[6];
    return create$0
            (0,
             function(xs, x){return [0, x, xs];},
             name,
             function(b){return a(sexp_of, b);});
   }
   var
    Key$1 = [0, create$1, id$0],
    Multi = [0, Key$1, set$1, find$1, add$0, change$1];
   Ppx_inline_test_lib[7].call(null, cst_univ_map);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Univ_map);
   var
    Univ_map =
      [0,
       Type_id_key,
       sexp_of_t$1,
       invariant,
       empty,
       singleton,
       is_empty,
       set,
       mem,
       mem_by_id,
       find,
       find_exn,
       add,
       add_exn,
       change,
       change_exn,
       update,
       remove,
       remove_by_id,
       Packed,
       key_id_set,
       to_alist,
       of_alist_exn,
       find_packed_by_id,
       find_packed_by_id_exn,
       type_equal,
       function(c, b){
        var a = Make(c, b);
        return [0,
                a[2],
                a[3],
                a[4],
                a[5],
                a[6],
                a[7],
                a[8],
                a[9],
                a[10],
                a[11],
                a[12],
                a[13],
                a[14],
                a[15],
                a[16],
                a[17],
                a[18],
                a[19],
                a[20],
                a[21],
                a[22],
                a[23],
                a[24],
                a[25],
                a[26]];
       },
       function(d, c){
        var a = Make1(d, c), b = a[1];
        return [0,
                a[6],
                [0, b[1], b[3]],
                a[7],
                a[13],
                a[14],
                a[15],
                a[8],
                a[10],
                a[9],
                a[16],
                a[17],
                a[18],
                a[19],
                a[21],
                a[20],
                a[22],
                a[12],
                a[11],
                [0],
                a[23],
                a[5],
                a[24],
                a[25],
                a[26],
                a[27]];
       },
       function(Key, Input1_data, Input2_data, Output_data){
        function merge(t1, t2, param){
         var f = param[1];
         function f$0(key, merge_result){
          var a = caml_call2(f, key, merge_result);
          return caml_call2
                  (Base_Option[24], a, function(data){return [0, key, data];});
         }
         return Base_Map[76].call
                 (null,
                  t1,
                  t2,
                  function(e, param){
                   var variant = param[1];
                   if(737457313 === variant){
                    var
                     a = param[2],
                     b = a[2],
                     right_data = b[2],
                     right_key = b[1],
                     match = a[1],
                     left_data = match[2],
                     left_key = match[1],
                     c = caml_call1(Key[2], right_key),
                     d = caml_call1(Key[2], left_key);
                    caml_call2(Base_Type_equal[12][11], d, c);
                    return f$0
                            (left_key, [0, 737457313, [0, left_data, right_data]]);
                   }
                   if(847852583 <= variant){
                    var match$0 = param[2], data = match$0[2], key = match$0[1];
                    return f$0(key, [0, 847852583, data]);
                   }
                   var
                    match$1 = param[2],
                    data$0 = match$1[2],
                    key$0 = match$1[1];
                   return f$0(key$0, [0, -57574468, data$0]);
                  });
        }
        return [0, merge];
       },
       function(Key, Input1_data, Input2_data, Output_data){
        function merge(t1, t2, param){
         var f = param[1];
         function f$0(key, merge_result){
          var a = caml_call2(f, key, merge_result);
          return caml_call2
                  (Base_Option[24], a, function(data){return [0, key, data];});
         }
         return Base_Map[76].call
                 (null,
                  t1,
                  t2,
                  function(e, param){
                   var variant = param[1];
                   if(737457313 === variant){
                    var
                     a = param[2],
                     b = a[2],
                     right_data = b[2],
                     right_key = b[1],
                     match = a[1],
                     left_data = match[2],
                     left_key = match[1],
                     c = caml_call1(Key[2], right_key),
                     d = caml_call1(Key[2], left_key);
                    caml_call2(Base_Type_equal[12][11], d, c);
                    return f$0
                            (left_key, [0, 737457313, [0, left_data, right_data]]);
                   }
                   if(847852583 <= variant){
                    var match$0 = param[2], data = match$0[2], key = match$0[1];
                    return f$0(key, [0, 847852583, data]);
                   }
                   var
                    match$1 = param[2],
                    data$0 = match$1[2],
                    key$0 = match$1[1];
                   return f$0(key$0, [0, -57574468, data$0]);
                  });
        }
        return [0, merge];
       },
       [0, Key, set$0, find$0, change$0],
       [0, Key$0, set$1, find$1, add$0, change$1],
       Multi];
   runtime.caml_register_global(36, Univ_map, cst_Univ_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
