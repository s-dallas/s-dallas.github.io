// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Validate
//# unitInfo: Requires: Base, Base__Error, Base__Field, Base__Int, Base__List, Base__Maybe_bound, Base__Or_error, Base__Printf, Base__Staged, Base__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Validate:[N,F(1)*,F(3),F(1)*,F(1),F(2),F(1),F(2),F(2),F(2)*,F(1)*,F(1)*,F(2),F(1),F(1),F(1),F(1),F(2),F(3),F(4),F(2)*->F(2),F(1)*,F(2),F(1)*->F(1),F(1)*->F(1),F(2)*->F(1),F(3),F(2),F(3),F(2)*,F(1)*,F(3),F(5),[F(2)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Validate = "Validate",
    cst_validate = "validate",
    cst_validate_src_validate_ml = "validate/src/validate.ml",
    cst_value = "value ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    cst_Exception_raised_during_va = "Exception raised during validation",
    Base_Maybe_bound = global_data.Base__Maybe_bound,
    Assert_failure = global_data.Assert_failure,
    Base_Printf = global_data.Base__Printf,
    Base_List = global_data.Base__List,
    Base_Int = global_data.Base__Int,
    Base_Staged = global_data.Base__Staged,
    Base_Field = global_data.Base__Field,
    Base_Or_error = global_data.Base__Or_error,
    Base = global_data.Base,
    Base_Error = global_data.Base__Error,
    Base_String = global_data.Base__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Validate);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_validate);
   Ppx_expect_runtime[1][1].call(null, cst_validate_src_validate_ml);
   Ppx_inline_test_lib[6].call(null, cst_validate, "validate.ml");
   var pass = 0;
   function fails(message, a, sexp_of_a){
    return [0,
            [0, 0, Base_Error[19].call(null, 0, 0, message, a, sexp_of_a)],
            0];
   }
   function fail(message){
    return [0, [0, 0, Base_Error[14].call(null, message)], 0];
   }
   function failf(format){return Base_Printf[4].call(null, fail, format);}
   function fail_s(sexp){
    return [0, [0, 0, Base_Error[20].call(null, sexp)], 0];
   }
   function combine(t1, t2){return Base[222].call(null, t1, t2);}
   var
    of_list = Base_List[11],
    a = [0, "."],
    cst_validation_errors = "validation errors",
    b = [0, 0],
    cst_snd = "snd",
    cst_fst = "fst",
    c = [0, cst_validate_src_validate_ml, 154, 20],
    d =
      [0,
       [11, cst_value, [2, 0, [11, " < bound ", [2, 0, 0]]]],
       "value %s < bound %s"],
    e =
      [0,
       [11, cst_value, [2, 0, [11, " <= bound ", [2, 0, 0]]]],
       "value %s <= bound %s"],
    f = [0, cst_validate_src_validate_ml, 159, 20],
    g =
      [0,
       [11, cst_value, [2, 0, [11, " > bound ", [2, 0, 0]]]],
       "value %s > bound %s"],
    h =
      [0,
       [11, cst_value, [2, 0, [11, " >= bound ", [2, 0, 0]]]],
       "value %s >= bound %s"];
   function name(name, t){
    return t
            ? Base_List
               [53].call
              (null,
               t,
               function(param){
                var error = param[2], path = param[1];
                return [0, [0, name, path], error];
               })
            : 0;
   }
   function name_list(n, l){return name(n, of_list(l));}
   function fail_fn(message, param){return fail(message);}
   function pass_bool(param){return pass;}
   function pass_unit(param){return pass;}
   function protect(f, v){
    try{var b = caml_call1(f, v); return b;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      a = [0, [0, cst, Base[117].call(null, exn)], 0];
     return fail_s(Base[85][8].call(null, cst_Exception_raised_during_va, a));
    }
   }
   function try_with(f){
    try{caml_call1(f, 0); return pass;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      a = [0, [0, cst, Base[117].call(null, exn)], 0];
     return fail_s(Base[85][8].call(null, cst_Exception_raised_during_va, a));
    }
   }
   function path_string(path){return Base_String[68].call(null, a, path);}
   function errors(t){
    return Base_List[53].call
            (null,
             t,
             function(param){
              var
               error = param[2],
               path = param[1],
               a = path_string(path),
               b = Base_Error[22].call(null, error, a);
              return Base_Error[12].call(null, b);
             });
   }
   function result(t){
    if(Base_List[18].call(null, t)) return b;
    var
     a =
       Base_List[53].call
        (null,
         t,
         function(param){
          var error = param[2], path = param[1];
          return [0, path_string(path), error];
         });
    return Base_Or_error[38].call
            (null,
             0,
             0,
             cst_validation_errors,
             a,
             function(x_005){
              return Base_List[6].call
                      (null,
                       function(param){
                        var
                         arg1_002 = param[2],
                         arg0_001 = param[1],
                         res0_003 = Base[202].call(null, arg0_001),
                         res1_004 = Base_Error[9].call(null, arg1_002);
                        return [1, [0, res0_003, [0, res1_004, 0]]];
                       },
                       x_005);
             });
   }
   function maybe_raise(t){
    var a = result(t);
    return Base_Or_error[34].call(null, a);
   }
   function valid_or_error(check, x){
    var a = result(protect(check, x));
    return caml_call2(Base_Or_error[47], a, function(param){return x;});
   }
   function field_direct(check, fld, record, v){
    var result = protect(check, v);
    return name(Base_Field[2].call(null, fld), result);
   }
   function field(check, record, fld){
    var v = Base_Field[3].call(null, fld, record);
    return field_direct(check, fld, record, v);
   }
   function field_folder(check, record){
    return function(acc, fld){return [0, field(check, record, fld), acc];};
   }
   function field_direct_folder(check){
    return Base_Staged[1].call
            (null,
             function(acc, fld, record, v){
              var result = field_direct(check, fld, record, v);
              return result ? [0, result, acc] : acc;
             });
   }
   function all(checks, v){
    var checks$0 = checks, errs = 0;
    for(;;){
     if(! checks$0) return of_list(Base_List[63].call(null, errs));
     var checks$1 = checks$0[2], check = checks$0[1], err = protect(check, v);
     if(err){
      var errs$0 = [0, err, errs];
      checks$0 = checks$1;
      errs = errs$0;
     }
     else
      checks$0 = checks$1;
    }
   }
   function of_result(f){
    return function(v){
     try{
      var match = caml_call1(f, v);
      if(0 === match[0])
       var a = pass;
      else
       var error = match[1], a = fail(error);
      return a;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       b = [0, [0, cst, Base[117].call(null, exn)], 0];
      return fail_s(Base[85][8].call(null, cst_Exception_raised_during_va, b));
     }};
   }
   function of_error(f){
    return function(v){
     try{
      var match = caml_call1(f, v);
      if(0 === match[0])
       var a = pass;
      else
       var error = match[1], a = [0, [0, 0, error], 0];
      return a;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       b = [0, [0, cst, Base[117].call(null, exn)], 0];
      return fail_s(Base[85][8].call(null, cst_Exception_raised_during_va, b));
     }};
   }
   function booltest(f, if_false){
    return function(v){
     try{var a = caml_call1(f, v) ? pass : fail(if_false); return a;}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       b = [0, [0, cst, Base[117].call(null, exn)], 0];
      return fail_s(Base[85][8].call(null, cst_Exception_raised_during_va, b));
     }};
   }
   function pair(fst, snd, param){
    var
     snd_value = param[2],
     fst_value = param[1],
     a = [0, name(cst_snd, protect(snd, snd_value)), 0];
    return of_list([0, name(cst_fst, protect(fst, fst_value)), a]);
   }
   function list_indexed(check, list){
    return of_list
            (Base_List[41].call
              (null,
               list,
               function(i, el){
                var a = protect(check, el);
                return name(Base_Int[12].call(null, i + 1 | 0), a);
               }));
   }
   function list(extract_name, check, list){
    return of_list
            (Base_List[53].call
              (null,
               list,
               function(el){
                var t = protect(check, el);
                if(! t) return 0;
                try{var a = name(caml_call1(extract_name, el), t); return a;}
                catch(exn$0){
                 var
                  exn = caml_wrap_exception(exn$0),
                  b = [0, [0, cst, Base[117].call(null, exn)], 0];
                 return fail_s
                         (Base[85][8].call(null, cst_Exception_raised_during_va, b));
                }
               }));
   }
   function alist(name, f, list$0){
    return list
            (function(param){
              var key = param[1];
              return caml_call1(name, key);
             },
             function(param){var x = param[2]; return caml_call1(f, x);},
             list$0);
   }
   function first_failure(t1, t2){
    return Base_List[18].call(null, t1) ? t2 : t1;
   }
   function of_error_opt(param){
    if(! param) return pass;
    var error = param[1];
    return fail(error);
   }
   function bounded(name, lower, upper, compare, x){
    switch(Base_Maybe_bound[18].call(null, lower, upper, x, compare)){
      case 0:
       if(typeof lower === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
       if(0 === lower[0]){
        var
         incl = lower[1],
         a = caml_call1(name, incl),
         b = caml_call1(name, x);
        return fail(caml_call2(Base_Printf[2].call(null, d), b, a));
       }
       var
        excl = lower[1],
        i = caml_call1(name, excl),
        j = caml_call1(name, x);
       return fail(caml_call2(Base_Printf[2].call(null, e), j, i));
      case 1:
       return pass;
      default:
       if(typeof upper === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
       if(0 === upper[0]){
        var
         incl$0 = upper[1],
         k = caml_call1(name, incl$0),
         l = caml_call1(name, x);
        return fail(caml_call2(Base_Printf[2].call(null, g), l, k));
       }
       var
        excl$0 = upper[1],
        m = caml_call1(name, excl$0),
        n = caml_call1(name, x);
       return fail(caml_call2(Base_Printf[2].call(null, h), n, m));
    }
   }
   function symbol(t1, t2){return combine(t1, t2);}
   var Infix = [0, symbol];
   Ppx_inline_test_lib[7].call(null, cst_validate);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Validate);
   var
    Validate =
      [0,
       pass,
       fail,
       fails,
       fail_s,
       failf,
       combine,
       of_list,
       name,
       name_list,
       fail_fn,
       pass_bool,
       pass_unit,
       protect,
       try_with,
       result,
       errors,
       maybe_raise,
       valid_or_error,
       field,
       field_direct,
       field_folder,
       field_direct_folder,
       all,
       of_result,
       of_error,
       booltest,
       pair,
       list_indexed,
       list,
       first_failure,
       of_error_opt,
       alist,
       bounded,
       Infix];
   runtime.caml_register_global(35, Validate, cst_Validate);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
