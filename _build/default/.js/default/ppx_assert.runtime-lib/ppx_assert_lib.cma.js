// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_assert_lib
//# shape: Ppx_assert_lib:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_assert_lib = [0];
   runtime.caml_register_global(0, Ppx_assert_lib, "Ppx_assert_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_assert_lib__Runtime
//# unitInfo: Requires: Base, Base__Source_code_position, Sexplib0__Sexp_conv
//# shape: Ppx_assert_lib__Runtime:[F(6),F(8),F(8),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    Base = global_data.Base,
    Base_Source_code_position = global_data.Base__Source_code_position,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    E = [248, "Ppx_assert_lib.Runtime.E", runtime.caml_fresh_oo_id(0)],
    a = [0, "runtime-lib/runtime.ml.E"],
    b = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     E,
     function(param){
      var tag = param[1];
      if(tag !== E)
       throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
      var
       arg1_002 = param[3],
       arg0_001 = param[2],
       res0_003 = Base[202].call(null, arg0_001),
       res1_004 = Base[85][5].call(null, arg1_002);
      return [1, [0, a, [0, res0_003, [0, res1_004, 0]]]];
     });
   var
    c = [0, "Stack"],
    d = [0, "Loc"],
    e = [0, "Value"],
    cst_predicate_failed = "predicate failed";
   function exn_sexp_style(message, pos, x_005, tag, body){
    if(message)
     var
      s = message[1],
      a = Base[241].call(null, cst, tag),
      message$0 = Base[241].call(null, s, a);
    else
     var message$0 = tag;
    var
     b =
       x_005
        ? [0,
          [1,
           [0,
            c,
            [0, Base[165].call(null, Base_Source_code_position[3], x_005), 0]]],
          0]
        : 0,
     e = Base[222].call(null, [0, [1, [0, d, [0, [0, pos], 0]]], 0], b),
     sexp = [1, Base[222].call(null, body, e)];
    return [0, E, message$0, sexp];
   }
   function test_pred(pos, sexpifier, here, message, predicate, t){
    var a = 1 - caml_call1(predicate, t);
    if(a)
     throw caml_maybe_attach_backtrace
            (exn_sexp_style
              (message,
               pos,
               here,
               cst_predicate_failed,
               [0, [1, [0, e, [0, caml_call1(sexpifier, t), 0]]], 0]),
             1);
    return a;
   }
   var
    r_diff = [0, 0],
    f = [0, "vs"],
    cst_comparison_failed = "comparison failed",
    g = [0, "got"],
    h = [0, "expected"],
    cst_got_unexpected_result = "got unexpected result",
    dummy = 0;
   function set_diff_function(f){r_diff[1] = f; return 0;}
   function test_result_or_eq(sexpifier, comparator, equal, expect$0, got$0){
    if(equal)
     var f = equal[1], pass = caml_call2(f, got$0, expect$0);
    else
     var pass = 0 === caml_call2(comparator, got$0, expect$0) ? 1 : 0;
    if(pass) return 892014833;
    var
     got = caml_call1(sexpifier, got$0),
     expect = caml_call1(sexpifier, expect$0),
     match = r_diff[1];
    if(match){
     var
      diff = match[1],
      from = Base[85][14].call(null, 0, expect),
      to = Base[85][14].call(null, 0, got);
     caml_call2(diff, from, to);
    }
    return [0, , [0, expect, got]];
   }
   function test_eq(pos, sexpifier, comparator, here, message, equal, t1, t2){
    var match = test_result_or_eq(sexpifier, comparator, equal, t1, t2);
    if(typeof match === "number") return 0;
    var match$0 = match[2], t2$0 = match$0[2], t1$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_comparison_failed,
              [0, t1$0, [0, f, [0, t2$0, 0]]]),
            1);
   }
   function test_result
   (pos, sexpifier, comparator, here, message, equal, expect, got){
    var match = test_result_or_eq(sexpifier, comparator, equal, expect, got);
    if(typeof match === "number") return 0;
    var match$0 = match[2], got$0 = match$0[2], expect$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_got_unexpected_result,
              [0,
               [1, [0, h, [0, expect$0, 0]]],
               [0, [1, [0, g, [0, got$0, 0]]], 0]]),
            1);
   }
   var
    Ppx_assert_lib_Runtime =
      [0, test_pred, test_eq, test_result, set_diff_function];
   runtime.caml_register_global
    (17, Ppx_assert_lib_Runtime, "Ppx_assert_lib__Runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
