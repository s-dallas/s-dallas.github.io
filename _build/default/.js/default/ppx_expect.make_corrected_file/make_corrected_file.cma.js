// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Make_corrected_file__
//# shape: Make_corrected_file__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Make_corrected_file = [0],
    Make_corrected_file$0 = [0, Make_corrected_file];
   runtime.caml_register_global
    (0, Make_corrected_file$0, "Make_corrected_file__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file__Import
//# shape: Make_corrected_file__Import:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Make_corrected_file_Import = [0];
   runtime.caml_register_global
    (0, Make_corrected_file_Import, "Make_corrected_file__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__List, Base__Option, Base__String, Base__Sys, Ppxlib_print_diff, Stdio__In_channel, Stdio__Out_channel, Stdlib__Sys
//# shape: Make_corrected_file:[F(8)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst$4 = "/",
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$0 = cst$4,
    cst$1 = cst$3,
    cst = cst$4,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Base_Sys = global_data.Base__Sys,
    Base_Char = global_data.Base__Char,
    Base_List = global_data.Base__List,
    Ppxlib_print_diff = global_data.Ppxlib_print_diff,
    Base_Error = global_data.Base__Error,
    a = [0, 0],
    cst_corrected = ".corrected",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    cst_alt_old = "-alt-old",
    cst_alt_new = "-alt-new",
    cst_Changes_found = "Changes found.",
    b = [0, "-default", 0];
   function chop_if_exists(ancestor, path){
    var a = Base[241].call(null, ancestor, cst);
    return Base_String[119].call(null, path, a);
   }
   function f
   (c,
    corrected_path,
    opt,
    diff_command,
    diff_path_prefix,
    next_contents,
    path,
    param){
    var
     use_dot_patdiff = c ? c[1] : 0,
     use_color = opt ? opt[1] : 0,
     prev_contents =
       runtime.caml_sys_file_exists(path)
        ? Stdio_In_channel[4].call(null, 0, path, Stdio_In_channel[14])
        : cst$2;
    if(Base_String[47].call(null, prev_contents, next_contents)) return a;
    var
     default_corrected_path = Base[241].call(null, path, cst_corrected),
     corrected_path$0 =
       Base_Option[30].call(null, corrected_path, default_corrected_path);
    Stdio_Out_channel[37].call(null, corrected_path$0, next_contents);
    if(use_dot_patdiff)
     var
      d = Base_Sys[19].call(null, cst_TESTING_FRAMEWORK),
      match = Base_Option[52].call(null, d);
    else
     var match = use_dot_patdiff;
    var default_configs = match ? 0 : b, cwd = runtime.caml_sys_getcwd(0);
    if(diff_path_prefix)
     var
      prefix = diff_path_prefix[1],
      e = 47,
      f = Base_Char[16],
      g =
        Base_String[108].call(null, [0, function(a){return f(e, a);}], prefix),
      prefix$0 = Base[241].call(null, g, cst$0);
    else
     var prefix$0 = cst$1;
    var
     h = chop_if_exists(cwd, path),
     alt_old = [0, cst_alt_old, [0, Base[241].call(null, prefix$0, h), 0]],
     i = chop_if_exists(cwd, default_corrected_path),
     alt_new = [0, cst_alt_new, [0, Base[241].call(null, prefix$0, i), 0]],
     extra_patdiff_args =
       Base_List[11].call
        (null, [0, default_configs, [0, alt_old, [0, alt_new, 0]]]);
    Ppxlib_print_diff[1].call
     (null,
      diff_command,
      [0, extra_patdiff_args],
      [0, use_color],
      path,
      corrected_path$0,
      0);
    return [1, Base_Error[14].call(null, cst_Changes_found)];
   }
   var Make_corrected_file = [0, f];
   runtime.caml_register_global
    (21, Make_corrected_file, "Make_corrected_file");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZV9jb3JyZWN0ZWRfZmlsZS5jbWEuanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZV9jb3JyZWN0ZWRfZmlsZS5jbWEuanMiLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJNYWtlX2NvcnJlY3RlZF9maWxlIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUEsd0JBQUEiLCJpZ25vcmVMaXN0IjpbMF19fSx7Im9mZnNldCI6eyJsaW5lIjoyMywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJtYWtlX2NvcnJlY3RlZF9maWxlLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiXSwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiXSwibmFtZXMiOlsicnVudGltZSIsIk1ha2VfY29ycmVjdGVkX2ZpbGVfSW1wb3J0Il0sIm1hcHBpbmdzIjoiT0FBQUEsVUFBQSx5QkFBQUMsNkJBQUEiLCJpZ25vcmVMaXN0IjpbMF19fSx7Im9mZnNldCI6eyJsaW5lIjozNywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJtYWtlX2NvcnJlY3RlZF9maWxlLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMvZHMvRG9jdW1lbnRzL3BhdGNod29yay9fb3BhbS9saWIvcHB4X2V4cGVjdC9tYWtlX2NvcnJlY3RlZF9maWxlL21ha2VfY29ycmVjdGVkX2ZpbGUubWwiXSwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCJvcGVuISBCYXNlXG5vcGVuISBJbXBvcnRcblxubGV0IGNob3BfaWZfZXhpc3RzIH5hbmNlc3RvciB+ZnJvbTpwYXRoID1cbiAgU3RyaW5nLmNob3BfcHJlZml4X2lmX2V4aXN0cyBwYXRoIH5wcmVmaXg6KGFuY2VzdG9yIF4gXCIvXCIpXG47O1xuXG5sZXQgZlxuICA/KHVzZV9kb3RfcGF0ZGlmZiA9IGZhbHNlKVxuICA/Y29ycmVjdGVkX3BhdGhcbiAgPyh1c2VfY29sb3IgPSBmYWxzZSlcbiAgP2RpZmZfY29tbWFuZFxuICA/ZGlmZl9wYXRoX3ByZWZpeFxuICB+bmV4dF9jb250ZW50c1xuICB+cGF0aFxuICAoKVxuICA9XG4gIGxldCBwcmV2X2NvbnRlbnRzID1cbiAgICBpZiBTdGRsaWIuU3lzLmZpbGVfZXhpc3RzIHBhdGhcbiAgICB0aGVuIFN0ZGlvLkluX2NoYW5uZWwud2l0aF9maWxlIHBhdGggfmY6U3RkaW8uSW5fY2hhbm5lbC5pbnB1dF9hbGxcbiAgICBlbHNlIFwiXCJcbiAgaW5cbiAgbWF0Y2ggU3RyaW5nLiggPSApIHByZXZfY29udGVudHMgbmV4dF9jb250ZW50cyB3aXRoXG4gIHwgdHJ1ZSAtPlxuICAgICgqIEl0J3MgcG9zc2libGUgZm9yIHN0YWxlIC5jb3JyZWN0ZWQgZmlsZXMgdG8gbGluZ2VyIGFuZCBpZGVhbGx5IHdlIHdvdWxkIGRlbGV0ZSB0aGVtXG4gICAgICAgaGVyZSwgYnV0IHRoaXMgcHJvYmFibHkgaXNuJ3Qgd29ydGggZml4aW5nIHNpbmNlIGl0J3MgbW9vdGVkIGJ5IGR1bmUsIHdoaWNoIHB1dHNcbiAgICAgICBpdHMgYnVpbGQgcHJvZHVjdHMgaW4gYSBzZXBhcmF0ZSBkaXJlY3RvcnkuIElmIHdlIGRvIGFkZCBkZWxldGlvbiBhdCBzb21lIHBvaW50IGluXG4gICAgICAgdGhlIGZ1dHVyZSwgd2Ugc2hvdWxkIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IGNhdXNlIHByb2JsZW1zIGZvciBjbGllbnRzIHdobyBjYWxsIFtmXVxuICAgICAgIGFuZCB0aGVuIHBlcmZvcm0gZGVsZXRpb24gb24gdGhlaXIgb3duLiAqKVxuICAgIE9rICgpXG4gIHwgZmFsc2UgLT5cbiAgICBsZXQgZGVmYXVsdF9jb3JyZWN0ZWRfcGF0aCA9IHBhdGggXiBcIi5jb3JyZWN0ZWRcIiBpblxuICAgIGxldCBjb3JyZWN0ZWRfcGF0aCA9IE9wdGlvbi52YWx1ZSBjb3JyZWN0ZWRfcGF0aCB+ZGVmYXVsdDpkZWZhdWx0X2NvcnJlY3RlZF9wYXRoIGluXG4gICAgU3RkaW8uT3V0X2NoYW5uZWwud3JpdGVfYWxsIGNvcnJlY3RlZF9wYXRoIH5kYXRhOm5leHRfY29udGVudHM7XG4gICAgbGV0IGV4dHJhX3BhdGRpZmZfYXJncyA9XG4gICAgICBsZXQgZGVmYXVsdF9jb25maWdzID1cbiAgICAgICAgbWF0Y2ggdXNlX2RvdF9wYXRkaWZmICYmIE9wdGlvbi5pc19ub25lIChTeXMuZ2V0ZW52IFwiVEVTVElOR19GUkFNRVdPUktcIikgd2l0aFxuICAgICAgICB8IHRydWUgLT4gW11cbiAgICAgICAgfCBmYWxzZSAtPiBbIFwiLWRlZmF1bHRcIiBdXG4gICAgICBpblxuICAgICAgbGV0IGN3ZCA9IFN0ZGxpYi5TeXMuZ2V0Y3dkICgpIGluXG4gICAgICAoKiBkaWZmX3BhdGhfcHJlZml4IGlzIHVzZWZ1bCB0byB0cmFuc2Zvcm0gb3V0cHV0IHBhdGhzIHRvIG1ha2UgaXQgZWFzaWVyIGZvciB0aGVcbiAgICAgICAgIGNvbnN1bWVyIChlLmcuIGVkaXRvcikgdG8gbG9jYXRlIHRoZSBmaWxlcyB3aXRoIGRpZmZzLiBPbmUgcGFydGljdWxhciBleGFtcGxlIHRoaXNcbiAgICAgICAgIGhlbHBzIGlzIHRoZSBcInRlc3QtdGhpcy1maWxlXCIgcnVsZXMgZ2VuZXJhdGVkIGJ5IGVtYWNzL3ZzY29kZSBpbiBqZW5nYS9zdGFydC9qYnVpbGQsXG4gICAgICAgICB3aGVyZSB0aGUgcnVsZSBhbmQgdGhlIHRlc3QgYXJlIGluIGRpZmZlcmVudCBkaXJlY3Rvcmllcy4gKilcbiAgICAgIGxldCBwcmVmaXggPVxuICAgICAgICBtYXRjaCBkaWZmX3BhdGhfcHJlZml4IHdpdGhcbiAgICAgICAgfCBTb21lIHByZWZpeCAtPiBTdHJpbmcucnN0cmlwIH5kcm9wOihDaGFyLmVxdWFsICcvJykgcHJlZml4IF4gXCIvXCJcbiAgICAgICAgfCBOb25lIC0+IFwiXCJcbiAgICAgIGluXG4gICAgICBsZXQgYWx0X29sZCA9IFsgXCItYWx0LW9sZFwiOyBwcmVmaXggXiBjaG9wX2lmX2V4aXN0cyB+YW5jZXN0b3I6Y3dkIH5mcm9tOnBhdGggXSBpblxuICAgICAgbGV0IGFsdF9uZXcgPVxuICAgICAgICBbIFwiLWFsdC1uZXdcIjsgcHJlZml4IF4gY2hvcF9pZl9leGlzdHMgfmFuY2VzdG9yOmN3ZCB+ZnJvbTpkZWZhdWx0X2NvcnJlY3RlZF9wYXRoIF1cbiAgICAgIGluXG4gICAgICBbIGRlZmF1bHRfY29uZmlnczsgYWx0X29sZDsgYWx0X25ldyBdIHw+IExpc3QuY29uY2F0XG4gICAgaW5cbiAgICBQcHhsaWJfcHJpbnRfZGlmZi5wcmludFxuICAgICAgP2RpZmZfY29tbWFuZFxuICAgICAgfnVzZV9jb2xvclxuICAgICAgfmV4dHJhX3BhdGRpZmZfYXJnc1xuICAgICAgfmZpbGUxOnBhdGhcbiAgICAgIH5maWxlMjpjb3JyZWN0ZWRfcGF0aFxuICAgICAgKCk7XG4gICAgRXJyb3IgKEVycm9yLm9mX3N0cmluZyBcIkNoYW5nZXMgZm91bmQuXCIpXG47O1xuIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3QiLCJnbG9iYWxfZGF0YSIsIlN0ZGlvX0luX2NoYW5uZWwiLCJCYXNlX1N0cmluZyIsIkJhc2UiLCJCYXNlX09wdGlvbiIsIlN0ZGlvX091dF9jaGFubmVsIiwiQmFzZV9TeXMiLCJCYXNlX0NoYXIiLCJCYXNlX0xpc3QiLCJQcHhsaWJfcHJpbnRfZGlmZiIsIkJhc2VfRXJyb3IiLCJjc3RfY29ycmVjdGVkIiwiY3N0X1RFU1RJTkdfRlJBTUVXT1JLIiwiY3N0X2FsdF9vbGQiLCJjc3RfYWx0X25ldyIsImNzdF9DaGFuZ2VzX2ZvdW5kIiwiY2hvcF9pZl9leGlzdHMiLCJhbmNlc3RvciIsInBhdGgiLCJmIiwiY29ycmVjdGVkX3BhdGgiLCJvcHQiLCJkaWZmX2NvbW1hbmQiLCJkaWZmX3BhdGhfcHJlZml4IiwibmV4dF9jb250ZW50cyIsInBhcmFtIiwidXNlX2RvdF9wYXRkaWZmIiwidXNlX2NvbG9yIiwicHJldl9jb250ZW50cyIsImRlZmF1bHRfY29ycmVjdGVkX3BhdGgiLCJtYXRjaCIsImRlZmF1bHRfY29uZmlncyIsImN3ZCIsInByZWZpeCIsImFsdF9vbGQiLCJhbHRfbmV3IiwiZXh0cmFfcGF0ZGlmZl9hcmdzIiwiTWFrZV9jb3JyZWN0ZWRfZmlsZSJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUEsUUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBRCxRQUFBO0FBQUEsSUFBQUEsUUFBQTtBQUFBLElBQUFBLFFBQUE7QUFBQSxJQUFBQSxNQUFBO0FBQUEsSUFBQUUsbUJBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsT0FBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxvQkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLG9CQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyx3QkFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsb0JBQUE7QUFBQTtBQUFBLFlBQUFDLGVBQUFDLFVBQUFDO0FBQUFBLFFBQUEsSUNJNEM7QUFBQSxJQUFnQjtBQUFBO0FBQUEsWUFBQUM7QUFBQUEsSUFBQTtBQUFBLElBQUFDO0FBQUFBLElBQUFDO0FBQUFBLElBQUFDO0FBQUFBLElBQUFDO0FBQUFBLElBQUFDO0FBQUFBLElBQUFOO0FBQUFBLElBQUFPO0FBQUFBO0FBQUFBLEtBQUFDLGtCQUkxRDtBQUFBLEtBQUFDLFlBQUE7QUFBQSxLQUFBQztBQUFBQSxPQVVLO0FBQUEsVUFDRTtBQUFBO0FBQUEsSUFHRCw2REFPSjtBQUFBO0FBQUEsS0FBQUMseUJBRTZCO0FBQUEsS0FBQVQ7QUFBQUEsT0FDUjtBQUFBLElBQ3JCO0FBQUEsSUFBOEQ7QUFBQTtBQUFBLFVBR2xCO0FBQUEsTUFBQVUsUUFBZjtBQUFBO0FBQUEsU0FBQUEsUUFIaUM7QUFBQSxRQUFBQyxrQkFBQSxlQUFBQyxNQU9sRDtBQUFBLElBS1Y7QUFBQTtBQUFBLE1BQUFDLFNBQUE7QUFBQSxVQUV1QztBQUFBO0FBQUE7QUFBQSxRQUFwQiw0Q0FBb0I7QUFBQSxNQUFBQSxXQUFwQjtBQUFBO0FBQUEsU0FBQUEsV0FGbkI7QUFBQTtBQUFBLFNBS3FDO0FBQUEsS0FBQUMsVUFBVDtBQUFBLFNBRUg7QUFBQSxLQUFBQyxVQUFUO0FBQUEsS0FBQUM7QUFBQUEsT0FFaEI7QUFBQTtBQUFBLElBRUY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT00sd0RBQWtDO0FBQUE7QUFBQSxPQUFBQyxzQkQvRDVDIiwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
