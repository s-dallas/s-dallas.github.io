// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_inline_test_lib
//# unitInfo: Requires: Base, Base__Exn, Base__Int63, Base__List, Base__Random, Base__String, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Filename, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__Random, Stdlib__Result, Stdlib__Scanf, Stdlib__String, Stdlib__Sys, Time_now
//# shape: Ppx_inline_test_lib:[N,N,N,F(1),N,F(2),F(1),F(8),F(8),F(8),F(1),F(1),F(1),F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = "\n",
    cst$15 = " ",
    cst_line = " , line ",
    cst_File = " File ",
    cst_threw = " threw",
    cst_s$0 = "%s",
    cst_s = "%s%!",
    cst$12 = ".\n",
    cst_Ppx_inline_test_lib$0 = "Ppx_inline_test_lib",
    cst_TES = "TES",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    cst_T_MODULE_at$0 = "T_MODULE at ",
    cst_T_MODULES = "T_MODULES",
    cst_inline_test_runner$0 = "inline-test-runner",
    cst_inline_tests_log$0 = "inline_tests.log",
    cst_ppx_inline_test_error_the_ =
      "ppx_inline_test error: the following -only-test flags matched nothing:",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$11 = cst$13,
    cst$9 = cst$14,
    cst$10 = cst$15,
    cst$7 = cst$14,
    cst$8 = cst$15,
    cst$5 = cst$14,
    cst$6 = "  ",
    cst$3 = cst$14,
    cst$4 = cst$13,
    cst$2 = ".",
    cst$0 = cst$13,
    cst$1 = ": ",
    initial = [0, 0, [0, "disabled", 0]],
    cst = cst$13,
    am_running_env_var = cst_TESTING_FRAMEWORK,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Result = global_data.Stdlib__Result,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Random = global_data.Base__Random,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int63 = global_data.Base__Int63,
    Time_now = global_data.Time_now,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_success = "success",
    cst_failure = "failure",
    cst_error = "error";
   function to_string(param){
    switch(param){
      case 0:
       return cst_success;
      case 1:
       return cst_failure;
      default: return cst_error;
    }
   }
   function combine(t1, t2){
    a:
    {
     switch(t1){
       case 0:
        if(! t2) return 0; break;
       case 1: break;
       default: break a;
     }
     if(2 !== t2) return 1;
    }
    return 2;
   }
   function combine_all(ts){
    return Stdlib_List[26].call(null, combine, 0, ts);
   }
   var
    already_initialized = [0, 0],
    test_modules_ran = [0, 0],
    test_modules_failed = [0, 0],
    tests_ran = [0, 0],
    tests_failed = [0, 0],
    dynamic_lib = [0, 0];
   function drop(t, tag){
    var a = [0, tag, t[2]];
    return [0,
            Stdlib_List[44].call
             (null, function(a){return tag !== a ? 1 : 0;}, t[1]),
            a];
   }
   function require(t, tag){
    var
     a =
       Stdlib_List[44].call
        (null, function(a){return tag !== a ? 1 : 0;}, t[2]);
    return [0, [0, tag, t[1]], a];
   }
   var
    action = [0, -950194894],
    cst_source_tree_root$0 = "source_tree_root",
    cst_diff_path_prefix$0 = "diff_path_prefix",
    cst_diff_command = "diff_command",
    cst_in_place$0 = "in_place",
    cst_use_color = "use_color",
    K =
      [0,
       [11,
        "ppx_inline_test error: attempted to access the [",
        [2, 0, [11, "] config before [init] was called", 0]]],
       "ppx_inline_test error: attempted to access the [%s] config before [init] was called"],
    J = [0, [2, 0, [12, 10, 0]], "%s\n"],
    I = [0, 1, [0, 7, 0]],
    B = [0, [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, 0]]]], " %s:%d"],
    C = [0, [12, 32, [2, 0, 0]], " %s"],
    x =
      [0,
       [11,
        "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n",
        [10, 0]],
       "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n%!"],
    y =
      [0,
       [11,
        "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n",
        [10, 0]],
       "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n%!"],
    z =
      [0,
       [4,
        0,
        0,
        0,
        [11,
         " tests ran, ",
         [4, 0, 0, 0, [11, " test_modules ran\n", [10, 0]]]]],
       "%d tests ran, %d test_modules ran\n%!"],
    A =
      [0,
       [11, cst_ppx_inline_test_error_the_, 0],
       cst_ppx_inline_test_error_the_],
    D = [0, [11, cst$12, [10, 0]], ".\n%!"],
    E =
      [0,
       [11, "ppx_inline_test error: no tests have been run.\n", [10, 0]],
       "ppx_inline_test error: no tests have been run.\n%!"],
    G = [0, [11, cst_T_MODULES, 0], cst_T_MODULES],
    H = [0, [11, ", ", [4, 0, 0, 0, [11, " TES", 0]]], ", %d TES"],
    F =
      [0,
       [11,
        "FAILED ",
        [4,
         0,
         0,
         0,
         [11, " / ", [4, 0, 0, 0, [11, " tests", [2, 0, [12, 10, [10, 0]]]]]]]],
       "FAILED %d / %d tests%s\n%!"],
    v =
      [0,
       [11,
        cst_T_MODULE_at$0,
        [2,
         0,
         [11,
          cst_threw,
          [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]]],
       "T_MODULE at %s threw%s%s.\n%s%s\n%!"],
    w = [0, [11, cst_TES, 0], cst_TES],
    cst_ppx_inline_test_cannot_use =
      "ppx_inline_test: cannot use -list-partition or -partition without specifying a partition at preprocessing time",
    p = [0, [2, 0, [12, 10, [2, 0, 0]]], "%s\n%s"],
    q = [0, [2, 0, [10, 0]], cst_s],
    r = [0, 1],
    s =
      [0,
       [11, " (", [8, [0, 0, 0], 0, [0, 3], [11, " sec)\n", [10, 0]]]],
       " (%.3f sec)\n%!"],
    t =
      [0,
       [2, 0, [11, " is false.\n", [2, 0, [12, 10, [10, 0]]]]],
       "%s is false.\n%s\n%!"],
    u =
      [0,
       [2,
        0,
        [11,
         cst_threw,
         [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]],
       "%s threw%s%s.\n%s%s\n%!"],
    o = [0, [2, 0, [10, 0]], cst_s],
    n = [0, [2, 0, [10, 0]], cst_s],
    m = [0, [12, 10, [2, 0, [12, 10, [10, 0]]]], "\n%s\n%!"],
    cst_T_MODULE_at = cst_T_MODULE_at$0,
    cst_in_TES = "  in TES",
    cst_time_without_resetting_ran = "time_without_resetting_random_seeds",
    cst_Ppx_inline_test_lib = cst_Ppx_inline_test_lib$0,
    k = [0, 0],
    i = [0, 0],
    cst_inline_tests_log = cst_inline_tests_log$0,
    h =
      [0,
       [11,
        "Argument ",
        [2,
         0,
         [11, " doesn't fit the format filename[:line_number]\n", [10, 0]]]],
       "Argument %s doesn't fit the format filename[:line_number]\n%!"],
    g =
      [0,
       [2,
        0,
        [11, ": unexpected anonymous argument ", [2, 0, [12, 10, [10, 0]]]]],
       "%s: unexpected anonymous argument %s\n%!"],
    cst_The_inline_test_runner_can =
      "The inline test runner can only be initialized once, and has already been initialized.",
    cst_inline_test_runner = cst_inline_test_runner$0,
    f =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " [args]", 0]]]]]],
       "%s %s %s [args]"],
    cst_Prefix_to_prepend_to_filep =
      " Prefix to prepend to filepaths in test output",
    cst_diff_path_prefix = "-diff-path-prefix",
    cst_Path_to_the_root_of_the_so = " Path to the root of the source tree",
    cst_source_tree_root = "-source-tree-root",
    cst_Diff_command_for_tests_tha =
      " Diff command for tests that require diffing (use - to disable diffing)",
    cst_diff_cmd = "-diff-cmd",
    cst_Update_expect_tests_in_pla = " Update expect tests in place",
    cst_in_place = "-in-place",
    cst_Summarize_tests_without_us = " Summarize tests without using color",
    cst_no_color = "-no-color",
    cst_location_Run_only_the_test =
      'location Run only the tests specified by all the -only-test options.\n                      Locations can be one of these forms:\n                      - file.ml\n                      - file.ml:line_number\n                      - File "file.ml"\n                      - File "file.ml", line 23\n                      - File "file.ml", line 23, characters 2-3',
    cst_only_test = "-only-test",
    cst_substring_Only_run_tests_w =
      "substring Only run tests whose names contain the given substring",
    cst_matching = "-matching",
    cst_tag_Only_run_tests_tagged_ =
      "tag Only run tests tagged with [tag] (overrides previous -drop-tag)",
    cst_require_tag = "-require-tag",
    cst_tag_Only_run_tests_not_tag =
      "tag Only run tests not tagged with [tag] (overrides previous -require-tag)",
    cst_drop_tag = "-drop-tag",
    cst_Log_the_tests_run_in_inlin = " Log the tests run in inline_tests.log",
    cst_log = "-log",
    cst_Show_the_number_of_tests_r = " Show the number of tests ran",
    cst_show_counts = "-show-counts",
    cst_End_with_an_error_if_no_te = " End with an error if no tests were run",
    cst_strict = "-strict",
    cst_Run_tests_only_up_to_the_f =
      " Run tests only up to the first error (doesn't work for expect tests)",
    cst_stop_on_error = "-stop-on-error",
    cst_Show_the_tests_as_they_run = " Show the tests as they run",
    cst_verbose = "-verbose",
    cst_Only_run_the_tests_in_the_ =
      " Only run the tests in the given partition",
    cst_partition = "-partition",
    cst_Lists_all_the_partitions_t =
      " Lists all the partitions that contain at least one test or test_module into FILE",
    cst_list_partitions_into_file = "-list-partitions-into-file",
    cst_Lists_all_the_partitions_t$0 =
      " Lists all the partitions that contain at least one test or test_module",
    cst_list_partitions = "-list-partitions",
    cst_Do_not_run_tests_but_show_ =
      " Do not run tests but show what would have been run",
    cst_list_test_names = "-list-test-names",
    e =
      [0,
       [11,
        cst_File,
        [3,
         0,
         [11,
          cst_line,
          [4,
           0,
           0,
           0,
           [11,
            " , characters ",
            [4, 0, 0, 0, [11, " - ", [4, 0, 0, 0, [12, 32, [10, 0]]]]]]]]]],
       " File %S , line %d , characters %d - %d %!"],
    d =
      [0,
       [11, cst_File, [3, 0, [11, cst_line, [4, 0, 0, 0, [12, 32, [10, 0]]]]]],
       " File %S , line %d %!"],
    c = [0, [11, cst_File, [3, 0, [12, 32, [10, 0]]]], " File %S %!"],
    b =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [2, 0, 0]]]]]]]]],
       "File %S, line %d, characters %d-%d%s"],
    j = [0, [2, 0, 0], cst_s$0],
    M = [0, [2, 0, 0], cst_s$0],
    l = [0, 187165616, 545942154],
    L = [0, 187165616, -863538453];
   try{caml_sys_getenv("FORCE_DROP_INLINE_TEST"); var O = 1, force_drop = O;}
   catch(exn$0){
    var exn = caml_wrap_exception(exn$0);
    if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
    var force_drop = 0;
   }
   function get(param){return force_drop ? -950194894 : action[1];}
   var a = Stdlib_Hashtbl[1].call(null, 0, 23), current = [0, cst];
   function found_test(param){
    var
     b = current[1] !== cst$13 ? 1 : 0,
     c = b ? 1 - Stdlib_Hashtbl[9].call(null, a, current[1]) : b;
    return c ? Stdlib_Hashtbl[5].call(null, a, current[1], 0) : c;
   }
   function is_current(param){
    if(! param) return 1;
    var p = param[1];
    return p === current[1] ? 1 : 0;
   }
   function all(param){
    var
     b =
       Stdlib_Hashtbl[14].call
        (null, function(k, param, acc){return [0, k, acc];}, a, 0);
    return Stdlib_List[59].call(null, Stdlib_String[10], b);
   }
   var current$0 = [0, 0];
   function current_tags(param){
    var
     t = current$0[1],
     a = Stdlib_List[20].call(null, function(m){return m[2];}, t);
    return Stdlib_List[14].call(null, a);
   }
   var
    verbose = [0, 0],
    strict = [0, 0],
    show_counts = [0, 0],
    list_test_names = [0, 0],
    delayed_errors = [0, 0],
    stop_on_error = [0, 0],
    log = [0, 0],
    time_sec = [0, 0.],
    use_color = [0, 1],
    in_place = [0, 0],
    diff_command = [0, 0],
    source_tree_root = [0, 0],
    diff_path_prefix = [0, 0];
   function displayed_descr(descr, filename, line, start_pos, end_pos){
    var a = caml_obj_tag(descr);
    a:
    if(250 === a)
     var descr$0 = descr[1];
    else{
     if(246 !== a && 244 !== a){var descr$0 = descr; break a;}
     var descr$0 = CamlinternalLazy[2].call(null, descr);
    }
    var
     c = descr$0 === cst$13 ? cst$0 : Stdlib[28].call(null, cst$1, descr$0);
    return caml_call5
            (Stdlib_Printf[4].call(null, b),
             filename,
             line,
             start_pos,
             end_pos,
             c);
   }
   function parse_descr(str){
    try{
     var
      f =
        [0,
         caml_call1
          (Stdlib_Scanf[5].call(null, str, e),
           function(file, line, start_pos, end_pos){return [0, file, [0, line]];
           })];
     return f;
    }
    catch(exn){
     try{
      var
       b =
         [0,
          caml_call1
           (Stdlib_Scanf[5].call(null, str, d),
            function(file, line){return [0, file, [0, line]];})];
      return b;
     }
     catch(exn){
      try{
       var
        a =
          [0,
           caml_call1
            (Stdlib_Scanf[5].call(null, str, c),
             function(file){return [0, file, 0];})];
       return a;
      }
      catch(exn){return 0;}
     }
    }
   }
   function parse_argv(current, args){
    if(args){
     var a = args[2];
     if(a){
      var name = args[1];
      if(a[1] === cst_inline_test_runner$0){
       var match = a[2];
       if(match){
        var rest = match[2], lib = match[1];
        if(already_initialized[1])
         throw caml_maybe_attach_backtrace
                ([0, Stdlib_Arg[8], cst_The_inline_test_runner_can], 1);
        already_initialized[1] = 1;
        var
         tests = [0, 0],
         list_partitions = [0, 0],
         partition = [0, 0],
         tag_predicate = [0, initial],
         name_filter = [0, 0],
         c =
           caml_call3
            (Stdlib_Printf[4].call(null, f),
             name,
             cst_inline_test_runner,
             lib),
         d =
           Stdlib_Arg[11].call
            (null,
             0,
             [0,
              [0,
               cst_list_test_names,
               [0,
                function(param){
                 list_test_names[1] = 1;
                 verbose[1] = 1;
                 return 0;
                }],
               cst_Do_not_run_tests_but_show_],
              [0,
               [0,
                cst_list_partitions,
                [0, function(param){list_partitions[1] = i; return 0;}],
                cst_Lists_all_the_partitions_t$0],
               [0,
                [0,
                 cst_list_partitions_into_file,
                 [4,
                  function(file){
                   list_partitions[1] = [0, [0, file]];
                   return 0;
                  }],
                 cst_Lists_all_the_partitions_t],
                [0,
                 [0,
                  cst_partition,
                  [4, function(i){partition[1] = [0, i]; return 0;}],
                  cst_Only_run_the_tests_in_the_],
                 [0,
                  [0,
                   cst_verbose,
                   [2, verbose],
                   cst_Show_the_tests_as_they_run],
                  [0,
                   [0,
                    cst_stop_on_error,
                    [2, stop_on_error],
                    cst_Run_tests_only_up_to_the_f],
                   [0,
                    [0, cst_strict, [2, strict], cst_End_with_an_error_if_no_te],
                    [0,
                     [0,
                      cst_show_counts,
                      [2, show_counts],
                      cst_Show_the_number_of_tests_r],
                     [0,
                      [0,
                       cst_log,
                       [0,
                        function(param){
                         try{runtime.caml_sys_remove(cst_inline_tests_log$0);}
                         catch(exn){}
                         log[1] = [0, Stdlib[60].call(null, cst_inline_tests_log)];
                         return 0;
                        }],
                       cst_Log_the_tests_run_in_inlin],
                      [0,
                       [0,
                        cst_drop_tag,
                        [4,
                         function(s){
                          tag_predicate[1] = drop(tag_predicate[1], s);
                          return 0;
                         }],
                        cst_tag_Only_run_tests_not_tag],
                       [0,
                        [0,
                         cst_require_tag,
                         [4,
                          function(s){
                           tag_predicate[1] = require(tag_predicate[1], s);
                           return 0;
                          }],
                         cst_tag_Only_run_tests_tagged_],
                        [0,
                         [0,
                          cst_matching,
                          [4,
                           function(s){
                            name_filter[1] = [0, s, name_filter[1]];
                            return 0;
                           }],
                          cst_substring_Only_run_tests_w],
                         [0,
                          [0,
                           cst_only_test,
                           [4,
                            function(s){
                             var match = parse_descr(s);
                             if(match)
                              var
                               match$0 = match[1],
                               index = match$0[2],
                               file = match$0[1],
                               index$0 = index,
                               filename = file;
                             else if(Stdlib_String[15].call(null, s, 58)){
                              var
                               i = Stdlib_String[36].call(null, s, 58),
                               filename$0 = Stdlib_String[16].call(null, s, 0, i),
                               index_string =
                                 Stdlib_String[16].call
                                  (null,
                                   s,
                                   i + 1 | 0,
                                   (caml_ml_string_length(s) - i | 0) - 1 | 0);
                              try{var index$1 = runtime.caml_int_of_string(index_string);}
                              catch(exn$0){
                               var exn = caml_wrap_exception(exn$0), tag = exn[1];
                               if(tag !== Stdlib[7])
                                throw caml_maybe_attach_backtrace(exn, 0);
                               var a = caml_call1(Stdlib_Printf[4].call(null, h), s);
                               throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], a], 1);
                              }
                              var index$0 = [0, index$1], filename = filename$0;
                             }
                             else
                              var index$0 = 0, filename = s;
                             tests[1] = [0, [0, filename, index$0, [0, 0]], tests[1]];
                             return 0;
                            }],
                           cst_location_Run_only_the_test],
                          [0,
                           [0,
                            cst_no_color,
                            [3, use_color],
                            cst_Summarize_tests_without_us],
                           [0,
                            [0,
                             cst_in_place,
                             [2, in_place],
                             cst_Update_expect_tests_in_pla],
                            [0,
                             [0,
                              cst_diff_cmd,
                              [4, function(s){diff_command[1] = [0, s]; return 0;}],
                              cst_Diff_command_for_tests_tha],
                             [0,
                              [0,
                               cst_source_tree_root,
                               [4, function(s){source_tree_root[1] = [0, s]; return 0;}],
                               cst_Path_to_the_root_of_the_so],
                              [0,
                               [0,
                                cst_diff_path_prefix,
                                [4, function(s){diff_path_prefix[1] = [0, s]; return 0;}],
                                cst_Prefix_to_prepend_to_filep],
                               0]]]]]]]]]]]]]]]]]]),
         e = Stdlib_Array[11].call(null, [0, name, rest]);
        Stdlib_Arg[3].call
         (null,
          current,
          e,
          d,
          function(anon){
           var a = caml_call2(Stdlib_Printf[4].call(null, g), name, anon);
           throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], a], 1);
          },
          c);
        var match$0 = list_partitions[1];
        if(match$0)
         var where_to_list = match$0[1], b = [0, -260537174, where_to_list];
        else
         var b = [0, 1025081494, partition[1]];
        var
         v =
           [0,
            -753295984,
            [0, [0, lib, tests[1], name_filter[1], tag_predicate[1]], b]];
        action[1] = v;
        return;
       }
      }
     }
    }
   }
   if(Base[87][1])
    try{
     var N = caml_sys_argv(0);
     parse_argv(0, Stdlib_Array[10].call(null, N));
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn), tag = exn$0[1];
     if(tag === Stdlib_Arg[8]){
      var msg = exn$0[2];
      caml_call1(Stdlib_Printf[3].call(null, j), msg);
      Stdlib[99].call(null, 1);
     }
     else{
      var tag$0 = exn$0[1];
      if(tag$0 !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn$0, 0);
      var msg$0 = exn$0[2];
      caml_call1(Stdlib_Printf[2].call(null, M), msg$0);
      Stdlib[99].call(null, 0);
     }
    }
   function init(args){
    var current = [0, 0];
    try{parse_argv([0, current], args); return k;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib_Arg[8]){var msg = exn[2]; return [1, msg];}
     var tag$0 = exn[1];
     if(tag$0 !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$0 = exn[2];
     return [0, [0, msg$0]];
    }
   }
   var am_test_runner = typeof get(0) === "number" ? 0 : 1;
   a:
   {
    try{caml_sys_getenv("PPX_INLINE_TEST_LIB_AM_RUNNING_INLINE_TEST");}
    catch(exn){
     var exn$1 = caml_wrap_exception(exn);
     if(exn$1 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$1, 0);
     try{var val = caml_sys_getenv(cst_TESTING_FRAMEWORK);}
     catch(exn){
      var exn$2 = caml_wrap_exception(exn);
      if(exn$2 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$2, 0);
      var am_running = 0;
      break a;
     }
     if(val !== "inline-test"){var am_running = 0; break a;}
     var am_running = 1;
     break a;
    }
    var am_running = 1;
   }
   var testing = am_test_runner ? l : am_running ? L : 822171972;
   function timestamp_ns(param){return Time_now[2].call(null, 0);}
   var
    where_to_cut_backtrace =
      [246,
       function(param){
        var
         a = Stdlib[28].call(null, cst$2, cst_time_without_resetting_ran),
         b = Stdlib[28].call(null, cst_Ppx_inline_test_lib, a);
        return caml_call2(Base_String[86][2], 0, b);
       }];
   function time_without_resetting_random_(f){
    var before_ns = timestamp_ns(0);
    try{var c = [0, caml_call1(f, 0)], res = c;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      res = [1, [0, exn, Stdlib_Printexc[6].call(null, 0)]];
    }
    var a = timestamp_ns(0), b = Base_Int63[46].call(null, a, before_ns);
    time_sec[1] = Base_Int63[3].call(null, b) / 1000000000.;
    return res;
   }
   var
    saved_caml_random_state =
      [246,
       function(a){
        return caml_call1(Stdlib_Random[19][1], [0, 100, 200, 300]);
       }],
    saved_base_random_state =
      [246,
       function(a){return caml_call1(Base_Random[19][2], [0, 111, 222, 333]);}];
   function string_of_module_descr(param){
    var
     t = current$0[1],
     a = Stdlib_List[20].call(null, function(m){return m[1];}, t),
     b =
       Stdlib_List[20].call
        (null,
         function(s){
          var
           a = Stdlib_String[29].call(null, s),
           b = Stdlib[28].call(null, a, cst$3),
           c = Stdlib[28].call(null, cst_T_MODULE_at, b);
          return Stdlib[28].call(null, cst_in_TES, c);
         },
         a);
    return Stdlib_String[7].call(null, cst$4, b);
   }
   function print_delayed_errors(param){
    var delayed_errors$0 = Stdlib_List[10].call(null, delayed_errors[1]);
    if(! delayed_errors$0) return;
    var a = Stdlib_String[1].call(null, 70, 61);
    caml_call1(Stdlib_Printf[3].call(null, m), a);
    return Stdlib_List[18].call
            (null,
             function(message){
              return caml_call1(Stdlib_Printf[3].call(null, n), message);
             },
             delayed_errors$0);
   }
   function eprintf_or_delay(fmt){
    return Stdlib_Printf[10].call
            (null,
             function(s){
              if(verbose[1])
               delayed_errors[1] = [0, s, delayed_errors[1]];
              else
               caml_call1(Stdlib_Printf[3].call(null, o), s);
              var a = stop_on_error[1];
              return a
                      ? (print_delayed_errors(0), Stdlib[99].call(null, 2))
                      : a;
             },
             fmt);
   }
   function add_hooks(C, f, param){
    caml_call1(C[1], 0);
    return caml_call1(f, 0);
   }
   function hum_backtrace(backtrace){
    var
     a = Base_String[104].call(null, backtrace),
     b =
       Base_List[141].call
        (null,
         a,
         function(str){
          var a = caml_obj_tag(where_to_cut_backtrace);
          a:
          if(250 === a)
           var b = where_to_cut_backtrace[1];
          else{
           if(246 !== a && 244 !== a){
            var b = where_to_cut_backtrace;
            break a;
           }
           var b = CamlinternalLazy[2].call(null, where_to_cut_backtrace);
          }
          return 1 - caml_call2(Base_String[86][5], b, str);
         }),
     c =
       Base_List[53].call
        (null,
         b,
         function(str){
          var a = Base[241].call(null, str, cst$5);
          return Base[241].call(null, cst$6, a);
         });
    return Base_String[68].call(null, 0, c);
   }
   function test_inner
   (config,
    descr,
    tags,
    def_filename,
    def_line_number,
    start_pos,
    end_pos,
    f,
    bool_of_f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     h = match[2],
     what_to_do = h[2],
     match$0 = h[1],
     which_tags = match$0[4],
     name_filter = match$0[3],
     only_test_location = match$0[2],
     libname = match$0[1];
    function f$0(a){return add_hooks(config, f, a);}
    var
     descr$0 =
       [246,
        function(a){
         return displayed_descr
                 (descr, def_filename, def_line_number, start_pos, end_pos);
        }],
     n = current_tags(0),
     complete_tags = Stdlib[37].call(null, tags, n),
     i = caml_equal([0, libname], dynamic_lib[1]);
    if(i){
     var
      j =
        only_test_location
         ? Stdlib_List
            [34].call
           (null,
            function(param){
             var
              used = param[3],
              line_number_opt = param[2],
              filename = param[1],
              position_start =
                caml_ml_string_length(def_filename)
                - caml_ml_string_length(filename)
                | 0,
              a = 0 <= position_start ? 1 : 0;
             if(a){
              var
               end_of_def_filename =
                 Stdlib_String[16].call
                  (null,
                   def_filename,
                   position_start,
                   caml_ml_string_length(filename)),
               b = end_of_def_filename === filename ? 1 : 0;
              if(b){
               var
                d = 0 === position_start ? 1 : 0,
                c =
                  d
                  ||
                   (47
                     ===
                      runtime.caml_string_get
                       (def_filename, position_start - 1 | 0)
                     ? 1
                     : 0);
               if(c)
                if(line_number_opt)
                 var
                  line_number = line_number_opt[1],
                  found = caml_equal(def_line_number, line_number);
                else
                 var found = 1;
               else
                var found = c;
              }
              else
               var found = b;
             }
             else
              var found = a;
             if(found) used[1] = 1;
             return found;
            },
            only_test_location)
         : 1;
     if(j){
      var
       m =
         Stdlib_List[34].call
          (null,
           function(req){
            return 1 - Stdlib_List[37].call(null, req, complete_tags);
           },
           which_tags[1]),
       o =
         m
         ||
          Stdlib_List[34].call
           (null,
            function(dropped){
             return Stdlib_List[37].call(null, dropped, complete_tags);
            },
            which_tags[2]),
       k = 1 - o;
      if(k){
       var e = caml_obj_tag(descr$0);
       a:
       if(250 === e)
        var descr$1 = descr$0[1];
       else{
        if(246 !== e && 244 !== e){var descr$1 = descr$0; break a;}
        var descr$1 = CamlinternalLazy[2].call(null, descr$0);
       }
       var
        should_run =
          name_filter
           ? Stdlib_List
              [34].call
             (null,
              function(substring){
               return Base_String[92].call(null, descr$1, substring);
              },
              name_filter)
           : 1;
      }
      else
       var should_run = k;
     }
     else
      var should_run = j;
    }
    else
     var should_run = i;
    if(! should_run) return should_run;
    var variant = what_to_do[1];
    if(1025081494 > variant) return found_test(0);
    var partition = what_to_do[2], l = is_current(partition);
    if(! l) return l;
    var g = caml_obj_tag(descr$0);
    a:
    if(250 === g)
     var descr$2 = descr$0[1];
    else{
     if(246 !== g && 244 !== g){var descr$2 = descr$0; break a;}
     var descr$2 = CamlinternalLazy[2].call(null, descr$0);
    }
    tests_ran[1]++;
    var match$1 = log[1];
    if(match$1){
     var ch = match$1[1], v = string_of_module_descr(0);
     caml_call2(Stdlib_Printf[1].call(null, ch, p), descr$2, v);
    }
    if(verbose[1]) caml_call1(Stdlib_Printf[2].call(null, q), descr$2);
    if(list_test_names[1])
     var result$0 = r;
    else{
     var
      caml_random_state = Stdlib_Random[20].call(null, 0),
      base_random_state = caml_call1(Base_Random[19][4], Base_Random[19][1]),
      a = caml_obj_tag(saved_caml_random_state);
     a:
     if(250 === a)
      var b = saved_caml_random_state[1];
     else{
      if(246 !== a && 244 !== a){var b = saved_caml_random_state; break a;}
      var b = CamlinternalLazy[2].call(null, saved_caml_random_state);
     }
     Stdlib_Random[21].call(null, b);
     var c = caml_obj_tag(saved_base_random_state);
     a:
     if(250 === c)
      var d = saved_base_random_state[1];
     else{
      if(246 !== c && 244 !== c){var d = saved_base_random_state; break a;}
      var d = CamlinternalLazy[2].call(null, saved_base_random_state);
     }
     Base_Random[20].call(null, d);
     var result = time_without_resetting_random_(f$0);
     Stdlib_Random[21].call(null, caml_random_state);
     Base_Random[20].call(null, base_random_state);
     var result$0 = Stdlib_Result[8].call(null, bool_of_f, result);
    }
    if(verbose[1]){
     var w = time_sec[1];
     caml_call1(Stdlib_Printf[2].call(null, s), w);
    }
    if(0 !== result$0[0]){
     var match$2 = result$0[1], backtrace = match$2[2], exn = match$2[1];
     tests_failed[1]++;
     var
      backtrace$0 = hum_backtrace(backtrace),
      exn_str = Sexplib0_Sexp_conv[70].call(null, exn),
      sep = Stdlib_String[15].call(null, exn_str, 10) ? cst$7 : cst$8,
      y = string_of_module_descr(0);
     return caml_call5
             (eprintf_or_delay(u), descr$2, sep, exn_str, backtrace$0, y);
    }
    if(result$0[1]) return 0;
    tests_failed[1]++;
    var x = string_of_module_descr(0);
    return caml_call2(eprintf_or_delay(t), descr$2, x);
   }
   function set_lib_and_partition(static_lib, partition){
    if(dynamic_lib[1]) return 0;
    dynamic_lib[1] = [0, static_lib];
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     match$0 = match[2],
     what_to_do = match$0[2],
     which_tests = match$0[1],
     a = which_tests[1] === static_lib ? 1 : 0;
    if(! a) return a;
    var variant = what_to_do[1];
    a:
    {
     if(1025081494 <= variant && ! what_to_do[2]){var requires_partition = 0; break a;}
     var requires_partition = 1;
    }
    if(partition === cst$13 && requires_partition)
     return Stdlib[2].call(null, cst_ppx_inline_test_cannot_use);
    current[1] = partition;
    return 0;
   }
   function unset_lib(static_lib){
    var match = dynamic_lib[1];
    if(! match) return 0;
    var
     lib = match[1],
     a = lib === static_lib ? 1 : 0,
     b = a ? (dynamic_lib[1] = 0, 0) : a;
    return b;
   }
   function test
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(b){return b;});
   }
   function test_unit
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(param){return 1;});
   }
   function test_module
   (config, descr, tags, def_filename, def_line_number, start_pos, end_pos, f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     a = match[2],
     what_to_do = a[2],
     match$0 = a[1],
     which_tags = match$0[4],
     libname = match$0[1];
    function f$0(a){return add_hooks(config, f, a);}
    var
     d = current_tags(0),
     partial_tags = Stdlib[37].call(null, tags, d),
     b = caml_equal([0, libname], dynamic_lib[1]),
     should_run =
       b
        ? 1
         -
          Stdlib_List[34].call
           (null,
            function(dropped){
             return Stdlib_List[37].call(null, dropped, partial_tags);
            },
            which_tags[2])
        : b;
    if(! should_run) return should_run;
    var variant = what_to_do[1];
    if(1025081494 > variant) return found_test(0);
    var partition = what_to_do[2], c = is_current(partition);
    if(! c) return c;
    test_modules_ran[1]++;
    var
     descr$0 =
       displayed_descr
        (descr, def_filename, def_line_number, start_pos, end_pos),
     prev = current$0[1];
    current$0[1] = [0, [0, descr$0, tags], prev];
    try{var x = time_without_resetting_random_(f$0); current$0[1] = prev;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     current$0[1] = prev;
     throw caml_maybe_attach_backtrace(e, 0);
    }
    if(0 === x[0]) return 0;
    var match$1 = x[1], backtrace = match$1[2], exn = match$1[1];
    test_modules_failed[1]++;
    var
     backtrace$0 = hum_backtrace(backtrace),
     exn_str = Sexplib0_Sexp_conv[70].call(null, exn),
     sep = Stdlib_String[15].call(null, exn_str, 10) ? cst$9 : cst$10,
     g = string_of_module_descr(0),
     h = Stdlib_String[29].call(null, descr$0);
    return caml_call5
            (eprintf_or_delay(Stdlib[98].call(null, w, v)),
             h,
             sep,
             exn_str,
             backtrace$0,
             g);
   }
   function summarize(param){
    var match = get(0);
    if(typeof match !== "number"){
     var
      a = match[2],
      match$0 = a[2],
      variant = match$0[1],
      which_tests = a[1];
     if(1025081494 > variant){
      var
       where_to_list = match$0[2],
       f =
         function(fout){
          var a = all(0), b = Stdlib_Printf[1].call(null, fout, J);
          return Stdlib_List[18].call(null, b, a);
         };
      if(where_to_list){
       var file = where_to_list[1], i = Stdlib[62].call(null, I, 0, file);
       Base_Exn[12].call(null, f, i, Stdlib[76]);
      }
      else
       f(Stdlib[39]);
      return 0;
     }
     var match$1 = log[1];
     if(match$1){var ch = match$1[1]; Stdlib[76].call(null, ch);}
     print_delayed_errors(0);
     var count = tests_failed[1], match$2 = test_modules_failed[1];
     if(0 === count && 0 === match$2){
      if(show_counts[1]){
       var d = test_modules_ran[1], e = tests_ran[1];
       caml_call2(Stdlib_Printf[3].call(null, z), e, d);
      }
      var
       unused_tests =
         Stdlib_List[44].call
          (null,
           function(param){var used = param[3]; return 1 - used[1];},
           which_tests[2]),
       errors = unused_tests ? [0, unused_tests] : 0;
      if(errors){
       var tests = errors[1];
       Stdlib_Printf[3].call(null, A);
       Stdlib_List[18].call
        (null,
         function(param){
          var line_number_opt = param[2], filename = param[1];
          if(! line_number_opt)
           return caml_call1(Stdlib_Printf[3].call(null, C), filename);
          var line_number = line_number_opt[1];
          return caml_call2
                  (Stdlib_Printf[3].call(null, B), filename, line_number);
         },
         tests);
       Stdlib_Printf[3].call(null, D);
       return 2;
      }
      if(0 === tests_ran[1] && strict[1]){
       Stdlib_Printf[3].call(null, E);
       return 2;
      }
      return 0;
     }
     if(0 === match$2)
      var b = cst$11;
     else
      var
       h = Stdlib[98].call(null, H, G),
       b = caml_call1(Stdlib_Printf[4].call(null, h), match$2);
     var g = tests_ran[1];
     caml_call3(Stdlib_Printf[3].call(null, F), count, g, b);
     return 1;
    }
    a:
    {
     if(runtime.caml_notequal(caml_sys_argv(0), [0])){
      var c = runtime.caml_check_bound(caml_sys_argv(0), 0)[1];
      if(Stdlib_Filename[13].call(null, c) === "inline_tests_runner.exe"){Stdlib_Printf[3].call(null, x); break a;}
     }
     Stdlib_Printf[3].call(null, y);
    }
    return 2;
   }
   function assert_test_configs_initialize(config){
    var a = 1 - already_initialized[1];
    if(! a) return a;
    var b = caml_call1(Stdlib_Printf[4].call(null, K), config);
    return Stdlib[2].call(null, b);
   }
   function use_color$0(param){
    assert_test_configs_initialize(cst_use_color);
    return use_color[1];
   }
   function in_place$0(param){
    assert_test_configs_initialize(cst_in_place$0);
    return in_place[1];
   }
   function diff_command$0(param){
    assert_test_configs_initialize(cst_diff_command);
    return diff_command[1];
   }
   function diff_path_prefix$0(param){
    assert_test_configs_initialize(cst_diff_path_prefix$0);
    return diff_path_prefix[1];
   }
   function source_tree_root$0(param){
    assert_test_configs_initialize(cst_source_tree_root$0);
    return source_tree_root[1];
   }
   var evaluators = [0, [0, summarize, 0]];
   function add_evaluator(f){evaluators[1] = [0, f, evaluators[1]]; return 0;}
   function exit(param){
    var b = Stdlib_List[10].call(null, evaluators[1]);
    switch
     (combine_all
       (Stdlib_List[20].call(null, function(f){return caml_call1(f, 0);}, b))){
      case 0:
       var a = 0; break;
      case 1:
       var a = 2; break;
      default: var a = 1;
    }
    return Stdlib[99].call(null, a);
   }
   var
    Ppx_inline_test_lib =
      [0,
       am_running,
       am_running_env_var,
       testing,
       init,
       [0, combine, combine_all, to_string],
       set_lib_and_partition,
       unset_lib,
       test,
       test_unit,
       test_module,
       use_color$0,
       in_place$0,
       diff_command$0,
       diff_path_prefix$0,
       source_tree_root$0,
       add_evaluator,
       exit];
   runtime.caml_register_global
    (137, Ppx_inline_test_lib, cst_Ppx_inline_test_lib$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
