// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppxlib_print_diff
//# unitInfo: Requires: Stdlib__Filename, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels, Stdlib__Sys
//# shape: Ppxlib_print_diff:[F(6)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_line_1_characters_0_0 = '", line 1, characters 0-0:\n',
    cst_File = 'File "',
    cst_File_s_line_1_characters_0 = 'File "%s", line 1, characters 0-0:\n%!',
    cst_diff_u$1 = "diff -u";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " ",
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    a = [0, "-location-style omake", 0],
    b = [0, "-keep-whitespace", 0],
    cst_patdiff = "patdiff",
    c = [0, "-ascii", 0],
    d =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " 1>&2", 0]]]]]],
       "%s %s %s 1>&2"],
    e =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u = cst_diff_u$1,
    f =
      [0,
       [11,
        "Error:\n> ",
        [3,
         0,
         [11,
          " exited with code ",
          [4,
           0,
           0,
           0,
           [11,
            "\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n",
            0]]]]],
       "Error:\n> %S exited with code %d\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n"],
    g =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u$0 = cst_diff_u$1;
   function print(diff_command, j, opt, file1, file2, param){
    var extra_patdiff_args = j ? j[1] : 0, use_color = opt ? opt[1] : 0;
    function exec(cmd){
     var
      a = Stdlib_Filename[21].call(null, file2),
      b = Stdlib_Filename[21].call(null, file1),
      cmd$0 = caml_call3(Stdlib_Printf[4].call(null, d), cmd, b, a),
      n = runtime.caml_sys_system_command(cmd$0);
     return 0 === n
             ? 925282182
             : 1 === n ? -890978471 : [0, 106380200, [0, n, cmd$0]];
    }
    if(diff_command){var s = diff_command[1]; exec(s); return 0;}
    var
     h = [0, extra_patdiff_args, 0],
     i = use_color ? 0 : c,
     args = Stdlib_ListLabels[14].call(null, [0, b, [0, a, [0, i, h]]]),
     match =
       exec(Stdlib_StringLabels[7].call(null, cst, [0, cst_patdiff, args]));
    if(typeof match === "number")
     return 925282182 <= match
             ? (caml_call1
                (Stdlib_Printf[3].call(null, e), file1),
               exec(cst_diff_u),
               0)
             : 0;
    var match$0 = match[2], cmd = match$0[2], err_code = match$0[1];
    caml_call2(Stdlib_Printf[3].call(null, f), cmd, err_code);
    caml_call1(Stdlib_Printf[3].call(null, g), file1);
    exec(cst_diff_u$0);
    return 0;
   }
   var Ppxlib_print_diff = [0, print];
   runtime.caml_register_global(15, Ppxlib_print_diff, "Ppxlib_print_diff");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHB4bGliX3ByaW50X2RpZmYuY21hLmpzIiwic2VjdGlvbnMiOlt7Im9mZnNldCI6eyJsaW5lIjoxMCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJwcHhsaWJfcHJpbnRfZGlmZi5jbWEuanMiLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL1VzZXJzL2RzL0RvY3VtZW50cy9wYXRjaHdvcmsvX29wYW0vbGliL3BweGxpYi9wcmludF9kaWZmL3BweGxpYl9wcmludF9kaWZmLm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwib3BlbiBTdGRMYWJlbHNcblxubGV0IHBhdGRpZmZfY21kIH51c2VfY29sb3IgfmV4dHJhX3BhdGRpZmZfYXJncyA9XG4gIGxldCBhcmdzID1cbiAgICBMaXN0LmNvbmNhdFxuICAgICAgW1xuICAgICAgICBbIFwiLWtlZXAtd2hpdGVzcGFjZVwiIF07XG4gICAgICAgIFsgXCItbG9jYXRpb24tc3R5bGUgb21ha2VcIiBdO1xuICAgICAgICAoaWYgdXNlX2NvbG9yIHRoZW4gW10gZWxzZSBbIFwiLWFzY2lpXCIgXSk7XG4gICAgICAgIGV4dHJhX3BhdGRpZmZfYXJncztcbiAgICAgIF1cbiAgaW5cbiAgU3RyaW5nLmNvbmNhdCB+c2VwOlwiIFwiIChcInBhdGRpZmZcIiA6OiBhcmdzKVxuXG5sZXQgcHJpbnQgP2RpZmZfY29tbWFuZCA/KGV4dHJhX3BhdGRpZmZfYXJncyA9IFtdKSA/KHVzZV9jb2xvciA9IGZhbHNlKSB+ZmlsZTFcbiAgICB+ZmlsZTIgKCkgPVxuICBsZXQgZXhlYyBjbWQgPVxuICAgIGxldCBjbWQgPVxuICAgICAgUHJpbnRmLnNwcmludGYgXCIlcyAlcyAlcyAxPiYyXCIgY21kIChGaWxlbmFtZS5xdW90ZSBmaWxlMSlcbiAgICAgICAgKEZpbGVuYW1lLnF1b3RlIGZpbGUyKVxuICAgIGluXG4gICAgbWF0Y2ggU3lzLmNvbW1hbmQgY21kIHdpdGhcbiAgICB8IDAgLT4gYFNhbWVcbiAgICB8IDEgLT4gYERpZmZlcmVudFxuICAgIHwgbiAtPiBgRXJyb3IgKG4sIGNtZClcbiAgaW5cbiAgbWF0Y2ggZGlmZl9jb21tYW5kIHdpdGhcbiAgfCBTb21lIHMgLT4gaWdub3JlIChleGVjIHMgOiBbPiBgU2FtZSB8IGBEaWZmZXJlbnQgfCBgRXJyb3Igb2YgaW50ICogc3RyaW5nIF0pXG4gIHwgTm9uZSAtPiAoXG4gICAgICBtYXRjaCBleGVjIChwYXRkaWZmX2NtZCB+dXNlX2NvbG9yIH5leHRyYV9wYXRkaWZmX2FyZ3MpIHdpdGhcbiAgICAgIHwgYFNhbWUgLT5cbiAgICAgICAgICAoKiBwYXRkaWZmIHByb2R1Y2VkIG5vIG91dHB1dCwgZmFsbGJhY2sgdG8gZGlmZiAtdSAqKVxuICAgICAgICAgIFByaW50Zi5lcHJpbnRmIFwiRmlsZSBcXFwiJXNcXFwiLCBsaW5lIDEsIGNoYXJhY3RlcnMgMC0wOlxcbiUhXCIgZmlsZTE7XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoZXhlYyBcImRpZmYgLXVcIiA6IFs+IGBTYW1lIHwgYERpZmZlcmVudCB8IGBFcnJvciBvZiBpbnQgKiBzdHJpbmcgXSlcbiAgICAgIHwgYERpZmZlcmVudCAtPlxuICAgICAgICAgICgqIHBhdGRpZmYgc3VjY2Vzc2Z1bGx5IGZvdW5kIGEgZGlmZmVyZW5jZSAqKVxuICAgICAgICAgICgpXG4gICAgICB8IGBFcnJvciAoZXJyX2NvZGUsIGNtZCkgLT5cbiAgICAgICAgICAoKiBwYXRkaWZmIHRocmV3IGFuIGVycm9yLi4uIHBlcmhhcHMgaXQgd2Fzbid0IGluc3RhbGxlZD8gZmFsbGJhY2sgdG8gZGlmZiAtdSAqKVxuICAgICAgICAgIFByaW50Zi5lcHJpbnRmXG4gICAgICAgICAgICBcIkVycm9yOlxcblxcXG4gICAgICAgICAgICAgPiAlUyBleGl0ZWQgd2l0aCBjb2RlICVkXFxuXFxcbiAgICAgICAgICAgICA+IFBlcmhhcHMgcGF0ZGlmZiBpcyBub3QgaW5zdGFsbGVkPyBIaW50LCB0cnk6IG9wYW0gaW5zdGFsbCBwYXRkaWZmXFxuXFxcbiAgICAgICAgICAgICA+IEZhbGxpbmcgYmFjayB0byBkaWZmIC11XFxuXFxuXCJcbiAgICAgICAgICAgIGNtZCBlcnJfY29kZTtcbiAgICAgICAgICBQcmludGYuZXByaW50ZiBcIkZpbGUgXFxcIiVzXFxcIiwgbGluZSAxLCBjaGFyYWN0ZXJzIDAtMDpcXG4lIVwiIGZpbGUxO1xuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKGV4ZWMgXCJkaWZmIC11XCIgOiBbPiBgU2FtZSB8IGBEaWZmZXJlbnQgfCBgRXJyb3Igb2YgaW50ICogc3RyaW5nIF0pKVxuIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3RfbGluZV8xX2NoYXJhY3RlcnNfMF8wIiwiY3N0X0ZpbGUiLCJjc3RfRmlsZV9zX2xpbmVfMV9jaGFyYWN0ZXJzXzAiLCJjc3RfZGlmZl91IiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImdsb2JhbF9kYXRhIiwiY3N0IiwiU3RkbGliX0ZpbGVuYW1lIiwiU3RkbGliX1ByaW50ZiIsIlN0ZGxpYl9MaXN0TGFiZWxzIiwiU3RkbGliX1N0cmluZ0xhYmVscyIsImNzdF9wYXRkaWZmIiwicHJpbnQiLCJkaWZmX2NvbW1hbmQiLCJvcHQiLCJmaWxlMSIsImZpbGUyIiwicGFyYW0iLCJleHRyYV9wYXRkaWZmX2FyZ3MiLCJ1c2VfY29sb3IiLCJleGVjIiwiY21kIiwibiIsInMiLCJhcmdzIiwibWF0Y2giLCJlcnJfY29kZSIsIlBweGxpYl9wcmludF9kaWZmIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLDRCQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGlDQUFBO0FBQUEsSUFBQUMsZUFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUosR0FBQUMsSUFBQUUsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQyxrQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsb0JBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQWQsYUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxlQUFBO0FBQUEsWUFBQWUsTUFBQUMsY0FBQSxHQUFBQyxLQUFBQyxPQUFBQyxPQUFBQztBQUFBQSxRQUFBQyxxQkNjVSxjQUFBQyxZQUFBO0FBQUEsYUFBQUMsS0FBQUM7QUFBQUE7QUFBQUEsTUFBQSxJQUtGO0FBQUEsVUFEaUM7QUFBQSxNQUFBQSxRQUFuQztBQUFBLE1BQUFDLElBR0k7QUFBQSxLQUFlO0FBQUE7QUFBQSxtRUFHQztBQUFBO0FBQUEsSUFFeEIscUJBQUFDLElBQUEsaUJBQ29CLFNBQU07QUFBQTtBQUFBLFNBeEIxQjtBQUFBO0FBQUEsS0FBQUMsT0FDRTtBQUFBLEtBQUFDO0FBQUFBLE9BeUJRLEtBakJWO0FBQUEsSUFpQjJEO0FBQUE7QUFBQSxnQkFHbkQ7QUFBQTtBQUFBLGVBRUc7QUFBQTtBQUFBLGdCQWNtRTtBQUFBLFFBQUFBLFVBbkJuQixVQUFBSixNQUFBLFlBQUFLLFdBQUE7QUFBQSxJQVduRDtBQUFBLElBTUE7QUFBQSxJQUVHO0FBQUEsSUFBYztBQUFBLEdBQXFEO0FBQUEsT0FBQUMsb0JEaERoRiIsImlnbm9yZUxpc3QiOlswXX19XX0=
