// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Sexplib0__
//# shape: Sexplib0__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Sexplib0 = [0],
    Sexplib0$0 = [0, Sexplib0];
   runtime.caml_register_global(0, Sexplib0$0, "Sexplib0__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp
//# unitInfo: Requires: Stdlib__Buffer, Stdlib__Bytes, Stdlib__BytesLabels, Stdlib__Char, Stdlib__Format, Stdlib__ListLabels, Stdlib__StringLabels
//# shape: Sexplib0__Sexp:[F(1)*,F(1)*,F(2),F(2),N,N,F(2),N,F(2),F(3),F(2),F(2),F(2),F(1),F(1),N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "(",
    cst$12 = "()",
    cst$13 = ")",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$11,
    cst$3 = cst$12,
    cst$4 = cst$13,
    cst$5 = " ",
    cst$6 = cst$11,
    cst$7 = cst$12,
    cst$8 = cst$13,
    cst$10 = cst$12,
    cst$9 = cst$12,
    cst = "\\",
    cst$0 = ' "',
    cst$1 = '"',
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function sexp_of_t(t){return t;}
   function t_of_sexp(t){return t;}
   function compare(a$0, b$0){
    if(a$0 === b$0) return 0;
    if(0 === a$0[0]){
     var a$1 = a$0[1];
     if(0 !== b$0[0]) return -1;
     var b$1 = b$0[1];
     return Stdlib_StringLabels[10].call(null, a$1, b$1);
    }
    var a$2 = a$0[1];
    if(0 === b$0[0]) return 1;
    var b$2 = b$0[1], a = a$2, b = b$2;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var ys = b[2], y = b[1], xs = a[2], x = a[1], res = compare(x, y);
     if(0 !== res) return res;
     a = xs;
     b = ys;
    }
   }
   function equal(a, b){
    var c = a === b ? 1 : 0;
    if(c)
     var d = c;
    else{
     if(0 === a[0]){
      var a$0 = a[1];
      if(0 === b[0]){
       var b$0 = b[1];
       return Stdlib_StringLabels[9].call(null, a$0, b$0);
      }
     }
     else{
      var a$1 = a[1];
      if(0 !== b[0]){
       var b$1 = b[1];
       return Stdlib_ListLabels[16].call(null, equal, a$1, b$1);
      }
     }
     var d = 0;
    }
    return d;
   }
   var
    Not_found_s = [248, "Sexplib0__Sexp.Not_found_s", caml_fresh_oo_id(0)],
    Of_sexp_error = [248, "Sexplib0__Sexp.Of_sexp_error", caml_fresh_oo_id(0)],
    default_indent = [0, 1],
    cst_n = "\\n",
    a = [0, 0, 0],
    b = [0, [15, [17, 2, 0]], "%a@?"];
   function must_escape(str){
    var len = caml_ml_string_length(str), a = 0 === len ? 1 : 0;
    if(a) return a;
    var ix$1 = len - 1 | 0, ix = ix$1;
    for(;;){
     var match = caml_string_get(str, ix);
     a:
     {
      b:
      {
       if(92 <= match){
        var switcher = match - 93 | 0;
        if(33 < switcher >>> 0){if(0 <= switcher) break b; break a;}
        if(31 === switcher){
         var b = 0 < ix ? 1 : 0;
         if(b){
          var
           next = ix - 1 | 0,
           i = caml_string_get(str, next),
           c = Stdlib_Char[6].call(null, i, 35);
          if(! c){ix = next; continue;}
          var d = c;
         }
         else
          var d = b;
         return d;
        }
       }
       else
        if(42 <= match){
         if(59 === match) break a;
        }
        else{
         if(33 > match) break b;
         switch(match - 33 | 0){
           case 2:
            var f = 0 < ix ? 1 : 0;
            if(f){
             var
              next$0 = ix - 1 | 0,
              j = caml_string_get(str, next$0),
              g = Stdlib_Char[6].call(null, j, 124);
             if(! g){ix = next$0; continue;}
             var h = g;
            }
            else
             var h = f;
            return h;
           case 1:
           case 7:
           case 8:
            break a;
         }
        }
       var e = 0 < ix ? 1 : 0;
       if(! e) return e;
       var ix$0 = ix - 1 | 0;
       ix = ix$0;
       continue;
      }
      return 1;
     }
     return 1;
    }
   }
   function escaped(s){
    var n = [0, 0], d = caml_ml_string_length(s) - 1 | 0, f = 0;
    if(d >= 0){
     var i$0 = f;
     for(;;){
      var match = caml_string_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var a = match - 34 | 0;
          if(58 < a >>> 0){
           if(93 <= a) break c;
          }
          else if(56 < a - 1 >>> 0) break b;
          var b = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var b = 4;
        break a;
       }
       var b = 2;
      }
      n[1] = n[1] + b | 0;
      var m = i$0 + 1 | 0;
      if(d === i$0) break;
      i$0 = m;
     }
    }
    if(n[1] === caml_ml_string_length(s)) return s;
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var e = caml_ml_string_length(s) - 1 | 0, g = 0;
    if(e >= 0){
     var i = g;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break b; break c;}
         }
         else{
          if(32 > c){
           if(14 <= c) break b;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break b;
           }
          }
          if(34 > c) break c;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], c);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], 92);
       n[1]++;
       var j = Stdlib_Char[1].call(null, 48 + (c / 100 | 0) | 0);
       caml_bytes_unsafe_set(s$0, n[1], j);
       n[1]++;
       var k = Stdlib_Char[1].call(null, 48 + ((c / 10 | 0) % 10 | 0) | 0);
       caml_bytes_unsafe_set(s$0, n[1], k);
       n[1]++;
       var l = Stdlib_Char[1].call(null, 48 + (c % 10 | 0) | 0);
       caml_bytes_unsafe_set(s$0, n[1], l);
      }
      n[1]++;
      var h = i + 1 | 0;
      if(e === i) break;
      i = h;
     }
    }
    return Stdlib_BytesLabels[44].call(null, s$0);
   }
   function esc_str(str){
    var
     estr = escaped(str),
     elen = caml_ml_string_length(estr),
     res = caml_create_bytes(elen + 2 | 0);
    Stdlib_Bytes[12].call(null, estr, 0, res, 1, elen);
    caml_bytes_unsafe_set(res, 0, 34);
    caml_bytes_unsafe_set(res, elen + 1 | 0, 34);
    return Stdlib_BytesLabels[44].call(null, res);
   }
   function index_of_newline(str, start){
    return Stdlib_StringLabels[33].call(null, str, start, 10);
   }
   function mach_maybe_esc_str(str){
    return must_escape(str) ? esc_str(str) : str;
   }
   function pp_hum_indent(indent, ppf, param){
    if(0 === param[0]){
     var str = param[1];
     if(! must_escape(str)) return Stdlib_Format[13].call(null, ppf, str);
     var match = index_of_newline(str, 0);
     if(match)
      var
       index = match[1],
       a = (index + 1 | 0) === caml_ml_string_length(str) ? 1 : 0;
     else
      var a = 1;
     if(a){var b = esc_str(str); return Stdlib_Format[13].call(null, ppf, b);}
     Stdlib_Format[1].call(null, ppf, 0);
     Stdlib_Format[13].call(null, ppf, cst$0);
     var index$0 = 0;
     for(;;){
      var next_newline = index_of_newline(str, index$0);
      if(next_newline)
       var end_pos = next_newline[1], end_pos$0 = end_pos;
      else
       var end_pos$0 = caml_ml_string_length(str);
      var
       next_line =
         Stdlib_StringLabels[16].call
          (null, str, index$0, end_pos$0 - index$0 | 0),
       c = escaped(next_line);
      Stdlib_Format[13].call(null, ppf, c);
      if(! next_newline){
       Stdlib_Format[13].call(null, ppf, cst$1);
       return Stdlib_Format[3].call(null, ppf, 0);
      }
      var newline_index = next_newline[1];
      Stdlib_Format[13].call(null, ppf, cst);
      Stdlib_Format[35].call(null, ppf, 0);
      Stdlib_Format[13].call(null, ppf, cst_n);
      var index$1 = newline_index + 1 | 0;
      index$0 = index$1;
     }
    }
    else{
     var match$0 = param[1];
     if(! match$0) return Stdlib_Format[13].call(null, ppf, cst$3);
     var t = match$0[2], h = match$0[1];
     Stdlib_Format[1].call(null, ppf, indent);
     Stdlib_Format[13].call(null, ppf, cst$2);
     pp_hum_indent(indent, ppf, h);
     var param$0 = t;
     for(;;){
      if(! param$0){
       Stdlib_Format[13].call(null, ppf, cst$4);
       return Stdlib_Format[3].call(null, ppf, 0);
      }
      var t$0 = param$0[2], h$0 = param$0[1];
      Stdlib_Format[28].call(null, ppf, 0);
      pp_hum_indent(indent, ppf, h$0);
      param$0 = t$0;
     }
    }
   }
   function pp_mach_internal(may_need_space, ppf, param){
    if(0 === param[0]){
     var
      str = param[1],
      str$0 = mach_maybe_esc_str(str),
      new_may_need_space = str$0 === str ? 1 : 0,
      new_may_need_space$0 =
        may_need_space ? new_may_need_space : may_need_space;
     if(new_may_need_space$0) Stdlib_Format[13].call(null, ppf, cst$5);
     Stdlib_Format[13].call(null, ppf, str$0);
     return new_may_need_space;
    }
    var match = param[1];
    if(! match){Stdlib_Format[13].call(null, ppf, cst$7); return 0;}
    var t = match[2], h = match[1];
    Stdlib_Format[13].call(null, ppf, cst$6);
    var
     may_need_space$0 = pp_mach_internal(0, ppf, h),
     may_need_space$1 = may_need_space$0,
     param$0 = t;
    for(;;){
     if(! param$0){Stdlib_Format[13].call(null, ppf, cst$8); return 0;}
     var
      t$0 = param$0[2],
      h$0 = param$0[1],
      may_need_space$2 = pp_mach_internal(may_need_space$1, ppf, h$0);
     may_need_space$1 = may_need_space$2;
     param$0 = t$0;
    }
   }
   function pp_hum(ppf, sexp){
    return pp_hum_indent(default_indent[1], ppf, sexp);
   }
   function pp_mach(ppf, sexp){pp_mach_internal(0, ppf, sexp); return 0;}
   function size_loop(acc, param){
    var c = acc[2], v = acc[1];
    if(0 === param[0]){
     var str = param[1];
     return [0, v + 1 | 0, c + caml_ml_string_length(str) | 0];
    }
    var lst = param[1];
    return Stdlib_ListLabels[26].call(null, size_loop, acc, lst);
   }
   function size(sexp){return size_loop(a, sexp);}
   function to_buffer_hum(buf, opt, sexp){
    var
     indent = opt ? opt[1] : default_indent[1],
     ppf = Stdlib_Format[116].call(null, buf);
    return caml_call2
            (Stdlib_Format[139].call(null, ppf)(b),
             function(a, b){return pp_hum_indent(indent, a, b);},
             sexp);
   }
   function to_buffer_mach(buf, sexp){
    function loop(may_need_space, param){
     if(0 === param[0]){
      var
       str = param[1],
       str$0 = mach_maybe_esc_str(str),
       new_may_need_space = str$0 === str ? 1 : 0,
       new_may_need_space$0 =
         may_need_space ? new_may_need_space : may_need_space;
      if(new_may_need_space$0) Stdlib_Buffer[12].call(null, buf, 32);
      Stdlib_Buffer[16].call(null, buf, str$0);
      return new_may_need_space;
     }
     var match = param[1];
     if(! match){Stdlib_Buffer[16].call(null, buf, cst$9); return 0;}
     var t = match[2], h = match[1];
     Stdlib_Buffer[12].call(null, buf, 40);
     var
      may_need_space$0 = loop(0, h),
      may_need_space$1 = may_need_space$0,
      param$0 = t;
     for(;;){
      if(! param$0){Stdlib_Buffer[12].call(null, buf, 41); return 0;}
      var
       t$0 = param$0[2],
       h$0 = param$0[1],
       may_need_space$2 = loop(may_need_space$1, h$0);
      may_need_space$1 = may_need_space$2;
      param$0 = t$0;
     }
    }
    loop(0, sexp);
    return 0;
   }
   function to_buffer_gen(buf, add_char, add_string, sexp){
    function loop(may_need_space, param){
     if(0 === param[0]){
      var
       str = param[1],
       str$0 = mach_maybe_esc_str(str),
       new_may_need_space = str$0 === str ? 1 : 0,
       new_may_need_space$0 =
         may_need_space ? new_may_need_space : may_need_space;
      if(new_may_need_space$0) caml_call2(add_char, buf, 32);
      caml_call2(add_string, buf, str$0);
      return new_may_need_space;
     }
     var match = param[1];
     if(! match){caml_call2(add_string, buf, cst$10); return 0;}
     var t = match[2], h = match[1];
     caml_call2(add_char, buf, 40);
     var
      may_need_space$0 = loop(0, h),
      may_need_space$1 = may_need_space$0,
      param$0 = t;
     for(;;){
      if(! param$0){caml_call2(add_char, buf, 41); return 0;}
      var
       t$0 = param$0[2],
       h$0 = param$0[1],
       may_need_space$2 = loop(may_need_space$1, h$0);
      may_need_space$1 = may_need_space$2;
      param$0 = t$0;
     }
    }
    loop(0, sexp);
    return 0;
   }
   function buffer(param){return Stdlib_Buffer[1].call(null, 1024);}
   function to_string_hum(indent, sexp){
    if(0 === sexp[0]){
     var str = sexp[1], a = index_of_newline(str, 0) ? 0 : 1;
     if(a) return mach_maybe_esc_str(str);
    }
    var buf = buffer(0);
    to_buffer_hum(buf, indent, sexp);
    return Stdlib_Buffer[2].call(null, buf);
   }
   function to_string_mach(sexp){
    if(0 === sexp[0]){var str = sexp[1]; return mach_maybe_esc_str(str);}
    var buf = buffer(0);
    to_buffer_mach(buf, sexp);
    return Stdlib_Buffer[2].call(null, buf);
   }
   var of_float_style = [0, 1009018843], of_int_style = [0, 1009018843];
   function message(name, fields){
    function conv_fields(param){
     if(! param) return 0;
     var
      rest = param[2],
      match = param[1],
      fsexp = match[2],
      fname = match[1];
     return fname !== ""
             ? [0, [1, [0, [0, fname], [0, fsexp, 0]]], conv_fields(rest)]
             : [0, fsexp, conv_fields(rest)];
    }
    return [1, [0, [0, name], conv_fields(fields)]];
   }
   var
    Sexplib0_Sexp =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp_mach,
       to_string_hum,
       to_string_mach,
       to_string_mach,
       of_float_style,
       of_int_style,
       [0,
        size,
        buffer,
        to_buffer_mach,
        to_buffer_hum,
        to_buffer_mach,
        to_buffer_gen,
        mach_maybe_esc_str,
        must_escape,
        esc_str]];
   runtime.caml_register_global(25, Sexplib0_Sexp, "Sexplib0__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_grammar
//# shape: Sexplib0__Sexp_grammar:[F(1)*,F(3)*,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    doc_comment_tag = "sexp_grammar.doc_comment",
    type_name_tag = "sexp_grammar.type_name",
    assoc_tag = "sexp_grammar.assoc",
    assoc_key_tag = "sexp_grammar.assoc.key",
    assoc_value_tag = "sexp_grammar.assoc.value",
    completion_suggested = "sexp_grammar.completion-suggested";
   function coerce(t){return t;}
   function tag(param, key, value){return [5, [0, key, value, param]];}
   var
    Sexplib0_Sexp_grammar =
      [0,
       coerce,
       tag,
       doc_comment_tag,
       type_name_tag,
       assoc_tag,
       assoc_key_tag,
       assoc_value_tag,
       completion_suggested];
   runtime.caml_register_global
    (6, Sexplib0_Sexp_grammar, "Sexplib0__Sexp_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_grammar
//# unitInfo: Requires: Sexplib0__Sexp_grammar, Stdlib__ListLabels
//# shape: Sexplib0__Sexp_conv_grammar:[F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    unit_sexp_grammar = [2, 0],
    sexp_t_sexp_grammar = [0, "Sexp.t"],
    empty_sexp_grammar = [4, 0],
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels;
   function sexp_grammar_with_tags(grammar, tags){
    return Stdlib_ListLabels[27].call
            (null,
             function(param, grammar){
              var value = param[2], key = param[1];
              return [5, [0, key, value, grammar]];
             },
             tags,
             grammar);
   }
   function sexp_grammar_with_tag_list(x, tags){
    return Stdlib_ListLabels[27].call
            (null,
             function(param, grammar){
              var value = param[2], key = param[1];
              return [0, [0, key, value, grammar]];
             },
             tags,
             x);
   }
   function ref_sexp_grammar(grammar){
    return Sexplib0_Sexp_grammar[1].call(null, grammar);
   }
   function lazy_t_sexp_grammar(grammar){
    return Sexplib0_Sexp_grammar[1].call(null, grammar);
   }
   function option_sexp_grammar(param){return [1, param];}
   function list_sexp_grammar(param){return [2, [1, param]];}
   function array_sexp_grammar(param){return [2, [1, param]];}
   var
    Sexplib0_Sexp_conv_grammar =
      [0,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       0,
       4,
       4,
       1,
       2,
       3,
       2,
       2,
       2,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       empty_sexp_grammar,
       empty_sexp_grammar];
   runtime.caml_register_global
    (5, Sexplib0_Sexp_conv_grammar, "Sexplib0__Sexp_conv_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv
//# unitInfo: Requires: CamlinternalLazy, Sexplib0__Sexp, Sexplib0__Sexp_conv_grammar, Stdlib, Stdlib__Arg, Stdlib__ArrayLabels, Stdlib__BytesLabels, Stdlib__Ephemeron, Stdlib__Int32, Stdlib__Int64, Stdlib__Lazy, Stdlib__ListLabels, Stdlib__MoreLabels, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Parsing, Stdlib__Printexc, Stdlib__Printf, Stdlib__Queue, Stdlib__Scanf, Stdlib__Stack, Stdlib__StringLabels, Stdlib__Sys
//# shape: Sexplib0__Sexp_conv:[N,N,N,F(2),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1)*,F(1)*,N,N,F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1),F(1),F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1),F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assert_failure$0 = "Assert_failure",
    cst_None = "None",
    cst_Some = "Some",
    cst_none = "none",
    cst_option_of_sexp_only_none_c$1 = "option_of_sexp: only none can be atom",
    cst_some = "some",
    cst_src_sexp_conv_ml = "src/sexp_conv.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_format_float = runtime.caml_format_float,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_MoreLabels = global_data.Stdlib__MoreLabels,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Obj = global_data.Stdlib__Obj,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_Ephemeron = global_data.Stdlib__Ephemeron,
    Sexplib0_Sexp_conv_grammar = global_data.Sexplib0__Sexp_conv_grammar,
    default_string_of_float =
      [0,
       function(x){
        var y = caml_format_float("%.15G", x);
        return caml_float_of_string(y) === x
                ? y
                : caml_format_float("%.17G", x);
       }],
    read_old_option_format = [0, 1],
    write_old_option_format = [0, 1],
    a = [1, 0],
    b = [0, cst_some],
    c = [1, 0],
    d = [0, cst_none],
    e = [0, "<opaque>"],
    f = [0, "<fun>"];
   function list_map(f, l){return Stdlib_ListLabels[20].call(null, f, l);}
   function sexp_of_unit(param){return a;}
   function sexp_of_bool(b){return [0, Stdlib[30].call(null, b)];}
   function sexp_of_string(str){return [0, str];}
   function sexp_of_bytes(bytes){
    return [0, Stdlib_BytesLabels[6].call(null, bytes)];
   }
   function sexp_of_char(c){
    return [0, Stdlib_StringLabels[1].call(null, 1, c)];
   }
   function sexp_of_int(n){return [0, Stdlib[33].call(null, n)];}
   function sexp_of_float(n){
    return [0, caml_call1(default_string_of_float[1], n)];
   }
   function sexp_of_int32(n){return [0, Stdlib_Int32[14].call(null, n)];}
   function sexp_of_int64(n){return [0, Stdlib_Int64[14].call(null, n)];}
   function sexp_of_nativeint(n){
    return [0, Stdlib_Nativeint[15].call(null, n)];
   }
   function sexp_of_ref(sexp_of_a, rf){return caml_call1(sexp_of_a, rf[1]);}
   function sexp_of_lazy_t(sexp_of_a, lv){
    var a = runtime.caml_obj_tag(lv);
    a:
    if(250 === a)
     var b = lv[1];
    else{
     if(246 !== a && 244 !== a){var b = lv; break a;}
     var b = CamlinternalLazy[2].call(null, lv);
    }
    return caml_call1(sexp_of_a, b);
   }
   function sexp_of_option(sexp_of_a, param){
    if(! param) return write_old_option_format[1] ? c : d;
    var x = param[1];
    return write_old_option_format[1]
            ? [1, [0, caml_call1(sexp_of_a, x), 0]]
            : [1, [0, b, [0, caml_call1(sexp_of_a, x), 0]]];
   }
   function sexp_of_pair(sexp_of_a, sexp_of_b, param){
    var b = param[2], a = param[1], c = [0, caml_call1(sexp_of_b, b), 0];
    return [1, [0, caml_call1(sexp_of_a, a), c]];
   }
   function sexp_of_triple(sexp_of_a, sexp_of_b, sexp_of_c, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     d = [0, caml_call1(sexp_of_c, c), 0],
     e = [0, caml_call1(sexp_of_b, b), d];
    return [1, [0, caml_call1(sexp_of_a, a), e]];
   }
   function sexp_of_list(sexp_of_a, lst){
    return [1, Stdlib_ListLabels[20].call(null, sexp_of_a, lst)];
   }
   function sexp_of_array(sexp_of_a, ar){
    var lst_ref = [0, 0], a = ar.length - 2 | 0;
    if(a >= 0){
     var i = a;
     for(;;){
      var b = lst_ref[1];
      lst_ref[1] =
       [0, caml_call1(sexp_of_a, caml_check_bound(ar, i)[i + 1]), b];
      var c = i - 1 | 0;
      if(0 === i) break;
      i = c;
     }
    }
    return [1, lst_ref[1]];
   }
   function sexp_of_hashtbl(sexp_of_key, sexp_of_val, htbl){
    function coll(k, v, acc){
     var a = [0, caml_call1(sexp_of_val, v), 0];
     return [0, [1, [0, caml_call1(sexp_of_key, k), a]], acc];
    }
    return [1, Stdlib_MoreLabels[1][14].call(null, coll, htbl, 0)];
   }
   function sexp_of_opaque(param){return e;}
   function sexp_of_fun(param){return f;}
   function equal(b, a){return b === a ? 1 : 0;}
   var
    hash = Stdlib_Obj[22][3],
    Exn_table = caml_call1(Stdlib_Ephemeron[1][3], [0, equal, hash]),
    the_exn_table = caml_call1(Exn_table[1], 17);
   function add(opt, param, extension_constructor, sexp_of_exn){
    var printexc = opt ? opt[1] : 1;
    return caml_call3
            (Exn_table[5],
             the_exn_table,
             extension_constructor,
             [0, sexp_of_exn, printexc]);
   }
   function find_auto(for_printexc, exn){
    var
     extension_constructor = Stdlib_Obj[22][1].call(null, exn),
     match = caml_call2(Exn_table[8], the_exn_table, extension_constructor);
    if(! match) return 0;
    var match$0 = match[1], printexc = match$0[2], sexp_of_exn = match$0[1];
    if(for_printexc && ! printexc) return 0;
    return [0, caml_call1(sexp_of_exn, exn)];
   }
   function size(param){return caml_call1(Exn_table[18], the_exn_table)[1];}
   var For_unit_tests_only = [0, size], g = [0, 2];
   function sexp_of_exn_opt(exn){return find_auto(0, exn);}
   function sexp_of_exn(exn){
    var match = sexp_of_exn_opt(exn);
    if(! match) return [1, [0, [0, Stdlib_Printexc[1].call(null, exn)], 0]];
    var sexp = match[1];
    return sexp;
   }
   function exn_to_string(e){
    var a = sexp_of_exn(e);
    return Sexplib0_Sexp[13].call(null, 0, a);
   }
   Stdlib_Printexc[9].call
    (null,
     function(exn){
      var match = find_auto(1, exn);
      if(! match) return 0;
      var sexp = match[1];
      return [0, Sexplib0_Sexp[13].call(null, g, sexp)];
     });
   var h = [0, 2];
   function printexc_prefer_sexp(exn){
    var match = sexp_of_exn_opt(exn);
    if(! match) return Stdlib_Printexc[1].call(null, exn);
    var sexp = match[1];
    return Sexplib0_Sexp[13].call(null, h, sexp);
   }
   var
    Of_sexp_error = Sexplib0_Sexp[6],
    record_check_extra_fields = [0, 1],
    cst_unit_of_sexp_empty_list_ne = "unit_of_sexp: empty list needed",
    cst_bool_of_sexp_unknown_strin = "bool_of_sexp: unknown string",
    cst_bool_of_sexp_atom_needed = "bool_of_sexp: atom needed",
    cst_string_of_sexp_atom_needed = "string_of_sexp: atom needed",
    cst_bytes_of_sexp_atom_needed = "bytes_of_sexp: atom needed",
    cst_char_of_sexp_atom_string_m =
      "char_of_sexp: atom string must contain one character only",
    cst_char_of_sexp_atom_needed = "char_of_sexp: atom needed",
    cst_int_of_sexp = "int_of_sexp: ",
    cst_int_of_sexp_atom_needed = "int_of_sexp: atom needed",
    cst_float_of_sexp = "float_of_sexp: ",
    cst_float_of_sexp_atom_needed = "float_of_sexp: atom needed",
    cst_int32_of_sexp = "int32_of_sexp: ",
    cst_int32_of_sexp_atom_needed = "int32_of_sexp: atom needed",
    cst_int64_of_sexp = "int64_of_sexp: ",
    cst_int64_of_sexp_atom_needed = "int64_of_sexp: atom needed",
    cst_nativeint_of_sexp = "nativeint_of_sexp: ",
    cst_nativeint_of_sexp_atom_nee = "nativeint_of_sexp: atom needed",
    cst_option_of_sexp_only_none_c = cst_option_of_sexp_only_none_c$1,
    cst_option_of_sexp_list_must_r =
      "option_of_sexp: list must represent optional value",
    cst_option_of_sexp_only_none_c$0 = cst_option_of_sexp_only_none_c$1,
    cst_option_of_sexp_list_must_b = "option_of_sexp: list must be (some el)",
    cst_pair_of_sexp_list_needed = "pair_of_sexp: list needed",
    cst_pair_of_sexp_list_must_con =
      "pair_of_sexp: list must contain exactly two elements only",
    cst_triple_of_sexp_list_needed = "triple_of_sexp: list needed",
    cst_triple_of_sexp_list_must_c =
      "triple_of_sexp: list must contain exactly three elements only",
    cst_list_of_sexp_list_needed = "list_of_sexp: list needed",
    cst_array_of_sexp_list_needed = "array_of_sexp: list needed",
    cst_hashtbl_of_sexp_list_neede = "hashtbl_of_sexp: list needed",
    cst_hashtbl_of_sexp_tuple_list = "hashtbl_of_sexp: tuple list needed",
    cst_opaque_of_sexp_cannot_conv =
      "opaque_of_sexp: cannot convert opaque values",
    cst_fun_of_sexp_cannot_convert =
      "fun_of_sexp: cannot convert function values";
   function of_sexp_error_exn(exc, sexp){
    throw caml_maybe_attach_backtrace([0, Of_sexp_error, exc, sexp], 1);
   }
   function of_sexp_error(what, sexp){
    throw caml_maybe_attach_backtrace
           ([0, Of_sexp_error, [0, Stdlib[7], what], sexp], 1);
   }
   function unit_of_sexp(sexp){
    if(0 !== sexp[0] && ! sexp[1]) return 0;
    return of_sexp_error(cst_unit_of_sexp_empty_list_ne, sexp);
   }
   function bool_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_bool_of_sexp_atom_needed, sexp);
    var match = sexp[1];
    a:
    if(match !== "False"){
     if(match !== "True"){
      if(match === "false") break a;
      if(match !== "true")
       return of_sexp_error(cst_bool_of_sexp_unknown_strin, sexp);
     }
     return 1;
    }
    return 0;
   }
   function string_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_string_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    return str;
   }
   function bytes_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_bytes_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    return Stdlib_BytesLabels[5].call(null, str);
   }
   function char_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_char_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    if(1 !== runtime.caml_ml_string_length(str))
     of_sexp_error(cst_char_of_sexp_atom_string_m, sexp);
    return runtime.caml_string_get(str, 0);
   }
   function int_of_sexp(sexp){
    if(0 !== sexp[0]) return of_sexp_error(cst_int_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var b = caml_int_of_string(str); return b;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), a = exn_to_string(exc);
     return of_sexp_error(Stdlib[28].call(null, cst_int_of_sexp, a), sexp);
    }
   }
   function float_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_float_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var b = caml_float_of_string(str); return b;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), a = exn_to_string(exc);
     return of_sexp_error(Stdlib[28].call(null, cst_float_of_sexp, a), sexp);
    }
   }
   function int32_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_int32_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var b = caml_int_of_string(str); return b;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), a = exn_to_string(exc);
     return of_sexp_error(Stdlib[28].call(null, cst_int32_of_sexp, a), sexp);
    }
   }
   function int64_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_int64_of_sexp_atom_needed, sexp);
    var str = sexp[1];
    try{var b = runtime.caml_int64_of_string(str); return b;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), a = exn_to_string(exc);
     return of_sexp_error(Stdlib[28].call(null, cst_int64_of_sexp, a), sexp);
    }
   }
   function nativeint_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_nativeint_of_sexp_atom_nee, sexp);
    var str = sexp[1];
    try{var b = caml_int_of_string(str); return b;}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0), a = exn_to_string(exc);
     return of_sexp_error
             (Stdlib[28].call(null, cst_nativeint_of_sexp, a), sexp);
    }
   }
   function ref_of_sexp(a_of_sexp, sexp){
    return [0, caml_call1(a_of_sexp, sexp)];
   }
   function lazy_t_of_sexp(a_of_sexp, sexp){
    var a = caml_call1(a_of_sexp, sexp);
    return Stdlib_Lazy[4].call(null, a);
   }
   function option_of_sexp(a_of_sexp, sexp){
    if(! read_old_option_format[1]){
     if(0 === sexp[0]){
      var match$0 = sexp[1];
      if(match$0 !== cst_None && match$0 !== cst_none)
       return of_sexp_error(cst_option_of_sexp_only_none_c$0, sexp);
      return 0;
     }
     var match$1 = sexp[1];
     a:
     if(match$1){
      var f = match$1[1];
      if(0 === f[0]){
       var g = f[1];
       if(g !== cst_Some && g !== cst_some) break a;
       var c = match$1[2];
       if(c && ! c[2]){
        var el$0 = c[1];
        return [0, caml_call1(a_of_sexp, el$0)];
       }
      }
     }
     return of_sexp_error(cst_option_of_sexp_list_must_b, sexp);
    }
    if(0 === sexp[0]){
     var match = sexp[1];
     if(match !== cst_None && match !== cst_none)
      return of_sexp_error(cst_option_of_sexp_only_none_c, sexp);
    }
    else{
     var a = sexp[1];
     if(a){
      var b = a[1];
      a:
      {
       if(a[2]){
        b:
        if(0 === b[0]){
         var d = b[1];
         if(d !== cst_Some && d !== cst_some) break b;
         var e = a[2];
         if(! e[2]){var el = e[1]; break a;}
        }
        return of_sexp_error(cst_option_of_sexp_list_must_r, sexp);
       }
       var el = b;
      }
      return [0, caml_call1(a_of_sexp, el)];
     }
    }
    return 0;
   }
   function pair_of_sexp(a_of_sexp, b_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_pair_of_sexp_list_needed, sexp);
    var match = sexp[1];
    if(match){
     var c = match[2];
     if(c && ! c[2]){
      var
       b_sexp = c[1],
       a_sexp = match[1],
       a = caml_call1(a_of_sexp, a_sexp),
       b = caml_call1(b_of_sexp, b_sexp);
      return [0, a, b];
     }
    }
    return of_sexp_error(cst_pair_of_sexp_list_must_con, sexp);
   }
   function triple_of_sexp(a_of_sexp, b_of_sexp, c_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_triple_of_sexp_list_needed, sexp);
    var match = sexp[1];
    if(match){
     var d = match[2];
     if(d){
      var e = d[2];
      if(e && ! e[2]){
       var
        c_sexp = e[1],
        b_sexp = d[1],
        a_sexp = match[1],
        a = caml_call1(a_of_sexp, a_sexp),
        b = caml_call1(b_of_sexp, b_sexp),
        c = caml_call1(c_of_sexp, c_sexp);
       return [0, a, b, c];
      }
     }
    }
    return of_sexp_error(cst_triple_of_sexp_list_must_c, sexp);
   }
   function list_of_sexp(a_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_list_of_sexp_list_needed, sexp);
    var lst = sexp[1];
    return Stdlib_ListLabels[20].call(null, a_of_sexp, lst);
   }
   function array_of_sexp(a_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_array_of_sexp_list_needed, sexp);
    var match = sexp[1];
    if(! match) return [0];
    var
     t = match[2],
     h = match[1],
     len = Stdlib_ListLabels[1].call(null, t) + 1 | 0,
     res = runtime.caml_make_vect(len, caml_call1(a_of_sexp, h)),
     i = 1,
     param = t;
    for(;;){
     if(! param) return res;
     var t$0 = param[2], h$0 = param[1], a = caml_call1(a_of_sexp, h$0);
     caml_check_bound(res, i)[i + 1] = a;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = t$0;
    }
   }
   function hashtbl_of_sexp(key_of_sexp, val_of_sexp, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_hashtbl_of_sexp_list_neede, sexp);
    var lst = sexp[1], htbl = Stdlib_MoreLabels[1][1].call(null, 0, 0);
    function act(param){
     if(0 !== param[0]){
      var a = param[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         v_sexp = b[1],
         k_sexp = a[1],
         c = caml_call1(val_of_sexp, v_sexp),
         d = caml_call1(key_of_sexp, k_sexp);
        return Stdlib_MoreLabels[1][5].call(null, htbl, d, c);
       }
      }
     }
     return of_sexp_error(cst_hashtbl_of_sexp_tuple_list, sexp);
    }
    Stdlib_ListLabels[18].call(null, act, lst);
    return htbl;
   }
   function opaque_of_sexp(sexp){
    return of_sexp_error(cst_opaque_of_sexp_cannot_conv, sexp);
   }
   function fun_of_sexp(sexp){
    return of_sexp_error(cst_fun_of_sexp_cannot_convert, sexp);
   }
   var
    sexp_grammar_with_tags = Sexplib0_Sexp_conv_grammar[1],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv_grammar[2],
    unit_sexp_grammar = Sexplib0_Sexp_conv_grammar[3],
    bool_sexp_grammar = Sexplib0_Sexp_conv_grammar[4],
    string_sexp_grammar = Sexplib0_Sexp_conv_grammar[5],
    bytes_sexp_grammar = Sexplib0_Sexp_conv_grammar[6],
    char_sexp_grammar = Sexplib0_Sexp_conv_grammar[7],
    int_sexp_grammar = Sexplib0_Sexp_conv_grammar[8],
    float_sexp_grammar = Sexplib0_Sexp_conv_grammar[9],
    int32_sexp_grammar = Sexplib0_Sexp_conv_grammar[10],
    int64_sexp_grammar = Sexplib0_Sexp_conv_grammar[11],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv_grammar[12],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv_grammar[13],
    ref_sexp_grammar = Sexplib0_Sexp_conv_grammar[14],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv_grammar[15],
    option_sexp_grammar = Sexplib0_Sexp_conv_grammar[16],
    list_sexp_grammar = Sexplib0_Sexp_conv_grammar[17],
    array_sexp_grammar = Sexplib0_Sexp_conv_grammar[18],
    opaque_sexp_grammar = Sexplib0_Sexp_conv_grammar[19],
    fun_sexp_grammar = Sexplib0_Sexp_conv_grammar[20],
    i =
      [0,
       [2,
        0,
        [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]]]]]],
       "%s %s:%d:%d"];
   function get_flc_error(name, param){
    var chr = param[3], line = param[2], file = param[1];
    return [0,
            caml_call4(Stdlib_Printf[4].call(null, i), name, file, line, chr)];
   }
   var
    j = [0, "Sys.Break"],
    k = [0, cst_src_sexp_conv_ml, 394, 15],
    l = [0, "Stack.Empty"],
    m = [0, cst_src_sexp_conv_ml, 390, 15],
    n = [0, "Scanf.Scan_failure"],
    o = [0, cst_src_sexp_conv_ml, 386, 15],
    p = [0, "Queue.Empty"],
    q = [0, cst_src_sexp_conv_ml, 382, 15],
    r = [0, "Parsing.Parse_error"],
    s = [0, cst_src_sexp_conv_ml, 378, 15],
    t = [0, "Lazy.Undefined"],
    u = [0, cst_src_sexp_conv_ml, 374, 15],
    v = [0, "Arg.Bad"],
    w = [0, cst_src_sexp_conv_ml, 370, 15],
    x = [0, "Arg.Help"],
    y = [0, cst_src_sexp_conv_ml, 366, 15],
    z = [0, "Sys_error"],
    A = [0, cst_src_sexp_conv_ml, 362, 15],
    B = [0, "Not_found_s"],
    C = [0, cst_src_sexp_conv_ml, 358, 15],
    cst_Match_failure = "Match_failure",
    D = [0, cst_src_sexp_conv_ml, 354, 15],
    E = [0, "Invalid_argument"],
    F = [0, cst_src_sexp_conv_ml, 350, 15],
    G = [0, "Not_found"],
    H = [0, cst_src_sexp_conv_ml, 346, 15],
    I = [0, "Failure"],
    J = [0, cst_src_sexp_conv_ml, 342, 15],
    K = [0, "End_of_file"],
    L = [0, cst_src_sexp_conv_ml, 338, 15],
    M = [0, "Exit"],
    N = [0, cst_src_sexp_conv_ml, 334, 15],
    cst_Assert_failure = cst_Assert_failure$0,
    O = [0, cst_src_sexp_conv_ml, 330, 15],
    P = [0, 0],
    Q = [0, 0];
   Stdlib_ListLabels[18].call
    (null,
     function(param){
      var handler = param[2], extension_constructor = param[1];
      return add(Q, P, extension_constructor, handler);
     },
     [0,
      [0,
       Stdlib[5],
       function(param){
        var tag = param[1];
        if(tag !== Stdlib[5])
         throw caml_maybe_attach_backtrace([0, Assert_failure, O], 1);
        var arg = param[2];
        return get_flc_error(cst_Assert_failure, arg);
       }],
      [0,
       [0,
        Stdlib[3],
        function(param){
         if(param === Stdlib[3]) return M;
         throw caml_maybe_attach_backtrace([0, Assert_failure, N], 1);
        }],
       [0,
        [0,
         Stdlib[12],
         function(param){
          if(param === Stdlib[12]) return K;
          throw caml_maybe_attach_backtrace([0, Assert_failure, L], 1);
         }],
        [0,
         [0,
          Stdlib[7],
          function(param){
           var tag = param[1];
           if(tag !== Stdlib[7])
            throw caml_maybe_attach_backtrace([0, Assert_failure, J], 1);
           var arg = param[2];
           return [1, [0, I, [0, [0, arg], 0]]];
          }],
         [0,
          [0,
           Stdlib[8],
           function(param){
            if(param === Stdlib[8]) return G;
            throw caml_maybe_attach_backtrace([0, Assert_failure, H], 1);
           }],
          [0,
           [0,
            Stdlib[6],
            function(param){
             var tag = param[1];
             if(tag !== Stdlib[6])
              throw caml_maybe_attach_backtrace([0, Assert_failure, F], 1);
             var arg = param[2];
             return [1, [0, E, [0, [0, arg], 0]]];
            }],
           [0,
            [0,
             Stdlib[4],
             function(param){
              var tag = param[1];
              if(tag !== Stdlib[4])
               throw caml_maybe_attach_backtrace([0, Assert_failure, D], 1);
              var arg = param[2];
              return get_flc_error(cst_Match_failure, arg);
             }],
            [0,
             [0,
              Sexplib0_Sexp[5],
              function(param){
               var tag = param[1];
               if(tag !== Sexplib0_Sexp[5])
                throw caml_maybe_attach_backtrace([0, Assert_failure, C], 1);
               var arg = param[2];
               return [1, [0, B, [0, arg, 0]]];
              }],
             [0,
              [0,
               Stdlib[11],
               function(param){
                var tag = param[1];
                if(tag !== Stdlib[11])
                 throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
                var arg = param[2];
                return [1, [0, z, [0, [0, arg], 0]]];
               }],
              [0,
               [0,
                Stdlib_Arg[7],
                function(param){
                 var tag = param[1];
                 if(tag !== Stdlib_Arg[7])
                  throw caml_maybe_attach_backtrace([0, Assert_failure, y], 1);
                 var arg = param[2];
                 return [1, [0, x, [0, [0, arg], 0]]];
                }],
               [0,
                [0,
                 Stdlib_Arg[8],
                 function(param){
                  var tag = param[1];
                  if(tag !== Stdlib_Arg[8])
                   throw caml_maybe_attach_backtrace([0, Assert_failure, w], 1);
                  var arg = param[2];
                  return [1, [0, v, [0, [0, arg], 0]]];
                 }],
                [0,
                 [0,
                  Stdlib_Lazy[1],
                  function(param){
                   if(param === Stdlib_Lazy[1]) return t;
                   throw caml_maybe_attach_backtrace([0, Assert_failure, u], 1);
                  }],
                 [0,
                  [0,
                   Stdlib_Parsing[10],
                   function(param){
                    if(param === Stdlib_Parsing[10]) return r;
                    throw caml_maybe_attach_backtrace([0, Assert_failure, s], 1);
                   }],
                  [0,
                   [0,
                    Stdlib_Queue[1],
                    function(param){
                     if(param === Stdlib_Queue[1]) return p;
                     throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
                    }],
                   [0,
                    [0,
                     Stdlib_Scanf[2],
                     function(param){
                      var tag = param[1];
                      if(tag !== Stdlib_Scanf[2])
                       throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
                      var arg = param[2];
                      return [1, [0, n, [0, [0, arg], 0]]];
                     }],
                    [0,
                     [0,
                      Stdlib_Stack[1],
                      function(param){
                       if(param === Stdlib_Stack[1]) return l;
                       throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
                      }],
                     [0,
                      [0,
                       Stdlib_Sys[44],
                       function(param){
                        if(param === Stdlib_Sys[44]) return j;
                        throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
                       }],
                      0]]]]]]]]]]]]]]]]]);
   var
    R = [0, "Sexplib.Conv.Of_sexp_error"],
    S = [0, cst_src_sexp_conv_ml, 406, 15],
    T = [0, 0],
    U = [0, 1];
   Stdlib_ListLabels[18].call
    (null,
     function(param){
      var handler = param[2], extension_constructor = param[1];
      return add(U, T, extension_constructor, handler);
     },
     [0,
      [0,
       Of_sexp_error,
       function(param){
        var tag = param[1];
        if(tag !== Of_sexp_error)
         throw caml_maybe_attach_backtrace([0, Assert_failure, S], 1);
        var sexp = param[3], exc = param[2];
        return [1, [0, R, [0, sexp_of_exn(exc), [0, sexp, 0]]]];
       }],
      0]);
   var
    Sexplib0_Sexp_conv =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       [0, add, For_unit_tests_only]];
   runtime.caml_register_global
    (117, Sexplib0_Sexp_conv, "Sexplib0__Sexp_conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_error
//# unitInfo: Requires: Sexplib0__Sexp_conv, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels
//# shape: Sexplib0__Sexp_conv_error:[N,F(3),F(3),F(3),F(3),F(4),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(4),F(3),F(3),F(2),F(3),F(2),F(2),N,F(1),F(2),F(2),F(3),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = " ",
    cst_has_incorrect_number_of_ar = " has incorrect number of arguments",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    msg = "this constructor does not take arguments",
    msg$0 = "this constructor requires arguments",
    msg$1 = "expected a variant type, saw a nested list",
    msg$2 = "expected a variant type, saw an empty list",
    msg$3 = "unexpected variant constructor",
    msg$4 = "record conversion: a [sexp.bool] field was given a payload.",
    msg$5 =
      "record conversion: only pairs expected, their first element must be an atom",
    msg$6 = "list instead of atom for record expected",
    msg$7 =
      "cannot convert values of types resulting from polymorphic record fields",
    msg$8 = "no matching variant found",
    msg$9 = "polymorphic variant does not take arguments",
    msg$10 = "polymorphic variant tag takes an argument",
    msg$11 = "a nested list is an invalid polymorphic variant",
    msg$12 = "the empty list is an invalid polymorphic variant",
    msg$13 = "trying to convert an empty type",
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    a = [0, [2, 0, [11, "_of_sexp: ", [2, 0, 0]]], "%s_of_sexp: %s"],
    b =
      [0,
       [11, "tuple of size ", [4, 0, 0, 0, [11, " expected", 0]]],
       "tuple of size %d expected"],
    c =
      [0,
       [2,
        0,
        [11, "_of_sexp: expected a pair beginning with label ", [2, 0, 0]]],
       "%s_of_sexp: expected a pair beginning with label %s"],
    d =
      [0,
       [2,
        0,
        [11,
         "_of_sexp: incorrect label for element ",
         [2, 0, [11, " at position ", [4, 3, 0, 0, 0]]]]],
       "%s_of_sexp: incorrect label for element %s at position %i"],
    e =
      [0,
       [11, "sum tag ", [3, 0, [11, cst_has_incorrect_number_of_ar, 0]]],
       "sum tag %S has incorrect number of arguments"],
    f = [0, [2, 0, [11, ": ", [2, 0, 0]]], "%s: %s"],
    cst_duplicate_fields = "duplicate fields",
    cst_extra_fields = "extra fields",
    g =
      [0,
       [11, "the following record elements were undefined: ", [2, 0, 0]],
       "the following record elements were undefined: %s"];
   function error(loc, sexp, msg){
    var b = caml_call2(Stdlib_Printf[4].call(null, a), loc, msg);
    return Sexplib0_Sexp_conv[27].call(null, b, sexp);
   }
   function simple_error(msg, loc, sexp){return error(loc, sexp, msg);}
   function tuple_of_size_n_expected(loc, n, sexp){
    return error(loc, sexp, caml_call1(Stdlib_Printf[4].call(null, b), n));
   }
   function tuple_pair_expected(loc, name, sexp){
    var msg = caml_call2(Stdlib_Printf[4].call(null, c), loc, name);
    return Sexplib0_Sexp_conv[27].call(null, msg, sexp);
   }
   function tuple_incorrect_label(loc, name, pos, sexp){
    var msg = caml_call3(Stdlib_Printf[4].call(null, d), loc, name, pos);
    return Sexplib0_Sexp_conv[27].call(null, msg, sexp);
   }
   function stag_no_args(loc, sexp){return error(loc, sexp, msg);}
   function stag_incorrect_n_args(loc, tag, sexp){
    return error(loc, sexp, caml_call1(Stdlib_Printf[4].call(null, e), tag));
   }
   function stag_takes_args(loc, sexp){return error(loc, sexp, msg$0);}
   function nested_list_invalid_sum(loc, sexp){return error(loc, sexp, msg$1);
   }
   function empty_list_invalid_sum(loc, sexp){return error(loc, sexp, msg$2);}
   function unexpected_stag(loc, sexp){return error(loc, sexp, msg$3);}
   function record_sexp_bool_with_payload(loc, sexp){return error(loc, sexp, msg$4);
   }
   function record_only_pairs_expected(loc, sexp){return error(loc, sexp, msg$5);
   }
   function record_invalid_fields(what, loc, fld_names, sexp){
    var fld_names_str = Stdlib_StringLabels[7].call(null, cst, fld_names);
    return error
            (loc,
             sexp,
             caml_call2(Stdlib_Printf[4].call(null, f), what, fld_names_str));
   }
   function record_duplicate_fields(loc, fld_names, sexp){
    return record_invalid_fields(cst_duplicate_fields, loc, fld_names, sexp);
   }
   function record_extra_fields(loc, fld_names, sexp){
    return record_invalid_fields(cst_extra_fields, loc, fld_names, sexp);
   }
   function record_get_undefined_loop(fields$1, param$0){
    var fields = fields$1, param = param$0;
    for(;;){
     if(! param){
      var b = Stdlib_ListLabels[10].call(null, fields);
      return Stdlib_StringLabels[7].call(null, cst$0, b);
     }
     var a = param[1];
     if(a[1]){
      var rest = param[2], field = a[2], fields$0 = [0, field, fields];
      fields = fields$0;
      param = rest;
     }
     else{var rest$0 = param[2]; param = rest$0;}
    }
   }
   function record_undefined_elements(loc, sexp, lst){
    var
     undefined$ = record_get_undefined_loop(0, lst),
     msg = caml_call1(Stdlib_Printf[4].call(null, g), undefined$);
    return error(loc, sexp, msg);
   }
   function record_list_instead_atom(loc, sexp){return error(loc, sexp, msg$6);
   }
   function record_poly_field_value(loc, sexp){return error(loc, sexp, msg$7);
   }
   var
    No_variant_match =
      [248,
       "Sexplib0__Sexp_conv_error.No_variant_match",
       runtime.caml_fresh_oo_id(0)],
    h =
      [0,
       [11,
        "polymorphic variant tag ",
        [3, 0, [11, cst_has_incorrect_number_of_ar, 0]]],
       "polymorphic variant tag %S has incorrect number of arguments"];
   function no_variant_match(param){
    throw caml_maybe_attach_backtrace(No_variant_match, 1);
   }
   function no_matching_variant_found(loc, sexp){return error(loc, sexp, msg$8);
   }
   function ptag_no_args(loc, sexp){return error(loc, sexp, msg$9);}
   function ptag_incorrect_n_args(loc, cnstr, sexp){
    return error(loc, sexp, caml_call1(Stdlib_Printf[4].call(null, h), cnstr));
   }
   function ptag_takes_args(loc, sexp){return error(loc, sexp, msg$10);}
   function nested_list_invalid_poly_var(loc, sexp){return error(loc, sexp, msg$11);
   }
   function empty_list_invalid_poly_var(loc, sexp){return error(loc, sexp, msg$12);
   }
   function empty_type(loc, sexp){return error(loc, sexp, msg$13);}
   var
    Sexplib0_Sexp_conv_error =
      [0,
       Of_sexp_error,
       error,
       simple_error,
       tuple_of_size_n_expected,
       tuple_pair_expected,
       tuple_incorrect_label,
       stag_no_args,
       stag_incorrect_n_args,
       stag_takes_args,
       nested_list_invalid_sum,
       empty_list_invalid_sum,
       unexpected_stag,
       record_sexp_bool_with_payload,
       record_only_pairs_expected,
       record_invalid_fields,
       record_duplicate_fields,
       record_extra_fields,
       record_get_undefined_loop,
       record_undefined_elements,
       record_list_instead_atom,
       record_poly_field_value,
       No_variant_match,
       no_variant_match,
       no_matching_variant_found,
       ptag_no_args,
       ptag_incorrect_n_args,
       ptag_takes_args,
       nested_list_invalid_poly_var,
       empty_list_invalid_poly_var,
       empty_type];
   runtime.caml_register_global
    (32, Sexplib0_Sexp_conv_error, "Sexplib0__Sexp_conv_error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_labeled_tuple
//# unitInfo: Requires: Sexplib0__Sexp_conv_error, Stdlib__String
//# shape: Sexplib0__Sexp_conv_labeled_tuple:[N,F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error;
   function labeled_tuple_of_sexp(caller, fields$2, create, original_sexp){
    var t = fields$2, acc = 0;
    for(;;){
     if(! t) break;
     var acc$0 = acc + 1 | 0, t$0 = t[3];
     t = t$0;
     acc = acc$0;
    }
    if(0 === original_sexp[0])
     return Sexplib0_Sexp_conv_error[4].call(null, caller, acc, original_sexp);
    var list$2 = original_sexp[1];
    a:
    {
     var pos$1 = 0;
     if(fields$2){
      var fields = fields$2[3], conv = fields$2[2], name = fields$2[1];
      if(list$2){
       var list = list$2[2], sexp = list$2[1];
       if(0 !== sexp[0]){
        var b = sexp[1];
        if(b){
         var f = b[1];
         if(0 === f[0]){
          var c = b[2];
          if(c && ! c[2]){
           var sexp$0 = c[1], atom = f[1];
           if(! Stdlib_String[9].call(null, atom, name)){
            var
             a =
               Sexplib0_Sexp_conv_error[6].call
                (null, caller, name, pos$1, original_sexp);
            break a;
           }
           var
            block = [0, caml_call1(conv, sexp$0), 24029],
            dst = block,
            offset = 1,
            fields$0 = fields,
            pos = 1,
            list$0 = list;
           for(;;){
            if(! fields$0){
             if(list$0){
              dst[offset + 1] =
               Sexplib0_Sexp_conv_error[4].call
                (null, caller, acc, original_sexp);
              var a = block;
              break a;
             }
             dst[offset + 1] = 0;
             var a = block;
             break a;
            }
            var
             fields$1 = fields$0[3],
             conv$0 = fields$0[2],
             name$0 = fields$0[1];
            if(! list$0){
             dst[offset + 1] =
              Sexplib0_Sexp_conv_error[4].call
               (null, caller, acc, original_sexp);
             var a = block;
             break a;
            }
            var list$1 = list$0[2], sexp$1 = list$0[1];
            if(0 !== sexp$1[0]){
             var d = sexp$1[1];
             if(d){
              var g = d[1];
              if(0 === g[0]){
               var e = d[2];
               if(e && ! e[2]){
                var sexp$2 = e[1], atom$0 = g[1];
                if(Stdlib_String[9].call(null, atom$0, name$0)){
                 var dst$0 = [0, caml_call1(conv$0, sexp$2), 24029];
                 dst[offset + 1] = dst$0;
                 var pos$0 = pos + 1 | 0;
                 dst = dst$0;
                 offset = 1;
                 fields$0 = fields$1;
                 pos = pos$0;
                 list$0 = list$1;
                 continue;
                }
                dst[offset + 1] =
                 Sexplib0_Sexp_conv_error[6].call
                  (null, caller, name$0, pos, original_sexp);
                var a = block;
                break a;
               }
              }
             }
            }
            dst[offset + 1] =
             Sexplib0_Sexp_conv_error[5].call(null, caller, name$0, sexp$1);
            var a = block;
            break a;
           }
          }
         }
        }
       }
       var a = Sexplib0_Sexp_conv_error[5].call(null, caller, name, sexp);
      }
      else
       var
        a = Sexplib0_Sexp_conv_error[4].call(null, caller, acc, original_sexp);
     }
     else
      var
       a =
         list$2
          ? Sexplib0_Sexp_conv_error[4].call(null, caller, acc, original_sexp)
          : 0;
    }
    return caml_call1(create, a);
   }
   var Sexplib0_Sexp_conv_labeled_tup = [0, [0], labeled_tuple_of_sexp];
   runtime.caml_register_global
    (2, Sexplib0_Sexp_conv_labeled_tup, "Sexplib0__Sexp_conv_labeled_tuple");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexp_conv_record
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__ArrayLabels, Stdlib__ListLabels, Stdlib__Option, Stdlib__StringLabels
//# shape: Sexplib0__Sexp_conv_record:[[],N,F(6),F(7)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    absent = [0, ""],
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib = global_data.Stdlib,
    Kind = [0];
   function combine(a, b){
    a:
    if(typeof a !== "number"){
     b:
     {
      c:
      {
       switch(a[0]){
         case 0:
          var a$0 = a[1];
          if(typeof b === "number") break b;
          switch(b[0]){
            case 0:
             var b$0 = b[1]; return [0, Stdlib[37].call(null, a$0, b$0)];
            case 3:
             break b;
            case 1:
             var t = b; break c;
            default: var t$0 = a;
          }
          break;
         case 1:
          var a$1 = a[1];
          if(typeof b === "number") break b;
          switch(b[0]){
            case 1:
             var b$1 = b[1]; return [1, Stdlib[37].call(null, a$1, b$1)];
            case 3:
             break b;
            default: var t = a; break c;
          }
         case 2:
          var a$2 = a[1];
          if(typeof b === "number") break b;
          switch(b[0]){
            case 2:
             var b$2 = b[1]; return [2, Stdlib[37].call(null, a$2, b$2)];
            case 3:
             break b;
            case 1:
             var t = b; break c;
            default: var t$0 = b;
          }
          break;
         default: break a;
       }
       return t$0;
      }
      return t;
     }
     return b;
    }
    return a;
   }
   var
    Malformed =
      [248,
       "Sexplib0__Sexp_conv_record.Malformed",
       runtime.caml_fresh_oo_id(0)],
    a = [1, 0],
    b = [3, 0],
    dummy = 0;
   function parse_value_malformed(malformed, fields, state, pos){
    try{
     parse_values(fields[4], state, pos + 1 | 0);
     var malformed$0 = malformed;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var other = exn[2], malformed$0 = combine(malformed, other);
    }
    throw caml_maybe_attach_backtrace([0, Malformed, malformed$0], 1);
   }
   function parse_values(fields, state, pos){
    if(! fields) return 0;
    var
     rest = fields[4],
     conv = fields[3],
     kind = fields[2],
     name = fields[1],
     sexp$5 = state[pos + 1];
    a:
    {
     if(typeof kind === "number")
      switch(kind){
        case 0:
         if(0 === sexp$5[0]){var value = caml_call1(conv, a); break a;}
         var i = sexp$5[1];
         if(i){
          var c = i[2];
          if(c && ! c[2]){
           var sexp = c[1], value = caml_call1(conv, sexp);
           break a;
          }
         }
         break;
        case 1:
         if(0 === sexp$5[0]){
          var
           value =
             parse_value_malformed([2, [0, name, 0]], fields, state, pos);
          break a;
         }
         var k = sexp$5[1];
         if(k){
          var d = k[2];
          if(d && ! d[2]){
           var sexp$0 = d[1], value = caml_call1(conv, sexp$0);
           break a;
          }
         }
         break;
        case 2:
         if(0 === sexp$5[0]){var value = [0]; break a;}
         var l = sexp$5[1];
         if(l){
          var e = l[2];
          if(e && ! e[2]){
           var
            sexp$1 = e[1],
            value = Sexplib0_Sexp_conv[45].call(null, conv, sexp$1);
           break a;
          }
         }
         break;
        case 3:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var m = sexp$5[1];
         if(m && ! m[2]){var value = 1; break a;}
         var value = parse_value_malformed(0, fields, state, pos);
         break a;
        case 4:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var n = sexp$5[1];
         if(n){
          var f = n[2];
          if(f && ! f[2]){
           var
            sexp$2 = f[1],
            value = Sexplib0_Sexp_conv[44].call(null, conv, sexp$2);
           break a;
          }
         }
         break;
        default:
         if(0 === sexp$5[0]){var value = 0; break a;}
         var o = sexp$5[1];
         if(o){
          var g = o[2];
          if(g && ! g[2]){
           var sexp$3 = g[1], value = [0, caml_call1(conv, sexp$3)];
           break a;
          }
         }
      }
     else{
      var default$ = kind[1];
      if(0 === sexp$5[0]){var value = caml_call1(default$, 0); break a;}
      var p = sexp$5[1];
      if(p){
       var h = p[2];
       if(h && ! h[2]){
        var sexp$4 = h[1], value = caml_call1(conv, sexp$4);
        break a;
       }
      }
     }
     var j = sexp$5[1];
     if(j && j[2]){
      var value = parse_value_malformed([3, [0, sexp$5]], fields, state, pos);
      break a;
     }
     var value = parse_value_malformed(b, fields, state, pos);
    }
    return [0, value, parse_values(rest, state, pos + 1 | 0)];
   }
   function parse_spine_malformed
   (malformed, index, extra, seen, state, len, sexps){
    try{
     parse_spine_slow(index, extra, seen, state, len, sexps);
     var malformed$0 = malformed;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var other = exn[2], malformed$0 = combine(malformed, other);
    }
    throw caml_maybe_attach_backtrace([0, Malformed, malformed$0], 1);
   }
   function parse_spine_slow(index, extra, seen, state, len, sexps$2){
    var sexps = sexps$2;
    for(;;){
     if(! sexps) return;
     var field = sexps[1];
     if(0 !== field[0]){
      var a = field[1];
      if(a){
       var match = a[1];
       if(0 === match[0]){
        var
         sexps$1 = sexps[2],
         name = match[1],
         i = caml_call1(index, name),
         b = seen <= i ? 1 : 0,
         match$0 = b ? i < len ? 1 : 0 : b;
        if(match$0){
         var pos = i - seen | 0;
         if(0 !== state[pos + 1][0])
          return parse_spine_malformed
                  ([1, [0, name, 0]], index, extra, seen, state, len, sexps$1);
         state[pos + 1] = field;
         sexps = sexps$1;
         continue;
        }
        var c = 0 <= i ? 1 : 0, match$1 = c ? i < seen ? 1 : 0 : c;
        if(match$1)
         return parse_spine_malformed
                 ([1, [0, name, 0]], index, extra, seen, state, len, sexps$1);
        if(! extra)
         return parse_spine_malformed
                 ([0, [0, name, 0]], index, extra, seen, state, len, sexps$1);
        sexps = sexps$1;
        continue;
       }
      }
     }
     var sexps$0 = sexps[2];
     return parse_spine_malformed
             ([3, [0, field]], index, extra, seen, state, len, sexps$0);
    }
   }
   function parse_record_slow(fields, index, extra, seen, sexps){
    var t = fields, unseen = 0;
    for(;;){
     if(! t){
      var
       state = runtime.caml_make_vect(unseen, absent),
       len = seen + unseen | 0;
      parse_spine_slow(index, extra, seen, state, len, sexps);
      return parse_values(fields, state, 0);
     }
     var rest = t[4], acc = unseen + 1 | 0;
     t = rest;
     unseen = acc;
    }
   }
   function parse_spine_fast(fields, index, extra, seen, sexps){
    if(! fields)
     return sexps ? parse_record_slow(fields, index, extra, seen, sexps) : 0;
    var
     rest = fields[4],
     conv = fields[3],
     kind = fields[2],
     name = fields[1];
    if(sexps){
     var b = sexps[1];
     if(0 !== b[0]){
      var a = b[1];
      if(a){
       var match = a[1];
       if(0 === match[0]){
        var others = sexps[2], args = a[2], atom = match[1];
        if(Stdlib_StringLabels[9].call(null, atom, name)){
         if(typeof kind === "number")
          switch(kind){
            case 0:
             if(args && ! args[2]){
              var
               sexp = args[1],
               c = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, caml_call1(conv, sexp), c];
             }
             break;
            case 1:
             if(args && ! args[2]){
              var
               sexp$0 = args[1],
               d = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, caml_call1(conv, sexp$0), d];
             }
             break;
            case 2:
             if(args && ! args[2]){
              var
               sexp$1 = args[1],
               e = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, Sexplib0_Sexp_conv[45].call(null, conv, sexp$1), e];
             }
             break;
            case 3:
             if(! args)
              return [0,
                      1,
                      parse_spine_fast(rest, index, extra, seen + 1 | 0, others)];
             break;
            case 4:
             if(args && ! args[2]){
              var
               sexp$2 = args[1],
               f = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, Sexplib0_Sexp_conv[44].call(null, conv, sexp$2), f];
             }
             break;
            default:
             if(args && ! args[2]){
              var
               sexp$3 = args[1],
               g = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
              return [0, [0, caml_call1(conv, sexp$3)], g];
             }
          }
         else if(args && ! args[2]){
          var
           sexp$4 = args[1],
           h = parse_spine_fast(rest, index, extra, seen + 1 | 0, others);
          return [0, caml_call1(conv, sexp$4), h];
         }
         return parse_record_slow(fields, index, extra, seen, sexps);
        }
       }
      }
     }
    }
    return parse_record_slow(fields, index, extra, seen, sexps);
   }
   function record_of_sexps
   (caller,
    context$0,
    fields,
    index_of_field,
    allow_extra_fields,
    create,
    sexps){
    var
     allow_extra_fields$0 =
       allow_extra_fields || 1 - Sexplib0_Sexp_conv[26][1];
    try{
     var
      value =
        parse_spine_fast
         (fields, index_of_field, allow_extra_fields$0, 0, sexps);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Malformed) throw caml_maybe_attach_backtrace(exn, 0);
     var malformed = exn[2];
     if(typeof malformed === "number")
      return Sexplib0_Sexp_conv_error[13].call(null, caller, context$0);
     switch(malformed[0]){
       case 0:
        var names = malformed[1];
        return Sexplib0_Sexp_conv_error[17].call
                (null, caller, names, context$0);
       case 1:
        var names$0 = malformed[1];
        return Sexplib0_Sexp_conv_error[16].call
                (null, caller, names$0, context$0);
       case 2:
        var
         names$1 = malformed[1],
         a =
           Stdlib_ListLabels[20].call
            (null, function(name){return [0, 1, name];}, names$1);
        return Sexplib0_Sexp_conv_error[19].call(null, caller, context$0, a);
       default:
        var
         maybe_context = malformed[1],
         context = Stdlib_Option[3].call(null, maybe_context, context$0);
        return Sexplib0_Sexp_conv_error[14].call(null, caller, context);
     }
    }
    return caml_call1(create, value);
   }
   function record_of_sexp
   (caller, fields, index_of_field, allow_extra_fields, create, sexp){
    if(0 === sexp[0])
     return Sexplib0_Sexp_conv_error[20].call(null, caller, sexp);
    var sexps = sexp[1];
    return record_of_sexps
            (caller,
             sexp,
             fields,
             index_of_field,
             allow_extra_fields,
             create,
             sexps);
   }
   var
    Sexplib0_Sexp_conv_record =
      [0, Kind, [0], record_of_sexp, record_of_sexps];
   runtime.caml_register_global
    (10, Sexplib0_Sexp_conv_record, "Sexplib0__Sexp_conv_record");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0__Sexpable
//# shape: Sexplib0__Sexpable:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib0_Sexpable = [0];
   runtime.caml_register_global(0, Sexplib0_Sexpable, "Sexplib0__Sexpable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib0
//# shape: Sexplib0:[]
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib0 = [0];
   runtime.caml_register_global(0, Sexplib0, "Sexplib0");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
