// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Stdio__
//# shape: Stdio__:[[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Stdio = [0], Stdio$0 = [0, Stdio];
   runtime.caml_register_global(0, Stdio$0, "Stdio__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio__In_channel
//# unitInfo: Requires: Base__Buffer, Base__Char, Base__Exn, Base__List, Base__String, Stdlib, Stdlib__Buffer
//# shape: Stdio__In_channel:[F(2)*,N,F(2),F(3),F(1),F(4),F(4),F(4),F(1),F(1),F(1),F(1),F(3),F(1),F(2),F(2),F(4),F(2),F(3),N,N,N,F(2),F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    flags = [0, 0, 0],
    Base_List = global_data.Base__List,
    Stdlib = global_data.Stdlib,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Base_Buffer = global_data.Base__Buffer,
    Base_Exn = global_data.Base__Exn;
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    seek = Stdlib[96][4],
    pos = Stdlib[96][5],
    length = Stdlib[96][6],
    stdin = Stdlib[38];
   function create(opt, file){
    var binary = opt ? opt[1] : 1, flags$0 = binary ? [0, 6, flags] : flags;
    return Stdlib[81].call(null, flags$0, 0, file);
   }
   var close = Stdlib[93];
   function with_file(binary, file, f){
    var a = create(binary, file);
    return Base_Exn[12].call(null, f, a, close);
   }
   function input(t, buf, pos, len){
    return Stdlib[84].call(null, t, buf, pos, len);
   }
   function really_input(t, buf, pos, len){
    try{var a = [0, Stdlib[85].call(null, t, buf, pos, len)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function really_input_exn(t, buf, pos, len){
    return Stdlib[85].call(null, t, buf, pos, len);
   }
   function input_byte(t){
    try{var a = [0, Stdlib[87].call(null, t)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function input_char(t){
    try{var a = [0, Stdlib[82].call(null, t)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function input_binary_int(t){
    try{var a = [0, Stdlib[88].call(null, t)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function unsafe_input_value(t){
    try{var a = [0, Stdlib[89].call(null, t)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function input_buffer(t, buf, len){
    try{var a = [0, Stdlib_Buffer[22].call(null, buf, t, len)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var set_binary_mode = Stdlib[95];
   function input_all(t){
    var chunk_size = 65536, buffer = Base_Buffer[2].call(null, chunk_size);
    try{for(;;) Stdlib_Buffer[22].call(null, buffer, t, chunk_size);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return Base_Buffer[3].call(null, buffer);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function trim(fix_win_eol, line){
    if(! fix_win_eol) return line;
    var len = runtime.caml_ml_string_length(line);
    if(0 < len){
     var a = runtime.caml_string_get(line, len - 1 | 0);
     if(Base_Char[16].call(null, a, 13))
      return Base_String[3].call(null, line, 0, len - 1 | 0);
    }
    return line;
   }
   function input_line(opt, t){
    var fix_win_eol = opt ? opt[1] : 1;
    try{var a = [0, Stdlib[83].call(null, t)], match = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn, 0);
     var match = 0;
    }
    if(! match) return 0;
    var line = match[1];
    return [0, trim(fix_win_eol, line)];
   }
   function input_line_exn(opt, t){
    var fix_win_eol = opt ? opt[1] : 1, line = Stdlib[83].call(null, t);
    return trim(fix_win_eol, line);
   }
   function fold_lines(fix_win_eol, t, init, f){
    var ac = init;
    for(;;){
     var match = input_line(fix_win_eol, t);
     if(! match) return ac;
     var line = match[1], ac$0 = caml_call2(f, ac, line);
     ac = ac$0;
    }
   }
   function input_lines(fix_win_eol, t){
    var lines = 0;
    for(;;){
     var match = input_line(fix_win_eol, t);
     if(! match) return Base_List[63].call(null, lines);
     var line = match[1], ac = [0, line, lines];
     lines = ac;
    }
   }
   function iter_lines(fix_win_eol, t, f){
    var ac$0 = 0;
    for(;;){
     var match = input_line(fix_win_eol, t);
     if(! match) return ac$0;
     var line = match[1], ac = caml_call1(f, line);
     ac$0 = ac;
    }
   }
   function read_lines(fix_win_eol, fname){
    return with_file
            (0, fname, function(a){return input_lines(fix_win_eol, a);});
   }
   function read_all(fname){return with_file(0, fname, input_all);}
   var
    Stdio_In_channel =
      [0,
       equal,
       stdin,
       create,
       with_file,
       close,
       input,
       really_input,
       really_input_exn,
       input_char,
       input_byte,
       input_binary_int,
       unsafe_input_value,
       input_buffer,
       input_all,
       input_line,
       input_line_exn,
       fold_lines,
       input_lines,
       iter_lines,
       seek,
       pos,
       length,
       set_binary_mode,
       read_lines,
       read_all];
   runtime.caml_register_global(8, Stdio_In_channel, "Stdio__In_channel");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio__Out_channel
//# unitInfo: Requires: Base, Base__Exn, Base__List, Stdlib, Stdlib__Buffer, Stdlib__Printf
//# shape: Stdio__Out_channel:[F(1)*,F(2)*,N,N,F(5),F(6),F(1),F(1),F(2),F(1),F(4),F(2),F(4),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(1),F(3),F(2),F(2),F(1),F(3),F(1),F(1),F(1),N,N,N,F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    cst = "\n",
    flags = [0, 1, [0, 3, 0]],
    Base_Exn = global_data.Base__Exn,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf;
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    seek = Stdlib[96][1],
    pos = Stdlib[96][2],
    length = Stdlib[96][3],
    stdout = Stdlib[39],
    stderr = Stdlib[40],
    a = [0, "<stderr>"],
    b = [0, "<stdout>"],
    c = [0, "<Out_channel.t>"];
   function sexp_of_t(t){return t === stderr ? a : t === stdout ? b : c;}
   function create(c, b, a, opt, file){
    var
     binary = c ? c[1] : 1,
     append = b ? b[1] : 0,
     fail_if_exists = a ? a[1] : 0,
     perm = opt ? opt[1] : 438,
     d = binary ? 6 : 7,
     flags$0 = [0, d, flags],
     e = append ? 2 : 4,
     flags$1 = [0, e, flags$0],
     flags$2 = fail_if_exists ? [0, 5, flags$1] : flags$1;
    return Stdlib[62].call(null, flags$2, perm, file);
   }
   var
    set_binary_mode = Stdlib[78],
    flush = Stdlib[63],
    close = Stdlib[76],
    close_no_err = Stdlib[77];
   function output(t, buf, pos, len){
    return Stdlib[68].call(null, t, buf, pos, len);
   }
   function output_substring(t, buf, pos, len){
    return Stdlib[69].call(null, t, buf, pos, len);
   }
   var
    output_string = Stdlib[66],
    output_bytes = Stdlib[67],
    output_char = Stdlib[65],
    output_byte = Stdlib[70],
    output_binary_int = Stdlib[71],
    output_buffer = Stdlib_Buffer[10],
    output_value = Stdlib[72];
   function newline(t){return output_string(t, cst);}
   function output_line(t, line){
    output_string(t, line);
    return output_string(t, cst);
   }
   function output_lines(t, lines){
    return Base_List[19].call
            (null, lines, function(line){return output_line(t, line);});
   }
   var
    printf = Stdlib_Printf[2],
    eprintf = Stdlib_Printf[3],
    fprintf = Stdlib_Printf[1],
    kfprintf = Stdlib_Printf[8],
    print_string = Stdlib[42],
    print_endline = Stdlib[46],
    prerr_endline = Stdlib[53];
   function fprint_s(mach, t, sexp){
    var
     string =
       mach ? Base[85][15].call(null, sexp) : Base[85][14].call(null, 0, sexp);
    output_string(t, string);
    output_char(t, 10);
    return flush(t);
   }
   function print_s(mach, sexp){return fprint_s(mach, stdout, sexp);}
   function eprint_s(mach, sexp){return fprint_s(mach, stderr, sexp);}
   function with_file(binary, append, fail_if_exists, perm, file, f){
    var a = create(binary, append, fail_if_exists, perm, file);
    return Base_Exn[12].call(null, f, a, close);
   }
   function write_lines(file, lines){
    return with_file
            (0, 0, 0, 0, file, function(t){return output_lines(t, lines);});
   }
   function write_all(file, data){
    return with_file
            (0, 0, 0, 0, file, function(t){return output_string(t, data);});
   }
   var
    Stdio_Out_channel =
      [0,
       sexp_of_t,
       equal,
       stdout,
       stderr,
       create,
       with_file,
       close,
       close_no_err,
       set_binary_mode,
       flush,
       output,
       output_string,
       output_substring,
       output_bytes,
       output_char,
       output_byte,
       output_binary_int,
       output_buffer,
       output_value,
       newline,
       output_lines,
       output_line,
       fprintf,
       printf,
       fprint_s,
       print_s,
       eprint_s,
       eprintf,
       kfprintf,
       print_string,
       print_endline,
       prerr_endline,
       seek,
       pos,
       length,
       write_lines,
       write_all];
   runtime.caml_register_global(11, Stdio_Out_channel, "Stdio__Out_channel");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Stdio
//# unitInfo: Requires: Stdio__In_channel, Stdio__Out_channel
//# shape: Stdio:[N,N,N,F(1),F(2),F(2),F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdio_In_channel = global_data.Stdio__In_channel,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    stdin = Stdio_In_channel[2],
    stdout = Stdio_Out_channel[3],
    stderr = Stdio_Out_channel[4],
    eprintf = Stdio_Out_channel[28],
    printf = Stdio_Out_channel[24],
    print_s = Stdio_Out_channel[26],
    eprint_s = Stdio_Out_channel[27],
    print_string = Stdio_Out_channel[30],
    print_endline = Stdio_Out_channel[31],
    prerr_endline = Stdio_Out_channel[32],
    Stdio =
      [0,
       stdin,
       stdout,
       stderr,
       printf,
       print_s,
       eprint_s,
       eprintf,
       print_string,
       print_endline,
       prerr_endline];
   runtime.caml_register_global(2, Stdio, "Stdio");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
