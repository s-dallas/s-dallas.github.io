// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Base_quickcheck__
//# shape: Base_quickcheck__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Base_quickcheck = [0],
    Base_quickcheck$0 = [0, Base_quickcheck];
   runtime.caml_register_global(0, Base_quickcheck$0, "Base_quickcheck__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__With_basic_types
//# shape: Base_quickcheck__With_basic_types:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Base_quickcheck_With_basic_typ = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_With_basic_typ, "Base_quickcheck__With_basic_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Bigarray_helpers
//# unitInfo: Requires: Base, Base__Array, Stdlib__Bigarray
//# shape: Base_quickcheck__Bigarray_helpers:[[F(1)*],N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_get_2 = runtime.caml_ba_get_2,
    caml_ba_layout = runtime.caml_ba_layout;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Base_Array = global_data.Base__Array,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray;
   function offset(param){return param ? 1 : 0;}
   var Layout = [0, offset];
   function iteri(t, f){
    var
     offset$0 = offset(caml_ba_layout(t)),
     a = caml_ba_dim_1(t) - 1 | 0,
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i + offset$0 | 0, caml_ba_get_1(t, i + offset$0 | 0));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function init(kind, layout, dim, f){
    var t = caml_call3(Stdlib_Bigarray[20][1], kind, layout, dim);
    iteri
     (t,
      function(i, param){
       return runtime.caml_ba_set_1(t, i, caml_call1(f, i));
      });
    return t;
   }
   function fold(t, init, f){
    var init$0 = [0, init];
    iteri
     (t,
      function(i, param){
       var a = caml_ba_get_1(t, i);
       init$0[1] = caml_call2(f, init$0[1], a);
       return 0;
      });
    return init$0[1];
   }
   function to_array(t){
    var offset$0 = offset(caml_ba_layout(t)), a = caml_ba_dim_1(t);
    return Base_Array[41].call
            (null, a, function(i){return caml_ba_get_1(t, i + offset$0 | 0);});
   }
   function sexp_of_t(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_001 = to_array(t);
    return Base[95].call(null, sexp_of_elt, x_001);
   }
   function hash_fold(hash_fold_elt, state, t){
    var a = caml_ba_dim_1(t), state$0 = caml_call2(Base[133], state, a);
    return fold(t, state$0, hash_fold_elt);
   }
   function iteri$0(t, f){
    var
     offset$0 = offset(caml_ba_layout(t)),
     a = caml_ba_dim_1(t) - 1 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var b = caml_ba_dim_2(t) - 1 | 0, d = 0;
      if(b >= 0){
       var j = d;
       for(;;){
        caml_call3
         (f,
          i + offset$0 | 0,
          j + offset$0 | 0,
          caml_ba_get_2(t, i + offset$0 | 0, j + offset$0 | 0));
        var g = j + 1 | 0;
        if(b === j) break;
        j = g;
       }
      }
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return 0;
   }
   function init$0(kind, layout, dim1, dim2, f){
    var t = caml_call4(Stdlib_Bigarray[21][1], kind, layout, dim1, dim2);
    iteri$0
     (t,
      function(i, j, param){
       return runtime.caml_ba_set_2(t, i, j, caml_call2(f, i, j));
      });
    return t;
   }
   function fold$0(t, init, f){
    var init$0 = [0, init];
    iteri$0
     (t,
      function(a, param, elt){
       init$0[1] = caml_call2(f, init$0[1], elt);
       return 0;
      });
    return init$0[1];
   }
   function to_array$0(t){
    var offset$0 = offset(caml_ba_layout(t)), a = caml_ba_dim_1(t);
    return Base_Array[41].call
            (null,
             a,
             function(i){
              var a = caml_ba_dim_2(t);
              return Base_Array[41].call
                      (null,
                       a,
                       function(j){
                        return caml_ba_get_2(t, i + offset$0 | 0, j + offset$0 | 0);
                       });
             });
   }
   function sexp_of_t$0(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_002 = to_array$0(t), a = Base[95];
    return Base[95].call(null, function(b){return a(sexp_of_elt, b);}, x_002);
   }
   function hash_fold$0(hash_fold_elt, state, t){
    var
     a = caml_ba_dim_1(t),
     state$0 = caml_call2(Base[133], state, a),
     b = caml_ba_dim_2(t),
     state$1 = caml_call2(Base[133], state$0, b);
    return fold$0(t, state$1, hash_fold_elt);
   }
   var
    Base_quickcheck_Bigarray_helpe =
      [0,
       Layout,
       [0, sexp_of_t, init, iteri, fold, to_array, hash_fold],
       [0, sexp_of_t$0, init$0, iteri$0, fold$0, to_array$0, hash_fold$0]];
   runtime.caml_register_global
    (3, Base_quickcheck_Bigarray_helpe, "Base_quickcheck__Bigarray_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer0
//# unitInfo: Requires: Base, Sexplib0__Sexp_conv
//# shape: Base_quickcheck__Observer0:[F(3)*,F(1)*,F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    a = [0, "size"],
    cst_Base_quickcheck_Observer_o =
      "Base_quickcheck.Observer.observe: size < 0";
   function create(f){return f;}
   function observe(t, x, size, hash){
    if(0 <= size) return caml_call3(t, x, size, hash);
    var
     b = [0, [1, [0, a, [0, caml_call1(Base[136], size), 0]]], 0],
     c =
       [1,
        [0,
         Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Observer_o),
         b]];
    return Base[246].call(null, c);
   }
   function opaque(a, param, hash){return hash;}
   var Base_quickcheck_Observer0 = [0, opaque, create, observe];
   runtime.caml_register_global
    (4, Base_quickcheck_Observer0, "Base_quickcheck__Observer0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Generator
//# unitInfo: Requires: Base, Base__Applicative, Base__Array, Base__Bytes, Base__Char, Base__Either, Base__Error, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__Lazy, Base__List, Base__Map, Base__Monad, Base__Nativeint, Base__Option, Base__Sequence, Base__Set, Base__Staged, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Observer0, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random, Stdlib
//# shape: Base_quickcheck__Generator:[N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1)*,F(1)*,F(2),F(2),N,N,N,N,N,F(2)*,F(3),F(2),F(3),F(2),F(1),F(1),N,N,N,N,F(2)*,N,N,N,N,N,N,F(2)*,F(1)*,F(2)*,N,N,F(1)*,F(1)*,N,N,F(2)*,F(3)*,F(2)*,F(2)*,F(2),F(1),F(1)*,F(1),F(1),F(2),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),N,N,N,N,N,N,F(1)*,N,N,N,N,N,N,N,F(2)*,N,F(1),F(1)*,F(1)*,F(2),F(1),F(1),F(1),F(2),F(1),F(1)*,F(4),F(1),F(1),F(1),F(2)*,F(1)*,F(3),[F(2),F(2)*]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lower_bound = "lower_bound",
    cst_src_generator_ml = "src/generator.ml",
    cst_upper_bound = "upper_bound",
    cst_weight = "weight",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_xor = runtime.caml_int64_xor,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_Array = global_data.Base__Array,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Set = global_data.Base__Set,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Float = global_data.Base__Float,
    Splittable_random = global_data.Splittable_random,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Int63 = global_data.Base__Int63,
    Stdlib = global_data.Stdlib,
    Base_Char = global_data.Base__Char,
    Base_Lazy = global_data.Base__Lazy,
    Base_Int = global_data.Base__Int,
    Base_Either = global_data.Base__Either,
    Base_Option = global_data.Base__Option,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Error = global_data.Base__Error,
    Base_Hash = global_data.Base__Hash,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Staged = global_data.Base__Staged,
    Base_Applicative = global_data.Base__Applicative,
    Base_Monad = global_data.Base__Monad,
    Base_Int32 = global_data.Base__Int32,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Bytes = global_data.Base__Bytes,
    g = [0, "size"],
    cst_Base_quickcheck_Generator_ =
      "Base_quickcheck.Generator.generate: size < 0";
   function create(f){return Base_Staged[1].call(null, f);}
   function generate(t, size, random){
    if(0 <= size)
     return caml_call2(Base_Staged[2].call(null, t), size, random);
    var
     a = [0, [1, [0, g, [0, caml_call1(Base[136], size), 0]]], 0],
     b =
       [1,
        [0,
         Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Generator_),
         a]];
    return Base[246].call(null, b);
   }
   var size = create(function(size, param){return size;});
   function fn(dom, rng){
    return create
            (function(size, random){
              var random$0 = Splittable_random[5].call(null, random);
              return function(x){
               var
                a = Base_Hash[7].call(null, 0),
                hash =
                  Base_quickcheck_Observer0[3].call(null, dom, x, size, a),
                random = Splittable_random[4].call(null, random$0),
                b = Base_Hash[9].call(null, hash);
               Splittable_random[3].call(null, random, b);
               return generate(rng, size, random);};
             });
   }
   function with_size(t, size){
    return create(function(param, random){return generate(t, size, random);});
   }
   function perturb(t, salt){
    return create
            (function(size, random){
              Splittable_random[3].call(null, random, salt);
              return generate(t, size, random);
             });
   }
   function filter_map(t, f){
    function loop(size$1, random){
     var size = size$1;
     for(;;){
      var x = generate(t, size, random), match = caml_call1(f, x);
      if(match){var y = match[1]; return y;}
      var size$0 = size + 1 | 0;
      size = size$0;
     }
    }
    return create(loop);
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function return$(x){return create(function(a, param){return x;});}
   function map(t, f){
    return create
            (function(size, random){
              return caml_call1(f, generate(t, size, random));
             });
   }
   function apply(tf, tx){
    return create
            (function(size, random){
              var
               f = generate(tf, size, random),
               x = generate(tx, size, random);
              return caml_call1(f, x);
             });
   }
   function bind(t, f){
    return create
            (function(size, random){
              var x = generate(t, size, random);
              return generate(caml_call1(f, x), size, random);
             });
   }
   function all(list){
    return create
            (function(size, random){
              return Base_List[53].call
                      (null, list, function(a){return generate(a, size, random);});
             });
   }
   function all_unit(list){
    return create
            (function(size, random){
              return Base_List[19].call
                      (null, list, function(a){return generate(a, size, random);});
             });
   }
   var
    map$0 = [0, -198771759, map],
    For_applicative =
      Base_Applicative[7].call(null, [0, return$, apply, map$0]),
    both = For_applicative[3],
    map2 = For_applicative[9],
    map3 = For_applicative[10],
    include = For_applicative[13],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    map$1 = [0, -198771759, map],
    For_monad = Base_Monad[1].call(null, [0, bind, return$, map$1]),
    ignore_m = For_monad[8],
    join = For_monad[7],
    include$0 = For_monad[3],
    symbol_bind = include$0[1],
    symbol_map = include$0[2],
    cst_Base_quickcheck_Generator_$0 =
      "Base_quickcheck.Generator.of_list: empty list",
    cst_Base_quickcheck_Generator_$1 =
      "Base_quickcheck.Generator.of_weighted_list: empty list",
    h = [0, cst_weight],
    cst_Base_quickcheck_Generator_$2 =
      "Base_quickcheck.Generator.of_weighted_list: weight is not finite",
    i = [0, cst_weight],
    cst_Base_quickcheck_Generator_$3 =
      "Base_quickcheck.Generator.of_weighted_list: weight is negative",
    cst_Base_quickcheck_Generator_$4 =
      "Base_quickcheck.Generator.of_weighted_list: total weight is zero",
    j = [0, cst_src_generator_ml, 160, 14],
    cst_Base_quickcheck_Generator_$5 =
      "Base_quickcheck.Generator.weighted_recursive_union: lists must be non-empty",
    k = [0, cst_src_generator_ml, 225, 6],
    l = [0, cst_src_generator_ml, 198, 4];
   function of_list(list){
    if(Base_List[18].call(null, list)){
     var
      a = Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Generator_$0);
     Base_Error[32].call(null, a);
    }
    var
     array = Base_Array[9].call(null, list),
     hi = array.length - 2 | 0,
     lo = 0;
    return create
            (function(param, random){
              var index = Splittable_random[8].call(null, random, lo, hi);
              return caml_check_bound(array, index)[index + 1];
             });
   }
   function union(list){return caml_call1(join, of_list(list));}
   function of_weighted_list(alist){
    if(Base_List[18].call(null, alist)){
     var
      a = Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Generator_$1);
     Base_Error[32].call(null, a);
    }
    var
     match = Base_List[107].call(null, alist),
     values = match[2],
     weights = match[1],
     value_array = Base_Array[9].call(null, values),
     array =
       Base_Array[41].call
        (null, value_array.length - 1, function(param){return 0.;}),
     sum =
       Base_List[33].call
        (null,
         weights,
         0.,
         function(index, acc, weight){
          if(1 - Base_Float[80].call(null, weight)){
           var
            a = [0, [1, [0, h, [0, Base[126].call(null, weight), 0]]], 0],
            b =
              [1,
               [0,
                Sexplib0_Sexp_conv[7].call
                 (null, cst_Base_quickcheck_Generator_$2),
                a]];
           Base_Error[32].call(null, b);
          }
          if(weight < 0.){
           var
            c = [0, [1, [0, i, [0, Base[126].call(null, weight), 0]]], 0],
            d =
              [1,
               [0,
                Sexplib0_Sexp_conv[7].call
                 (null, cst_Base_quickcheck_Generator_$3),
                c]];
           Base_Error[32].call(null, d);
          }
          var cumulative = caml_call2(Base[234], acc, weight);
          caml_check_bound(array, index)[index + 1] = cumulative;
          return cumulative;
         });
    if(sum <= 0.){
     var
      b = Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Generator_$4);
     Base_Error[32].call(null, b);
    }
    return create
            (function(param, random){
              var
               choice = Splittable_random[13].call(null, random, 0., sum),
               match =
                 caml_call6
                  (Base_Array[7],
                   0,
                   0,
                   array,
                   runtime.caml_float_compare,
                   926943384,
                   choice);
              if(! match)
               throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
              var index = match[1];
              return caml_check_bound(value_array, index)[index + 1];
             });
   }
   function weighted_union(alist){
    return caml_call1(join, of_weighted_list(alist));
   }
   function of_lazy(lazy_t){
    return create
            (function(size, random){
              var a = caml_obj_tag(lazy_t);
              a:
              if(250 === a)
               var b = lazy_t[1];
              else{
               if(246 !== a && 244 !== a){var b = lazy_t; break a;}
               var b = CamlinternalLazy[2].call(null, lazy_t);
              }
              return generate(b, size, random);
             });
   }
   function fixed_point(of_generator){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246,
       function(param){return caml_call1(of_generator, of_lazy(lazy_t));}]);
    var a = caml_obj_tag(lazy_t);
    if(250 === a) return lazy_t[1];
    if(246 !== a && 244 !== a) return lazy_t;
    return CamlinternalLazy[2].call(null, lazy_t);
   }
   function weighted_recursive_union(nonrec_list, f){
    return fixed_point
            (function(self){
              var
               a = caml_call1(f, self),
               rec_list =
                 Base_List[53].call
                  (null,
                   a,
                   function(param){
                    var t = param[2], w = param[1];
                    return [0,
                            w,
                            caml_call2
                             (For_monad[11][4][2],
                              size,
                              function(n){return with_size(t, n - 1 | 0);})];
                   }),
               b = Base_List[18].call(null, nonrec_list),
               c = b || Base_List[18].call(null, rec_list);
              if(c){
               var
                d =
                  Sexplib0_Sexp_conv[7].call
                   (null, cst_Base_quickcheck_Generator_$5);
               Base[246].call(null, d);
              }
              var
               nonrec_gen = weighted_union(nonrec_list),
               rec_gen =
                 weighted_union(Base[222].call(null, nonrec_list, rec_list));
              return caml_call2
                      (For_monad[11][4][2],
                       size,
                       function(param){return 0 === param ? nonrec_gen : rec_gen;});
             });
   }
   function recursive_union(nonrec_list, f){
    function weighted(list){
     return Base_List[53].call(null, list, function(t){return [0, 1., t];});
    }
    return weighted_recursive_union
            (weighted(nonrec_list),
             function(self){return weighted(caml_call1(f, self));});
   }
   function sizes(a, opt, param){
    var min_length = a ? a[1] : 0, max_length = opt ? opt[1] : Base_Int[65];
    return create
            (function(size, random){
              if(min_length > max_length)
               throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
              var
               upper_bound = min_length + size | 0,
               max_length$0 =
                 min_length <= upper_bound
                  ? Base[233].call(null, max_length, upper_bound)
                  : max_length,
               len =
                 caml_call3
                  (Splittable_random[15][1], random, min_length, max_length$0);
              if(0 === len) return 0;
              var
               sizes =
                 Base_Array[41].call(null, len, function(param){return 0;}),
               remaining = size - (len - min_length | 0) | 0,
               max_index = len - 1 | 0,
               b = 1;
              if(remaining >= 1){
               var for$ = b;
               for(;;){
                var
                 index =
                   caml_call3(Splittable_random[15][1], random, 0, max_index);
                sizes[index + 1] =
                 caml_check_bound(sizes, index)[index + 1] + 1 | 0;
                var e = for$ + 1 | 0;
                if(remaining === for$) break;
                for$ = e;
               }
              }
              var a = max_index - 1 | 0, c = 0;
              if(a >= 0){
               var i = c;
               for(;;){
                var j = Splittable_random[8].call(null, random, i, max_index);
                Base_Array[81].call(null, sizes, i, j);
                var d = i + 1 | 0;
                if(a === i) break;
                i = d;
               }
              }
              if
               ((Base_Array[27].call
                 (null,
                  [0, Base_Int[79], function(b, a){return b + a | 0;}],
                  sizes,
                  function(a){return a;})
                + (len - min_length | 0)
                | 0)
                === size)
               return Base_Array[30].call(null, sizes);
              throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
             });
   }
   var
    unit = caml_call1(For_monad[11][1], 0),
    bool =
      create
       (function(param, random){
         return Splittable_random[7].call(null, random);
        }),
    m = [0, 1],
    n = [0, 0];
   function option(value_t){
    var a = [0, map(value_t, Base_Option[23]), 0];
    return union([0, caml_call1(For_monad[11][1], 0), a]);
   }
   function either(fst_t, snd_t){
    var a = [0, map(snd_t, Base_Either[20]), 0];
    return union([0, map(fst_t, Base_Either[19]), a]);
   }
   function result(ok_t, err_t){
    return map
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function list_generic(min_length, max_length, elt_gen){
    var a = sizes(min_length, max_length, 0);
    return caml_call2
            (For_monad[11][4][2],
             a,
             function(sizes){
              return all
                      (Base_List[53].call
                        (null,
                         sizes,
                         function(size){return with_size(elt_gen, size);}));
             });
   }
   function list(elt_gen){return list_generic(0, 0, elt_gen);}
   function list_non_empty(elt_gen){return list_generic(m, 0, elt_gen);}
   function list_with_length(elt_gen, length){
    return list_generic([0, length], [0, length], elt_gen);
   }
   function list_filtered(elts){
    var
     elts$0 = Base_Array[9].call(null, elts),
     length_of_input = elts$0.length - 1;
    return create
            (function(param, random){
              var
               length_of_output =
                 Splittable_random[8].call(null, random, 0, length_of_input),
               indices =
                 Base_Array[41].call
                  (null, length_of_input, function(a){return a;}),
               a = length_of_output - 1 | 0,
               b = 0;
              if(a >= 0){
               var i = b;
               for(;;){
                var
                 j =
                   Splittable_random[8].call
                    (null, random, i, length_of_input - 1 | 0);
                Base_Array[81].call(null, indices, i, j);
                var c = i + 1 | 0;
                if(a === i) break;
                i = c;
               }
              }
              caml_call4
               (Base_Array[66],
                n,
                [0, length_of_output],
                indices,
                Base_Int[14]);
              return Base_List[40].call
                      (null,
                       length_of_output,
                       function(i){
                        var a = caml_check_bound(indices, i)[i + 1];
                        return caml_check_bound(elts$0, a)[a + 1];
                       });
             });
   }
   function list_permutations(list){
    return create
            (function(param, random){
              var
               array = Base_Array[9].call(null, list),
               a = array.length - 2 | 0,
               b = 1;
              if(a >= 1){
               var i = b;
               for(;;){
                var j = Splittable_random[8].call(null, random, 0, i);
                Base_Array[81].call(null, array, i, j);
                var c = i + 1 | 0;
                if(a === i) break;
                i = c;
               }
              }
              return Base_Array[30].call(null, array);
             });
   }
   function array(t){var a = Base_Array[9]; return map(list(t), a);}
   function ref(t){return map(t, function(a){return [0, a];});}
   function lazy_t(t){return map(t, Base_Lazy[24]);}
   function char_uniform_inclusive(lo, hi){
    return create
            (function(param, random){
              var
               a = Base_Char[32].call(null, hi),
               b = Base_Char[32].call(null, lo),
               c = Splittable_random[8].call(null, random, b, a);
              return Base_Char[35].call(null, c);
             });
   }
   var
    char_uppercase = char_uniform_inclusive(65, 90),
    char_lowercase = char_uniform_inclusive(97, 122),
    char_digit = char_uniform_inclusive(48, 57),
    char_print_uniform = char_uniform_inclusive(32, 126),
    char_uniform = char_uniform_inclusive(Base_Char[53], Base_Char[54]),
    char_alpha = union([0, char_lowercase, [0, char_uppercase, 0]]),
    char_alphanum =
      weighted_union([0, [0, 52., char_alpha], [0, [0, 10., char_digit], 0]]),
    char_whitespace =
      of_list(Base_List[12].call(null, Base_Char[1], Base_Char[45])),
    char_print =
      weighted_union
       ([0, [0, 10., char_alphanum], [0, [0, 1., char_print_uniform], 0]]),
    o = [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[54])], 0],
    char =
      weighted_union
       ([0,
         [0, 100., char_print],
         [0,
          [0, 10., char_uniform],
          [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[53])], o]]]);
   function small_int(allow_zero){
    return create
            (function(size, random){
              var
               lower_bound = allow_zero ? 0 : 1,
               upper_bound = size + 1 | 0,
               weighted_low =
                 caml_call3
                  (Splittable_random[15][1],
                   random,
                   0,
                   upper_bound - lower_bound | 0),
               weighted_high = upper_bound - weighted_low | 0;
              return weighted_high;
             });
   }
   var
    small_positive_or_zero_int = small_int(1),
    small_strictly_positive_int = small_int(0),
    p = [0, "p"],
    cst_geometric_distribution_p_m =
      "geometric distribution: p must be between 0 and 1",
    dummy = 0;
   function For_integer(Integer){
    function geometric(lo, p$0){
     if(p$0 === 1.) return caml_call1(For_monad[11][1], lo);
     if(p$0 === 0.) return caml_call1(For_monad[11][1], Integer[88]);
     if(! (p$0 < 0.) && ! (1. < p$0) && ! Base_Float[78].call(null, p$0)){
      var denominator = runtime.caml_log1p_float(caml_call1(Base[240], p$0));
      return create
              (function(param, random){
                var
                 uniform = Splittable_random[14].call(null, random),
                 exponential =
                   caml_call2(Base[237], Math.log(uniform), denominator),
                 float = Base_Float[57].call(null, exponential);
                try{var int = caml_call1(Integer[2], float);}
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0), tag = exn[1];
                 if(tag === Stdlib[6]) return Integer[88];
                 throw caml_maybe_attach_backtrace(exn, 0);
                }
                var int$0 = caml_call2(Integer[45], lo, int);
                return caml_call2(Integer[16], int$0, lo)
                        ? Integer[88]
                        : int$0;
               });
     }
     var
      a = [0, [1, [0, p, [0, Base[126].call(null, p$0), 0]]], 0],
      b =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_geometric_distribution_p_m),
          a]];
     return Base[246].call(null, b);
    }
    function uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[100], random, lo, hi);
              });
    }
    function log_uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[101], random, lo, hi);
              });
    }
    function non_uniform(f, lo, hi){
     var
      a = [0, [0, 0.9, caml_call2(f, lo, hi)], 0],
      b = [0, [0, 0.05, caml_call1(For_monad[11][1], hi)], a];
     return weighted_union
             ([0, [0, 0.05, caml_call1(For_monad[11][1], lo)], b]);
    }
    function inclusive(a, b){return non_uniform(uniform_inclusive, a, b);}
    function log_inclusive(a, b){
     return non_uniform(log_uniform_inclusive, a, b);
    }
    var
     uniform_all = uniform_inclusive(Integer[89], Integer[88]),
     let_syntax_004 =
       non_uniform(log_uniform_inclusive, Integer[42], Integer[88]),
     a = caml_call2(For_monad[11][4][4], bool, let_syntax_004),
     all =
       caml_call2
        (For_monad[11][4][3],
         a,
         function(param){
          var magnitude = param[2], negative = param[1];
          return negative ? caml_call1(Integer[74], magnitude) : magnitude;
         });
    return [0,
            geometric,
            uniform_inclusive,
            log_uniform_inclusive,
            ,
            inclusive,
            log_inclusive,
            uniform_all,
            all];
   }
   var
    t_sexp_grammar = Base_Int[2],
    of_float = Base_Int[3],
    to_float = Base_Int[4],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash_fold_t = Base_Int[7],
    hash = Base_Int[8],
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    of_string = Base_Int[11],
    to_string = Base_Int[12],
    equal = Base_Int[13],
    compare = Base_Int[14],
    min = Base_Int[15],
    max = Base_Int[16],
    ascending = Base_Int[17],
    descending = Base_Int[18],
    between = Base_Int[19],
    clamp_exn = Base_Int[20],
    clamp = Base_Int[21],
    comparator = Base_Int[22],
    pp = Base_Int[23],
    hashable = Base_Int[24],
    is_positive = Base_Int[25],
    is_non_negative = Base_Int[26],
    is_negative = Base_Int[27],
    is_non_positive = Base_Int[28],
    sign = Base_Int[29],
    compare_local = Base_Int[30],
    equal_local = Base_Int[31],
    invariant = Base_Int[32],
    Hex = Base_Int[33],
    Binary = Base_Int[34],
    of_string_opt = Base_Int[35],
    to_string_hum = Base_Int[36],
    one = Base_Int[37],
    minus_one = Base_Int[38],
    rem = Base_Int[39],
    round = Base_Int[40],
    round_towards_zero = Base_Int[41],
    round_down = Base_Int[42],
    round_up = Base_Int[43],
    round_nearest = Base_Int[44],
    succ = Base_Int[45],
    pred = Base_Int[46],
    pow = Base_Int[47],
    bit_and = Base_Int[48],
    bit_or = Base_Int[49],
    bit_xor = Base_Int[50],
    bit_not = Base_Int[51],
    popcount = Base_Int[52],
    shift_left = Base_Int[53],
    shift_right = Base_Int[54],
    decr = Base_Int[55],
    incr = Base_Int[56],
    of_int32_exn = Base_Int[57],
    to_int32_exn = Base_Int[58],
    of_int64_exn = Base_Int[59],
    to_int64 = Base_Int[60],
    of_nativeint_exn = Base_Int[61],
    to_nativeint_exn = Base_Int[62],
    of_float_unchecked = Base_Int[63],
    num_bits = Base_Int[64],
    max_value = Base_Int[65],
    min_value = Base_Int[66],
    shift_right_logical = Base_Int[67],
    ceil_pow2 = Base_Int[68],
    floor_pow2 = Base_Int[69],
    ceil_log2 = Base_Int[70],
    floor_log2 = Base_Int[71],
    is_pow2 = Base_Int[72],
    clz = Base_Int[73],
    ctz = Base_Int[74],
    O = Base_Int[75],
    symbol$2 = Base_Int[76],
    lnot = Base_Int[77],
    abs = Base_Int[78],
    zero = Base_Int[79],
    symbol$3 = Base_Int[80],
    symbol$4 = Base_Int[81],
    symbol$5 = Base_Int[82],
    uniform = Splittable_random[8],
    log_uniform = Splittable_random[15][1],
    For_int =
      For_integer
       ([0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(b, a){return a <= b ? 1 : 0;},
         function(b, a){return b <= a ? 1 : 0;},
         function(b, a){return b === a ? 1 : 0;},
         function(b, a){return a < b ? 1 : 0;},
         function(b, a){return b < a ? 1 : 0;},
         function(b, a){return b !== a ? 1 : 0;},
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         compare_local,
         equal_local,
         invariant,
         Hex,
         Binary,
         of_string_opt,
         to_string_hum,
         zero,
         one,
         minus_one,
         function(b, a){return b + a | 0;},
         function(b, a){return b - a | 0;},
         caml_mul,
         symbol$2,
         function(a){return - a | 0;},
         function(a){return - a | 0;},
         symbol$4,
         symbol$3,
         caml_div,
         rem,
         symbol$5,
         function(b, a){return b & a;},
         function(b, a){return b | a;},
         function(b, a){return b ^ a;},
         lnot,
         function(b, a){return b << a;},
         function(b, a){return b >> a;},
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         of_float_unchecked,
         num_bits,
         max_value,
         min_value,
         function(b, a){return b >>> a | 0;},
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         floor_log2,
         is_pow2,
         clz,
         ctz,
         [0,
          function(b, a){return b + a | 0;},
          function(b, a){return b - a | 0;},
          caml_mul,
          caml_div,
          function(a){return - a | 0;},
          O[1],
          function(b, a){return a <= b ? 1 : 0;},
          function(b, a){return b <= a ? 1 : 0;},
          function(b, a){return b === a ? 1 : 0;},
          function(b, a){return a < b ? 1 : 0;},
          function(b, a){return b < a ? 1 : 0;},
          function(b, a){return b !== a ? 1 : 0;},
          O[3],
          function(a){return - a | 0;},
          O[4],
          O[5],
          O[6],
          O[7],
          function(b, a){return b & a;},
          function(b, a){return b | a;},
          function(b, a){return b ^ a;},
          O[2],
          function(b, a){return b << a;},
          function(b, a){return b >> a;},
          function(b, a){return b >>> a | 0;}],
         uniform,
         log_uniform]),
    int = For_int[8],
    int_uniform = For_int[7],
    int_inclusive = For_int[5],
    int_uniform_inclusive = For_int[2],
    int_log_inclusive = For_int[6],
    int_log_uniform_inclusive = For_int[3],
    int_geometric = For_int[1],
    t_sexp_grammar$0 = Base_Int32[2],
    of_float$0 = Base_Int32[3],
    to_float$0 = Base_Int32[4],
    of_int_exn$0 = Base_Int32[5],
    to_int_exn$0 = Base_Int32[6],
    hash_fold_t$0 = Base_Int32[7],
    hash$0 = Base_Int32[8],
    t_of_sexp$0 = Base_Int32[9],
    sexp_of_t$0 = Base_Int32[10],
    of_string$0 = Base_Int32[11],
    to_string$0 = Base_Int32[12],
    symbol$6 = Base_Int32[13],
    symbol$7 = Base_Int32[14],
    symbol$8 = Base_Int32[15],
    symbol$9 = Base_Int32[16],
    symbol$10 = Base_Int32[17],
    symbol$11 = Base_Int32[18],
    equal$0 = Base_Int32[19],
    compare$0 = Base_Int32[20],
    min$0 = Base_Int32[21],
    max$0 = Base_Int32[22],
    ascending$0 = Base_Int32[23],
    descending$0 = Base_Int32[24],
    between$0 = Base_Int32[25],
    clamp_exn$0 = Base_Int32[26],
    clamp$0 = Base_Int32[27],
    comparator$0 = Base_Int32[28],
    pp$0 = Base_Int32[29],
    hashable$0 = Base_Int32[30],
    is_positive$0 = Base_Int32[31],
    is_non_negative$0 = Base_Int32[32],
    is_negative$0 = Base_Int32[33],
    is_non_positive$0 = Base_Int32[34],
    sign$0 = Base_Int32[35],
    compare_local$0 = Base_Int32[36],
    equal_local$0 = Base_Int32[37],
    invariant$0 = Base_Int32[38],
    Hex$0 = Base_Int32[39],
    Binary$0 = Base_Int32[40],
    of_string_opt$0 = Base_Int32[41],
    to_string_hum$0 = Base_Int32[42],
    zero$0 = Base_Int32[43],
    one$0 = Base_Int32[44],
    minus_one$0 = Base_Int32[45],
    symbol$12 = Base_Int32[46],
    symbol$13 = Base_Int32[47],
    symbol$14 = Base_Int32[48],
    symbol$15 = Base_Int32[49],
    neg = Base_Int32[50],
    symbol$16 = Base_Int32[51],
    symbol$17 = Base_Int32[52],
    symbol$18 = Base_Int32[53],
    symbol$19 = Base_Int32[54],
    rem$0 = Base_Int32[55],
    symbol$20 = Base_Int32[56],
    land = Base_Int32[57],
    lor = Base_Int32[58],
    lxor = Base_Int32[59],
    lnot$0 = Base_Int32[60],
    lsl = Base_Int32[61],
    asr = Base_Int32[62],
    round$0 = Base_Int32[63],
    round_towards_zero$0 = Base_Int32[64],
    round_down$0 = Base_Int32[65],
    round_up$0 = Base_Int32[66],
    round_nearest$0 = Base_Int32[67],
    abs$0 = Base_Int32[68],
    succ$0 = Base_Int32[69],
    pred$0 = Base_Int32[70],
    pow$0 = Base_Int32[71],
    bit_and$0 = Base_Int32[72],
    bit_or$0 = Base_Int32[73],
    bit_xor$0 = Base_Int32[74],
    bit_not$0 = Base_Int32[75],
    popcount$0 = Base_Int32[76],
    shift_left$0 = Base_Int32[77],
    shift_right$0 = Base_Int32[78],
    decr$0 = Base_Int32[79],
    incr$0 = Base_Int32[80],
    of_int32_exn$0 = Base_Int32[81],
    to_int32_exn$0 = Base_Int32[82],
    of_int64_exn$0 = Base_Int32[83],
    to_int64$0 = Base_Int32[84],
    of_nativeint_exn$0 = Base_Int32[85],
    to_nativeint_exn$0 = Base_Int32[86],
    of_float_unchecked$0 = Base_Int32[87],
    num_bits$0 = Base_Int32[88],
    max_value$0 = Base_Int32[89],
    min_value$0 = Base_Int32[90],
    lsr = Base_Int32[91],
    shift_right_logical$0 = Base_Int32[92],
    ceil_pow2$0 = Base_Int32[93],
    floor_pow2$0 = Base_Int32[94],
    ceil_log2$0 = Base_Int32[95],
    floor_log2$0 = Base_Int32[96],
    is_pow2$0 = Base_Int32[97],
    clz$0 = Base_Int32[98],
    ctz$0 = Base_Int32[99],
    O$0 = Base_Int32[100],
    uniform$0 = Splittable_random[9],
    log_uniform$0 = Splittable_random[15][2],
    For_int32 =
      For_integer
       ([0,
         t_sexp_grammar$0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         of_string$0,
         to_string$0,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         symbol$11,
         equal$0,
         compare$0,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$0,
         pp$0,
         hashable$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         compare_local$0,
         equal_local$0,
         invariant$0,
         Hex$0,
         Binary$0,
         of_string_opt$0,
         to_string_hum$0,
         zero$0,
         one$0,
         minus_one$0,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         neg,
         symbol$16,
         symbol$17,
         symbol$18,
         symbol$19,
         rem$0,
         symbol$20,
         land,
         lor,
         lxor,
         lnot$0,
         lsl,
         asr,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         succ$0,
         pred$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$0,
         shift_left$0,
         shift_right$0,
         decr$0,
         incr$0,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$0,
         max_value$0,
         min_value$0,
         lsr,
         shift_right_logical$0,
         ceil_pow2$0,
         floor_pow2$0,
         ceil_log2$0,
         floor_log2$0,
         is_pow2$0,
         clz$0,
         ctz$0,
         O$0,
         uniform$0,
         log_uniform$0]),
    int32 = For_int32[8],
    int32_uniform = For_int32[7],
    int32_inclusive = For_int32[5],
    int32_uniform_inclusive = For_int32[2],
    int32_log_inclusive = For_int32[6],
    int32_log_uniform_inclusive = For_int32[3],
    int32_geometric = For_int32[1],
    t_sexp_grammar$1 = Base_Int63[1],
    of_float$1 = Base_Int63[2],
    to_float$1 = Base_Int63[3],
    of_int_exn$1 = Base_Int63[4],
    to_int_exn$1 = Base_Int63[5],
    hash_fold_t$1 = Base_Int63[6],
    hash$1 = Base_Int63[7],
    t_of_sexp$1 = Base_Int63[8],
    sexp_of_t$1 = Base_Int63[9],
    of_string$1 = Base_Int63[10],
    to_string$1 = Base_Int63[11],
    symbol$21 = Base_Int63[12],
    symbol$22 = Base_Int63[13],
    symbol$23 = Base_Int63[14],
    symbol$24 = Base_Int63[15],
    symbol$25 = Base_Int63[16],
    symbol$26 = Base_Int63[17],
    equal$1 = Base_Int63[18],
    compare$1 = Base_Int63[19],
    min$1 = Base_Int63[20],
    max$1 = Base_Int63[21],
    ascending$1 = Base_Int63[22],
    descending$1 = Base_Int63[23],
    between$1 = Base_Int63[24],
    clamp_exn$1 = Base_Int63[25],
    clamp$1 = Base_Int63[26],
    comparator$1 = Base_Int63[27],
    pp$1 = Base_Int63[28],
    hashable$1 = Base_Int63[29],
    is_positive$1 = Base_Int63[30],
    is_non_negative$1 = Base_Int63[31],
    is_negative$1 = Base_Int63[32],
    is_non_positive$1 = Base_Int63[33],
    sign$1 = Base_Int63[34],
    compare_local$1 = Base_Int63[35],
    equal_local$1 = Base_Int63[36],
    invariant$1 = Base_Int63[37],
    Hex$1 = Base_Int63[38],
    Binary$1 = Base_Int63[39],
    of_string_opt$1 = Base_Int63[40],
    to_string_hum$1 = Base_Int63[41],
    zero$1 = Base_Int63[42],
    one$1 = Base_Int63[43],
    minus_one$1 = Base_Int63[44],
    symbol$27 = Base_Int63[45],
    symbol$28 = Base_Int63[46],
    symbol$29 = Base_Int63[47],
    symbol$30 = Base_Int63[48],
    neg$0 = Base_Int63[49],
    symbol$31 = Base_Int63[50],
    symbol$32 = Base_Int63[51],
    symbol$33 = Base_Int63[52],
    symbol$34 = Base_Int63[53],
    rem$1 = Base_Int63[54],
    symbol$35 = Base_Int63[55],
    land$0 = Base_Int63[56],
    lor$0 = Base_Int63[57],
    lxor$0 = Base_Int63[58],
    lnot$1 = Base_Int63[59],
    lsl$0 = Base_Int63[60],
    asr$0 = Base_Int63[61],
    round$1 = Base_Int63[62],
    round_towards_zero$1 = Base_Int63[63],
    round_down$1 = Base_Int63[64],
    round_up$1 = Base_Int63[65],
    round_nearest$1 = Base_Int63[66],
    abs$1 = Base_Int63[67],
    succ$1 = Base_Int63[68],
    pred$1 = Base_Int63[69],
    pow$1 = Base_Int63[70],
    bit_and$1 = Base_Int63[71],
    bit_or$1 = Base_Int63[72],
    bit_xor$1 = Base_Int63[73],
    bit_not$1 = Base_Int63[74],
    popcount$1 = Base_Int63[75],
    shift_left$1 = Base_Int63[76],
    shift_right$1 = Base_Int63[77],
    decr$1 = Base_Int63[78],
    incr$1 = Base_Int63[79],
    of_int32_exn$1 = Base_Int63[80],
    to_int32_exn$1 = Base_Int63[81],
    of_int64_exn$1 = Base_Int63[82],
    to_int64$1 = Base_Int63[83],
    of_nativeint_exn$1 = Base_Int63[84],
    to_nativeint_exn$1 = Base_Int63[85],
    of_float_unchecked$1 = Base_Int63[86],
    num_bits$1 = Base_Int63[87],
    max_value$1 = Base_Int63[88],
    min_value$1 = Base_Int63[89],
    lsr$0 = Base_Int63[90],
    shift_right_logical$1 = Base_Int63[91],
    ceil_pow2$1 = Base_Int63[92],
    floor_pow2$1 = Base_Int63[93],
    ceil_log2$1 = Base_Int63[94],
    is_pow2$1 = Base_Int63[95],
    clz$1 = Base_Int63[96],
    ctz$1 = Base_Int63[97],
    O$1 = Base_Int63[98],
    floor_log2$1 = Base_Int63[117],
    uniform$1 = Splittable_random[10],
    log_uniform$1 = Splittable_random[15][3],
    For_int63 =
      For_integer
       ([0,
         t_sexp_grammar$1,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$1,
         sexp_of_t$1,
         of_string$1,
         to_string$1,
         symbol$21,
         symbol$22,
         symbol$23,
         symbol$24,
         symbol$25,
         symbol$26,
         equal$1,
         compare$1,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         pp$1,
         hashable$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         compare_local$1,
         equal_local$1,
         invariant$1,
         Hex$1,
         Binary$1,
         of_string_opt$1,
         to_string_hum$1,
         zero$1,
         one$1,
         minus_one$1,
         symbol$27,
         symbol$28,
         symbol$29,
         symbol$30,
         neg$0,
         symbol$31,
         symbol$32,
         symbol$33,
         symbol$34,
         rem$1,
         symbol$35,
         land$0,
         lor$0,
         lxor$0,
         lnot$1,
         lsl$0,
         asr$0,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         succ$1,
         pred$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$1,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$1,
         max_value$1,
         min_value$1,
         lsr$0,
         shift_right_logical$1,
         ceil_pow2$1,
         floor_pow2$1,
         ceil_log2$1,
         floor_log2$1,
         is_pow2$1,
         clz$1,
         ctz$1,
         O$1,
         uniform$1,
         log_uniform$1]),
    int63 = For_int63[8],
    int63_uniform = For_int63[7],
    int63_inclusive = For_int63[5],
    int63_uniform_inclusive = For_int63[2],
    int63_log_inclusive = For_int63[6],
    int63_log_uniform_inclusive = For_int63[3],
    int63_geometric = For_int63[1],
    t_sexp_grammar$2 = Base_Int64[2],
    of_float$2 = Base_Int64[3],
    to_float$2 = Base_Int64[4],
    of_int_exn$2 = Base_Int64[5],
    to_int_exn$2 = Base_Int64[6],
    hash_fold_t$2 = Base_Int64[7],
    hash$2 = Base_Int64[8],
    t_of_sexp$2 = Base_Int64[9],
    sexp_of_t$2 = Base_Int64[10],
    of_string$2 = Base_Int64[11],
    to_string$2 = Base_Int64[12],
    equal$2 = Base_Int64[13],
    compare$2 = Base_Int64[14],
    min$2 = Base_Int64[15],
    max$2 = Base_Int64[16],
    ascending$2 = Base_Int64[17],
    descending$2 = Base_Int64[18],
    between$2 = Base_Int64[19],
    clamp_exn$2 = Base_Int64[20],
    clamp$2 = Base_Int64[21],
    comparator$2 = Base_Int64[22],
    pp$2 = Base_Int64[23],
    hashable$2 = Base_Int64[24],
    is_positive$2 = Base_Int64[25],
    is_non_negative$2 = Base_Int64[26],
    is_negative$2 = Base_Int64[27],
    is_non_positive$2 = Base_Int64[28],
    sign$2 = Base_Int64[29],
    compare_local$2 = Base_Int64[30],
    equal_local$2 = Base_Int64[31],
    invariant$2 = Base_Int64[32],
    Hex$2 = Base_Int64[33],
    Binary$2 = Base_Int64[34],
    of_string_opt$2 = Base_Int64[35],
    to_string_hum$2 = Base_Int64[36],
    one$2 = Base_Int64[37],
    minus_one$2 = Base_Int64[38],
    rem$2 = Base_Int64[39],
    round$2 = Base_Int64[40],
    round_towards_zero$2 = Base_Int64[41],
    round_down$2 = Base_Int64[42],
    round_up$2 = Base_Int64[43],
    round_nearest$2 = Base_Int64[44],
    succ$2 = Base_Int64[45],
    pred$2 = Base_Int64[46],
    pow$2 = Base_Int64[47],
    bit_and$2 = Base_Int64[48],
    bit_or$2 = Base_Int64[49],
    bit_xor$2 = Base_Int64[50],
    bit_not$2 = Base_Int64[51],
    popcount$2 = Base_Int64[52],
    shift_left$2 = Base_Int64[53],
    shift_right$2 = Base_Int64[54],
    decr$2 = Base_Int64[55],
    incr$2 = Base_Int64[56],
    of_int32_exn$2 = Base_Int64[57],
    to_int32_exn$2 = Base_Int64[58],
    of_int64_exn$2 = Base_Int64[59],
    to_int64$2 = Base_Int64[60],
    of_nativeint_exn$2 = Base_Int64[61],
    to_nativeint_exn$2 = Base_Int64[62],
    of_float_unchecked$2 = Base_Int64[63],
    num_bits$2 = Base_Int64[64],
    max_value$2 = Base_Int64[65],
    min_value$2 = Base_Int64[66],
    shift_right_logical$2 = Base_Int64[67],
    ceil_pow2$2 = Base_Int64[68],
    floor_pow2$2 = Base_Int64[69],
    ceil_log2$2 = Base_Int64[70],
    floor_log2$2 = Base_Int64[71],
    is_pow2$2 = Base_Int64[72],
    clz$2 = Base_Int64[73],
    ctz$2 = Base_Int64[74],
    O$2 = Base_Int64[75],
    symbol$36 = Base_Int64[76],
    lnot$2 = Base_Int64[77],
    abs$2 = Base_Int64[78],
    zero$2 = Base_Int64[79],
    symbol$37 = Base_Int64[80],
    symbol$38 = Base_Int64[81],
    symbol$39 = Base_Int64[82],
    uniform$2 = Splittable_random[11],
    log_uniform$2 = Splittable_random[15][4],
    For_int64 =
      For_integer
       ([0,
         t_sexp_grammar$2,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$2,
         sexp_of_t$2,
         of_string$2,
         to_string$2,
         caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         caml_notequal,
         equal$2,
         compare$2,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$2,
         pp$2,
         hashable$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         compare_local$2,
         equal_local$2,
         invariant$2,
         Hex$2,
         Binary$2,
         of_string_opt$2,
         to_string_hum$2,
         zero$2,
         one$2,
         minus_one$2,
         caml_int64_add,
         caml_int64_sub,
         caml_int64_mul,
         symbol$36,
         caml_int64_neg,
         caml_int64_neg,
         symbol$38,
         symbol$37,
         caml_int64_div,
         rem$2,
         symbol$39,
         caml_int64_and,
         caml_int64_or,
         caml_int64_xor,
         lnot$2,
         caml_int64_shift_left,
         caml_int64_shift_right,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         succ$2,
         pred$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$2,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$2,
         max_value$2,
         min_value$2,
         caml_int64_shift_right_unsigne,
         shift_right_logical$2,
         ceil_pow2$2,
         floor_pow2$2,
         ceil_log2$2,
         floor_log2$2,
         is_pow2$2,
         clz$2,
         ctz$2,
         [0,
          caml_int64_add,
          caml_int64_sub,
          caml_int64_mul,
          caml_int64_div,
          caml_int64_neg,
          O$2[1],
          caml_greaterequal,
          caml_lessequal,
          caml_equal,
          caml_greaterthan,
          caml_lessthan,
          caml_notequal,
          O$2[3],
          caml_int64_neg,
          O$2[4],
          O$2[5],
          O$2[6],
          O$2[7],
          caml_int64_and,
          caml_int64_or,
          caml_int64_xor,
          O$2[2],
          caml_int64_shift_left,
          caml_int64_shift_right,
          caml_int64_shift_right_unsigne],
         uniform$2,
         log_uniform$2]),
    int64 = For_int64[8],
    int64_uniform = For_int64[7],
    int64_inclusive = For_int64[5],
    int64_uniform_inclusive = For_int64[2],
    int64_log_inclusive = For_int64[6],
    int64_log_uniform_inclusive = For_int64[3],
    int64_geometric = For_int64[1],
    t_sexp_grammar$3 = Base_Nativeint[2],
    of_float$3 = Base_Nativeint[3],
    to_float$3 = Base_Nativeint[4],
    of_int_exn$3 = Base_Nativeint[5],
    to_int_exn$3 = Base_Nativeint[6],
    hash_fold_t$3 = Base_Nativeint[7],
    hash$3 = Base_Nativeint[8],
    t_of_sexp$3 = Base_Nativeint[9],
    sexp_of_t$3 = Base_Nativeint[10],
    of_string$3 = Base_Nativeint[11],
    to_string$3 = Base_Nativeint[12],
    symbol$40 = Base_Nativeint[13],
    symbol$41 = Base_Nativeint[14],
    symbol$42 = Base_Nativeint[15],
    symbol$43 = Base_Nativeint[16],
    symbol$44 = Base_Nativeint[17],
    symbol$45 = Base_Nativeint[18],
    equal$3 = Base_Nativeint[19],
    compare$3 = Base_Nativeint[20],
    min$3 = Base_Nativeint[21],
    max$3 = Base_Nativeint[22],
    ascending$3 = Base_Nativeint[23],
    descending$3 = Base_Nativeint[24],
    between$3 = Base_Nativeint[25],
    clamp_exn$3 = Base_Nativeint[26],
    clamp$3 = Base_Nativeint[27],
    comparator$3 = Base_Nativeint[28],
    pp$3 = Base_Nativeint[29],
    hashable$3 = Base_Nativeint[30],
    is_positive$3 = Base_Nativeint[31],
    is_non_negative$3 = Base_Nativeint[32],
    is_negative$3 = Base_Nativeint[33],
    is_non_positive$3 = Base_Nativeint[34],
    sign$3 = Base_Nativeint[35],
    compare_local$3 = Base_Nativeint[36],
    equal_local$3 = Base_Nativeint[37],
    invariant$3 = Base_Nativeint[38],
    Hex$3 = Base_Nativeint[39],
    Binary$3 = Base_Nativeint[40],
    of_string_opt$3 = Base_Nativeint[41],
    to_string_hum$3 = Base_Nativeint[42],
    zero$3 = Base_Nativeint[43],
    one$3 = Base_Nativeint[44],
    minus_one$3 = Base_Nativeint[45],
    symbol$46 = Base_Nativeint[46],
    symbol$47 = Base_Nativeint[47],
    symbol$48 = Base_Nativeint[48],
    symbol$49 = Base_Nativeint[49],
    neg$1 = Base_Nativeint[50],
    symbol$50 = Base_Nativeint[51],
    symbol$51 = Base_Nativeint[52],
    symbol$52 = Base_Nativeint[53],
    symbol$53 = Base_Nativeint[54],
    rem$3 = Base_Nativeint[55],
    symbol$54 = Base_Nativeint[56],
    land$1 = Base_Nativeint[57],
    lor$1 = Base_Nativeint[58],
    lxor$1 = Base_Nativeint[59],
    lnot$3 = Base_Nativeint[60],
    lsl$1 = Base_Nativeint[61],
    asr$1 = Base_Nativeint[62],
    round$3 = Base_Nativeint[63],
    round_towards_zero$3 = Base_Nativeint[64],
    round_down$3 = Base_Nativeint[65],
    round_up$3 = Base_Nativeint[66],
    round_nearest$3 = Base_Nativeint[67],
    abs$3 = Base_Nativeint[68],
    succ$3 = Base_Nativeint[69],
    pred$3 = Base_Nativeint[70],
    pow$3 = Base_Nativeint[71],
    bit_and$3 = Base_Nativeint[72],
    bit_or$3 = Base_Nativeint[73],
    bit_xor$3 = Base_Nativeint[74],
    bit_not$3 = Base_Nativeint[75],
    popcount$3 = Base_Nativeint[76],
    shift_left$3 = Base_Nativeint[77],
    shift_right$3 = Base_Nativeint[78],
    decr$3 = Base_Nativeint[79],
    incr$3 = Base_Nativeint[80],
    of_int32_exn$3 = Base_Nativeint[81],
    to_int32_exn$3 = Base_Nativeint[82],
    of_int64_exn$3 = Base_Nativeint[83],
    to_int64$3 = Base_Nativeint[84],
    of_nativeint_exn$3 = Base_Nativeint[85],
    to_nativeint_exn$3 = Base_Nativeint[86],
    of_float_unchecked$3 = Base_Nativeint[87],
    num_bits$3 = Base_Nativeint[88],
    max_value$3 = Base_Nativeint[89],
    min_value$3 = Base_Nativeint[90],
    lsr$1 = Base_Nativeint[91],
    shift_right_logical$3 = Base_Nativeint[92],
    ceil_pow2$3 = Base_Nativeint[93],
    floor_pow2$3 = Base_Nativeint[94],
    ceil_log2$3 = Base_Nativeint[95],
    floor_log2$3 = Base_Nativeint[96],
    is_pow2$3 = Base_Nativeint[97],
    clz$3 = Base_Nativeint[98],
    ctz$3 = Base_Nativeint[99],
    O$3 = Base_Nativeint[100],
    uniform$3 = Splittable_random[12],
    log_uniform$3 = Splittable_random[15][5],
    For_nativeint =
      For_integer
       ([0,
         t_sexp_grammar$3,
         of_float$3,
         to_float$3,
         of_int_exn$3,
         to_int_exn$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$3,
         sexp_of_t$3,
         of_string$3,
         to_string$3,
         symbol$40,
         symbol$41,
         symbol$42,
         symbol$43,
         symbol$44,
         symbol$45,
         equal$3,
         compare$3,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$3,
         pp$3,
         hashable$3,
         is_positive$3,
         is_non_negative$3,
         is_negative$3,
         is_non_positive$3,
         sign$3,
         compare_local$3,
         equal_local$3,
         invariant$3,
         Hex$3,
         Binary$3,
         of_string_opt$3,
         to_string_hum$3,
         zero$3,
         one$3,
         minus_one$3,
         symbol$46,
         symbol$47,
         symbol$48,
         symbol$49,
         neg$1,
         symbol$50,
         symbol$51,
         symbol$52,
         symbol$53,
         rem$3,
         symbol$54,
         land$1,
         lor$1,
         lxor$1,
         lnot$3,
         lsl$1,
         asr$1,
         round$3,
         round_towards_zero$3,
         round_down$3,
         round_up$3,
         round_nearest$3,
         abs$3,
         succ$3,
         pred$3,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$3,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$3,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$3,
         max_value$3,
         min_value$3,
         lsr$1,
         shift_right_logical$3,
         ceil_pow2$3,
         floor_pow2$3,
         ceil_log2$3,
         floor_log2$3,
         is_pow2$3,
         clz$3,
         ctz$3,
         O$3,
         uniform$3,
         log_uniform$3]),
    nativeint = For_nativeint[8],
    nativeint_uniform = For_nativeint[7],
    nativeint_inclusive = For_nativeint[5],
    nativeint_uniform_inclusive = For_nativeint[2],
    nativeint_log_inclusive = For_nativeint[6],
    nativeint_log_uniform_inclusiv = For_nativeint[3],
    nativeint_geometric = For_nativeint[1],
    float_zero_exponent = Base_Float[117].call(null, 0.),
    float_zero_mantissa = Base_Float[118].call(null, 0.),
    float_max_positive_subnormal_v =
      Base_Float[47].call(null, 759637122, Base_Float[43]),
    float_subnormal_exponent = Base_Float[117].call(null, Base_Float[42]),
    float_min_subnormal_mantissa = Base_Float[118].call(null, Base_Float[42]),
    float_max_subnormal_mantissa =
      Base_Float[118].call(null, float_max_positive_subnormal_v),
    float_max_positive_normal_valu = Base_Float[41],
    float_min_normal_exponent = Base_Float[117].call(null, Base_Float[43]),
    float_max_normal_exponent =
      Base_Float[117].call(null, float_max_positive_normal_valu),
    float_max_normal_mantissa =
      Base_Float[118].call(null, float_max_positive_normal_valu),
    float_inf_exponent = Base_Float[117].call(null, Base_Float[29]),
    float_inf_mantissa = Base_Float[118].call(null, Base_Float[29]),
    float_nan_exponent = Base_Float[117].call(null, Base_Float[28]),
    float_min_nan_mantissa = Base_Int63[68].call(null, float_inf_mantissa),
    q = For_int[2].call(null, 0, 52),
    float_normal_mantissa =
      caml_call2
       (For_monad[11][4][2],
        q,
        function(num_bits){
         var
          a = Base_Int63[76].call(null, Base_Int63[43], num_bits),
          b = Base_Int63[69].call(null, a),
          c = For_int63[5].call(null, Base_Int63[42], b);
         return caml_call2
                 (For_monad[11][4][3],
                  c,
                  function(bits){
                   return Base_Int63[76].call(null, bits, 52 - num_bits | 0);
                  });
        }),
    lower_bound = Base_Float[117].call(null, 1.),
    r = For_int[6].call(null, 0, float_max_normal_exponent - lower_bound | 0),
    t =
      [0,
       caml_call2
        (For_monad[11][4][3],
         r,
         function(offset){return lower_bound + offset | 0;}),
       0],
    s = For_int[6].call(null, 0, lower_bound - float_min_normal_exponent | 0),
    float_exponent =
      union
       ([0,
         caml_call2
          (For_monad[11][4][3],
           s,
           function(offset){return lower_bound - offset | 0;}),
         t]),
    float_zero =
      caml_call2
       (For_monad[11][4][3],
        bool,
        function(negative){
         return Base_Float[115].call
                 (null, negative, float_zero_exponent, float_zero_mantissa);
        }),
    let_syntax_012 = caml_call1(For_monad[11][1], float_subnormal_exponent),
    let_syntax_013 =
      For_int63[6].call
       (null, float_min_subnormal_mantissa, float_max_subnormal_mantissa),
    u = caml_call2(For_monad[11][4][4], let_syntax_012, let_syntax_013),
    v = caml_call2(For_monad[11][4][4], bool, u),
    float_subnormal =
      caml_call2
       (For_monad[11][4][3],
        v,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return Base_Float[115].call(null, negative, exponent, mantissa);
        }),
    w = caml_call2(For_monad[11][4][4], float_exponent, float_normal_mantissa),
    x = caml_call2(For_monad[11][4][4], bool, w),
    float_normal =
      caml_call2
       (For_monad[11][4][3],
        x,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return Base_Float[115].call(null, negative, exponent, mantissa);
        }),
    float_infinite =
      caml_call2
       (For_monad[11][4][3],
        bool,
        function(negative){
         return Base_Float[115].call
                 (null, negative, float_inf_exponent, float_inf_mantissa);
        }),
    let_syntax_021 = caml_call1(For_monad[11][1], float_nan_exponent),
    let_syntax_022 =
      For_int63[5].call
       (null, float_min_nan_mantissa, float_max_normal_mantissa),
    y = caml_call2(For_monad[11][4][4], let_syntax_021, let_syntax_022),
    z = caml_call2(For_monad[11][4][4], bool, y),
    float_nan =
      caml_call2
       (For_monad[11][4][3],
        z,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return Base_Float[115].call(null, negative, exponent, mantissa);
        });
   function float_of_class(c){
    switch(c){
      case 0:
       return float_infinite;
      case 1:
       return float_nan;
      case 2:
       return float_normal;
      case 3:
       return float_subnormal;
      default: return float_zero;
    }
   }
   function float_matching_classes(filter){
    return weighted_union
            (Base_List[13].call
              (null,
               Base_Float[109][3],
               function(c){
                if(! caml_call1(filter, c)) return 0;
                var b = float_of_class(c);
                switch(c){
                  case 2:
                   var a = 100.; break;
                  case 3:
                   var a = 10.; break;
                  default: var a = 1.;
                }
                return [0, [0, a, b]];
               }));
   }
   var
    float_finite =
      float_matching_classes(function(param){return 2 <= param ? 1 : 0;}),
    float_without_nan =
      float_matching_classes(function(param){return 1 === param ? 0 : 1;}),
    float = float_matching_classes(function(param){return 1;}),
    float_finite_non_zero =
      float_matching_classes
       (function(param){return 1 < param - 2 >>> 0 ? 0 : 1;}),
    float_strictly_positive =
      caml_call2
       (For_monad[11][4][3],
        float_finite_non_zero,
        function(t){return Base_Float[98].call(null, t);}),
    float_strictly_negative =
      caml_call2
       (For_monad[11][4][3],
        float_finite_non_zero,
        function(t){
         var a = Base_Float[98].call(null, t);
         return caml_call1(Base[240], a);
        }),
    float_positive_or_zero =
      caml_call2
       (For_monad[11][4][3],
        float_finite,
        function(t){return Base_Float[98].call(null, t);}),
    float_negative_or_zero =
      caml_call2
       (For_monad[11][4][3],
        float_finite,
        function(t){
         var a = Base_Float[98].call(null, t);
         return caml_call1(Base[240], a);
        }),
    A = [0, cst_upper_bound],
    B = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_bo =
      "Float.uniform_exclusive: bounds are not finite",
    C = [0, cst_upper_bound],
    D = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_re =
      "Float.uniform_exclusive: requested range is empty";
   function float_uniform_exclusive(lower_bound, upper_bound){
    var
     a = 1 - Base_Float[80].call(null, lower_bound),
     b = a || 1 - Base_Float[80].call(null, upper_bound);
    if(b){
     var
      c = [0, [1, [0, A, [0, Base[126].call(null, upper_bound), 0]]], 0],
      d = [0, [1, [0, B, [0, Base[126].call(null, lower_bound), 0]]], c],
      e =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Float_uniform_exclusive_bo),
          d]];
     Base[246].call(null, e);
    }
    var
     lower_inclusive = Base_Float[47].call(null, 19067, lower_bound),
     upper_inclusive = Base_Float[47].call(null, 759637122, upper_bound);
    if(caml_call2(Base_Float[99][11], lower_inclusive, upper_inclusive)){
     var
      f = [0, [1, [0, C, [0, Base[126].call(null, upper_bound), 0]]], 0],
      g = [0, [1, [0, D, [0, Base[126].call(null, lower_bound), 0]]], f],
      h =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Float_uniform_exclusive_re),
          g]];
     Base[246].call(null, h);
    }
    return create
            (function(param, random){
              return Splittable_random[13].call
                      (null, random, lower_inclusive, upper_inclusive);
             });
   }
   function float_inclusive(lower_bound, upper_bound){
    if(lower_bound === upper_bound)
     return caml_call1(For_monad[11][1], lower_bound);
    if(Base_Float[47].call(null, 19067, lower_bound) === upper_bound){
     var a = [0, caml_call1(For_monad[11][1], upper_bound), 0];
     return union([0, caml_call1(For_monad[11][1], lower_bound), a]);
    }
    var
     b = [0, [0, 0.9, float_uniform_exclusive(lower_bound, upper_bound)], 0],
     c = [0, [0, 0.05, caml_call1(For_monad[11][1], upper_bound)], b];
    return weighted_union
            ([0, [0, 0.05, caml_call1(For_monad[11][1], lower_bound)], c]);
   }
   function string_with_length_of(char_gen, length){
    var a = list_with_length(char_gen, length);
    return map(a, Base_String[137]);
   }
   function string_of(char_gen){
    return bind
            (small_positive_or_zero_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   function string_non_empty_of(char_gen){
    return bind
            (small_strictly_positive_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   var string = string_of(char), string_non_empty = string_non_empty_of(char);
   function string_with_length(length){
    return string_with_length_of(char, length);
   }
   function edit_insert(string){
    var a = int_uniform_inclusive(0, caml_ml_string_length(string));
    return caml_call2
            (For_monad[11][4][2],
             a,
             function(pos){
              var a = int_geometric(1, 0.5);
              return caml_call2
                      (For_monad[11][4][2],
                       a,
                       function(length){
                        var a = string_with_length_of(char, length);
                        return caml_call2
                                (For_monad[11][4][2],
                                 a,
                                 function(str){
                                  var
                                   a =
                                     [0, str, [0, Base_String[123].call(null, string, pos), 0]],
                                   b = [0, Base_String[121].call(null, string, pos), a],
                                   c = Base_String[68].call(null, 0, b);
                                  return caml_call1(For_monad[11][1], c);
                                 });
                       });
             });
   }
   function edit(string, n_times){
    if(0 >= n_times) return caml_call1(For_monad[11][1], string);
    function h(string){return edit(string, n_times - 1 | 0);}
    if(Base_String[14].call(null, string))
     var a = edit_insert(string);
    else
     var
      d = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      e =
        [0,
         caml_call2
          (For_monad[11][4][2],
           d,
           function(len){
            var
             a =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - len | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     a,
                     function(pos){
                      var
                       a = [0, Base_String[123].call(null, string, pos), 0],
                       b =
                         [0, Base_String[121].call(null, string, pos + len | 0), a],
                       c = Base_String[68].call(null, 0, b);
                      return caml_call1(For_monad[11][1], c);
                     });
           }),
         0],
      c = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      f =
        [0,
         caml_call2
          (For_monad[11][4][2],
           c,
           function(length){
            var
             a =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - length | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     a,
                     function(pos){
                      var a = string_with_length_of(char, length);
                      return caml_call2
                              (For_monad[11][4][2],
                               a,
                               function(str){
                                var
                                 a =
                                   [0,
                                    str,
                                    [0,
                                     Base_String[123].call(null, string, pos + length | 0),
                                     0]],
                                 b = [0, Base_String[121].call(null, string, pos), a],
                                 c = Base_String[68].call(null, 0, b);
                                return caml_call1(For_monad[11][1], c);
                               });
                     });
           }),
         e],
      b = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      g =
        [0,
         caml_call2
          (For_monad[11][4][2],
           b,
           function(len){
            var
             a =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - len | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     a,
                     function(pos){
                      var
                       a =
                         [0, Base_String[123].call(null, string, pos + len | 0), 0],
                       b = [0, Base_String[121].call(null, string, pos), a],
                       c = Base_String[68].call(null, 0, b);
                      return caml_call1(For_monad[11][1], c);
                     });
           }),
         f],
      a = union([0, edit_insert(string), g]);
    return caml_call2(For_monad[11][4][2], a, h);
   }
   function string_like(string){
    var a = int_geometric(0, 0.5);
    return caml_call2
            (For_monad[11][4][2],
             a,
             function(n_times){return edit(string, n_times);});
   }
   var bytes = map(string, Base_Bytes[28]);
   function sexp_of(atom){
    return fixed_point
            (function(self){
              return caml_call2
                      (For_monad[11][4][2],
                       size,
                       function(size){
                        var a = For_int[3].call(null, 0, size + 1 | 0);
                        return caml_call2
                                (For_monad[11][4][2],
                                 a,
                                 function(param){
                                  if(0 === param)
                                   return caml_call2
                                           (For_monad[11][4][3],
                                            atom,
                                            function(atom){return [0, atom];});
                                  var a = list(self);
                                  return caml_call2
                                          (For_monad[11][4][3], a, function(list){return [1, list];});
                                 });
                       });
             });
   }
   var sexp = sexp_of(string);
   function map_tree_using_comparator(comparator, key_gen, data_gen){
    var a = list(key_gen);
    return caml_call2
            (For_monad[11][4][2],
             a,
             function(keys){
              var
               keys$0 = Base_List[126].call(null, keys, comparator[1]),
               a =
                 list_with_length(data_gen, Base_List[45].call(null, keys$0));
              return caml_call2
                      (For_monad[11][4][2],
                       a,
                       function(data){
                        var
                         a = Base_List[110].call(null, keys$0, data),
                         b = caml_call2(Base_Map[118][3][13], comparator, a);
                        return caml_call1(For_monad[11][1], b);
                       });
             });
   }
   function set_tree_using_comparator(comparator, elt_gen){
    var a = caml_call1(Base_Set[75][3][56], comparator);
    return map(list(elt_gen), a);
   }
   function map_t_m(m, key_gen, data_gen){
    var
     comparator = m[1],
     a = map_tree_using_comparator(comparator, key_gen, data_gen);
    return map(a, caml_call1(Base_Map[118][33], comparator));
   }
   function set_t_m(m, elt_gen){
    var comparator = m[1], a = set_tree_using_comparator(comparator, elt_gen);
    return map(a, caml_call1(Base_Set[75][66], comparator));
   }
   function bigarray1(t, kind, layout, length){
    function b(elts){
     var
      elts$0 = Base_Array[9].call(null, elts),
      dim = elts$0.length - 1,
      offset = Base_quickcheck_Bigarray_helpe[1][1].call(null, layout);
     return caml_call4
             (Base_quickcheck_Bigarray_helpe[2][2],
              kind,
              layout,
              dim,
              function(i){
               var a = i - offset | 0;
               return caml_check_bound(elts$0, a)[a + 1];
              });
    }
    if(length)
     var length$0 = length[1], a = list_with_length(t, length$0);
    else
     var a = list(t);
    return caml_call2(For_monad[11][4][3], a, b);
   }
   var
    a = 0,
    b = 12,
    c = 1,
    d = 0,
    e = 1,
    f = 1,
    bigstring = bigarray1(char, b, a, 0),
    float32_vec = bigarray1(float, d, c, 0),
    float64_vec = bigarray1(float, f, e, 0),
    E = [0, 0, 0];
   function bigstring_with_length(length){
    return bigarray1(char, b, a, [0, length]);
   }
   function float32_vec_with_length(length){
    return bigarray1(float, d, c, [0, length]);
   }
   function float64_vec_with_length(length){
    return bigarray1(float, f, e, [0, length]);
   }
   var
    bigarray2_dim =
      caml_call2
       (For_monad[11][4][2],
        size,
        function(max_total_size){
         if(0 === max_total_size) return caml_call1(For_monad[11][1], E);
         var a = int_log_uniform_inclusive(1, max_total_size);
         return caml_call2
                 (For_monad[11][4][2],
                  a,
                  function(a){
                   var
                    max_b = caml_div(max_total_size, a),
                    b = int_log_uniform_inclusive(0, max_b),
                    c =
                      caml_call2
                       (For_monad[11][4][3],
                        b,
                        function(b_weighted_low){return max_b - b_weighted_low | 0;});
                   return caml_call2
                           (For_monad[11][4][2],
                            c,
                            function(b){
                             return caml_call2
                                     (For_monad[11][4][3],
                                      bool,
                                      function(param){return param ? [0, a, b] : [0, b, a];});
                            });
                  });
        });
   function bigarray2(t, kind, layout){
    return caml_call2
            (For_monad[11][4][2],
             bigarray2_dim,
             function(param){
              var
               dim2 = param[2],
               dim1 = param[1],
               a = list_with_length(list_with_length(t, dim2), dim1);
              return caml_call2
                      (For_monad[11][4][3],
                       a,
                       function(elts){
                        var
                         elts$0 = Base_Array[85].call(null, elts, Base_Array[9]),
                         offset =
                           Base_quickcheck_Bigarray_helpe[1][1].call(null, layout);
                        return caml_call5
                                (Base_quickcheck_Bigarray_helpe[3][2],
                                 kind,
                                 layout,
                                 dim1,
                                 dim2,
                                 function(i, j){
                                  var a = j - offset | 0, b = i - offset | 0;
                                  return caml_check_bound
                                           (caml_check_bound(elts$0, b)[b + 1], a)
                                          [a + 1];
                                 });
                       });
             });
   }
   var
    float32_mat = bigarray2(float, 0, 1),
    float64_mat = bigarray2(float, 1, 1);
   function coverage(Cmp, sample){
    var a = Base_Map[6].call(null, Cmp);
    return Base_Sequence[11].call
            (null,
             sample,
             a,
             function(counts, value){
              return Base_Map[41].call
                      (null,
                       counts,
                       value,
                       function(param){
                        if(! param) return 1;
                        var prev = param[1];
                        return prev + 1 | 0;
                       });
             });
   }
   function monitor(t, f){
    return map(t, function(value){caml_call1(f, value); return value;});
   }
   var
    Debug = [0, coverage, monitor],
    Base_quickcheck_Generator =
      [0,
       unit,
       bool,
       char,
       string,
       bytes,
       int,
       int32,
       int63,
       int64,
       nativeint,
       float,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t_m,
       set_t_m,
       map_tree_using_comparator,
       set_tree_using_comparator,
       of_list,
       union,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply,
       map2,
       map3,
       For_applicative[13],
       symbol_bind,
       symbol_map,
       For_monad[3],
       bind,
       return$,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       For_monad[11],
       size,
       with_size,
       sizes,
       filter,
       filter_map,
       recursive_union,
       fixed_point,
       of_lazy,
       of_weighted_list,
       weighted_union,
       weighted_recursive_union,
       small_positive_or_zero_int,
       small_strictly_positive_int,
       int_uniform,
       int32_uniform,
       int63_uniform,
       int64_uniform,
       nativeint_uniform,
       int_inclusive,
       int32_inclusive,
       int63_inclusive,
       int64_inclusive,
       nativeint_inclusive,
       int_uniform_inclusive,
       int32_uniform_inclusive,
       int63_uniform_inclusive,
       int64_uniform_inclusive,
       nativeint_uniform_inclusive,
       int_log_uniform_inclusive,
       int32_log_uniform_inclusive,
       int63_log_uniform_inclusive,
       int64_log_uniform_inclusive,
       nativeint_log_uniform_inclusiv,
       int_log_inclusive,
       int32_log_inclusive,
       int63_log_inclusive,
       int64_log_inclusive,
       nativeint_log_inclusive,
       int_geometric,
       int32_geometric,
       int63_geometric,
       int64_geometric,
       nativeint_geometric,
       float_inclusive,
       float_uniform_exclusive,
       float_without_nan,
       float_finite,
       float_strictly_positive,
       float_strictly_negative,
       float_positive_or_zero,
       float_negative_or_zero,
       float_of_class,
       char_lowercase,
       char_uppercase,
       char_digit,
       char_alpha,
       char_alphanum,
       char_whitespace,
       char_print,
       char_uniform_inclusive,
       string_non_empty,
       string_with_length,
       string_of,
       string_non_empty_of,
       string_with_length_of,
       string_like,
       sexp_of,
       list_non_empty,
       list_with_length,
       list_filtered,
       list_permutations,
       bigarray1,
       bigstring_with_length,
       float32_vec_with_length,
       float64_vec_with_length,
       perturb,
       create,
       generate,
       Debug];
   runtime.caml_register_global
    (88, Base_quickcheck_Generator, "Base_quickcheck__Generator");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Shrinker
//# unitInfo: Requires: Base__Array, Base__Bytes, Base__Either, Base__Field, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Option, Base__Sequence, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, CamlinternalLazy, Stdlib__Bigarray
//# shape: Base_quickcheck__Shrinker:[F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,F(1)*->F(1),F(1),F(1),F(1)*,F(1)*,F(2)*->F(1),F(2)*->F(1),F(2)*,F(1),F(1),F(1),F(1),F(1),F(2)*->F(1),F(1)*->F(1),F(3)*->F(1),F(2)*->F(1),F(3)*->F(1),F(2)*->F(1),F(3)*->F(1),F(1),F(1)*->F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_layout = runtime.caml_ba_layout,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_List = global_data.Base__List,
    Base_Either = global_data.Base__Either,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Lazy = global_data.Base__Lazy,
    Base_Array = global_data.Base__Array,
    Base_Option = global_data.Base__Option,
    Base_Field = global_data.Base__Field,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Int = global_data.Base__Int,
    Base_String = global_data.Base__String,
    Base_Bytes = global_data.Base__Bytes;
   function atomic(param){return Base_Sequence[41];}
   function create(a){return a;}
   function shrink(a){return a;}
   function map(t, f, f_inverse){
    return function(x){
     var a = caml_call1(t, caml_call1(f_inverse, x));
     return caml_call2(Base_Sequence[35], a, f);};
   }
   function filter(t, f){
    return function(x){
     var a = caml_call1(t, x);
     return Base_Sequence[54].call(null, a, f);};
   }
   function filter_map(t, f, f_inverse){
    return function(x){
     var a = caml_call1(t, caml_call1(f_inverse, x));
     return Base_Sequence[80].call(null, a, f);};
   }
   function of_lazy(lazy_t){
    return function(x){
     return Base_Sequence[107].call
             (null,
              [246,
               function(param){
                var a = caml_obj_tag(lazy_t);
                a:
                if(250 === a)
                 var b = lazy_t[1];
                else{
                 if(246 !== a && 244 !== a){var b = lazy_t; break a;}
                 var b = CamlinternalLazy[2].call(null, lazy_t);
                }
                return caml_call1(b, x);
               }]);};
   }
   function fixed_point(of_shrinker){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(of_shrinker, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   function both(fst_t, snd_t){
    return function(param){
     var
      snd = param[2],
      fst = param[1],
      a = caml_call1(snd_t, snd),
      b =
        [0,
         caml_call2
          (Base_Sequence[35], a, function(snd){return [0, fst, snd];}),
         0],
      c = caml_call1(fst_t, fst),
      d =
        [0,
         caml_call2
          (Base_Sequence[35], c, function(fst){return [0, fst, snd];}),
         b];
     return Base_Sequence[70].call(null, d);};
   }
   function float32_vec(src){
    var dim = caml_ba_dim_1(src);
    if(0 === dim) return Base_Sequence[41];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = Base_quickcheck_Bigarray_helpe[1][1].call(null, layout);
    return Base_Sequence[79].call
            (null,
             dim,
             function(to_skip){
              var to_skip$0 = to_skip + offset | 0;
              return caml_call4
                      (Base_quickcheck_Bigarray_helpe[2][2],
                       kind,
                       layout,
                       dim - 1 | 0,
                       function(i){
                        var i$0 = i < to_skip$0 ? i : i + 1 | 0;
                        return runtime.caml_ba_get_1(src, i$0);
                       });
             });
   }
   function dim2(r){return r[2];}
   function dim1(r){return r[1];}
   var
    dim2$0 =
      [0,
       function(param){return 0;},
       "dim2",
       0,
       dim2,
       function(r, v){return [0, r[1], v];}],
    dim1$0 =
      [0,
       function(param){return 0;},
       "dim1",
       0,
       dim1,
       function(r, v){return [0, v, r[2]];}];
   function shrink$0(field, src){
    var a = runtime.caml_ba_dim_2(src), dims = [0, caml_ba_dim_1(src), a];
    if(0 === Base_Field[3].call(null, field, dims)) return Base_Sequence[41];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = Base_quickcheck_Bigarray_helpe[1][1].call(null, layout),
     match = Base_Field[6].call(null, field, dims, Base_Int[46]),
     dim2 = match[2],
     dim1 = match[1],
     b = Base_Field[3].call(null, field, dims);
    return Base_Sequence[79].call
            (null,
             b,
             function(to_skip){
              var to_skip$0 = to_skip + offset | 0;
              function skip(i){return i < to_skip$0 ? i : i + 1 | 0;}
              return caml_call5
                      (Base_quickcheck_Bigarray_helpe[3][2],
                       kind,
                       layout,
                       dim1,
                       dim2,
                       function(dim1, dim2){
                        var
                         match =
                           Base_Field[6].call(null, field, [0, dim1, dim2], skip),
                         dim2$0 = match[2],
                         dim1$0 = match[1];
                        return runtime.caml_ba_get_2(src, dim1$0, dim2$0);
                       });
             });
   }
   function float32_mat(src){
    var a = [0, shrink$0(dim2$0, src), 0], b = [0, shrink$0(dim1$0, src), a];
    return Base_Sequence[70].call(null, b);
   }
   function option(value_t){
    return function(param){
     if(! param) return Base_Sequence[41];
     var
      value = param[1],
      a = Base_Option[23],
      b = caml_call1(value_t, value),
      c = caml_call2(Base_Sequence[35], b, a),
      d = Base_Sequence[101].call(null, 0);
     return Base_Sequence[65].call(null, d, c);};
   }
   function list(elt_t){
    return fixed_point
            (function(list_t){
              return function(param){
               if(! param) return Base_Sequence[41];
               var
                tail = param[2],
                head = param[1],
                a = caml_call1(list_t, tail),
                b =
                  [0,
                   caml_call2
                    (Base_Sequence[35],
                     a,
                     function(tail){return [0, head, tail];}),
                   0],
                c = caml_call1(elt_t, head),
                d =
                  [0,
                   caml_call2
                    (Base_Sequence[35],
                     c,
                     function(head){return [0, head, tail];}),
                   b],
                e = [0, Base_Sequence[101].call(null, tail), d];
               return Base_Sequence[70].call(null, e);};
             });
   }
   var
    a = Base_String[25],
    b = Base_String[137],
    string = map(list(atomic), b, a),
    bytes = map(string, Base_Bytes[28], Base_Bytes[29]);
   function array(t){
    var a = Base_Array[30], b = Base_Array[9];
    return map(list(t), b, a);
   }
   function ref(t){
    return map(t, function(a){return [0, a];}, function(a){return a[1];});
   }
   function lazy_t(t){
    return map
            (t,
             Base_Lazy[24],
             function(a){
              var b = caml_obj_tag(a);
              if(250 === b) return a[1];
              if(246 !== b && 244 !== b) return a;
              return CamlinternalLazy[2].call(null, a);
             });
   }
   var
    sexp =
      fixed_point
       (function(shrinker){
         return function(param){
          if(0 === param[0]) return Base_Sequence[41];
          var
           l = param[1],
           a = list(shrinker)(l),
           shrink_list =
             caml_call2(Base_Sequence[35], a, function(l){return [1, l];}),
           shrink_tree = Base_Sequence[106].call(null, l);
          return Base_Sequence[70].call
                  (null, [0, shrink_list, [0, shrink_tree, 0]]);};
        });
   function either(fst_t, snd_t){
    return function(either){
     if(0 === either[0]){
      var fst = either[1], a = Base_Either[19], b = caml_call1(fst_t, fst);
      return caml_call2(Base_Sequence[35], b, a);
     }
     var snd = either[1], c = Base_Either[20], d = caml_call1(snd_t, snd);
     return caml_call2(Base_Sequence[35], d, c);};
   }
   function result(ok_t, err_t){
    return map
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             },
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function map_tree_using_comparator(comparator, key_t, data_t){
    return function(tree){
     var
      alist = caml_call2(Base_Map[118][3][74], 0, tree),
      a = Base_Sequence[106].call(null, alist),
      drop_keys =
        caml_call2
         (Base_Sequence[35],
          a,
          function(param){
           var k = param[1];
           return caml_call3(Base_Map[118][3][46], comparator, tree, k);
          }),
      b =
        Base_List[53].call
         (null,
          alist,
          function(param){
           var
            data = param[2],
            key = param[1],
            tree$0 = caml_call3(Base_Map[118][3][46], comparator, tree, key),
            a = caml_call1(key_t, key);
           return Base_Sequence[80].call
                   (null,
                    a,
                    function(smaller_key){
                     var
                      match =
                        caml_call4
                         (Base_Map[118][3][36],
                          comparator,
                          tree$0,
                          smaller_key,
                          data);
                     if(typeof match === "number") return 0;
                     var tree = match[2];
                     return [0, tree];
                    });
          }),
      shrink_keys = Base_Sequence[70].call(null, b),
      c =
        Base_List[53].call
         (null,
          alist,
          function(param){
           var data = param[2], key = param[1], a = caml_call1(data_t, data);
           return caml_call2
                   (Base_Sequence[35],
                    a,
                    function(smaller_data){
                     return caml_call4
                             (Base_Map[118][3][38], comparator, tree, key, smaller_data);
                    });
          }),
      shrink_data = Base_Sequence[70].call(null, c);
     return Base_Sequence[70].call
             (null, [0, drop_keys, [0, shrink_keys, [0, shrink_data, 0]]]);};
   }
   function set_tree_using_comparator(comparator, elt_t){
    return function(tree){
     var
      list = caml_call1(Base_Set[75][3][14], tree),
      a = Base_Sequence[106].call(null, list),
      drop_elts =
        caml_call2
         (Base_Sequence[35],
          a,
          function(elt){
           return caml_call3(Base_Set[75][3][19], comparator, tree, elt);
          }),
      b =
        Base_List[53].call
         (null,
          list,
          function(elt){
           var
            tree$0 = caml_call3(Base_Set[75][3][19], comparator, tree, elt),
            a = caml_call1(elt_t, elt);
           return Base_Sequence[80].call
                   (null,
                    a,
                    function(smaller_elt){
                     return caml_call3
                              (Base_Set[75][3][17], comparator, tree$0, smaller_elt)
                             ? 0
                             : [0,
                               caml_call3
                                (Base_Set[75][3][18], comparator, tree$0, smaller_elt)];
                    });
          }),
      shrink_elts = Base_Sequence[70].call(null, b);
     return Base_Sequence[70].call(null, [0, drop_elts, [0, shrink_elts, 0]]);};
   }
   function map_t(key_t, data_t){
    return function(map_t){
     var
      comparator = Base_Map[5].call(null, map_t),
      a = Base_Map[118][104],
      b = caml_call1(Base_Map[118][33], comparator),
      t = map(map_tree_using_comparator(comparator, key_t, data_t), b, a);
     return t(map_t);};
   }
   function set_t(elt_t){
    return function(set_t){
     var
      comparator = Base_Set[4].call(null, set_t),
      a = Base_Set[75][49],
      b = caml_call1(Base_Set[75][66], comparator),
      t = map(set_tree_using_comparator(comparator, elt_t), b, a);
     return t(set_t);};
   }
   var
    Base_quickcheck_Shrinker =
      [0,
       atomic,
       atomic,
       atomic,
       atomic,
       string,
       bytes,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       float32_vec,
       float32_vec,
       float32_vec,
       float32_mat,
       float32_mat,
       map_t,
       set_t,
       map_tree_using_comparator,
       set_tree_using_comparator,
       map,
       filter,
       filter_map,
       fixed_point,
       of_lazy,
       create,
       shrink];
   runtime.caml_register_global
    (16, Base_quickcheck_Shrinker, "Base_quickcheck__Shrinker");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test_intf
//# shape: Base_quickcheck__Test_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_quickcheck_Test_intf = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_Test_intf, "Base_quickcheck__Test_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test
//# unitInfo: Requires: Base, Base__Backtrace, Base__Error, Base__List, Base__Or_error, Base__Random, Base__Sequence, Base__String, Base__Word_size, Base_quickcheck__Generator, Base_quickcheck__Shrinker, Base_quickcheck__Test_intf, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random
//# shape: Base_quickcheck__Test:[N,N,F(4),F(4),F(4),F(4),F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_test_count = "test_count";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "...",
    Base_Backtrace = global_data.Base__Backtrace,
    Base_Or_error = global_data.Base__Or_error,
    Base_Error = global_data.Base__Error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Sequence = global_data.Base__Sequence,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base = global_data.Base,
    Splittable_random = global_data.Splittable_random,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Random = global_data.Base__Random,
    Base_List = global_data.Base__List,
    Base_Word_size = global_data.Base__Word_size,
    a = [0, "Deterministic"],
    b = [0, "Nondeterministic"];
   function sexp_of_t(param){
    if(! param) return b;
    var arg0_001 = param[1], res0_002 = Base[202].call(null, arg0_001);
    return [1, [0, a, [0, res0_002, 0]]];
   }
   var
    Seed = [0, sexp_of_t],
    c = [0, "sizes"],
    d = [0, "shrink_count"],
    e = [0, cst_test_count],
    f = [0, "seed"];
   function sexp_of_t$0(param){
    var
     sizes_010 = param[4],
     shrink_count_008 = param[3],
     test_count_006 = param[2],
     seed_004 = param[1],
     sexp_of_elt = Base[136],
     match = Base_Sequence[90].call(null, sizes_010, 100),
     suffix = match[2],
     prefix = match[1],
     prefix$0 = Base_List[53].call(null, prefix, sexp_of_elt),
     bnds_003 = 0,
     suffix$0 =
       Base_Sequence[9].call(null, suffix)
        ? 0
        : [0, Sexplib0_Sexp_conv[7].call(null, cst), 0],
     arg_011 = [1, Base[222].call(null, prefix$0, suffix$0)],
     bnds_003$0 = [0, [1, [0, c, [0, arg_011, 0]]], bnds_003],
     arg_009 = caml_call1(Base[136], shrink_count_008),
     bnds_003$1 = [0, [1, [0, d, [0, arg_009, 0]]], bnds_003$0],
     arg_007 = caml_call1(Base[136], test_count_006),
     bnds_003$2 = [0, [1, [0, e, [0, arg_007, 0]]], bnds_003$1],
     arg_005 = sexp_of_t(seed_004),
     bnds_003$3 = [0, [1, [0, f, [0, arg_005, 0]]], bnds_003$2];
    return [1, bnds_003$3];
   }
   var
    g = Base_List[132].call(null, 0, [0, 104758188], [0, 104758188], 0, 30),
    h = Base_Sequence[99].call(null, g),
    q = [0, "error"],
    r = [0, "input"],
    cst_Base_quickcheck_Test_run_t = "Base_quickcheck.Test.run: test failed",
    p = [0, 0],
    n = [0, 0],
    o = [0, 0],
    l = [0, "number_of_size_values"],
    m = [0, cst_test_count],
    cst_Base_quickcheck_Test_run_i =
      "Base_quickcheck.Test.run: insufficient size values for test count",
    k = [0, "an arbitrary but deterministic string"],
    i = 10000,
    j = Base_Word_size[3] ? 10000 : 1000,
    default_config = [0, k, j, i, h],
    lazy_nondeterministic_state =
      [246, function(a){return caml_call2(Base_Random[19][3], 0, 0);}];
   function with_sample(f, h, opt, generator){
    var
     config = h ? h[1] : default_config,
     examples = opt ? opt[1] : 0,
     match = config[1];
    if(match)
     var
      string = match[1],
      c = runtime.Base_hash_string(string),
      random = Splittable_random[2].call(null, c);
    else{
     var a = runtime.caml_obj_tag(lazy_nondeterministic_state);
     a:
     if(250 === a)
      var b = lazy_nondeterministic_state[1];
     else{
      if(246 !== a && 244 !== a){
       var b = lazy_nondeterministic_state;
       break a;
      }
      var b = CamlinternalLazy[2].call(null, lazy_nondeterministic_state);
     }
     var random = Splittable_random[1].call(null, b);
    }
    var
     d =
       Base_Sequence[45].call
        (null,
         [0, config[4], 0],
         function(param){
          var number_of_size_values = param[2], sizes = param[1];
          if(config[2] <= number_of_size_values) return 0;
          var match = Base_Sequence[42].call(null, sizes);
          if(match){
           var
            match$0 = match[1],
            remaining_sizes = match$0[2],
            size = match$0[1];
           return [0,
                   [0,
                    size,
                    [0, remaining_sizes, number_of_size_values + 1 | 0]]];
          }
          var
           a =
             [0,
              [1,
               [0, l, [0, caml_call1(Base[136], number_of_size_values), 0]]],
              0],
           b = [0, [1, [0, m, [0, caml_call1(Base[136], config[2]), 0]]], a],
           c =
             [1,
              [0,
               Sexplib0_Sexp_conv[7].call
                (null, cst_Base_quickcheck_Test_run_i),
               b]];
          return Base[246].call(null, c);
         }),
     e =
       caml_call2
        (Base_Sequence[35],
         d,
         function(size){
          return Base_quickcheck_Generator[128].call
                  (null, generator, size, random);
         }),
     g = Base_Sequence[106].call(null, examples),
     sequence = Base_Sequence[65].call(null, g, e);
    return caml_call1(f, sequence);
   }
   function result(f, a, opt, m){
    var config = a ? a[1] : default_config, examples = opt ? opt[1] : 0;
    return with_sample
            (function(sequence){
              var
               match$2 =
                 Base_Sequence[12].call
                  (null,
                   sequence,
                   0,
                   function(param, input){
                    var match = caml_call1(f, input);
                    if(0 === match[0]) return n;
                    var error = match[1];
                    return [1, [0, input, error]];
                   });
              if(0 === match$2[0]) return o;
              var
               match$3 = match$2[1],
               error$1 = match$3[2],
               input$0 = match$3[1],
               shrinker = m[3],
               shrink_count = config[3],
               alternates$2 =
                 caml_call1
                  (Base_quickcheck_Shrinker[37].call(null, shrinker), input$0),
               shrink_count$0 = shrink_count,
               alternates = alternates$2,
               input = input$0,
               error = error$1;
              for(;;){
               if(0 !== shrink_count$0){
                var
                 shrink_count$1 = shrink_count$0 - 1 | 0,
                 match = Base_Sequence[42].call(null, alternates);
                if(match){
                 var
                  match$0 = match[1],
                  alternates$0 = match$0[2],
                  alternate = match$0[1],
                  match$1 = caml_call1(f, alternate);
                 if(0 === match$1[0]){
                  shrink_count$0 = shrink_count$1;
                  alternates = alternates$0;
                  continue;
                 }
                 var
                  error$0 = match$1[1],
                  alternates$1 =
                    caml_call1
                     (Base_quickcheck_Shrinker[37].call(null, shrinker),
                      alternate);
                 shrink_count$0 = shrink_count$1;
                 alternates = alternates$1;
                 input = alternate;
                 error = error$0;
                 continue;
                }
               }
               return [1, [0, input, error]];
              }
             },
             [0, config],
             [0, examples],
             m[2]);
   }
   function run(f, config, examples, M){
    function f$0(x){
     var a = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return Base_Or_error[32].call
             (null, a, function(param){return caml_call1(f, x);});
    }
    var match = result(f$0, config, examples, M);
    if(0 === match[0]) return p;
    var
     match$0 = match[1],
     error = match$0[2],
     input = match$0[1],
     a = [0, [1, [0, q, [0, Base_Error[9].call(null, error), 0]]], 0],
     b = [0, [1, [0, r, [0, caml_call1(M[1], input), 0]]], a],
     c =
       [1,
        [0,
         Sexplib0_Sexp_conv[7].call(null, cst_Base_quickcheck_Test_run_t),
         b]];
    return Base_Or_error[39].call(null, c);
   }
   function with_sample_exn(f, config, examples, generator){
    function f$0(x){
     return Base_Or_error[31].call
             (null, 0, function(param){return caml_call1(f, x);});
    }
    var a = with_sample(f$0, config, examples, generator);
    return Base_Or_error[34].call(null, a);
   }
   function run_exn(f, config, examples, testable){
    function f$0(x){
     var a = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return Base_Or_error[31].call
             (null, a, function(param){return caml_call1(f, x);});
    }
    var a = run(f$0, config, examples, testable);
    return Base_Or_error[34].call(null, a);
   }
   var
    Base_quickcheck_Test =
      [0,
       [0, Seed, sexp_of_t$0],
       default_config,
       run,
       run_exn,
       result,
       with_sample,
       with_sample_exn];
   runtime.caml_register_global
    (32, Base_quickcheck_Test, "Base_quickcheck__Test");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer
//# unitInfo: Requires: Base, Base__Array, Base__Bool, Base__Bytes, Base__Char, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__List, Base__Map, Base__Nativeint, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Generator, Base_quickcheck__Observer0, CamlinternalLazy, Splittable_random
//# shape: Base_quickcheck__Observer:[F(3)*,F(3)*,N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(2)*,N,N,N,N,N,F(2)*,F(2)*,F(1)*,F(2)*,F(1)*,F(1)*,F(2)*,F(1),F(1)*,F(1)*,F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_Hash = global_data.Base__Hash,
    Splittable_random = global_data.Splittable_random,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Array = global_data.Base__Array,
    Base = global_data.Base,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Bool = global_data.Base__Bool,
    Base_Char = global_data.Base__Char,
    Base_Int = global_data.Base__Int,
    Base_Int32 = global_data.Base__Int32,
    Base_Int63 = global_data.Base__Int63,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Float = global_data.Base__Float,
    Base_String = global_data.Base__String,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Bytes = global_data.Base__Bytes,
    opaque = Base_quickcheck_Observer0[1],
    create = Base_quickcheck_Observer0[2],
    observe = Base_quickcheck_Observer0[3];
   function unmap(t, f){
    return create
            (function(x, size, hash){
              return observe(t, caml_call1(f, x), size, hash);
             });
   }
   function of_hash_fold(f){
    return create(function(x, param, hash){return caml_call2(f, hash, x);});
   }
   function of_lazy(lazy_t){
    return create
            (function(x, size, hash){
              var a = caml_obj_tag(lazy_t);
              a:
              if(250 === a)
               var b = lazy_t[1];
              else{
               if(246 !== a && 244 !== a){var b = lazy_t; break a;}
               var b = CamlinternalLazy[2].call(null, lazy_t);
              }
              return observe(b, x, size, hash);
             });
   }
   function fixed_point(wrap){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(wrap, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   var
    bool = of_hash_fold(Base_Bool[4]),
    char = of_hash_fold(Base_Char[4]),
    int = of_hash_fold(Base_Int[7]),
    int32 = of_hash_fold(Base_Int32[7]),
    int63 = of_hash_fold(Base_Int63[6]),
    int64 = of_hash_fold(Base_Int64[7]),
    nativeint = of_hash_fold(Base_Nativeint[7]),
    float = of_hash_fold(Base_Float[5]),
    string = of_hash_fold(Base_String[40]),
    sexp = of_hash_fold(Base[85][2]),
    bigstring =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[112])),
    float32_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[123])),
    float64_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[123])),
    float32_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[123])),
    float64_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[123])),
    bytes = unmap(string, Base_Bytes[29]),
    a = [0, 0];
   function either(fst_t, snd_t){
    return create
            (function(either, size, hash){
              if(0 === either[0]){
               var fst = either[1];
               return observe
                       (fst_t, fst, size, caml_call2(Base[133], hash, 1));
              }
              var snd = either[1];
              return observe(snd_t, snd, size, caml_call2(Base[133], hash, 2));
             });
   }
   function result(ok_t, err_t){
    return unmap
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function both(fst_t, snd_t){
    return create
            (function(param, size, hash){
              var
               snd = param[2],
               fst = param[1],
               hash$0 = observe(fst_t, fst, size, hash),
               hash$1 = observe(snd_t, snd, size, hash$0);
              return hash$1;
             });
   }
   function option(value_t){
    return unmap
            (either(opaque, value_t),
             function(param){
              if(! param) return a;
              var value = param[1];
              return [1, value];
             });
   }
   function list(elt_t){
    return create
            (function(list, size, hash){
              var
               a = Base_Hash[9].call(null, hash),
               random = Splittable_random[2].call(null, a),
               length = Base_List[45].call(null, list),
               b =
                 Base_quickcheck_Generator[53].call
                  (null, [0, length], [0, length], 0),
               sizes =
                 Base_quickcheck_Generator[128].call(null, b, size, random),
               c = caml_call2(Base[133], hash, 0);
              return Base_List[71].call
                      (null,
                       list,
                       sizes,
                       c,
                       function(hash, elt, size){
                        return observe
                                (elt_t, elt, size, caml_call2(Base[133], hash, 1));
                       });
             });
   }
   function array(t){var a = Base_Array[30]; return unmap(list(t), a);}
   function ref(t){return unmap(t, function(a){return a[1];});}
   function lazy_t(t){
    return unmap
            (t,
             function(a){
              var b = caml_obj_tag(a);
              if(250 === b) return a[1];
              if(246 !== b && 244 !== b) return a;
              return CamlinternalLazy[2].call(null, a);
             });
   }
   function fn(dom, rng){
    return create
            (function(f, size, hash){
              var
               a = Base_Hash[9].call(null, hash),
               random = Splittable_random[2].call(null, a),
               b = Base_quickcheck_Generator[53].call(null, 0, 0, 0),
               sizes =
                 Base_quickcheck_Generator[128].call
                  (null, b, size * 2 | 0, random);
              return Base_List[20].call
                      (null,
                       sizes,
                       hash,
                       function(hash, size){
                        var
                         x =
                           Base_quickcheck_Generator[128].call(null, dom, size, random);
                        return observe(rng, caml_call1(f, x), size, hash);
                       });
             });
   }
   function map_tree(key_obs, data_obs){
    var arg = Base_Map[118][3][74];
    return unmap
            (list(both(key_obs, data_obs)),
             function(eta){return caml_call2(arg, 0, eta);});
   }
   function set_tree(elt_obs){
    var a = Base_Set[75][3][14];
    return unmap(list(elt_obs), a);
   }
   function map_t(key_obs, data_obs){
    var a = Base_Map[118][104];
    return unmap(map_tree(key_obs, data_obs), a);
   }
   function set_t(elt_obs){
    var a = Base_Set[75][49];
    return unmap(set_tree(elt_obs), a);
   }
   var
    Base_quickcheck_Observer =
      [0,
       opaque,
       opaque,
       bool,
       char,
       string,
       bytes,
       int,
       int32,
       int63,
       int64,
       nativeint,
       float,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t,
       set_t,
       map_tree,
       set_tree,
       of_hash_fold,
       unmap,
       fixed_point,
       of_lazy,
       create,
       observe];
   runtime.caml_register_global
    (22, Base_quickcheck_Observer, "Base_quickcheck__Observer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Export
//# unitInfo: Requires: Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker
//# shape: Base_quickcheck__Export:[N,N,N,N,N,N,N,N,N,N,F(3)*,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1),F(1),F(1),F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    quickcheck_generator_unit = Base_quickcheck_Generator[1],
    quickcheck_generator_bool = Base_quickcheck_Generator[2],
    quickcheck_generator_char = Base_quickcheck_Generator[3],
    quickcheck_generator_string = Base_quickcheck_Generator[4],
    quickcheck_generator_bytes = Base_quickcheck_Generator[5],
    quickcheck_generator_int = Base_quickcheck_Generator[6],
    quickcheck_generator_int32 = Base_quickcheck_Generator[7],
    quickcheck_generator_int64 = Base_quickcheck_Generator[9],
    quickcheck_generator_nativeint = Base_quickcheck_Generator[10],
    quickcheck_generator_float = Base_quickcheck_Generator[11],
    quickcheck_generator_option = Base_quickcheck_Generator[13],
    quickcheck_generator_list = Base_quickcheck_Generator[14],
    quickcheck_generator_array = Base_quickcheck_Generator[15],
    quickcheck_generator_ref = Base_quickcheck_Generator[16],
    quickcheck_generator_lazy_t = Base_quickcheck_Generator[17],
    quickcheck_observer_unit = Base_quickcheck_Observer[2],
    quickcheck_observer_bool = Base_quickcheck_Observer[3],
    quickcheck_observer_char = Base_quickcheck_Observer[4],
    quickcheck_observer_string = Base_quickcheck_Observer[5],
    quickcheck_observer_bytes = Base_quickcheck_Observer[6],
    quickcheck_observer_int = Base_quickcheck_Observer[7],
    quickcheck_observer_int32 = Base_quickcheck_Observer[8],
    quickcheck_observer_int64 = Base_quickcheck_Observer[10],
    quickcheck_observer_nativeint = Base_quickcheck_Observer[11],
    quickcheck_observer_float = Base_quickcheck_Observer[12],
    quickcheck_observer_option = Base_quickcheck_Observer[14],
    quickcheck_observer_list = Base_quickcheck_Observer[15],
    quickcheck_observer_array = Base_quickcheck_Observer[16],
    quickcheck_observer_ref = Base_quickcheck_Observer[17],
    quickcheck_observer_lazy_t = Base_quickcheck_Observer[18],
    quickcheck_shrinker_unit = Base_quickcheck_Shrinker[2],
    quickcheck_shrinker_bool = Base_quickcheck_Shrinker[3],
    quickcheck_shrinker_char = Base_quickcheck_Shrinker[4],
    quickcheck_shrinker_string = Base_quickcheck_Shrinker[5],
    quickcheck_shrinker_bytes = Base_quickcheck_Shrinker[6],
    quickcheck_shrinker_int = Base_quickcheck_Shrinker[7],
    quickcheck_shrinker_int32 = Base_quickcheck_Shrinker[8],
    quickcheck_shrinker_int64 = Base_quickcheck_Shrinker[10],
    quickcheck_shrinker_nativeint = Base_quickcheck_Shrinker[11],
    quickcheck_shrinker_float = Base_quickcheck_Shrinker[12],
    quickcheck_shrinker_option = Base_quickcheck_Shrinker[14],
    quickcheck_shrinker_list = Base_quickcheck_Shrinker[15],
    quickcheck_shrinker_array = Base_quickcheck_Shrinker[16],
    quickcheck_shrinker_ref = Base_quickcheck_Shrinker[17],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Shrinker[18],
    Base_quickcheck_Export =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t];
   runtime.caml_register_global
    (3, Base_quickcheck_Export, "Base_quickcheck__Export");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck
//# unitInfo: Requires: Base_quickcheck__Export
//# shape: Base_quickcheck:[N,N,N,N,N,N,N,N,N,N,F(3)*,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1),F(1),F(1),F(1)*,F(1)*,[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Export = global_data.Base_quickcheck__Export,
    quickcheck_generator_unit = Base_quickcheck_Export[1],
    quickcheck_generator_bool = Base_quickcheck_Export[2],
    quickcheck_generator_char = Base_quickcheck_Export[3],
    quickcheck_generator_string = Base_quickcheck_Export[4],
    quickcheck_generator_bytes = Base_quickcheck_Export[5],
    quickcheck_generator_int = Base_quickcheck_Export[6],
    quickcheck_generator_int32 = Base_quickcheck_Export[7],
    quickcheck_generator_int64 = Base_quickcheck_Export[8],
    quickcheck_generator_nativeint = Base_quickcheck_Export[9],
    quickcheck_generator_float = Base_quickcheck_Export[10],
    quickcheck_observer_unit = Base_quickcheck_Export[11],
    quickcheck_observer_bool = Base_quickcheck_Export[12],
    quickcheck_observer_char = Base_quickcheck_Export[13],
    quickcheck_observer_string = Base_quickcheck_Export[14],
    quickcheck_observer_bytes = Base_quickcheck_Export[15],
    quickcheck_observer_int = Base_quickcheck_Export[16],
    quickcheck_observer_int32 = Base_quickcheck_Export[17],
    quickcheck_observer_int64 = Base_quickcheck_Export[18],
    quickcheck_observer_nativeint = Base_quickcheck_Export[19],
    quickcheck_observer_float = Base_quickcheck_Export[20],
    quickcheck_shrinker_unit = Base_quickcheck_Export[21],
    quickcheck_shrinker_bool = Base_quickcheck_Export[22],
    quickcheck_shrinker_char = Base_quickcheck_Export[23],
    quickcheck_shrinker_string = Base_quickcheck_Export[24],
    quickcheck_shrinker_bytes = Base_quickcheck_Export[25],
    quickcheck_shrinker_int = Base_quickcheck_Export[26],
    quickcheck_shrinker_int32 = Base_quickcheck_Export[27],
    quickcheck_shrinker_int64 = Base_quickcheck_Export[28],
    quickcheck_shrinker_nativeint = Base_quickcheck_Export[29],
    quickcheck_shrinker_float = Base_quickcheck_Export[30],
    quickcheck_generator_option = Base_quickcheck_Export[31],
    quickcheck_generator_list = Base_quickcheck_Export[32],
    quickcheck_generator_array = Base_quickcheck_Export[33],
    quickcheck_generator_ref = Base_quickcheck_Export[34],
    quickcheck_generator_lazy_t = Base_quickcheck_Export[35],
    quickcheck_observer_option = Base_quickcheck_Export[36],
    quickcheck_observer_list = Base_quickcheck_Export[37],
    quickcheck_observer_array = Base_quickcheck_Export[38],
    quickcheck_observer_ref = Base_quickcheck_Export[39],
    quickcheck_observer_lazy_t = Base_quickcheck_Export[40],
    quickcheck_shrinker_option = Base_quickcheck_Export[41],
    quickcheck_shrinker_list = Base_quickcheck_Export[42],
    quickcheck_shrinker_array = Base_quickcheck_Export[43],
    quickcheck_shrinker_ref = Base_quickcheck_Export[44],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Export[45],
    Private = [0],
    Base_quickcheck =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t,
       Private];
   runtime.caml_register_global(1, Base_quickcheck, "Base_quickcheck");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
