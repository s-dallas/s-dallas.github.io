// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Filename_base
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Filename
//# shape: Filename_base:[N,F(1),F(1),F(1)*,N,F(2),F(2)*,F(2)*,F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(2)*,F(3)*,F(3),F(3),N,N,F(1),N,N,N,N,F(2),F(1),F(1),F(1),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(2),F(1),F(1),F(1),F(1),N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = ".",
    cst$4 = "/",
    cst_Filename_base = "Filename_base",
    cst_filename_base = "filename_base",
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$1 = cst$5,
    cst$2 = "..",
    cst = cst$6,
    cst$0 = cst$4,
    root = cst$4,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_List = global_data.Base__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Base_Printf = global_data.Base__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Filename_base);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_filename_base);
   Ppx_expect_runtime[1][1].call(null, "filename_base/src/filename_base.ml");
   Ppx_inline_test_lib[6].call(null, cst_filename_base, "filename_base.ml");
   var
    comparator = Base_String[59],
    clamp = Base_String[58],
    clamp_exn = Base_String[57],
    between = Base_String[56],
    descending = Base_String[55],
    ascending = Base_String[54],
    max = Base_String[53],
    min = Base_String[52],
    compare = Base_String[51],
    equal = Base_String[134],
    symbol = Base_String[50],
    symbol$0 = Base_String[49],
    symbol$1 = Base_String[48],
    symbol$2 = Base_String[47],
    symbol$3 = Base_String[46],
    symbol$4 = Base_String[45],
    t_sexp_grammar = Base_String[2],
    sexp_of_t = Base_String[42],
    t_of_sexp = Base_String[41];
   function hash(a){return runtime.Base_hash_string(a);}
   var
    hash_fold_t = Base_String[40],
    check_suffix = Stdlib_Filename[7],
    chop_extension = Stdlib_Filename[12],
    chop_suffix = Stdlib_Filename[8],
    chop_suffix_opt = Stdlib_Filename[9],
    current_dir_name = Stdlib_Filename[1],
    is_implicit = Stdlib_Filename[6],
    is_relative = Stdlib_Filename[5],
    parent_dir_name = Stdlib_Filename[2],
    dir_sep = Stdlib_Filename[3],
    quote = Stdlib_Filename[21],
    temp_dir_name = Stdlib_Filename[19].call(null, 0),
    dirname = Stdlib_Filename[14],
    basename = Stdlib_Filename[13],
    a =
      [0,
       [11,
        "Filename.concat called with an empty string as its first argument (second argument: ",
        [2, 0, [12, 41, 0]]],
       "Filename.concat called with an empty string as its first argument (second argument: %s)"],
    b =
      [0,
       [11,
        "Filename.to_absolute_exn called with a [relative_to] that is a relative path: ",
        [2, 0, 0]],
       "Filename.to_absolute_exn called with a [relative_to] that is a relative path: %s"],
    cst_Filename_of_parts_empty_pa = "Filename.of_parts: empty parts list",
    c = [0, "first_arg"],
    cst_Filename_of_absolute_exn_f =
      "Filename.of_absolute_exn: first argument must be an absolute path",
    d = [0, "relative_to"],
    cst_Filename_of_absolute_exn_r =
      "Filename.of_absolute_exn: [~relative_to] must be an absolute path";
   function is_absolute(p){return 1 - is_relative(p);}
   function concat(p1, p2){
    var
     s$0 =
       Base_String[14].call(null, p1)
        ? (caml_call2(Base_Printf[6].call(null, a), p2, 0), p2)
        : p2;
    for(;;){
     var match$0 = Base_String[100].call(null, s$0, 47);
     if(! match$0) break;
     var g = match$0[1], h = g[1];
     if(h !== cst$6 && h !== cst$5) break;
     var s$1 = g[2];
     s$0 = s$1;
    }
    var s = p1, i = Base[241].call(null, cst$0, s$0);
    for(;;){
     var match = Base_String[101].call(null, s, 47);
     a:
     if(match){
      var b = match[1], c = b[1];
      if(c === cst$6){
       var f = b[2];
       if(f === cst$6 || f === cst$5){var d = cst; break a;}
      }
      var e = b[2];
      if(e === cst$6){s = c; continue;}
      if(e === cst$5){s = c; continue;}
      var d = s;
     }
     else
      var d = s;
     return Base[241].call(null, d, i);
    }
   }
   function to_absolute_exn(p, relative_to){
    return is_relative(relative_to)
            ? caml_call2(Base_Printf[6].call(null, b), relative_to, 0)
            : is_absolute(p) ? p : concat(relative_to, p);
   }
   function split(s){var a = basename(s); return [0, dirname(s), a];}
   function is_posix_pathname_component(s){
    var b = symbol(s, cst$1);
    if(b){
     var c = symbol(s, cst$2);
     if(c){
      var d = 0 < caml_ml_string_length(s) ? 1 : 0;
      if(d){
       var e = caml_ml_string_length(s) <= 255 ? 1 : 0;
       if(e)
        var
         f = 1 - Base_String[70].call(null, 0, 0, s, 47),
         a = f ? 1 - Base_String[70].call(null, 0, 0, s, 0) : f;
       else
        var a = e;
      }
      else
       var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function split_extension(fn){
    var match = Base_String[101].call(null, fn, 47);
    if(match)
     var
      match$0 = match[1],
      fn$0 = match$0[2],
      path = match$0[1],
      fn$1 = fn$0,
      dir = [0, path];
    else
     var fn$1 = fn, dir = 0;
    var match$1 = Base_String[101].call(null, fn$1, 46);
    if(match$1)
     var
      match$2 = match$1[1],
      ext = match$2[2],
      base_fn = match$2[1],
      ext$0 = [0, ext],
      fn$2 = base_fn;
    else
     var ext$0 = 0, fn$2 = fn$1;
    if(dir)
     var
      dir$0 = dir[1],
      a = Base[241].call(null, cst$3, fn$2),
      fn$3 = Base[241].call(null, dir$0, a);
    else
     var fn$3 = fn$2;
    return [0, fn$3, ext$0];
   }
   function parts(filename){
    var acc = 0, filename$0 = filename;
    for(;;){
     var match = split(filename$0), filename$1 = match[1];
     if(filename$1 !== cst$5){
      if(filename$1 === cst$4 && match[2] === cst$4)
       return [0, filename$1, acc];
     }
     else if(match[2] === cst$5) return [0, filename$1, acc];
     var dir = match[2], acc$0 = [0, dir, acc];
     acc = acc$0;
     filename$0 = filename$1;
    }
   }
   function of_parts(param){
    if(! param) return Base[244].call(null, cst_Filename_of_parts_empty_pa);
    var rest = param[2], root = param[1];
    return Base_List[20].call(null, rest, root, Stdlib_Filename[4]);
   }
   function of_absolute_exn(a, b){
    if(is_relative(a)){
     var
      e = [0, [1, [0, c, [0, Base[202].call(null, a), 0]]], 0],
      f =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Filename_of_absolute_exn_f),
          e]];
     Base[246].call(null, f);
    }
    if(is_relative(b)){
     var
      g = [0, [1, [0, d, [0, Base[202].call(null, b), 0]]], 0],
      h =
        [1,
         [0,
          Sexplib0_Sexp_conv[7].call(null, cst_Filename_of_absolute_exn_r),
          g]];
     Base[246].call(null, h);
    }
    var
     a_parts = parts(a),
     b_parts = parts(b),
     a_suffix = a_parts,
     b_suffix = b_parts;
    for(;;){
     if(! a_suffix) break;
     if(! b_suffix) break;
     var
      t2 = b_suffix[2],
      h2 = b_suffix[1],
      t1 = a_suffix[2],
      h1 = a_suffix[1];
     if(! Base_String[134].call(null, h1, h2)) break;
     a_suffix = t1;
     b_suffix = t2;
    }
    var
     go_up =
       Base_List[53].call
        (null, b_suffix, function(param){return parent_dir_name;}),
     relpath = Base[222].call(null, go_up, a_suffix);
    return relpath ? of_parts(relpath) : current_dir_name;
   }
   Ppx_inline_test_lib[7].call(null, cst_filename_base);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Filename_base);
   var
    Filename_base =
      [0,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       root,
       is_posix_pathname_component,
       temp_dir_name,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       concat,
       is_relative,
       is_absolute,
       is_implicit,
       check_suffix,
       chop_suffix,
       chop_suffix_opt,
       chop_extension,
       split_extension,
       basename,
       dirname,
       to_absolute_exn,
       of_absolute_exn,
       split,
       parts,
       of_parts,
       quote,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424];
   runtime.caml_register_global(41, Filename_base, cst_Filename_base);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
