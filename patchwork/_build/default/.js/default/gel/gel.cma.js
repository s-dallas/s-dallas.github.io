// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Gel
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_prot__Utils, Bin_shape, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Gel:[N,N,N,N,N,N,N,N,F(3),F(3),F(3),F(2),F(2),F(1)*,F(1)*,F(2),F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Gel = "Gel",
    cst_a = "a",
    cst_gel = "gel",
    cst_gel_ml = "gel.ml",
    cst_t$0 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Utils = global_data.Bin_prot__Utils;
   Ppx_module_timer_runtime[4].call(null, cst_Gel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_gel);
   Ppx_expect_runtime[1][1].call(null, cst_gel_ml);
   Ppx_inline_test_lib[6].call(null, cst_gel, cst_gel_ml);
   function create(g){return g;}
   function g(param){return param;}
   function map(param, f){return caml_call1(f, param);}
   function compare(compare_g, a, param){
    return caml_call2(compare_g, a, param);
   }
   function hash_fold_t(hash_fold_g, hash_state, param){return caml_call2(hash_fold_g, hash_state, param);
   }
   function sexp_of_t(sexp_of_g, param){return caml_call1(sexp_of_g, param);}
   function t_of_sexp(g_of_sexp, sexp){return caml_call1(g_of_sexp, sexp);}
   function globalize(a, param){return param;}
   function equal(equal_g, a, param){return caml_call2(equal_g, a, param);}
   var
    a = caml_call1(Bin_shape[3][1], cst_a),
    b = caml_call1(Bin_shape[4][1], "gel.ml:53:16"),
    c = Bin_prot_Shape[11].call(null, b, a),
    d = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    e = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), d, c], 0],
    f = caml_call1(Bin_shape[4][1], "gel.ml:53:4"),
    group = Bin_prot_Shape[2].call(null, f, e),
    cst_t = cst_t$0,
    h = [5, "gel.ml.Binable.t"];
   function bin_shape_t(a){
    var b = caml_call1(Bin_shape[2][1], cst_t);
    return Bin_prot_Shape[10].call(null, group, b, [0, a, 0]);
   }
   function bin_size_t(size_of_a){return size_of_a;}
   function bin_write_t(write_a){return write_a;}
   function bin_read_t(of_a, buf, pos_ref, vint){
    return Bin_prot_Common[18].call(null, h, pos_ref[1]);
   }
   function bin_read_t$0(of_a){return of_a;}
   function of_binable(g){return g;}
   function to_binable(param){return param;}
   var
    include =
      Bin_prot_Utils[13].call
       (null,
        [0,
         [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t$0, bin_read_t],
         to_binable,
         of_binable]),
    bin_shape_t$0 = include[1],
    bin_size_t$0 = include[2],
    bin_write_t$0 = include[3],
    bin_read_t$1 = include[4],
    bin_read_t$2 = include[5],
    bin_writer_t = include[6],
    bin_reader_t = include[7],
    bin_t = include[8];
   Ppx_inline_test_lib[7].call(null, cst_gel);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Gel);
   var
    Gel =
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       equal,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       create,
       g,
       map,
       globalize,
       function(a){return a;},
       function(a){return a;},
       function(a){return a;},
       function(a){return a;},
       function(a){return a;},
       function(a){return a;},
       function(a){return a;}];
   runtime.caml_register_global(22, Gel, cst_Gel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VsLmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6MTAsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VsLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMvZHMvRG9jdW1lbnRzL3BhdGNod29yay9fb3BhbS9saWIvZ2VsL2dlbC5tbCJdLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4hIEJhc2VcblxudHlwZSAnYSB0ID0geyBnIDogJ2EgfSBbQEB1bmJveGVkXVxuXG4oKiBXZSB3YW50IHRvIGVuc3VyZSB0aGUgZGVyaXZlZCBvcGVyYXRpb25zIGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIGZvciB0aGUgaW5uZXIgdHlwZSwgc29cbiAgIHdlIGRlZmluZSB0aGVtIGRpcmVjdGx5LiAqKVxuXG5sZXRbQGlubGluZV0gY3JlYXRlIGcgPSB7IGcgfVxubGV0W0BpbmxpbmVdIGcgeyBnIH0gPSBnXG5sZXRbQGlubGluZV0gbWFwIHsgZyB9IH5mID0geyBnID0gZiBnIH1cbmxldFtAaW5saW5lXSBjb21wYXJlIGNvbXBhcmVfZyB7IGcgPSBhIH0geyBnID0gYiB9ID0gY29tcGFyZV9nIGEgYlxubGV0W0BpbmxpbmVdIGhhc2hfZm9sZF90IGhhc2hfZm9sZF9nIGhhc2hfc3RhdGUgeyBnIH0gPSBoYXNoX2ZvbGRfZyBoYXNoX3N0YXRlIGdcbmxldFtAaW5saW5lXSBzZXhwX29mX3Qgc2V4cF9vZl9nIHsgZyB9ID0gc2V4cF9vZl9nIGdcbmxldFtAaW5saW5lXSB0X29mX3NleHAgZ19vZl9zZXhwIHNleHAgPSB7IGcgPSBnX29mX3NleHAgc2V4cCB9XG5sZXRbQGlubGluZV0gZ2xvYmFsaXplIF8geyBnIH0gPSB7IGcgfVxubGV0W0BpbmxpbmVdIGVxdWFsIGVxdWFsX2cgeyBnID0gYSB9IHsgZyA9IGIgfSA9IGVxdWFsX2cgYSBiXG5cbigqIFByb29mIHRoYXQgW2Ryb3Bfc29tZV0gY2FuIGJlIHNhZmVseSBpbXBsZW1lbnRlZCBpbiBub3JtYWwgb2NhbWwuIEJ1dCB0aGlzXG4gICBpbXBsZW1lbnRhdGlvbiBhbGxvY2F0ZXMgYSBzZWNvbmQgb3B0aW9uIGxvY2FsbHkuICopXG5sZXQgX2Ryb3Bfc29tZV9wcm9vZiA6ICdhIHQgb3B0aW9uIC0+ICdhIG9wdGlvbiA9XG4gIGZ1biB4IC0+XG4gIG1hdGNoIHggd2l0aFxuICB8IE5vbmUgLT4gTm9uZVxuICB8IFNvbWUgeyBnIH0gLT4gU29tZSBnXG47O1xuXG4oKiBUaGlzIHZlcnNpb24gb2YgW2Ryb3Bfc29tZV0gZG9lcyBub3QuICopXG5leHRlcm5hbCBkcm9wX3NvbWUgOiAnYSB0IG9wdGlvbiAtPiAnYSBvcHRpb24gPSBcIiVpZGVudGl0eVwiXG5cbigqIEEgc2ltaWxhciBhcmd1bWVudCBhcHBsaWVzIHRvIFtkcm9wX29rXSBhbmQgW2Ryb3BfZXJyb3JdLiAqKVxuZXh0ZXJuYWwgZHJvcF9vayA6ICgnYSB0LCAnYikgUmVzdWx0LnQgLT4gKCdhLCAnYikgUmVzdWx0LnQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBkcm9wX2Vycm9yIDogKCdhLCAnYiB0KSBSZXN1bHQudCAtPiAoJ2EsICdiKSBSZXN1bHQudCA9IFwiJWlkZW50aXR5XCJcblxuKCogUHJvb2YgdGhhdCBbaW5qZWN0X3NvbWVdIGNhbiBiZSBzYWZlbHkgaW1wbGVtZW50ZWQgaW4gbm9ybWFsIG9jYW1sLiBCdXQgdGhpc1xuICAgaW1wbGVtZW50YXRpb24gYWxsb2NhdGVzIGEgc2Vjb25kIG9wdGlvbiBsb2NhbGx5LiAqKVxubGV0IF9pbmplY3Rfc29tZSA6ICdhIG9wdGlvbiAtPiAnYSB0IG9wdGlvbiA9XG4gIGZ1biB4IC0+XG4gIG1hdGNoIHggd2l0aFxuICB8IE5vbmUgLT4gTm9uZVxuICB8IFNvbWUgeSAtPiBTb21lIHsgZyA9IHkgfVxuOztcblxuZXh0ZXJuYWwgaW5qZWN0X3NvbWUgOiAnYSBvcHRpb24gLT4gJ2EgdCBvcHRpb24gPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBpbmplY3Rfb2sgOiAoJ2EsICdiKSBSZXN1bHQudCAtPiAoJ2EgdCwgJ2IpIFJlc3VsdC50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgaW5qZWN0X2Vycm9yIDogKCdhLCAnYikgUmVzdWx0LnQgLT4gKCdhLCAnYiB0KSBSZXN1bHQudCA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGluamVjdF9yZXN1bHQgOiAoJ2EsICdiKSBSZXN1bHQudCAtPiAoJ2EgdCwgJ2IgdCkgUmVzdWx0LnQgPSBcIiVpZGVudGl0eVwiXG5cbigqIFdlIHNwZWNpZmljYWxseSB1c2UgdGhlIFwibGVnYWN5XCIgW01ha2VfYmluYWJsZTFfd2l0aG91dF91dWlkXSBmdW5jdGlvbiwgYmVjYXVzZSBpdFxuICAgX2RvZXNuJ3RfIGNoYW5nZSB0aGUgYmluX2lvIHNoYXBlLCB3aGljaCBpcyB3aGF0IHdlIHdhbnQgaGVyZS4gKilcbmluY2x1ZGVcbiAgQmluX3Byb3QuVXRpbHMuTWFrZV9iaW5hYmxlMV93aXRob3V0X3V1aWQgW0BhbGVydCBcIi1sZWdhY3lcIl0gW0BpbmxpbmVkIGhpbnRdIChzdHJ1Y3RcbiAgbW9kdWxlIEJpbmFibGUgPSBzdHJ1Y3RcbiAgICB0eXBlICdhIHQgPSAnYSBbQEBkZXJpdmluZyBiaW5faW9dXG4gIGVuZFxuXG4gIHR5cGUgbm9ucmVjICdhIHQgPSAnYSB0XG5cbiAgbGV0W0BpbmxpbmVdIG9mX2JpbmFibGUgZyA9IHsgZyB9XG4gIGxldFtAaW5saW5lXSB0b19iaW5hYmxlIHsgZyB9ID0gZ1xuZW5kKVxuIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3RfR2VsIiwiY3N0X2EiLCJjc3RfZ2VsIiwiY3N0X2dlbF9tbCIsImNzdF90IiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImdsb2JhbF9kYXRhIiwiQmluX3Byb3RfQ29tbW9uIiwiQmluX3NoYXBlIiwiQmluX3Byb3RfU2hhcGUiLCJQcHhfbW9kdWxlX3RpbWVyX3J1bnRpbWUiLCJQcHhfYmVuY2hfbGliX0JlbmNobWFya19hY2N1bXUiLCJQcHhfZXhwZWN0X3J1bnRpbWUiLCJQcHhfaW5saW5lX3Rlc3RfbGliIiwiQmluX3Byb3RfVXRpbHMiLCJjcmVhdGUiLCJnIiwicGFyYW0iLCJtYXAiLCJjb21wYXJlIiwiY29tcGFyZV9nIiwiYSIsImhhc2hfZm9sZF90IiwiaGFzaF9mb2xkX2ciLCJoYXNoX3N0YXRlIiwic2V4cF9vZl90Iiwic2V4cF9vZl9nIiwidF9vZl9zZXhwIiwiZ19vZl9zZXhwIiwic2V4cCIsImdsb2JhbGl6ZSIsImVxdWFsIiwiZXF1YWxfZyIsImdyb3VwIiwiYmluX3NoYXBlX3QiLCJiaW5fc2l6ZV90Iiwic2l6ZV9vZl9hIiwiYmluX3dyaXRlX3QiLCJ3cml0ZV9hIiwiYmluX3JlYWRfdCIsIm9mX2EiLCJidWYiLCJwb3NfcmVmIiwidmludCIsIm9mX2JpbmFibGUiLCJ0b19iaW5hYmxlIiwiaW5jbHVkZSIsImJpbl93cml0ZXJfdCIsImJpbl9yZWFkZXJfdCIsImJpbl90IiwiR2VsIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxrQkFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLDJCQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLEdDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxPQUFBQyxHQU93QixTQUFLO0FBQUEsWUFBQUEsRUFBQUMsT0FDTixhQUFDO0FBQUEsWUFBQUMsSUFBQUQsT0FBQWYsR0FDSSwyQkFBVztBQUFBLFlBQUFpQixRQUFBQyxXQUFBQyxHQUFBSjtBQUFBQSxJQUNjLHNDQUFhO0FBQUE7QUFBQSxZQUFBSyxZQUFBQyxhQUFBQyxZQUFBUCxPQUNWLGlEQUF3QjtBQUFBO0FBQUEsWUFBQVEsVUFBQUMsV0FBQVQsT0FDdkMsbUNBQVc7QUFBQSxZQUFBVSxVQUFBQyxXQUFBQyxNQUNaLGtDQUFzQjtBQUFBLFlBQUFDLFVBQUEsR0FBQWIsT0FDN0IsYUFBSztBQUFBLFlBQUFjLE1BQUFDLFNBQUFYLEdBQUFKLE9BQ1csb0NBQVc7QUFBQTtBQUFBLFFBcUM1QztBQUFBO0FBQUE7QUFBQSxRQUFKO0FBQUE7QUFBQSxRQUFSO0FBQUEsSUFBQWdCLFFBQUE7QUFBQSxJQUFBakMsUUFBUTtBQUFBO0FBQUEsWUFBQWtDLFlBQUFiO0FBQUFBLFFBQUEsSUFBUjtBQUFBLDZEQUFrQztBQUFBO0FBQUEsWUFBQWMsV0FBQUMsV0FBdEIsaUJBQUU7QUFBQSxZQUFBQyxZQUFBQyxTQUFGLGVBQUU7QUFBQSxZQUFBQyxXQUFBQyxNQUFBQyxLQUFBQyxTQUFBQztBQUFBQSxJQUFGLG9EQUFFO0FBQUE7QUFBQSxZQUFBSixhQUFBQyxNQUFGLFlBQUU7QUFBQSxZQUFBSSxXQUFBNUIsR0FLWSxTQUFLO0FBQUEsWUFBQTZCLFdBQUE1QixPQUNELGFBQUM7QUFBQTtBQUFBLElBQUE2QjtBQUFBQSxNQU52QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBWixnQkFBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBRSxnQkFBQTtBQUFBLElBQUFFLGVBQUE7QUFBQSxJQUFBQSxlQUFBO0FBQUEsSUFBQVEsZUFBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsR0FPUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkQzREo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQzJESTtBQUFBO0FBQUEsRUQzREoiLCJpZ25vcmVMaXN0IjpbMF19fV19
