// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Diffable_cinaps__
//# shape: Diffable_cinaps__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Diffable_cinaps = [0],
    Diffable_cinaps$0 = [0, Diffable_cinaps];
   runtime.caml_register_global(0, Diffable_cinaps$0, "Diffable_cinaps__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable_cinaps__Tuple_helpers
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
//# shape: Diffable_cinaps__Tuple_helpers:[N,F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst$45 = "\n",
    cst$39 = "\n\n",
    cst$48 = "\n\n        ",
    cst_module$6 = "\n\n        module ",
    cst_type$6 = "\n\n      type ",
    cst$47 = "\n          ",
    cst_open$2 = "\n          open ",
    cst_end_module$1 = "\n      end\n\n      module ",
    cst_module$7 = "\n      module ",
    cst_type$7 = "\n      type ",
    cst_module$8 = "\n    module ",
    cst$50 = "\n -> ",
    cst$41 = " ",
    cst$52 = " * ",
    cst$49 = " -> ",
    cst_local$4 = " -> local_ ",
    cst_to$3 = " -> to_: ",
    cst_sig$4 = " : sig\n        ",
    cst$51 = " = ",
    cst_struct$4 = " = struct\n        ",
    cst_Optional_diff_t$2 = " Optional_diff.t)",
    cst_deriving_sexp_bin_io$1 = " [@@deriving sexp, bin_io]",
    cst_list_local$1 = " list -> local_ ",
    cst_with_None_diff_Some_d$2 =
      " with\n               | None -> diff\n               | Some d -> ",
    cst$42 = "(",
    cst$40 = ")",
    cst$44 = ", ",
    cst_Variants_to_rank_t1$1 = ".Variants.to_rank t1) (",
    cst_t$3 = ".t",
    cst$46 = "?",
    cst_Diffable_cinaps_Tuple_help = "Diffable_cinaps__Tuple_helpers",
    cst_exn = "_exn",
    cst_derived_on$1 = "derived_on",
    cst_diffable_cinaps = "diffable_cinaps",
    cst_lib_cinaps_tuple_helpers_m = "lib/cinaps/tuple_helpers.ml",
    cst_local$3 = "local_ ",
    cst_t$2 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$32 = cst$40,
    cst$33 = cst$41,
    cst$34 = cst$42,
    cst$31 = cst$43,
    cst$30 = "\n          | _ :: _ -> ",
    cst$29 = "\n      | ",
    cst$27 = cst$46,
    cst$28 = "~",
    cst$26 = cst$41,
    cst_from$1 = "from_",
    cst_to$1 = "to_",
    cst_derived_on$0 = cst_derived_on$1,
    cst_t$1 = cst_t$2,
    cst$35 = cst$47,
    cst$36 = " =\n           ",
    cst$37 = " () =\n          ",
    cst$38 = cst$48,
    cst$21 = cst$44,
    cst$19 = ":",
    cst$20 = cst$46,
    cst$15 = cst$49,
    cst$16 = cst$49,
    cst$17 = cst$49,
    cst$18 = cst$49,
    cst$14 = cst$42,
    cst$10 = cst$40,
    cst$11 = cst$49,
    cst$12 = cst$49,
    cst$13 = cst$42,
    cst$22 = cst$47,
    cst$23 = cst$49,
    cst$24 = cst$49,
    cst$25 = cst$48,
    cst$8 = cst$51,
    cst$9 = cst$51,
    cst$7 = cst$51,
    cst$6 = cst$43,
    cst$0 = cst$43,
    cst$1 = cst$41,
    cst$2 = " =",
    cst$3 = " =\n          ",
    cst$4 = cst$41,
    cst$5 = cst$51,
    cst = cst$51,
    diff_module_name = "Diff",
    entry_diff_module_name = "Entry_diff",
    for_inlined_tuple_module_name = "For_inlined_tuple",
    cst_t = cst_t$2,
    cst_derived_on = cst_derived_on$1,
    cst_t$0 = cst_t$2,
    max_supported =
      [0, 6, [0, cst_lib_cinaps_tuple_helpers_m, 334, 11197, 11220]],
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Base_Printf = global_data.Base__Printf,
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Diffable_cinaps_Tuple_help);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable_cinaps);
   Ppx_expect_runtime[1][1].call(null, cst_lib_cinaps_tuple_helpers_m);
   Ppx_inline_test_lib[6].call(null, cst_diffable_cinaps, "tuple_helpers.ml");
   var
    b = [0, [11, "Tuple", [4, 3, 0, 0, 0]], "Tuple%i"],
    c = [0, [11, "'a", [4, 3, 0, 0, 0]], "'a%i"],
    cst_diff = "_diff",
    d = [0, [12, 116, [4, 3, 0, 0, 0]], "t%i"],
    e = [0, [2, 0, [11, " Gel.t", 0]], "%s Gel.t"],
    f = [0, cst$44],
    g = [0, [12, 40, [2, 0, [11, ") ", [2, 0, 0]]]], "(%s) %s"];
   function module_name(size){
    return caml_call1(Base_Printf[2].call(null, b), size);
   }
   function nums(size){
    return Base_List[40].call(null, size, function(a){return 1 + a | 0;});
   }
   function var$(i){return caml_call1(Base_Printf[2].call(null, c), i);}
   function diff_var(i){
    var a = var$(i);
    return Base[241].call(null, a, cst_diff);
   }
   function create_arg(i){return caml_call1(Base_Printf[2].call(null, d), i);}
   function gel(i){
    var a = var$(i);
    return caml_call1(Base_Printf[2].call(null, e), a);
   }
   function vars(size){
    var a = nums(size);
    return Base_List[53].call(null, a, var$);
   }
   function diff_vars(size){
    var
     a = nums(size),
     b = Base_List[53].call(null, a, diff_var),
     c = vars(size);
    return Base[222].call(null, c, b);
   }
   function type(name, vars, size){
    var a = caml_call1(vars, size), b = Base_String[68].call(null, f, a);
    return caml_call2(Base_Printf[2].call(null, g), b, name);
   }
   var
    h =
      [0,
       entry_diff_module_name,
       [0, Ppx_string_runtime[1][2].call(null, cst_t$3), 0]],
    a = Ppx_string_runtime[1][4].call(null, h),
    i =
      caml_call1
       (Base_Printf[2].call(null, [0, [2, 0, [11, cst_t$3, 0]], "%s.t"]),
        diff_module_name),
    variant_name =
      Base_Printf[2].call(null, [0, [12, 84, [4, 3, 0, 0, 0]], "T%i"]),
    j = [0, cst$52],
    cst_deriving_sexp_bin_io = cst_deriving_sexp_bin_io$1,
    cst_type = "type ",
    cst_private = " private",
    k = [0, [11, "| ", [2, 0, [11, " of ", [2, 0, 0]]]], "| %s of %s"],
    m = [0, cst$45],
    cst_list_deriving_sexp_bin_io_ =
      " list [@@deriving sexp, bin_io, quickcheck]\n\n",
    cst_type$0 = cst_type$6,
    cst_deriving_variants_sexp_bin =
      "\n        [@@deriving variants, sexp, bin_io, quickcheck]\n      end\n      ",
    cst_type$1 = "\n        type ",
    cst_sig = ": sig",
    cst_module = "\n\n      module ",
    cst_type$2 = cst_type$7,
    cst_struct = "= struct",
    cst_open = "open ",
    cst_deriving_sexp_bin_io$0 = cst_deriving_sexp_bin_io$1,
    n = [0, cst$52],
    cst_type$3 = " type ",
    cst_deriving_sexp_bin_io_quick =
      " [@@deriving sexp, bin_io, quickcheck]\n  ",
    cst_type$4 = cst_type$6,
    cst_type$5 = cst_type$7,
    cst_Optional_diff_t = cst_Optional_diff_t$2,
    cst_local = cst_local$4,
    cst_to = cst_to$3,
    cst_from = "(from: ",
    o = [0, cst$50],
    p = [0, cst$50],
    cst_Optional_diff_t$0 = cst_Optional_diff_t$2,
    cst_list_local = cst_list_local$1,
    q = [0, cst$50],
    r = [0, [11, cst_local$3, [2, 0, 0]], "local_ %s"],
    cst_Optional_diff_t$1 = " Optional_diff.t\n         ",
    cst_list_local$0 = cst_list_local$1,
    cst_val_of_list_exn = "\n\n        val of_list_exn : ",
    cst_Optional_diff_t_val_apply_ =
      " Optional_diff.t\n\n        val apply_exn : ",
    cst_local$0 = cst_local$4,
    cst_to$0 = cst_to$3,
    cst_from$0 = " -> from: ",
    cst_val_get = "\n        val get : ",
    s = [0, cst$49],
    cst_Of_variant_t = ") Of_variant.t) ",
    cst_local$1 = ":local_ ((",
    t = [0, cst$49],
    cst_end_end_end = "\n        end\n      end\n    end\n       ",
    cst_sig$0 = " : sig\n          ",
    cst_module$0 = cst_module$6,
    cst_sig$1 = cst_sig$4,
    cst_end_module = cst_end_module$1,
    cst_val_create_of_variants = "\n\n        val create_of_variants : ",
    cst_unit = " -> unit -> ",
    cst_val_create = "\n\n        val create : ",
    cst_val_singleton = "\n\n        val singleton : ",
    cst_sig$2 = cst_sig$4,
    cst_module$1 = cst_module$7,
    cst_sig$3 = " : sig\n      ",
    cst_module$2 = cst_module$8,
    u = [0, [11, "get", [4, 3, 0, 0, 0]], "get%i"],
    v = [0, [11, "apply", [4, 3, 0, 0, [11, cst_exn, 0]]], "apply%i_exn"],
    w = [0, [11, "of_list", [4, 3, 0, 0, [11, cst_exn, 0]]], "of_list%i_exn"],
    x = [0, [2, 0, [4, 3, 0, 0, 0]], "%s%i"],
    y = [0, [11, "{Gel.g = ", [2, 0, [12, 125, 0]]], "{Gel.g = %s}"],
    cst_diff_in = ", diff\n         in\n         ",
    cst_d_tl = " d, tl\n          | _ -> ",
    cst_d_tl$0 = " d :: tl -> ",
    cst_diff_match_diff_with =
      ", diff =\n           match diff with\n          | ",
    cst_let = " let ",
    cst_d_diff_in = " d :: diff\n          in\n       ",
    cst_with_None_diff_Some_d =
      " with\n            | None -> diff\n            | Some d -> ",
    cst_to$2 = " ~to_:",
    cst_from$2 = " ~from:",
    cst_let_diff_match_optional_Op =
      " let diff =\n            match%optional.Optional_diff ",
    z =
      [0,
       [12, 97, [4, 3, 0, 0, [11, "_diff_of_sexp", 0]]],
       "a%i_diff_of_sexp"],
    A = [0, [12, 97, [4, 3, 0, 0, [11, "_of_sexp", 0]]], "a%i_of_sexp"],
    B = [0, cst$41],
    C = [0, cst$41],
    cst_d_diff = " d :: diff\n            ",
    cst_with_None_diff_Some_d$0 = cst_with_None_diff_Some_d$2,
    cst_match_optional_Optional_di = " match%optional.Optional_diff ",
    cst_d_diff$0 = " d :: diff\n           ",
    cst_with_None_diff_Some_d$1 = cst_with_None_diff_Some_d$2,
    cst_match = " match ",
    cst_in = "\n          in\n        ",
    cst_let_diff = "let diff =\n            ",
    cst_diff$0 = "\n      diff",
    D = [0, cst$45],
    cst_let_diff_in = "let diff = [] in\n      ",
    cst_d_acc_tl = " d :: acc) tl)\n         ",
    cst_d_ds_with_None_loop_acc_tl =
      " (d :: ds) with\n         | None -> loop acc tl\n         | Some d -> loop (",
    cst_x_x_assert_false_in_match_ =
      " x -> x\n          | _ -> assert false)\n        in\n        (match%optional.Optional_diff ",
    cst_true_false_in_let_ds_List_ =
      " _ -> true\n          | _ -> false)\n        in\n        let ds = List.map ds ~f:(function\n          | ",
    cst_d_tl_let_ds_tl_List_split_ =
      " d :: tl ->\n        let ds, tl = List.split_while tl ~f:(function\n          | ",
    cst_local$2 = cst_local$3,
    cst_failwith_BUG_non_empty_dif =
      'failwith "BUG: non-empty diff after apply"\n        ',
    E = [0, ","],
    cst_match_diff_with = "\n          match diff with\n          | [] -> ",
    F = [0, cst$43],
    cst_derived_on_in = " = derived_on in\n          ",
    G = [0, cst$44],
    cst_derived_on_diff_let = " derived_on diff =\n          let ",
    H = [0, cst$41],
    cst_match_diff_with_local_Opti =
      "\n            match diff with\n            | [] -> local_ Optional_diff.none\n            | _ :: _ -> local_ Optional_diff.return diff)\n\n\n        let apply_exn ",
    I = [0, cst$43],
    cst_to_in_let_diff_in =
      " = to_ in\n            let diff = [] in\n            ",
    J = [0, cst$44],
    cst_from_in_let = " = from in\n            let ",
    K = [0, cst$44],
    cst_from_to_if_Base_phys_equal =
      " ~from ~to_ =\n          if Base.phys_equal from to_\n          then local_ Optional_diff.none\n          else (\n            let ",
    L = [0, cst$41],
    cst_let_get = "\n        let get ",
    M = [0, [12, 95, [2, 0, 0]], "_%s"],
    N = [0, cst$41],
    cst_in_local_Optional_diff_ret =
      "\n            in\n            local_ Optional_diff.return (loop [] diff)\n         ",
    O = [0, cst$45],
    cst_ts_match_ts_with_local_Opt =
      " ts =\n        match ts with\n        | [] -> local_ Optional_diff.none\n        | _ :: _ ->\n          match List.concat ts |> List.stable_sort ~compare:compare_rank with\n          | [] -> local_ Optional_diff.return []\n          | _ :: _ as diff ->\n            let rec loop acc = function\n              | [] -> List.rev acc\n               ",
    cst_let_of_list_exn = "\n      let of_list_exn ",
    cst_Variants = ".Variants.",
    cst_let_of_list_exn_of_list_ex =
      "\n\n          let of_list_exn = of_list_exn\n        end\n      end\n    end\n       ",
    cst_open$0 = cst_open$2,
    cst_open$1 = cst_open$2,
    cst_struct$0 = " = struct\n          ",
    cst_module$3 = cst_module$6,
    cst_struct$1 = cst_struct$4,
    cst_end_module$0 = cst_end_module$1,
    cst_let_create_of_variants = "\n\n        let create_of_variants ",
    cst_Variants_to_name_dup_let_c =
      ".Variants.to_name dup)\n\n        let create ",
    cst_sexp_List_sort_compare_com =
      ' sexp |> List.sort ~compare:compare_rank in\n          match List.find_consecutive_duplicate l ~equal:equal_rank with\n          | None -> l\n          | Some (dup, _) ->\n           failwith ("Duplicate entry in tuple diff: " ^ ',
    cst_sexp_let_l_t_of_sexp = " sexp =\n          let l = t_of_sexp ",
    cst_let_singleton_entry_diff_e =
      "\n\n        let singleton entry_diff = [entry_diff]\n\n        let t_of_sexp ",
    cst_Variants_to_rank_t2 = ".Variants.to_rank t2)\n        ;;\n\n        ",
    cst_Variants_to_rank_t1 = cst_Variants_to_rank_t1$1,
    cst_Variants_to_rank_t2_let_eq =
      ".Variants.to_rank t2)\n        ;;\n\n        let equal_rank t1 t2 =\n          Int.equal (",
    cst_Variants_to_rank_t1$0 = cst_Variants_to_rank_t1$1,
    cst_let_compare_rank_t1_t2_Int =
      "\n\n        let compare_rank t1 t2 =\n          Int.compare (",
    cst_struct$2 = cst_struct$4,
    cst_module$4 = cst_module$7,
    cst_struct$3 = " = struct\n      ",
    cst_module$5 = cst_module$8;
   function type_declaration(size){
    var
     a = vars(size),
     tuple = Base_String[68].call(null, j, a),
     b =
       [0,
        tuple,
        [0, Ppx_string_runtime[1][2].call(null, cst_deriving_sexp_bin_io), 0]],
     c = [0, Ppx_string_runtime[1][2].call(null, cst), b],
     d = [0, type(cst_t, vars, size), c],
     e = [0, Ppx_string_runtime[1][2].call(null, cst_type), d];
    return Ppx_string_runtime[1][4].call(null, e);
   }
   function diff_type_declarations(size, signature){
    var maybe_private = signature ? cst_private : cst$6;
    if(signature)
     var maybe_open_entry_diff = cst$0;
    else
     var
      x =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_open),
         [0, entry_diff_module_name, 0]],
      maybe_open_entry_diff = Ppx_string_runtime[1][4].call(null, x);
    var
     d =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_list_deriving_sexp_bin_io_),
        0],
     e = [0, type(a, diff_vars, size), d],
     f =
       [0, maybe_private, [0, Ppx_string_runtime[1][2].call(null, cst$1), e]],
     g = [0, Ppx_string_runtime[1][2].call(null, cst$2), f],
     h = [0, type(cst_t$0, diff_vars, size), g],
     i =
       [0,
        maybe_open_entry_diff,
        [0, Ppx_string_runtime[1][2].call(null, cst_type$0), h]],
     j =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_deriving_variants_sexp_bin),
        i],
     b = nums(size),
     c =
       Base_List[53].call
        (null,
         b,
         function(i){
          var a = diff_var(i), b = caml_call1(variant_name, i);
          return caml_call2(Base_Printf[2].call(null, k), b, a);
         }),
     l = [0, Base_String[68].call(null, m, c), j],
     n = [0, Ppx_string_runtime[1][2].call(null, cst$3), l],
     o = [0, type(cst_t$0, diff_vars, size), n],
     p = [0, Ppx_string_runtime[1][2].call(null, cst_type$1), o],
     q = signature ? cst_sig : cst_struct,
     r =
       [0,
        entry_diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst$4), [0, q, p]]],
     s = [0, Ppx_string_runtime[1][2].call(null, cst_module), r],
     t = [0, type(cst_t, vars, size), s],
     u = [0, Ppx_string_runtime[1][2].call(null, cst$5), t],
     v = [0, type(cst_derived_on, vars, size), u],
     w = [0, Ppx_string_runtime[1][2].call(null, cst_type$2), v];
    return Ppx_string_runtime[1][4].call(null, w);
   }
   function for_inlined_tuple_type_declara(size){
    var
     a =
       [0, Ppx_string_runtime[1][2].call(null, cst_deriving_sexp_bin_io$0), 0],
     b = nums(size),
     c = Base_List[53].call(null, b, gel),
     d = [0, Base_String[68].call(null, n, c), a],
     e = [0, Ppx_string_runtime[1][2].call(null, cst$7), d],
     f = [0, type(cst_t, vars, size), e],
     g = [0, Ppx_string_runtime[1][2].call(null, cst_type$3), f];
    return Ppx_string_runtime[1][4].call(null, g);
   }
   function for_inlined_tuple_diff_type_de(size){
    var
     a =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_deriving_sexp_bin_io_quick),
        0],
     b = [0, type(i, diff_vars, size), a],
     c = [0, Ppx_string_runtime[1][2].call(null, cst$8), b],
     d = [0, type(cst_t$0, diff_vars, size), c],
     e = [0, Ppx_string_runtime[1][2].call(null, cst_type$4), d],
     f = [0, type(cst_t, vars, size), e],
     g = [0, Ppx_string_runtime[1][2].call(null, cst$9), f],
     h = [0, type(cst_derived_on, vars, size), g],
     j = [0, Ppx_string_runtime[1][2].call(null, cst_type$5), h];
    return Ppx_string_runtime[1][4].call(null, j);
   }
   function tuple_mli(size){
    var
     nums$0 = nums(size),
     derived_on_type = type(cst_derived_on, vars, size),
     diff_type = type(cst_t$0, diff_vars, size),
     b =
       Base_List[53].call
        (null,
         nums$0,
         function(i){
          var
           a =
             [0, Ppx_string_runtime[1][2].call(null, cst_Optional_diff_t), 0],
           b = [0, diff_var(i), a],
           c = [0, Ppx_string_runtime[1][2].call(null, cst_local), b],
           d = [0, var$(i), c],
           e = [0, Ppx_string_runtime[1][2].call(null, cst_to), d],
           f = [0, var$(i), e],
           g = [0, Ppx_string_runtime[1][2].call(null, cst_from), f];
          return Ppx_string_runtime[1][4].call(null, g);
         }),
     get_functions = Base_String[68].call(null, o, b),
     apply_functions =
       Base_List[53].call
        (null,
         nums$0,
         function(i){
          var
           a = [0, Ppx_string_runtime[1][2].call(null, cst$10), 0],
           b = [0, var$(i), a],
           c = [0, Ppx_string_runtime[1][2].call(null, cst$11), b],
           d = [0, diff_var(i), c],
           e = [0, Ppx_string_runtime[1][2].call(null, cst$12), d],
           f = [0, var$(i), e],
           g = [0, Ppx_string_runtime[1][2].call(null, cst$13), f];
          return Ppx_string_runtime[1][4].call(null, g);
         }),
     apply_functions$0 = Base_String[68].call(null, p, apply_functions),
     of_list_functions =
       Base_List[53].call
        (null,
         nums$0,
         function(i){
          var
           a =
             [0,
              Ppx_string_runtime[1][2].call(null, cst_Optional_diff_t$0),
              0],
           b = [0, diff_var(i), a],
           c = [0, Ppx_string_runtime[1][2].call(null, cst_list_local), b],
           d = [0, diff_var(i), c],
           e = [0, Ppx_string_runtime[1][2].call(null, cst$14), d];
          return Ppx_string_runtime[1][4].call(null, e);
         }),
     c = Base_List[110].call(null, of_list_functions, apply_functions),
     d =
       Base_List[14].call
        (null,
         c,
         function(param){
          var y = param[2], x = param[1];
          return [0, x, [0, y, 0]];
         }),
     of_list_and_apply_functions = Base_String[68].call(null, q, d);
    function function_declarations(local){
     var
      derived_on_type$0 =
        local
         ? caml_call1(Base_Printf[2].call(null, r), derived_on_type)
         : derived_on_type,
      a =
        [0,
         diff_type,
         [0, Ppx_string_runtime[1][2].call(null, cst_Optional_diff_t$1), 0]],
      b =
        [0,
         diff_type,
         [0, Ppx_string_runtime[1][2].call(null, cst_list_local$0), a]],
      c =
        [0,
         of_list_and_apply_functions,
         [0, Ppx_string_runtime[1][2].call(null, cst$15), b]],
      d =
        [0,
         derived_on_type$0,
         [0, Ppx_string_runtime[1][2].call(null, cst_val_of_list_exn), c]],
      e = [0, diff_type, [0, Ppx_string_runtime[1][2].call(null, cst$16), d]],
      f =
        [0,
         derived_on_type$0,
         [0, Ppx_string_runtime[1][2].call(null, cst$17), e]],
      g =
        [0,
         apply_functions$0,
         [0, Ppx_string_runtime[1][2].call(null, cst$18), f]],
      h =
        [0,
         diff_type,
         [0,
          Ppx_string_runtime[1][2].call(null, cst_Optional_diff_t_val_apply_),
          g]],
      i =
        [0,
         derived_on_type$0,
         [0, Ppx_string_runtime[1][2].call(null, cst_local$0), h]],
      j =
        [0,
         derived_on_type$0,
         [0, Ppx_string_runtime[1][2].call(null, cst_to$0), i]],
      k =
        [0,
         get_functions,
         [0, Ppx_string_runtime[1][2].call(null, cst_from$0), j]],
      l = [0, Ppx_string_runtime[1][2].call(null, cst_val_get), k];
     return Ppx_string_runtime[1][4].call(null, l);
    }
    var
     f =
       Base_List[53].call
        (null,
         nums$0,
         function(i){
          var
           b = [0, Ppx_string_runtime[1][2].call(null, cst_Of_variant_t), 0],
           c = [0, type(a, diff_vars, size), b],
           d = [0, Ppx_string_runtime[1][2].call(null, cst$21), c],
           e = [0, diff_var(i), d],
           f = [0, Ppx_string_runtime[1][2].call(null, cst_local$1), e],
           g = [0, create_arg(i), f];
          return Ppx_string_runtime[1][4].call(null, g);
         }),
     create_of_variants_args = Base_String[68].call(null, t, f),
     g = [0, Ppx_string_runtime[1][2].call(null, cst_end_end_end), 0],
     h = [0, function_declarations(1), g],
     i = [0, Ppx_string_runtime[1][2].call(null, cst$22), h],
     j = [0, for_inlined_tuple_diff_type_de(size), i],
     k =
       [0,
        diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_sig$0), j]],
     l = [0, Ppx_string_runtime[1][2].call(null, cst_module$0), k],
     m = [0, for_inlined_tuple_type_declara(size), l],
     n =
       [0,
        for_inlined_tuple_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_sig$1), m]],
     u =
       [0,
        diff_type,
        [0, Ppx_string_runtime[1][2].call(null, cst_end_module), n]],
     v =
       [0,
        create_of_variants_args,
        [0, Ppx_string_runtime[1][2].call(null, cst$23), u]],
     w =
       [0,
        diff_type,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_val_create_of_variants),
         v]],
     x = [0, Ppx_string_runtime[1][2].call(null, cst_unit), w],
     e =
       Base_List[53].call
        (null,
         nums$0,
         function(i){
          var
           a = [0, diff_var(i), 0],
           b = [0, Ppx_string_runtime[1][2].call(null, cst$19), a],
           c = [0, create_arg(i), b],
           d = [0, Ppx_string_runtime[1][2].call(null, cst$20), c];
          return Ppx_string_runtime[1][4].call(null, d);
         }),
     y = [0, Base_String[68].call(null, s, e), x],
     z =
       [0,
        diff_type,
        [0, Ppx_string_runtime[1][2].call(null, cst_val_create), y]],
     A = [0, Ppx_string_runtime[1][2].call(null, cst$24), z],
     B = [0, type(a, diff_vars, size), A],
     C = [0, Ppx_string_runtime[1][2].call(null, cst_val_singleton), B],
     D = [0, function_declarations(0), C],
     E = [0, Ppx_string_runtime[1][2].call(null, cst$25), D],
     F = [0, diff_type_declarations(size, 1), E],
     G =
       [0,
        diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_sig$2), F]],
     H = [0, Ppx_string_runtime[1][2].call(null, cst_module$1), G],
     I = [0, type_declaration(size), H],
     J = [0, Ppx_string_runtime[1][2].call(null, cst_sig$3), I],
     K = [0, module_name(size), J],
     L = [0, Ppx_string_runtime[1][2].call(null, cst_module$2), K];
    return Ppx_string_runtime[1][4].call(null, L);
   }
   function tuple_ml(size){
    var
     nums$0 = nums(size),
     get = Base_Printf[2].call(null, u),
     apply = Base_Printf[2].call(null, v),
     of_list = Base_Printf[2].call(null, w);
    function maybe_gel(s, i, gel){
     var base = caml_call2(Base_Printf[2].call(null, x), s, i);
     return gel ? caml_call1(Base_Printf[2].call(null, y), base) : base;
    }
    function apply_diff(n){
     var
      a = [0, Ppx_string_runtime[1][2].call(null, cst_diff_in), 0],
      b = [0, maybe_gel(cst_derived_on$0, n, 0), a],
      c = [0, Ppx_string_runtime[1][2].call(null, cst_d_tl), b],
      d = [0, maybe_gel(cst_derived_on$0, n, 0), c],
      e = [0, Ppx_string_runtime[1][2].call(null, cst$26), d],
      f = [0, caml_call1(apply, n), e],
      g = [0, Ppx_string_runtime[1][2].call(null, cst_d_tl$0), f],
      h = [0, caml_call1(variant_name, n), g],
      i =
        [0, Ppx_string_runtime[1][2].call(null, cst_diff_match_diff_with), h],
      j = [0, maybe_gel(cst_t$1, n, 0), i],
      k = [0, Ppx_string_runtime[1][2].call(null, cst_let), j];
     return Ppx_string_runtime[1][4].call(null, k);
    }
    function get_diff(n){
     var
      a = [0, Ppx_string_runtime[1][2].call(null, cst_d_diff_in), 0],
      b = [0, caml_call1(variant_name, n), a],
      c =
        [0, Ppx_string_runtime[1][2].call(null, cst_with_None_diff_Some_d), b],
      d = [0, maybe_gel(cst_to$1, n, 0), c],
      e = [0, Ppx_string_runtime[1][2].call(null, cst_to$2), d],
      f = [0, maybe_gel(cst_from$1, n, 0), e],
      g = [0, Ppx_string_runtime[1][2].call(null, cst_from$2), f],
      h = [0, caml_call1(get, n), g],
      i =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_let_diff_match_optional_Op),
         h];
     return Ppx_string_runtime[1][4].call(null, i);
    }
    var
     a = Base_Printf[2].call(null, z),
     b = Base_List[53].call(null, nums$0, a),
     c = Base_Printf[2].call(null, A),
     d = Base_List[53].call(null, nums$0, c),
     e = Base[222].call(null, d, b),
     of_sexp_functions = Base_String[68].call(null, B, e);
    function create_args(optional){
     var
      a =
        Base_List[53].call
         (null,
          nums$0,
          function(i){
           var a = [0, create_arg(i), 0], b = optional ? cst$27 : cst$28;
           return Ppx_string_runtime[1][4].call(null, [0, b, a]);
          });
     return Base_String[68].call(null, C, a);
    }
    function create_function(value, option_or_optional_diff){
     function maybe_add_diff(i){
      var m = [0, Ppx_string_runtime[1][2].call(null, cst_in), 0];
      if(898311236 <= option_or_optional_diff)
       var
        b = [0, Ppx_string_runtime[1][2].call(null, cst_d_diff), 0],
        c = [0, caml_call1(variant_name, i), b],
        d =
          [0,
           Ppx_string_runtime[1][2].call(null, cst_with_None_diff_Some_d$0),
           c],
        e = [0, caml_call1(value, i), d],
        f =
          [0,
           Ppx_string_runtime[1][2].call(null, cst_match_optional_Optional_di),
           e],
        a = Ppx_string_runtime[1][4].call(null, f);
      else
       var
        g = [0, Ppx_string_runtime[1][2].call(null, cst_d_diff$0), 0],
        h = [0, caml_call1(variant_name, i), g],
        j =
          [0,
           Ppx_string_runtime[1][2].call(null, cst_with_None_diff_Some_d$1),
           h],
        k = [0, caml_call1(value, i), j],
        l = [0, Ppx_string_runtime[1][2].call(null, cst_match), k],
        a = Ppx_string_runtime[1][4].call(null, l);
      var
       n = [0, Ppx_string_runtime[1][2].call(null, cst_let_diff), [0, a, m]];
      return Ppx_string_runtime[1][4].call(null, n);
     }
     var
      a = [0, Ppx_string_runtime[1][2].call(null, cst_diff$0), 0],
      b = Base_List[66].call(null, nums$0, maybe_add_diff),
      c = [0, Base_String[68].call(null, D, b), a],
      d = [0, Ppx_string_runtime[1][2].call(null, cst_let_diff_in), c];
     return Ppx_string_runtime[1][4].call(null, d);
    }
    function diff_of_list(i){
     var
      a = [0, Ppx_string_runtime[1][2].call(null, cst_d_acc_tl), 0],
      b = [0, caml_call1(variant_name, i), a],
      c =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_d_ds_with_None_loop_acc_tl),
         b],
      d = [0, caml_call1(of_list, i), c],
      e =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_x_x_assert_false_in_match_),
         d],
      f = [0, caml_call1(variant_name, i), e],
      g =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_true_false_in_let_ds_List_),
         f],
      h = [0, caml_call1(variant_name, i), g],
      j =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_d_tl_let_ds_tl_List_split_),
         h],
      k = [0, caml_call1(variant_name, i), j],
      l = [0, Ppx_string_runtime[1][2].call(null, cst$29), k];
     return Ppx_string_runtime[1][4].call(null, l);
    }
    function function_implementations(local){
     var
      maybe_local = local ? cst_local$2 : cst$31,
      a =
        [0,
         maybe_local,
         [0,
          Ppx_string_runtime[1][2].call(null, cst_failwith_BUG_non_empty_dif),
          0]],
      b = [0, Ppx_string_runtime[1][2].call(null, cst$30), a],
      c =
        Base_List[53].call
         (null, nums$0, function(a){return maybe_gel(cst_t$1, a, local);}),
      d = [0, maybe_local, [0, Base_String[68].call(null, E, c), b]],
      e = [0, Ppx_string_runtime[1][2].call(null, cst_match_diff_with), d],
      f = Base_List[53].call(null, nums$0, apply_diff),
      g = [0, Base_String[68].call(null, F, f), e],
      h = [0, Ppx_string_runtime[1][2].call(null, cst_derived_on_in), g],
      i =
        Base_List[53].call
         (null,
          nums$0,
          function(a){return maybe_gel(cst_derived_on$0, a, local);}),
      j = [0, Base_String[68].call(null, G, i), h],
      k = [0, Ppx_string_runtime[1][2].call(null, cst_derived_on_diff_let), j],
      l = Base_List[53].call(null, nums$0, apply),
      m = [0, Base_String[68].call(null, H, l), k],
      n =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_match_diff_with_local_Opti),
         m],
      o = Base_List[66].call(null, nums$0, get_diff),
      p = [0, Base_String[68].call(null, I, o), n],
      q = [0, Ppx_string_runtime[1][2].call(null, cst_to_in_let_diff_in), p],
      r =
        Base_List[53].call
         (null, nums$0, function(a){return maybe_gel(cst_to$1, a, local);}),
      s = [0, Base_String[68].call(null, J, r), q],
      t = [0, Ppx_string_runtime[1][2].call(null, cst_from_in_let), s],
      u =
        Base_List[53].call
         (null, nums$0, function(a){return maybe_gel(cst_from$1, a, local);}),
      v = [0, Base_String[68].call(null, K, u), t],
      w =
        [0,
         Ppx_string_runtime[1][2].call(null, cst_from_to_if_Base_phys_equal),
         v],
      x = Base_List[53].call(null, nums$0, get),
      y = [0, Base_String[68].call(null, L, x), w],
      z = [0, Ppx_string_runtime[1][2].call(null, cst_let_get), y];
     return Ppx_string_runtime[1][4].call(null, z);
    }
    var
     f =
       Base_List[14].call
        (null,
         nums$0,
         function(x){
          var
           a = caml_call1(apply, x),
           b = [0, caml_call1(Base_Printf[2].call(null, M), a), 0];
          return [0, caml_call1(of_list, x), b];
         }),
     of_list_and_apply_functions = Base_String[68].call(null, N, f),
     g =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_in_local_Optional_diff_ret),
        0],
     h = Base_List[53].call(null, nums$0, diff_of_list),
     i = [0, Base_String[68].call(null, O, h), g],
     j =
       [0,
        of_list_and_apply_functions,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_ts_match_ts_with_local_Opt),
         i]],
     k = [0, Ppx_string_runtime[1][2].call(null, cst_let_of_list_exn), j],
     of_list_function = Ppx_string_runtime[1][4].call(null, k);
    function create_arg_of_variant(i){
     var
      a = [0, Ppx_string_runtime[1][2].call(null, cst$32), 0],
      b = [0, create_arg(i), a],
      c =
        [0,
         entry_diff_module_name,
         [0, Ppx_string_runtime[1][2].call(null, cst_Variants), b]],
      d = [0, Ppx_string_runtime[1][2].call(null, cst$33), c],
      e = [0, create_arg(i), d],
      f = [0, Ppx_string_runtime[1][2].call(null, cst$34), e];
     return Ppx_string_runtime[1][4].call(null, f);
    }
    var
     l =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_let_of_list_exn_of_list_ex),
        0],
     m = [0, function_implementations(1), l],
     n =
       [0,
        entry_diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst$35), m]],
     o =
       [0,
        diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_open$0), n]],
     p = [0, Ppx_string_runtime[1][2].call(null, cst_open$1), o],
     q = [0, for_inlined_tuple_diff_type_de(size), p],
     r =
       [0,
        diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_struct$0), q]],
     s = [0, Ppx_string_runtime[1][2].call(null, cst_module$3), r],
     t = [0, for_inlined_tuple_type_declara(size), s],
     P =
       [0,
        for_inlined_tuple_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_struct$1), t]],
     Q = [0, Ppx_string_runtime[1][2].call(null, cst_end_module$0), P],
     R = [0, create_function(create_arg_of_variant, 898311236), Q],
     S = [0, Ppx_string_runtime[1][2].call(null, cst$36), R],
     T = [0, create_args(0), S],
     U =
       [0, Ppx_string_runtime[1][2].call(null, cst_let_create_of_variants), T],
     V = [0, create_function(create_arg, 729469813), U],
     W = [0, Ppx_string_runtime[1][2].call(null, cst$37), V],
     X = [0, create_args(1), W],
     Y =
       [0,
        entry_diff_module_name,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_Variants_to_name_dup_let_c),
         X]],
     Z =
       [0,
        of_sexp_functions,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_sexp_List_sort_compare_com),
         Y]],
     _ =
       [0,
        of_sexp_functions,
        [0, Ppx_string_runtime[1][2].call(null, cst_sexp_let_l_t_of_sexp), Z]],
     $ =
       [0,
        of_list_function,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_let_singleton_entry_diff_e),
         _]],
     aa = [0, Ppx_string_runtime[1][2].call(null, cst$38), $],
     ab = [0, function_implementations(0), aa],
     ac =
       [0,
        entry_diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_Variants_to_rank_t2), ab]],
     ad =
       [0,
        entry_diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_Variants_to_rank_t1), ac]],
     ae =
       [0,
        entry_diff_module_name,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_Variants_to_rank_t2_let_eq),
         ad]],
     af =
       [0,
        entry_diff_module_name,
        [0,
         Ppx_string_runtime[1][2].call(null, cst_Variants_to_rank_t1$0),
         ae]],
     ag =
       [0,
        Ppx_string_runtime[1][2].call(null, cst_let_compare_rank_t1_t2_Int),
        af],
     ah = [0, diff_type_declarations(size, 0), ag],
     ai =
       [0,
        diff_module_name,
        [0, Ppx_string_runtime[1][2].call(null, cst_struct$2), ah]],
     aj = [0, Ppx_string_runtime[1][2].call(null, cst_module$4), ai],
     ak = [0, type_declaration(size), aj],
     al = [0, Ppx_string_runtime[1][2].call(null, cst_struct$3), ak],
     am = [0, module_name(size), al],
     an = [0, Ppx_string_runtime[1][2].call(null, cst_module$5), am];
    return Ppx_string_runtime[1][4].call(null, an);
   }
   var
    P = Base[242].call(null, max_supported),
    l = Base_List[132].call(null, 0, [0, 104758188], [0, 104758188], 2, P),
    Q = [0, cst$39],
    R = [0, cst$39];
   function tuples_mli(param){
    var a = Base_List[53].call(null, l, tuple_mli);
    return Base_String[68].call(null, Q, a);
   }
   function tuples_ml(param){
    var a = Base_List[53].call(null, l, tuple_ml);
    return Base_String[68].call(null, R, a);
   }
   Ppx_inline_test_lib[7].call(null, cst_diffable_cinaps);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Diffable_cinaps_Tuple_help);
   var
    Diffable_cinaps_Tuple_helpers = [0, max_supported, tuples_mli, tuples_ml];
   runtime.caml_register_global
    (220, Diffable_cinaps_Tuple_helpers, cst_Diffable_cinaps_Tuple_help);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable_cinaps
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
//# shape: Diffable_cinaps:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_cinaps = "Diffable_cinaps",
    cst_diffable_cinaps = "diffable_cinaps";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Diffable_cinaps);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable_cinaps);
   Ppx_expect_runtime[1][1].call(null, "lib/cinaps/diffable_cinaps.ml");
   Ppx_inline_test_lib[6].call
    (null, cst_diffable_cinaps, "diffable_cinaps.ml");
   Ppx_inline_test_lib[7].call(null, cst_diffable_cinaps);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Diffable_cinaps);
   var Diffable_cinaps = [0];
   runtime.caml_register_global(11, Diffable_cinaps, cst_Diffable_cinaps);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
