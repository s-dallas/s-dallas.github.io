// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_expect_runtime__
//# shape: Ppx_expect_runtime__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_expect_runtime = [0],
    Ppx_expect_runtime$0 = [0, Ppx_expect_runtime];
   runtime.caml_register_global
    (0, Ppx_expect_runtime$0, "Ppx_expect_runtime__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Types
//# unitInfo: Requires: Base, Base__Comparable, Base__Int
//# shape: Ppx_expect_runtime__Types:[[N,[]],[F(2)*,F(2)],[],N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    global_data = runtime.caml_get_global_data(),
    default$ = [0, 2, 0, "%", "@@"],
    default$0 = [0, cst],
    Base = global_data.Base,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int = global_data.Base__Int;
   function equal(a, b){
    var c = a[1] === b[1] ? 1 : 0;
    if(c)
     var d = a[2] === b[2] ? 1 : 0, e = d ? a[3] === b[3] ? 1 : 0 : d;
    else
     var e = c;
    return e;
   }
   function a(t){return t[3];}
   var b = Base[129], c = Base_Comparable[2];
   function d(t){return t[2];}
   var
    e = Base[129],
    f = Base_Comparable[2],
    g =
      [0,
       function(a, b){return f(e, d, a, b);},
       [0, function(d, e){return c(b, a, d, e);}, 0]],
    h = Base_Comparable[1];
   function compare_character_range(a, b){return h(g, a, b);}
   var
    Compact_loc = [0, equal, compare_character_range],
    Flexibility = [0],
    Expect_node_formatting = [0, default$, Flexibility],
    Virtual_loc = [0],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash = Base_Int[8],
    sexp_of_t = Base_Int[10],
    compare = Base_Int[14],
    counter = [0, 0];
   function mint(param){
    var id = counter[1];
    counter[1] = id + 1 | 0;
    return id;
   }
   var Hand = [0], Kind = [0], Shape = [0], i = [0, cst];
   function handed(t, hand){return hand ? t ? t : i : t;}
   var
    Ppx_expect_runtime_Types =
      [0,
       Expect_node_formatting,
       Compact_loc,
       Virtual_loc,
       [0, of_int_exn, to_int_exn, compare, sexp_of_t, hash, mint],
       [0, Hand, Kind, Shape, [0, default$0, handed]]];
   runtime.caml_register_global
    (6, Ppx_expect_runtime_Types, "Ppx_expect_runtime__Types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Write_corrected_file
//# unitInfo: Requires: Base, Base__Comparable, Base__List, Base__String, Make_corrected_file, Ppx_expect_runtime__Types, Stdio__Out_channel, Stdlib, Stdlib__Filename, Stdlib__Sys
//# shape: Ppx_expect_runtime__Write_corrected_file:[[],F(7)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Stdlib = global_data.Stdlib,
    Base_String = global_data.Base__String,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Make_corrected_file = global_data.Make_corrected_file,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Comparable = global_data.Base__Comparable,
    Base_List = global_data.Base__List,
    Patch_with_file_contents = [0],
    cst_corrected = ".corrected",
    cst_corrected_tmp = ".corrected.tmp",
    dummy = 0;
   function f
   (use_color,
    in_place,
    diff_command,
    diff_path_prefix,
    filename,
    with$,
    corrections$0){
    var
     dot_corrected = Base[241].call(null, filename, cst_corrected),
     in_channel = Stdlib[80].call(null, filename),
     e = Stdlib[92].call(null, in_channel),
     original_file_contents = Stdlib[86].call(null, in_channel, e);
    Stdlib[93].call(null, in_channel);
    function remove(file){
     if(runtime.caml_sys_file_exists(file)) runtime.caml_sys_remove(file);
    }
    var
     corrections$1 = caml_call2(with$, original_file_contents, corrections$0),
     a = Base[242],
     b = Ppx_expect_runtime_Types[2][2],
     c = Base_Comparable[2],
     corrections =
       Base_List[83].call
        (null, corrections$1, function(d, e){return c(b, a, d, e);}),
     match =
       Base_List[96].call
        (null,
         corrections,
         0,
         function(l_pos, param){
          var
           correction = param[2],
           match = param[1],
           end_pos = match[3],
           start_pos = match[2],
           code_chunk =
             Base_String[3].call
              (null, original_file_contents, l_pos, start_pos - l_pos | 0);
          return [0, end_pos, [0, code_chunk, [0, correction, 0]]];
         }),
     strs = match[2],
     l_pos = match[1],
     d = Base_List[11].call(null, strs),
     result = Base_String[68].call(null, 0, d),
     rest = Base_String[5].call(null, [0, l_pos], 0, original_file_contents),
     next_contents = Base[241].call(null, result, rest);
    if(in_place){
     if
      (1 - Base_String[134].call(null, original_file_contents, next_contents))
      Stdio_Out_channel[37].call(null, filename, next_contents);
     remove(dot_corrected);
     return 0;
    }
    if(diff_command && diff_command[1] === "-"){
     Stdio_Out_channel[37].call(null, dot_corrected, next_contents);
     return 0;
    }
    var
     f = Stdlib_Filename[13].call(null, filename),
     g = [0, Stdlib_Filename[14].call(null, filename)],
     tmp_corrected = Stdlib_Filename[16].call(null, g, f, cst_corrected_tmp);
    return 0
            ===
             Make_corrected_file[1].call
               (null,
                0,
                [0, tmp_corrected],
                [0, use_color],
                diff_command,
                diff_path_prefix,
                next_contents,
                filename,
                0)
              [0]
            ? (remove(dot_corrected), remove(tmp_corrected), 0)
            : (runtime.caml_sys_rename(tmp_corrected, dot_corrected), 1);
   }
   var Ppx_expect_runtime_Write_corre = [0, Patch_with_file_contents, f];
   runtime.caml_register_global
    (12,
     Ppx_expect_runtime_Write_corre,
     "Ppx_expect_runtime__Write_corrected_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Output
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Ppx_expect_runtime__Types
//# shape: Ppx_expect_runtime__Output:[[],[],N,[F(1)*,F(2)],[F(2)*],[F(1)*,F(1)],F(2)*,F(1)*,F(2),F(4)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Printf = global_data.Base__Printf,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Type = [0],
    compare = Base[195],
    Formatted = [0];
   function create(format){return format;}
   function apply(format, str){return caml_call1(format, str);}
   var Formatter = [0, create, apply];
   function compare$0(a, b){
    if(! a) return b ? -1 : 0;
    if(! b) return 1;
    var b$0 = b[1], a$0 = a[1];
    return compare(a$0, b$0);
   }
   var
    Test_result = [0, compare$0],
    a = [0, "\n"],
    b =
      [0,
       [12, 123, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]],
       "{%s|%s|%s}"],
    c = [0, [12, 34, [2, 0, [12, 34, 0]]], '"%s"'];
   function default$(contents){
    return [0, contents, Ppx_expect_runtime_Types[5][4][1]];
   }
   function to_source_code_string(param){
    var tag = param[2], test_output = param[1];
    if(tag){
     var tag$0 = tag[1];
     return caml_call3
             (Base_Printf[2].call(null, b), tag$0, test_output, tag$0);
    }
    var
     d = Base_String[102].call(null, test_output, 10),
     e = Base_List[53].call(null, d, Base_String[69]),
     f = Base_String[68].call(null, a, e);
    return caml_call1(Base_Printf[2].call(null, c), f);
   }
   var
    Payload = [0, default$, to_source_code_string],
    d = [0, [12, 123, [2, 0, [12, 124, 0]]], "{%s|"],
    cst_xxx = "xxx",
    e = [0, [12, 124, [2, 0, [12, 125, 0]]], "|%s}"],
    f =
      [0,
       [12,
        123,
        [2,
         0,
         [2,
          0,
          [12, 32, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]]]]],
       "{%s%s %s|%s|%s}"],
    g =
      [0,
       [12, 123, [2, 0, [2, 0, [12, 124, [2, 0, [11, "|}", 0]]]]]],
       "{%s%s|%s|}"],
    h =
      [0,
       [12, 91, [2, 0, [2, 0, [12, 32, [2, 0, [12, 93, 0]]]]]],
       "[%s%s %s]"];
   function reconcile(expected_output, test_output){
    return Base_String[134].call(null, expected_output, test_output)
            ? 0
            : [0, test_output];
   }
   function fail(error_output){return [0, error_output];}
   function fix_delimiter_conflicts(contents, delimiter){
    if(! delimiter) return 0;
    var tag$1 = delimiter[1], tag = tag$1;
    for(;;){
     let tag$1 = tag;
     var
      tag_conflicts_with =
        function(fstr){
         var a = caml_call1(Base_Printf[2].call(null, fstr), tag$1);
         return Base_String[92].call(null, contents, a);
        };
     if(! tag_conflicts_with(d) && ! tag_conflicts_with(e)) return [0, tag];
     var tag$0 = Base[241].call(null, tag, cst_xxx);
     tag = tag$0;
    }
   }
   function to_formatted_payload(param, contents){
    return [0, contents, fix_delimiter_conflicts(contents, param)];
   }
   function to_source_code_string$0
   (expect_node_formatting, shape, tag, contents){
    var
     delimiter =
       fix_delimiter_conflicts
        (contents,
         caml_call2(Ppx_expect_runtime_Types[5][4][2], tag, shape[2])),
     payload = [0, contents, delimiter];
    if(! shape[2]){
     var
      prefix$0 =
        shape[3] ? expect_node_formatting[3] : expect_node_formatting[4],
      c = to_source_code_string(payload),
      d = shape[1];
     return caml_call3(Base_Printf[2].call(null, h), prefix$0, d, c);
    }
    var prefix = expect_node_formatting[3], tag$0 = delimiter[1];
    if(tag$0 !== ""){
     var a = shape[1];
     return caml_call5
             (Base_Printf[2].call(null, f), prefix, a, tag$0, contents, tag$0);
    }
    var b = shape[1];
    return caml_call3(Base_Printf[2].call(null, g), prefix, b, contents);
   }
   var
    Ppx_expect_runtime_Output =
      [0,
       Type,
       Formatted,
       [0],
       Formatter,
       Test_result,
       Payload,
       reconcile,
       fail,
       to_formatted_payload,
       to_source_code_string$0];
   runtime.caml_register_global
    (15, Ppx_expect_runtime_Output, "Ppx_expect_runtime__Output");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Expectation_intf
//# shape: Ppx_expect_runtime__Expectation_intf:[[[],[],[],[],[]]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Insert_loc = [0],
    Behavior_type = [0],
    Expect_reachability = [0],
    On_unreachable = [0],
    Behavior = [0],
    Definitions =
      [0,
       Insert_loc,
       Behavior_type,
       Expect_reachability,
       On_unreachable,
       Behavior],
    Ppx_expect_runtime_Expectation = [0, Definitions];
   runtime.caml_register_global
    (0,
     Ppx_expect_runtime_Expectation,
     "Ppx_expect_runtime__Expectation_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Expectation
//# unitInfo: Requires: Base, Base__Char, Base__Int, Base__List, Base__Staged, Base__String, Ppx_expect_runtime__Expectation_intf, Ppx_expect_runtime__Output, Ppx_expect_runtime__Types
//# shape: Ppx_expect_runtime__Expectation:[[F(1)*],F(2)*,F(2)*,F(3),F(3),F(1)*,F(3),F(1)*,F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$6 = " ",
    cst_expect$0 = "expect",
    cst_expect_uncaught_exn = "expect.uncaught_exn",
    cst_test_output$2 = "test output",
    cst_uncaught_exception$1 = "uncaught exception";
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$6,
    cst$2 = cst$6,
    cst$3 = cst$7,
    cst = cst$7,
    last_line = cst$6,
    first_line = cst$6,
    Ppx_expect_runtime_Output = global_data.Ppx_expect_runtime__Output,
    Base_Staged = global_data.Base__Staged,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_Int = global_data.Base__Int,
    Base_Char = global_data.Base__Char,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types;
   function loc(param){
    if(0 === param[0]){var whole_node = param[1]; return whole_node;}
    var loc = param[1][1];
    return loc;
   }
   var
    Insert_loc = [0, loc],
    a = [0, "\n"],
    b = [0, cst$6, 0],
    cst_test_output = cst_test_output$2,
    cst_expect = cst_expect$0,
    cst_test_output$0 = cst_test_output$2,
    cst_expect_exact = "expect_exact",
    cst_test_output$1 = cst_test_output$2,
    c = [0, cst_expect$0, 0, 1],
    d = [1, 0],
    cst_uncaught_exception = cst_uncaught_exception$1,
    e = [0, cst_expect_uncaught_exn, 0, 0],
    cst_trailing_output = "trailing output",
    f = [0, cst_expect$0, 0, 1],
    cst_uncaught_exception$0 = cst_uncaught_exception$1,
    g = [0, cst_expect_uncaught_exn, 0, 0],
    h = [1, 1];
   function with_behavior(param, behavior){
    var
     inconsistent_outputs_message = param[5],
     on_incorrect_output = param[4],
     payload_type = param[3],
     position = param[1];
    return [0,
            position,
            behavior,
            payload_type,
            on_incorrect_output,
            inconsistent_outputs_message];
   }
   function formatter(expect_node_formatting, param){
    var payload_type = param[3], behavior = param[2], position = param[1];
    function count_leading_spaces(line){
     var
      a = Base_String[25].call(null, line),
      b = 32,
      c = Base_Char[12],
      d = Base_List[141].call(null, a, function(a){return c(b, a);});
     return Base_List[45].call(null, d);
    }
    var
     match = param[4],
     c =
       payload_type
        ? function
         (str){
          var
           d = Base_String[104].call(null, str),
           e = [0, Base_Char[45]],
           f = Base_String[108],
           g = Base_List[53].call(null, d, function(a){return f(e, a);}),
           h = Base_List[142].call(null, g, Base_String[14]),
           i = Base_List[63].call(null, h),
           j = Base_List[142].call(null, i, Base_String[14]),
           stripped = Base_List[63].call(null, j),
           indent_and_contents =
             Base_List[53].call
              (null,
               stripped,
               function(line){
                var a = Base_String[109].call(null, 0, line);
                return [0, count_leading_spaces(line), a];
               }),
           k =
             Base_List[13].call
              (null,
               indent_and_contents,
               function(param){
                var indent = param[1];
                return param[2] !== cst$7 ? [0, indent] : 0;
               }),
           match$0 = Base_List[31].call(null, k, Base_Int[14]);
          if(match$0)
           var
            min_indent = match$0[1],
            lines =
              Base_List[53].call
               (null,
                indent_and_contents,
                function(param){
                 var line = param[2], indent = param[1];
                 return [0,
                         Base_Int[16].call(null, 0, indent - min_indent | 0),
                         line];
                });
          else
           var lines = 0;
          if(0 === behavior[0])
           var tag = behavior[1][2], tag$0 = tag;
          else
           var tag$0 = Ppx_expect_runtime_Types[5][4][1];
          var match$1 = expect_node_formatting[2];
          if(! lines) return tag$0 ? cst$2 : cst$3;
          if(! lines[2] && ! match$1){
           var line = lines[1][2];
           return tag$0
                   ? Base_String[68].call(null, 0, [0, cst$1, [0, line, b]])
                   : line;
          }
          if(0 === position[0])
           var
            match$2 = position[1],
            start_pos = match$2[2],
            start_bol = match$2[1],
            c = start_pos - start_bol | 0;
          else
           var
            match$3 = position[1][2],
            start_pos$0 = match$3[2],
            start_bol$0 = match$3[1],
            m = match[3] ? expect_node_formatting[1] : 0,
            c = (start_pos$0 - start_bol$0 | 0) + m | 0;
          var location_indent = expect_node_formatting[1] + c | 0;
          function spaces(n){return Base_String[66].call(null, n, 32);}
          if(tag$0)
           var
            last_line$0 = spaces(location_indent),
            indentation = location_indent,
            first_line$0 = cst;
          else
           var
            last_line$0 = last_line,
            indentation = 1,
            first_line$0 = first_line;
          var
           lines$0 =
             Base_List[53].call
              (null,
               lines,
               function(param){
                var indent = param[1];
                if(param[2] === cst$7) return cst$0;
                var line = param[2], a = spaces(indentation + indent | 0);
                return Base[241].call(null, a, line);
               }),
           l =
             Base_List[11].call
              (null,
               [0,
                [0, first_line$0, 0],
                [0, lines$0, [0, [0, last_line$0, 0], 0]]]);
          return Base_String[68].call(null, a, l);
         }
        : function(a){return a;};
    return Ppx_expect_runtime_Output[4][1].call(null, c);
   }
   function extension_syntax(extension_name, payload_loc, node_loc){
    if(payload_loc){
     var
      payload_loc$0 = payload_loc[1],
      a = payload_loc$0[2] <= node_loc[2] ? 1 : 0,
      b = a ? node_loc[3] <= payload_loc$0[3] ? 1 : 0 : a;
     if(b) return [0, extension_name, 1, 1];
    }
    return [0, extension_name, 0, 1];
   }
   function possibly_relax_strictness(formatting_flexibility, t){
    if(! formatting_flexibility) return t;
    var
     expect_node_formatting = formatting_flexibility[1],
     fmt = formatter(expect_node_formatting, t),
     a = t[2],
     reachability = a[3],
     on_unreachable = a[2],
     match = a[1],
     tag = match[2],
     contents = match[1],
     b = Ppx_expect_runtime_Output[4][2].call(null, fmt, contents),
     match$0 = Ppx_expect_runtime_Output[7].call(null, contents, b);
    if(! match$0) return t;
    var
     contents$0 = match$0[1],
     payload = Ppx_expect_runtime_Output[9].call(null, tag, contents$0);
    return with_behavior(t, [0, payload, on_unreachable, reachability]);
   }
   function expected_string_and_payload_lo(param){
    if(! param)
     return [0, Ppx_expect_runtime_Output[6][1].call(null, cst$4), 0];
    var match = param[1], b = match[2], a = match[1];
    return [0, a, [0, b]];
   }
   function expect(formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 2, 0],
              1,
              extension_syntax(cst_expect, payload_loc, node_loc),
              cst_test_output]);
   }
   function expect_exact(formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 2, 0],
              0,
              extension_syntax(cst_expect_exact, payload_loc, node_loc),
              cst_test_output$0]);
   }
   function expect_unreachable(node_loc){
    return [0, [0, node_loc, 0], d, 1, c, cst_test_output$1];
   }
   function expect_uncaught_exn
   (formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 1, 1],
              1,
              e,
              cst_uncaught_exception]);
   }
   function expect_trailing(insert_loc){
    return [0,
            [1, insert_loc],
            [0, Ppx_expect_runtime_Output[6][1].call(null, cst$5), 0, 0],
            1,
            f,
            cst_trailing_output];
   }
   function expect_no_uncaught_exn(insert_loc){
    return [0, [1, insert_loc], h, 1, g, cst_uncaught_exception$0];
   }
   function format_payload(mk_node){
    return Base_Staged[1].call
            (null,
             function
             (expect_node_formatting, payload_loc, node_loc, tag, contents){
              var
               node =
                 caml_call3
                  (mk_node,
                   0,
                   node_loc,
                   [0, [0, [0, contents, tag], payload_loc]]),
               a = formatter(expect_node_formatting, node),
               formatted_contents =
                 Ppx_expect_runtime_Output[4][2].call(null, a, contents),
               match =
                 Ppx_expect_runtime_Output[7].call
                  (null, contents, formatted_contents);
              if(! match) return 0;
              var contents$0 = match[1], node_shape = node[4];
              if(node_shape[2])
               var
                source_code_string =
                  Ppx_expect_runtime_Output[10].call
                   (null, expect_node_formatting, node_shape, tag, contents$0);
              else
               var
                b = Ppx_expect_runtime_Output[9].call(null, tag, contents$0),
                source_code_string =
                  Ppx_expect_runtime_Output[6][2].call(null, b);
              return [0, source_code_string];
             });
   }
   var
    i = format_payload(expect),
    format_expect_payload = Base_Staged[2].call(null, i),
    j = format_payload(expect_uncaught_exn),
    format_uncaught_exn_payload = Base_Staged[2].call(null, j),
    Ppx_expect_runtime_Expectation =
      [0,
       Insert_loc,
       with_behavior,
       formatter,
       expect,
       expect_exact,
       expect_unreachable,
       expect_uncaught_exn,
       expect_trailing,
       expect_no_uncaught_exn,
       [0, format_expect_payload, format_uncaught_exn_payload]];
   runtime.caml_register_global
    (35, Ppx_expect_runtime_Expectation, "Ppx_expect_runtime__Expectation");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Test_node
//# unitInfo: Requires: Base, Base__Char, Base__Comparable, Base__Error, Base__Hashtbl, Base__List, Base__Option, Base__Printf, Base__Queue, Base__String, Ppx_expect_runtime__Expectation, Ppx_expect_runtime__Output, Ppx_expect_runtime__Types
//# shape: Ppx_expect_runtime__Test_node:[[F(3),F(3),F(1)],F(1),F(1),F(4),N,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$4 = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    tag = [0, cst$4],
    cst$3 = cst$4,
    cst$2 = ";",
    cst = cst$4,
    cst$0 = "\n",
    cst$1 = cst$4,
    Ppx_expect_runtime_Output = global_data.Ppx_expect_runtime__Output,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Ppx_expect_runtime_Expectation =
      global_data.Ppx_expect_runtime__Expectation,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Base = global_data.Base,
    Base_Comparable = global_data.Base__Comparable,
    Base_List = global_data.Base__List,
    Base_Option = global_data.Base__Option,
    Base_Queue = global_data.Base__Queue,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Printf = global_data.Base__Printf,
    Base_Error = global_data.Base__Error,
    a =
      [0,
       [12, 91, [2, 0, [11, "expect.unreachable]", 0]]],
       "[%sexpect.unreachable]"];
   function to_diffs
   (expect_node_formatting, original_file_contents, correction$2){
    function safe_byte_get(string, i){
     if(0 <= i && i < runtime.caml_ml_string_length(string))
      return [0, runtime.caml_string_get(string, i)];
     return 0;
    }
    if(0 === correction$2[0]){
     var
      b = correction$2[1],
      on_incorrect_output = b[4],
      test_output = correction$2[2],
      behavior = b[2],
      position = b[1];
     if(0 === position[0])
      var whitespace = cst;
     else
      var
       match = position[1][2],
       start_pos = match[2],
       start_bol = match[1],
       let_offset = start_pos - start_bol | 0,
       h = on_incorrect_output[3] ? expect_node_formatting[1] : 0,
       indent = let_offset + h | 0,
       i = Base_String[66].call(null, indent, 32),
       whitespace$0 = Base[241].call(null, cst$0, i),
       whitespace = whitespace$0;
     if(0 === behavior[0])
      var tag = behavior[1][2], tag$0 = tag;
     else
      var tag$0 = Ppx_expect_runtime_Types[5][4][1];
     a:
     {
      if(0 === position[0]){
       var loc = position[1], d = position[2];
       if(d && ! on_incorrect_output[2]){
        if(on_incorrect_output[3]){
         var
          payload_loc = d[1],
          g = Ppx_expect_runtime_Output[9].call(null, tag$0, test_output),
          correction$1 = Ppx_expect_runtime_Output[6][2].call(null, g),
          correction$0 = correction$1,
          loc$1 = payload_loc;
         break a;
        }
        var loc$0 = loc;
       }
       else
        var loc$0 = loc;
      }
      else
       var loc$0 = position[1][1];
      var
       correction =
         Ppx_expect_runtime_Output[10].call
          (null,
           expect_node_formatting,
           on_incorrect_output,
           tag$0,
           test_output),
       correction$0 = correction,
       loc$1 = loc$0;
     }
     var
      match$0 =
        [0, [0, loc$1, Base[241].call(null, whitespace, correction$0)]];
    }
    else{
     var
      c = correction$2[1],
      on_incorrect_output$0 = c[4],
      on_unreachable = c[2][2],
      position$0 = c[1],
      loc$2 = Ppx_expect_runtime_Expectation[1][1].call(null, position$0);
     switch(on_unreachable){
       case 0:
        var match$0 = 0; break;
       case 1:
        var match$0 = [0, [0, loc$2, cst$1]]; break;
       default:
        var
         prefix =
           on_incorrect_output$0[3]
            ? expect_node_formatting[3]
            : expect_node_formatting[4],
         match$0 =
           [0, [0, loc$2, caml_call1(Base_Printf[2].call(null, a), prefix)]];
     }
    }
    if(! match$0) return 0;
    var
     match$1 = match$0[1],
     diff = match$1[2],
     loc$3 = match$1[1],
     end_pos = loc$3[3],
     start_pos$0 = loc$3[2],
     start_bol$0 = loc$3[1],
     main_correction = [0, [0, loc$3, diff], 0];
    a:
    {
     if(0 !== correction$2[0] && ! correction$2[1][4][3]){
      var
       match$2 = safe_byte_get(original_file_contents, start_pos$0 - 1 | 0),
       match$3 = safe_byte_get(original_file_contents, end_pos);
      b:
      if(match$2 && 10 === match$2[1]){
       if(match$3 && 10 !== match$3[1]) break b;
       var
        remove_empty_line_from_deleted =
          [0, [0, [0, start_bol$0, start_pos$0 - 1 | 0, start_pos$0], cst$3]];
       break a;
      }
      var remove_empty_line_from_deleted = 0;
      break a;
     }
     var remove_empty_line_from_deleted = 0;
    }
    a:
    {
     if(0 === correction$2[0]){
      var e = correction$2[1], f = e[1];
      if(0 !== f[0] && e[4][3]){
       var
        body_loc = f[1][2],
        add_semicolon_before_trailing_ =
          [0, [0, [0, body_loc[1], body_loc[3], body_loc[3]], cst$2]];
       break a;
      }
     }
     var add_semicolon_before_trailing_ = 0;
    }
    var
     additional_corrections =
       Base_List[14].call
        (null,
         [0,
          remove_empty_line_from_deleted,
          [0, add_semicolon_before_trailing_, 0]],
         Base_Option[42]);
    return Base[222].call(null, additional_corrections, main_correction);
   }
   function record_and_return_result
   (expect_node_formatting, failure_ref, test_output_raw, t){
    var
     results = t[2],
     expectation = t[1],
     a =
       Ppx_expect_runtime_Expectation[3].call
        (null, expect_node_formatting, expectation),
     test_output =
       Ppx_expect_runtime_Output[4][2].call(null, a, test_output_raw),
     match = expectation[2];
    if(0 === match[0])
     var
      match$0 = match[1],
      tag$0 = match$0[2],
      contents = match$0[1],
      tag$1 = tag$0,
      result = Ppx_expect_runtime_Output[7].call(null, contents, test_output);
    else
     var
      result$0 = Ppx_expect_runtime_Output[8].call(null, test_output),
      tag$1 = tag,
      result = result$0;
    if(result) failure_ref[1] = 1;
    Base_Queue[35].call(null, results, [0, [0, result, test_output_raw]]);
    t[3] = 1;
    return [0, result, tag$1];
   }
   function of_expectation(expectation){
    return [0, [0, expectation, Base_Queue[58].call(null, 0, 0), 0]];
   }
   function record_end_of_run(t){
    var
     match = t[1],
     results = match[2],
     reached_this_run = match[3],
     a = 1 - reached_this_run;
    return a ? Base_Queue[35].call(null, results, 0) : a;
   }
   function record_result
   (expect_node_formatting, failure_ref, test_output_raw, param){
    var inner = param[1];
    record_and_return_result
     (expect_node_formatting, failure_ref, test_output_raw, inner);
    return 0;
   }
   var
    global_results_table =
      Base_Hashtbl[4].call
       (null,
        0,
        0,
        [0,
         Base_String[51],
         Base_String[42],
         function(a){return runtime.Base_hash_string(a);}]),
    d =
      [0,
       [11,
        "Internal expect test bug: could not find test\nFile: ",
        [2, 0, [11, "\nID:   ", [4, 0, 0, 0, 0]]]],
       "Internal expect test bug: could not find test\nFile: %s\nID:   %d"];
   function find_test(absolute_filename, test_id){
    var
     a = Base_Hashtbl[56].call(null, global_results_table, absolute_filename),
     b =
       caml_call2
        (Base_Option[22],
         a,
         function(param){
          var expectations = param[1];
          return Base_Hashtbl[56].call(null, expectations, test_id);
         }),
     c = caml_call1(Ppx_expect_runtime_Types[4][2], test_id),
     e = caml_call2(Base_Printf[2].call(null, d), absolute_filename, c),
     f = [0, Base_Error[14].call(null, e)];
    return Base_Option[31].call(null, 0, f, 0, b);
   }
   function initialize_and_register_tests
   (absolute_filename, tests, postprocess){
    var tests_as_in_table = Base_Queue[58].call(null, 0, 0);
    Base_Hashtbl[41].call
     (null,
      global_results_table,
      absolute_filename,
      function(file){
       var
        a = Ppx_expect_runtime_Types[4],
        c =
          [0,
           Base_Hashtbl[4].call(null, 0, 0, [0, a[3], a[4], a[5]]),
           postprocess],
        file$0 = Base_Option[30].call(null, file, c),
        b = Ppx_expect_runtime_Types[4],
        tests$0 =
          Base_Hashtbl[8].call(null, 0, 0, [0, b[3], b[4], b[5]], tests);
       Base_Hashtbl[66].call
        (null,
         tests$0,
         file$0[1],
         function(test_id, new_test, existing_test){
          var test = Base_Option[30].call(null, existing_test, new_test);
          test[1][3] = 0;
          Base_Queue[35].call(null, tests_as_in_table, [0, test_id, test]);
          return [0, test];
         });
       return file$0;
      });
    return Base_Queue[20].call(null, tests_as_in_table);
   }
   function process_each_file(f){
    var
     a = Base_Hashtbl[78].call(null, global_results_table),
     b = Base[242],
     c = Base_String[51],
     d = Base_Comparable[2],
     e = Base_List[83].call(null, a, function(a, e){return d(c, b, a, e);});
    return Base_List[53].call
            (null,
             e,
             function(param){
              var
               match = param[2],
               postprocess = match[2],
               expectations = match[1],
               filename = param[1],
               test_nodes = Base_Hashtbl[68].call(null, expectations);
              return caml_call3(f, filename, test_nodes, postprocess);
             });
   }
   function expect(formatting_flexibility, node_loc, located_payload){
    return of_expectation
            (Ppx_expect_runtime_Expectation[4].call
              (null, formatting_flexibility, node_loc, located_payload));
   }
   function expect_exact(formatting_flexibility, node_loc, located_payload){
    return of_expectation
            (Ppx_expect_runtime_Expectation[5].call
              (null, formatting_flexibility, node_loc, located_payload));
   }
   function expect_unreachable(node_loc){
    return of_expectation
            (Ppx_expect_runtime_Expectation[6].call(null, node_loc));
   }
   var
    Create = [0, expect, expect_exact, expect_unreachable],
    b = [0, 0],
    c =
      [0,
       [11, "<expect test ran without ", [2, 0, [12, 62, 0]]],
       "<expect test ran without %s>"];
   function loc(param){
    var position = param[1][1][1];
    return Ppx_expect_runtime_Expectation[1][1].call(null, position);
   }
   function expectation_of_t(param){
    var expectation = param[1][1], match = expectation[2];
    if(0 !== match[0]) return 0;
    var contents = match[1][1];
    return [0, contents];
   }
   function record_and_return_number_of_li
   (expect_node_formatting, failure_ref, test_output_raw, param){
    var
     inner = param[1],
     a =
       record_and_return_result
        (expect_node_formatting, failure_ref, test_output_raw, inner),
     match = a[1];
    if(! match) return 0;
    var
     tag = a[2],
     contents = match[1],
     b = Ppx_expect_runtime_Output[9].call(null, tag, contents),
     correction = Ppx_expect_runtime_Output[6][2].call(null, b),
     c = 10,
     d = Base_Char[16];
    return [0,
            Base_String[21].call
             (null, correction, function(a){return d(c, a);})
            + 1
            | 0];
   }
   function to_diffs$0
   (cr_for_multiple_outputs,
    expect_node_formatting,
    original_file_contents,
    t){
    var
     match = t[1],
     results = match[2],
     expectation = match[1],
     results_list = Base_Queue[20].call(null, results),
     match$0 =
       Base_List[16].call
        (null,
         results_list,
         function(param){
          if(! param) return b;
          var output = param[1];
          return [1, output];
         }),
     outputs_list = match$0[2],
     unreached_list = match$0[1];
    function a(param){var result = param[1]; return result;}
    var
     d = Ppx_expect_runtime_Output[5][1],
     e = Base_Comparable[2],
     distinct_outputs =
       Base_List[126].call
        (null, outputs_list, function(b, c){return e(d, a, b, c);}),
     was_reached = Base_List[18].call(null, unreached_list),
     match$1 = expectation[2];
    if(0 === match$1[0])
     var reachability = match$1[3], reachability_behavior = reachability;
    else
     var
      reachability_of_corrected = match$1[1],
      reachability_behavior = reachability_of_corrected;
    function correction_for_single_result(param){
     if(! param) return 0;
     var received = param[1];
     return [0, [0, expectation, received]];
    }
    a:
    if(distinct_outputs){
     b:
     if(! distinct_outputs[2]){
      var result = distinct_outputs[1][1];
      if(! was_reached && reachability_behavior) break b;
      var match$2 = correction_for_single_result(result);
      break a;
     }
     var
      outputs =
        Base_List[53].call
         (null,
          results_list,
          function(param){
           if(param){var raw = param[1][2]; return raw;}
           var a = expectation[5];
           return caml_call1(Base_Printf[2].call(null, c), a);
          }),
      f = caml_call2(cr_for_multiple_outputs, expectation[5], outputs),
      g =
        Ppx_expect_runtime_Expectation[3].call
         (null, expect_node_formatting, expectation),
      h = Ppx_expect_runtime_Output[4][2].call(null, g, f),
      match$2 =
        correction_for_single_result
         (Ppx_expect_runtime_Output[8].call(null, h));
    }
    else
     var
      behavior = expectation[2],
      match$2 =
        0 === behavior[0]
         ? [0,
           [1,
            Ppx_expect_runtime_Expectation[2].call
             (null, expectation, behavior)]]
         : 0;
    if(! match$2) return 0;
    var correction = match$2[1];
    return to_diffs
            (expect_node_formatting, original_file_contents, correction);
   }
   var
    Ppx_expect_runtime_Test_node =
      [0,
       Create,
       of_expectation,
       record_end_of_run,
       record_result,
       [0, initialize_and_register_tests, find_test, process_each_file],
       [0, expectation_of_t, record_and_return_number_of_li, loc, to_diffs$0]];
   runtime.caml_register_global
    (23, Ppx_expect_runtime_Test_node, "Ppx_expect_runtime__Test_node");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Current_file
//# unitInfo: Requires: Base, Base__Or_error, Base__Printf, Base__String, CamlinternalLazy, Stdlib__Filename, Stdlib__Sys
//# shape: Ppx_expect_runtime__Current_file:[F(1),F(1),F(1),N,F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Filename = global_data.Stdlib__Filename,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Or_error = global_data.Base__Or_error,
    current = [0, 0],
    cst_new_file = "new_file",
    cst_old_file = "old_file",
    cst_Expect_test_collector_set_ =
      "Expect_test_collector.set: there is already an active file",
    cst_Expect_test_collector_unse =
      "Expect_test_collector.unset: there is no active file",
    cst_Expect_test_collector_get_ =
      "Expect_test_collector.get: there is no active file";
   function set(filename_rel_to_project_root){
    var match = current[1];
    if(match){
     var
      current$0 = match[1],
      a =
        [0,
         [0, cst_new_file, Base[202].call(null, filename_rel_to_project_root)],
         0],
      b = [0, [0, cst_old_file, Base[202].call(null, current$0)], a],
      c = Base[85][8].call(null, cst_Expect_test_collector_set_, b);
     return Base[246].call(null, c);
    }
    current[1] = [0, filename_rel_to_project_root];
    return 0;
   }
   function unset(param){
    if(current[1]){current[1] = 0; return 0;}
    var a = Base[85][8].call(null, cst_Expect_test_collector_unse, 0);
    return Base[246].call(null, a);
   }
   function get(param){
    var match = current[1];
    if(match){var fn = match[1]; return fn;}
    var a = Base[85][8].call(null, cst_Expect_test_collector_get_, 0);
    return Base[246].call(null, a);
   }
   var
    dir_or_error =
      Base_Or_error[31].call
       (null, [0, 1], function(a){return runtime.caml_sys_getcwd(a);}),
    initial_dir =
      [246, function(a){return Base_Or_error[34].call(null, dir_or_error);}],
    a =
      [0,
       [11,
        "Trying to run an expect test from the wrong file.\n- test declared at ",
        [2,
         0,
         [12,
          58,
          [4,
           0,
           0,
           0,
           [11, "\n- trying to run it from ", [2, 0, [12, 10, 0]]]]]]],
       "Trying to run an expect test from the wrong file.\n- test declared at %s:%d\n- trying to run it from %s\n"];
   function absolute_path(file){
    if(! Stdlib_Filename[5].call(null, file)) return file;
    var a = runtime.caml_obj_tag(initial_dir);
    a:
    if(250 === a)
     var b = initial_dir[1];
    else{
     if(246 !== a && 244 !== a){var b = initial_dir; break a;}
     var b = CamlinternalLazy[2].call(null, initial_dir);
    }
    return Stdlib_Filename[4].call(null, b, file);
   }
   function verify_that_file_is_current_ex
   (line_number, filename_rel_to_project_root){
    var registering_tests_for = get(0);
    return Base_String[134].call
             (null, filename_rel_to_project_root, registering_tests_for)
            ? 0
            : caml_call3
              (Base_Printf[4].call(null, Base[244], a),
               filename_rel_to_project_root,
               line_number,
               registering_tests_for);
   }
   var
    Ppx_expect_runtime_Current_fil =
      [0,
       set,
       unset,
       get,
       initial_dir,
       absolute_path,
       verify_that_file_is_current_ex];
   runtime.caml_register_global
    (13, Ppx_expect_runtime_Current_fil, "Ppx_expect_runtime__Current_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Test_block
//# unitInfo: Requires: Base, Base__Exn, Base__List, Base__Option, Base__Printf, Base__Source_code_position, Base__String, Expect_test_config, Ppx_expect_runtime__Current_file, Ppx_expect_runtime__Expectation, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Obj, Stdlib__Printexc, Stdlib__Printf, Stdlib__Sys
//# shape: Ppx_expect_runtime__Test_block:[F(1),[F(1),F(1)*,N],F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst$5 = "\n",
    cst$6 = "(* ",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    partial = [12, 10, [10, 0]],
    cst$3 = cst$4,
    cst$1 = "---------------",
    cst$2 = cst$4,
    cst = "\n\n",
    cst$0 = cst$4,
    Expect_test_config = global_data.Expect_test_config,
    Base_Source_code_position = global_data.Base__Source_code_position,
    Base_Printf = global_data.Base__Printf,
    Base = global_data.Base,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base_Option = global_data.Base__Option,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime_Current_fil =
      global_data.Ppx_expect_runtime__Current_file,
    Ppx_expect_runtime_Expectation =
      global_data.Ppx_expect_runtime__Expectation,
    Base_String = global_data.Base__String,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Format = global_data.Stdlib__Format,
    cst_CR = "CR ",
    b =
      [0,
       [11,
        cst$6,
        [2,
         0,
         [11,
          "expect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)",
          0]]],
       "(* %sexpect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)"],
    c =
      [0,
       [11, "Test ran multiple times with different ", [2, 0, [12, 115, 0]]],
       "Test ran multiple times with different %ss"],
    d =
      [0,
       [11, cst$6, [2, 0, [11, "expect_test: ", [2, 0, [11, " *)", 0]]]]],
       "(* %sexpect_test: %s *)"],
    e =
      [0,
       [11,
        "=== Output ",
        [4, 0, 0, 0, [11, " / ", [4, 0, 0, 0, [11, " ===", 0]]]]],
       "=== Output %d / %d ==="],
    f = [0, [2, 0, [2, 0, [2, 0, 0]]], "%s%s%s"],
    g = [0, cst$5],
    h =
      [0,
       "Raised at ",
       [0, "Called from ", [0, "Raised by primitive operation ", 0]]],
    i =
      [0,
       [11,
        '("',
        [2, 0, [11, '(Cannot print more details, Exn.to_string failed)")', 0]]],
       '("%s(Cannot print more details, Exn.to_string failed)")'],
    j = [0, cst$5];
   function clean_up_block(param){
    var
     test_output_writer = param[5],
     test_output_reader = param[4],
     output_file = param[2];
    Stdlib[93].call(null, test_output_reader);
    runtime.ppx_expect_runtime_after_test(Stdlib[39], Stdlib[40]);
    Stdlib[76].call(null, test_output_writer);
    runtime.caml_sys_remove(output_file);
   }
   function flush(param){
    Stdlib_Format[39].call(null, Stdlib_Format[112], 0);
    Stdlib_Format[39].call(null, Stdlib_Format[114], 0);
    Stdlib[63].call(null, Stdlib[39]);
    Stdlib[63].call(null, Stdlib[40]);
    runtime.ppx_expect_runtime_flush_stubs_streams(0);
   }
   function read_test_output_unsanitized(param){
    var old_offset = param[6], test_output_reader = param[4];
    flush(0);
    var
     new_offset = runtime.ppx_expect_runtime_out_channel_position(Stdlib[39]),
     len = new_offset - old_offset[1] | 0;
    old_offset[1] = new_offset;
    return Stdlib[86].call(null, test_output_reader, len);
   }
   function Configured(C){
    var
     cr_prefix = 15023 <= C[4] ? cst_CR : cst$0,
     cr_for_backtrace = caml_call1(Base_Printf[2].call(null, b), cr_prefix);
    function cr_for_multiple_outputs(output_name, outputs){
     var
      cr_body = caml_call1(Base_Printf[2].call(null, c), output_name),
      cr = caml_call2(Base_Printf[2].call(null, d), cr_prefix, cr_body),
      num_outputs = Base_List[45].call(null, outputs),
      outputs_with_headers =
        Base_List[44].call
         (null,
          outputs,
          function(index, output){
           var
            header =
              caml_call2
               (Base_Printf[2].call(null, e), index + 1 | 0, num_outputs),
            pad_length =
              caml_ml_string_length(cr) - caml_ml_string_length(header) | 0,
            b = [0, output, 0];
           if(0 < pad_length)
            var
             lpad = Base_String[66].call(null, pad_length / 2 | 0, 61),
             rpad =
               Base_String[66].call
                (null, pad_length - (pad_length / 2 | 0) | 0, 61),
             a = caml_call3(Base_Printf[2].call(null, f), lpad, header, rpad);
           else
            var a = header;
           return [0, a, b];
          });
     return Base_String[68].call(null, g, [0, cr, outputs_with_headers]);
    }
    var sanitize = C[3];
    function check_for_backtraces(s){
     if
      (!
       Base_List[23].call
        (null,
         h,
         function(substring){return Base_String[92].call(null, s, substring);}))
      return s;
     var a = Base[241].call(null, cst, s);
     return Base[241].call(null, cr_for_backtrace, a);
    }
    function dump_backtrace(possible_exn){
     try{caml_call1(C[2], possible_exn);}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       bt = Stdlib_Printexc[12].call(null, 0);
      try{var c = Base_Exn[10].call(null, exn), exn_string = c;}
      catch(exn$0){
       var
        a = Stdlib_Obj[22][1].call(null, exn),
        name = Stdlib_Obj[22][2].call(null, a),
        exn_string = caml_call1(Base_Printf[2].call(null, i), name);
      }
      var
       bt$0 = Stdlib_Printexc[14].call(null, bt),
       b =
         bt$0 !== cst$4
          ? Base_String
             [68].call
            (null, j, [0, cr_for_backtrace, [0, exn_string, [0, bt$0, 0]]])
          : exn_string;
      return [0, b];
     }
     return 0;
    }
    return [0,
            ,
            ,
            cr_for_multiple_outputs,
            sanitize,
            check_for_backtraces,
            dump_backtrace];
   }
   var
    test_is_running = [0, 0],
    k = [0, "line"],
    l = [0, "file"],
    cst_inner_test = "inner_test",
    cst_outer_test = "outer_test",
    cst_Expect_test_runtime_reache =
      "Expect_test_runtime: reached one [let%expect_test] from another. Nesting expect\ntests is prohibited.",
    n =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4,
             0,
             0,
             0,
             [12,
              45,
              [4,
               0,
               0,
               0,
               [11,
                ":\nError: program exited while expect test was running!\nOutput captured so far:\n",
                [2, 0, partial]]]]]]]]]],
       "File %S, line %d, characters %d-%d:\nError: program exited while expect test was running!\nOutput captured so far:\n%s\n%!"],
    o =
      [0,
       [11,
        "Ppx_expect_runtime.read_current_test_output_exn called while there are no tests running at ",
        [2, 0, 0]],
       "Ppx_expect_runtime.read_current_test_output_exn called while there are no tests running at %s"];
   function am_running_expect_test(param){
    return Base_Option[53].call(null, test_is_running[1]);
   }
   function current_test(param){
    return caml_call2
            (Base_Option[24],
             test_is_running[1],
             function(param){var test_block = param[4]; return test_block;});
   }
   function current_test_exn(param){
    var a = current_test(0);
    return Base_Option[31].call(null, 0, 0, 0, a);
   }
   function iter(f){return Base_Option[37].call(null, test_is_running[1], f);}
   function assert_no_test_running(basename, line_number){
    return iter
            (function(param){
              var outer_basename = param[2], outer_line_number = param[1];
              function sexp_here(basename, line_number){
               var
                a =
                  [0,
                   [1, [0, k, [0, caml_call1(Base[136], line_number), 0]]],
                   0];
               return [1,
                       [0, [1, [0, l, [0, Base[202].call(null, basename), 0]]], a]];
              }
              var
               a =
                 [0, [0, cst_inner_test, sexp_here(basename, line_number)], 0],
               b =
                 [0,
                  [0,
                   cst_outer_test,
                   sexp_here(outer_basename, outer_line_number)],
                  a],
               c = Base[85][8].call(null, cst_Expect_test_runtime_reache, b);
              return Base[246].call(null, c);
             });
   }
   function at_exit(param){
    return iter
            (function(param){
              var
               test_block = param[4],
               match = param[3],
               end_pos = match[3],
               start_pos = match[2],
               start_bol = match[1],
               basename = param[2],
               line_number = param[1];
              flush(0);
              var
               output_file = test_block[2],
               fin = Stdlib[80].call(null, output_file),
               a = Stdlib[92].call(null, fin),
               all_out = Stdlib[86].call(null, fin, a);
              clean_up_block(test_block);
              return caml_call5
                      (Stdlib_Printf[3].call(null, n),
                       basename,
                       line_number,
                       start_pos - start_bol | 0,
                       end_pos - start_bol | 0,
                       all_out);
             });
   }
   function read_current_test_output_exn(here){
    var match = current_test(0);
    if(match){
     var test_block = match[1], a = read_test_output_unsanitized(test_block);
     return Expect_test_config[3].call(null, a);
    }
    var
     b = Base_Source_code_position[22].call(null, here),
     c = caml_call1(Base_Printf[2].call(null, o), b);
    return Base[244].call(null, c);
   }
   var
    default_cr_for_multiple_output = Configured(Expect_test_config)[3],
    For_external =
      [0,
       read_current_test_output_exn,
       am_running_expect_test,
       default_cr_for_multiple_output],
    cst_output = "output",
    cst_expect_test = "expect-test",
    a = [0, 1, [0, 3, [0, 6, 0]]],
    cst_Trailing_output = "Trailing output",
    m = [0, cst$5],
    Ppx_expect_runtime_Test_block =
      [0,
       function(C){
        var Configured$0 = Configured(C);
        function read_test_output_no_backtrace_(param){
         var a = read_test_output_unsanitized(current_test_exn(0));
         return caml_call1(Configured$0[4], a);
        }
        function read_test_output_sanitized_and(param){
         var a = read_test_output_no_backtrace_(0);
         return Configured$0[5].call(null, a);
        }
        function run_test_inner(test_id, test_output_raw, t){
         var
          src_filename = t[1],
          a =
            caml_call2
             (Ppx_expect_runtime_Test_node[5][2], src_filename, test_id),
          fail = t[3];
         return Ppx_expect_runtime_Test_node[4].call
                 (null,
                  Ppx_expect_runtime_Types[1][1],
                  fail,
                  test_output_raw,
                  a);
        }
        function run_test(test_id){
         var a = current_test_exn(0);
         return run_test_inner(test_id, read_test_output_sanitized_and(0), a);
        }
        function run_suite
        (filename_rel_to_project_root,
         line_number,
         location,
         trailing_loc,
         body_loc,
         formatting_flexibility,
         expected_exn,
         test_to_run,
         exn_test_id,
         description,
         tags,
         inline_test_config,
         expectations,
         f){
         var
          end_pos = location[3],
          start_pos = location[2],
          start_bol = location[1],
          basename =
            Stdlib_Filename[13].call(null, filename_rel_to_project_root);
         assert_no_test_running(basename, line_number);
         return Ppx_inline_test_lib[8].call
                 (null,
                  inline_test_config,
                  [246,
                   function(a){
                    return Base_Option[30].call(null, description, cst$3);
                   }],
                  tags,
                  basename,
                  line_number,
                  start_pos - start_bol | 0,
                  end_pos - start_bol | 0,
                  function(param){
                   Ppx_expect_runtime_Current_fil[6].call
                    (null, line_number, filename_rel_to_project_root);
                   var
                    absolute_filename =
                      Ppx_expect_runtime_Current_fil[5].call(null, basename),
                    c =
                      Ppx_expect_runtime_Expectation[8].call
                       (null,
                        [0,
                         [0, trailing_loc[1], trailing_loc[2], trailing_loc[2]],
                         body_loc]),
                    trailing_test =
                      Ppx_expect_runtime_Test_node[2].call(null, c);
                   if(expected_exn)
                    var
                     d =
                       Ppx_expect_runtime_Expectation[7].call
                        (null, formatting_flexibility, trailing_loc, expected_exn),
                     exn_test = Ppx_expect_runtime_Test_node[2].call(null, d);
                   else
                    var
                     e =
                       Ppx_expect_runtime_Expectation[9].call
                        (null, [0, trailing_loc, body_loc]),
                     exn_test = Ppx_expect_runtime_Test_node[2].call(null, e);
                   var
                    expectations$0 =
                      [0,
                       [0, exn_test_id, exn_test],
                       [0, [0, test_to_run, trailing_test], expectations]],
                    expectations$1 =
                      caml_call3
                       (Ppx_expect_runtime_Test_node[5][1],
                        absolute_filename,
                        expectations$0,
                        function(original_file_contents, ts){
                         var
                          a =
                            caml_call3
                             (Ppx_expect_runtime_Test_node[6][4],
                              Configured$0[3],
                              Ppx_expect_runtime_Types[1][1],
                              original_file_contents);
                         return Base_List[14].call(null, ts, a);
                        });
                   flush(0);
                   var
                    b =
                      Stdlib_Filename[16].call
                       (null, 0, cst_expect_test, cst_output),
                    output_file =
                      Ppx_expect_runtime_Current_fil[5].call(null, b),
                    test_output_writer =
                      Stdlib[62].call(null, a, 420, output_file),
                    test_output_reader = Stdlib[80].call(null, output_file);
                   runtime.ppx_expect_runtime_before_test
                    (test_output_writer, Stdlib[39], Stdlib[40]);
                   var
                    test_block =
                      [0,
                       absolute_filename,
                       output_file,
                       [0, 0],
                       test_output_reader,
                       test_output_writer,
                       [0, 0]],
                    t = [0, line_number, basename, location, test_block];
                   test_is_running[1] = [0, t];
                   var
                    test_exn =
                      Configured$0[6].call
                       (null,
                        function(param){
                         read_test_output_unsanitized(test_block);
                         return caml_call1(f, 0);
                        }),
                    trailing_raw = read_test_output_sanitized_and(0),
                    trailing_output =
                      Base_String[109].call(null, 0, trailing_raw) !== cst$4
                       ? [0, trailing_raw]
                       : 0;
                   if(test_exn){
                    var test_exn$0 = test_exn[1];
                    if(trailing_output)
                     var
                      trailing_output$0 = trailing_output[1],
                      test_to_run$0 = exn_test_id,
                      test_output =
                        Base_String[68].call
                         (null,
                          m,
                          [0,
                           test_exn$0,
                           [0,
                            cst_Trailing_output,
                            [0, cst$1, [0, trailing_output$0, 0]]]]);
                    else
                     var test_to_run$0 = exn_test_id, test_output = test_exn$0;
                   }
                   else
                    var
                     test_output$0 =
                       Base_Option[30].call(null, trailing_output, cst$2),
                     test_to_run$0 = test_to_run,
                     test_output = test_output$0;
                   run_test_inner(test_to_run$0, test_output, test_block);
                   Base_List[19].call
                    (null,
                     expectations$1,
                     function(param){
                      var test_node = param[2];
                      return Ppx_expect_runtime_Test_node[3].call(null, test_node);
                     });
                   clean_up_block(test_block);
                   test_is_running[1] = 0;
                   return 1;
                  });
        }
        return [0, read_test_output_no_backtrace_, run_test, run_suite];
       },
       For_external,
       at_exit];
   runtime.caml_register_global
    (48, Ppx_expect_runtime_Test_block, "Ppx_expect_runtime__Test_block");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime
//# unitInfo: Requires: CamlinternalLazy, Ppx_expect_runtime__Current_file, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Write_corrected_file, Ppx_inline_test_lib, Stdlib, Stdlib__Sys
//# shape: Ppx_expect_runtime:[[F(1),F(1)],[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_expect_runtime_Write_corre =
      global_data.Ppx_expect_runtime__Write_corrected_file,
    Ppx_expect_runtime_Current_fil =
      global_data.Ppx_expect_runtime__Current_file,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Stdlib = global_data.Stdlib;
   Ppx_inline_test_lib[16].call
    (null,
     function(param){
      var a = Ppx_expect_runtime_Current_fil[4], b = runtime.caml_obj_tag(a);
      a:
      if(250 === b)
       var c = a[1];
      else{
       if(246 !== b && 244 !== b){var c = a; break a;}
       var c = CamlinternalLazy[2].call(null, a);
      }
      runtime.caml_sys_chdir(c);
      var
       d =
         caml_call1
          (Ppx_expect_runtime_Test_node[5][3],
           function(filename, test_nodes, postprocess){
            var
             a = Ppx_inline_test_lib[14].call(null, 0),
             b = Ppx_inline_test_lib[13].call(null, 0),
             c = Ppx_inline_test_lib[12].call(null, 0),
             d = Ppx_inline_test_lib[11].call(null, 0);
            return Ppx_expect_runtime_Write_corre[2].call
                    (null, d, c, b, a, filename, postprocess, test_nodes);
           });
      return caml_call1(Ppx_inline_test_lib[5][2], d);
     });
   Stdlib[100].call(null, Ppx_expect_runtime_Test_block[3]);
   var
    Current_file =
      [0,
       Ppx_expect_runtime_Current_fil[1],
       Ppx_expect_runtime_Current_fil[2]],
    Test_node = [0],
    Ppx_expect_runtime = [0, Current_file, Test_node];
   runtime.caml_register_global(7, Ppx_expect_runtime, "Ppx_expect_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
