// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_log_types__
//# shape: Ppx_log_types__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_log_types = [0],
    Ppx_log_types$0 = [0, Ppx_log_types];
   runtime.caml_register_global(0, Ppx_log_types$0, "Ppx_log_types__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Import
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib, Stdio
//# shape: Ppx_log_types__Import:[N,N,N,F(1),F(2),F(2),F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio;
   Ppx_expect_runtime[1][1].call(null, "types/import.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "import.ml");
   var
    stdin = Stdio[1],
    stdout = Stdio[2],
    stderr = Stdio[3],
    printf = Stdio[4],
    print_s = Stdio[5],
    eprint_s = Stdio[6],
    eprintf = Stdio[7],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10];
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var
    Ppx_log_types_Import =
      [0,
       stdin,
       stdout,
       stderr,
       printf,
       print_s,
       eprint_s,
       eprintf,
       print_string,
       print_endline,
       prerr_endline];
   runtime.caml_register_global
    (7, Ppx_log_types_Import, "Ppx_log_types__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Jsonaf
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib
//# shape: Ppx_log_types__Jsonaf:[F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/jsonaf.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "jsonaf.ml");
   var
    a = [0, "Null"],
    b = [0, "True"],
    c = [0, "False"],
    d = [0, "Array"],
    e = [0, "Number"],
    f = [0, "Object"],
    g = [0, "String"];
   function sexp_of_t(param){
    if(typeof param === "number")
     return 870828711 === param ? a : 937218926 <= param ? b : c;
    var variant = param[1];
    if(-703661335 <= variant){
     if(951901561 <= variant){
      var v_008 = param[2];
      return [1, [0, d, [0, Base[165].call(null, sexp_of_t, v_008), 0]]];
     }
     var v_002 = param[2];
     return [1, [0, e, [0, Base[202].call(null, v_002), 0]]];
    }
    if(-908856609 <= variant){
     var v_003 = param[2];
     return [1,
             [0,
              f,
              [0,
               Base[165].call
                (null,
                 function(param){
                  var
                   arg1_005 = param[2],
                   arg0_004 = param[1],
                   res0_006 = Base[202].call(null, arg0_004),
                   res1_007 = sexp_of_t(arg1_005);
                  return [1, [0, res0_006, [0, res1_007, 0]]];
                 },
                 v_003),
               0]]];
    }
    var v_001 = param[2];
    return [1, [0, g, [0, Base[202].call(null, v_001), 0]]];
   }
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types_Jsonaf = [0, sexp_of_t];
   runtime.caml_register_global
    (14, Ppx_log_types_Jsonaf, "Ppx_log_types__Jsonaf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Tag_data
//# unitInfo: Requires: Base, Base__Bool, Base__Char, Base__Float, Base__Int, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Jsonaf
//# shape: Ppx_log_types__Tag_data:[[F(1),F(1)],[F(1)]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Int = global_data.Base__Int,
    Base_Char = global_data.Base__Char,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base = global_data.Base,
    Ppx_log_types_Jsonaf = global_data.Ppx_log_types__Jsonaf,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/tag_data.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "tag_data.ml");
   var
    a = [0, "Int"],
    b = [0, "Char"],
    c = [0, "Float"],
    d = [0, "String"],
    e = [0, "Bool"],
    f = [0, "Sexp"],
    g = [0, "Json"];
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_001 = param[1], res0_002 = caml_call1(Base[136], arg0_001);
       return [1, [0, a, [0, res0_002, 0]]];
      case 1:
       var arg0_003 = param[1], res0_004 = caml_call1(Base[115], arg0_003);
       return [1, [0, b, [0, res0_004, 0]]];
      case 2:
       var arg0_005 = param[1], res0_006 = Base[126].call(null, arg0_005);
       return [1, [0, c, [0, res0_006, 0]]];
      case 3:
       var arg0_007 = param[1], res0_008 = Base[202].call(null, arg0_007);
       return [1, [0, d, [0, res0_008, 0]]];
      case 4:
       var arg0_009 = param[1], res0_010 = Base[105].call(null, arg0_009);
       return [1, [0, e, [0, res0_010, 0]]];
      case 5:
       var arg0_011 = param[1], res0_012 = Base[85][5].call(null, arg0_011);
       return [1, [0, f, [0, res0_012, 0]]];
      default:
       var
        arg0_013 = param[1],
        res0_014 = Ppx_log_types_Jsonaf[1].call(null, arg0_013);
       return [1, [0, g, [0, res0_014, 0]]];
    }
   }
   var With_type_label = [0, sexp_of_t];
   function sexp_of_t$0(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Base[136], x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base[115], x$0);
      case 2:
       var x$1 = param[1]; return Base[126].call(null, x$1);
      case 3:
       var x$2 = param[1]; return Base[202].call(null, x$2);
      case 4:
       var x$3 = param[1]; return Base[105].call(null, x$3);
      case 5:
       var x$4 = param[1]; return x$4;
      default:
       var x$5 = param[1]; return Ppx_log_types_Jsonaf[1].call(null, x$5);
    }
   }
   function to_string(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return Base_Int[12].call(null, x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base_Char[9], x$0);
      case 2:
       var x$1 = param[1]; return Base_Float[101].call(null, x$1);
      case 3:
       var x$2 = param[1]; return x$2;
      case 4:
       var x$3 = param[1]; return Base_Bool[9].call(null, x$3);
      case 5:
       var x$4 = param[1]; return Base[85][16].call(null, x$4);
      default:
       var x$5 = param[1], a = Ppx_log_types_Jsonaf[1].call(null, x$5);
       return Base[85][16].call(null, a);
    }
   }
   var Without_type_label = [0, sexp_of_t$0, to_string];
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types_Tag_data = [0, Without_type_label, With_type_label];
   runtime.caml_register_global
    (34, Ppx_log_types_Tag_data, "Ppx_log_types__Tag_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Level
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
//# shape: Ppx_log_types__Level:[F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/level.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "level.ml");
   var a = [0, "Error"], b = [0, "Info"], c = [0, "Debug"];
   function sexp_of_t(param){
    return 106380200 === param ? a : 815031438 <= param ? b : c;
   }
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types_Level = [0, sexp_of_t];
   runtime.caml_register_global
    (9, Ppx_log_types_Level, "Ppx_log_types__Level");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Log_tag
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Tag_data
//# shape: Ppx_log_types__Log_tag:[F(1)*,F(1)*,[F(1)],[F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Ppx_log_types_Tag_data = global_data.Ppx_log_types__Tag_data,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/log_tag.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "log_tag.ml");
   var a = [0, "data"], b = [0, "name"];
   function of_pair(param){
    var data = param[2], name = param[1];
    return [0, name, data];
   }
   function string_pair(param){
    var data = param[2], name = param[1];
    return [0, name, [3, data]];
   }
   function sexp_of_t(param){
    var
     data_004 = param[2],
     name_002 = param[1],
     arg_005 = Ppx_log_types_Tag_data[2][1].call(null, data_004),
     bnds_001 = [0, [1, [0, a, [0, arg_005, 0]]], 0],
     arg_003 = Base[202].call(null, name_002),
     bnds_001$0 = [0, [1, [0, b, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   var Verbose = [0, sexp_of_t];
   function sexp_of_t$0(param){
    var name = param[1];
    if(name !== ""){
     var
      data = param[2],
      a = [0, Ppx_log_types_Tag_data[1][1].call(null, data), 0];
     return [1, [0, Base[202].call(null, name), a]];
    }
    var data$0 = param[2];
    return Ppx_log_types_Tag_data[1][1].call(null, data$0);
   }
   var For_message_sexp = [0, sexp_of_t$0];
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var
    Ppx_log_types_Log_tag =
      [0, of_pair, string_pair, Verbose, For_message_sexp];
   runtime.caml_register_global
    (11, Ppx_log_types_Log_tag, "Ppx_log_types__Log_tag");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_sexp
//# unitInfo: Requires: Base, Base__List, Base__Option, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Log_tag
//# shape: Ppx_log_types__Message_sexp:[N,F(3)*,F(1)*,F(1)*,F(1),[F(1)]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    bnd_013 = [1, [0, [0, "legacy_render_with_additional_parentheses"], 0]],
    Ppx_log_types_Log_tag = global_data.Ppx_log_types__Log_tag,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/message_sexp.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "message_sexp.ml");
   var
    a = [0, "String"],
    b = [0, "String_literal"],
    c = [1, 0],
    d = [0, "tags"],
    e = [0, "label"];
   function tags(r){return r[2];}
   function label(r){return r[1];}
   function create(opt, label, tags){
    var legacy_render_with_additional_ = opt ? opt[1] : 0;
    return [0, label, tags, legacy_render_with_additional_];
   }
   function render(param){
    var
     legacy_render_with_additional_ = param[3],
     tags = param[2],
     label = param[1],
     label$0 =
       caml_call2
        (Base_Option[24],
         label,
         function(param){var str = param[1]; return [0, str];}),
     tags$0 = Base_List[53].call(null, tags, Ppx_log_types_Log_tag[4][1]);
    if(label$0){
     var sexp = label$0[1];
     return tags$0
             ? legacy_render_with_additional_
               ? [1, [0, sexp, [0, [1, tags$0], 0]]]
               : [1, [0, sexp, tags$0]]
             : sexp;
    }
    if(! tags$0) return c;
    if(tags$0[2]) return [1, tags$0];
    var tag = tags$0[1];
    return legacy_render_with_additional_ ? [1, [0, tag, 0]] : tag;
   }
   function sexp_of_t(param){
    var
     legacy_render_with_additional_ = param[3],
     tags_010 = param[2],
     label_006 = param[1],
     bnds_005 = 0,
     bnds_005$0 =
       legacy_render_with_additional_ ? [0, bnd_013, bnds_005] : bnds_005,
     arg_011 = Base[165].call(null, Ppx_log_types_Log_tag[3][1], tags_010),
     bnds_005$1 = [0, [1, [0, d, [0, arg_011, 0]]], bnds_005$0];
    if(label_006){
     var v_007 = label_006[1];
     if(0 === v_007[0])
      var
       arg0_001 = v_007[1],
       res0_002 = Base[202].call(null, arg0_001),
       arg_009 = [1, [0, a, [0, res0_002, 0]]];
     else
      var
       arg0_003 = v_007[1],
       res0_004 = Base[202].call(null, arg0_003),
       arg_009 = [1, [0, b, [0, res0_004, 0]]];
     var
      bnd_008 = [1, [0, e, [0, arg_009, 0]]],
      bnds_005$2 = [0, bnd_008, bnds_005$1];
    }
    else
     var bnds_005$2 = bnds_005$1;
    return [1, bnds_005$2];
   }
   var Unstable = [0, sexp_of_t];
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var
    Ppx_log_types_Message_sexp =
      [0, [0], create, label, tags, render, Unstable];
   runtime.caml_register_global
    (19, Ppx_log_types_Message_sexp, "Ppx_log_types__Message_sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_data
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Message_sexp
//# shape: Ppx_log_types__Message_data:[[F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_log_types_Message_sexp = global_data.Ppx_log_types__Message_sexp,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/message_data.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "message_data.ml");
   var a = [0, "Structured"], b = [0, "Sexp"], c = [0, "String"];
   function sexp_of_t(param){
    var variant = param[1];
    if(348871921 === variant){
     var v_003 = param[2];
     return [1,
             [0,
              a,
              [0, Ppx_log_types_Message_sexp[6][1].call(null, v_003), 0]]];
    }
    if(925483562 <= variant){
     var v_001 = param[2];
     return [1, [0, b, [0, Base[85][5].call(null, v_001), 0]]];
    }
    var v_002 = param[2];
    return [1, [0, c, [0, Base[202].call(null, v_002), 0]]];
   }
   var Unstable = [0, sexp_of_t];
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types_Message_data = [0, Unstable];
   runtime.caml_register_global
    (11, Ppx_log_types_Message_data, "Ppx_log_types__Message_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_source
//# unitInfo: Requires: Base, Base__String, Expect_test_config, Inline_test_config, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_log_types__Import
//# shape: Ppx_log_types__Message_source:[N,F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lib_name$0 = "Lib_name",
    cst_Ppx_log_types_Message_sour$0 = "Ppx_log_types__Message_source",
    cst_ppx_log_types$0 = "ppx_log_types",
    cst_types_message_source_ml$0 = "types/message_source.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) === 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "__",
    Ppx_log_types_Import = global_data.Ppx_log_types__Import,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   Ppx_expect_runtime[1][1].call(null, cst_types_message_source_ml$0);
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types$0, "message_source.ml");
   var
    a = [0, "library_name"],
    b = [0, "pos_lnum"],
    c = [0, "pos_fname"],
    d = [0, "Manually_constructed"],
    e = [0, "Code"];
   function sexp_of_t(param){
    if(0 === param[0]){
     var arg0_008 = param[1], res0_009 = Base[202].call(null, arg0_008);
     return [1, [0, d, [0, res0_009, 0]]];
    }
    var
     arg0_010 = param[1],
     library_name_006 = arg0_010[3],
     pos_lnum_004 = arg0_010[2],
     pos_fname_002 = arg0_010[1],
     arg_007 = Base[202].call(null, library_name_006),
     bnds_001 = [0, [1, [0, a, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Base[136], pos_lnum_004),
     bnds_001$0 = [0, [1, [0, b, [0, arg_005, 0]]], bnds_001],
     arg_003 = Base[202].call(null, pos_fname_002),
     bnds_001$1 = [0, [1, [0, c, [0, arg_003, 0]]], bnds_001$0],
     res0_011 = [1, bnds_001$1];
    return [1, [0, e, [0, res0_011, 0]]];
   }
   function libname(module_name){
    var match = Base_String[87].call(null, 0, module_name, cst);
    if(! match) return module_name;
    var idx = match[1];
    return Base_String[3].call(null, module_name, 0, idx);
   }
   var
    cst_Ppx_log_types_Message_sour = cst_Ppx_log_types_Message_sour$0,
    cst_Lib_name = cst_Lib_name$0,
    cst_Lib_name2_module_name = "Lib_name2__module_name",
    cst_Lib_name3_module_name_more = "Lib_name3__module_name__more_stuff",
    f = [0, [0, [0, "Ppx_log_types", 0], [0, 585, 598, 613]]],
    g = [0, 585, 589, 614],
    j = [0, [0, [0, cst_Lib_name$0, 0], [0, 668, 681, 691]]],
    k = [0, 668, 672, 692],
    n = [0, [0, [0, "Lib_name2", 0], [0, 760, 773, 784]]],
    o = [0, 760, 764, 785],
    r = [0, [0, [0, "Lib_name3", 0], [0, 865, 878, 889]]],
    s = [0, 865, 869, 890],
    v = [0, "libname_from_module_name example"],
    y = [0, 471, 473, 890],
    z = [0, 865, 890, 890],
    A = [0, 471, 473, 890],
    cst_types_message_source_ml = cst_types_message_source_ml$0,
    cst_ppx_log_types = cst_ppx_log_types$0;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       Ppx_expect_runtime_Test_block[1].call(null, Expect_test_config),
     h =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], g, f),
     i = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), h], 0],
     l =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], k, j),
     m = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), l], i],
     p =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], o, n),
     q = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), p], m],
     t =
       Ppx_expect_runtime_Test_node[1][1].call
        (null, [0, Ppx_expect_runtime_Types[1][1]], s, r),
     u = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), t], q],
     w = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     x = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_types_message_source_ml,
      25,
      A,
      z,
      y,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      x,
      w,
      v,
      0,
      Inline_test_config,
      u,
      function(param){
       var a = libname(cst_Ppx_log_types_Message_sour);
       Ppx_log_types_Import[8].call(null, a);
       var b = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
       caml_call1(Ppx_expect_test_block[2], b);
       var c = libname(cst_Lib_name);
       Ppx_log_types_Import[8].call(null, c);
       var d = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
       caml_call1(Ppx_expect_test_block[2], d);
       var e = libname(cst_Lib_name2_module_name);
       Ppx_log_types_Import[8].call(null, e);
       var f = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
       caml_call1(Ppx_expect_test_block[2], f);
       var g = libname(cst_Lib_name3_module_name_more);
       Ppx_log_types_Import[8].call(null, g);
       var h = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
       return caml_call1(Ppx_expect_test_block[2], h);
      });
   }
   function code(pos_fname, pos_lnum, module_name){
    return [1, [0, pos_fname, pos_lnum, libname(module_name)]];
   }
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types_Message_source = [0, [0], sexp_of_t, [0, code]];
   runtime.caml_register_global
    (37, Ppx_log_types_Message_source, cst_Ppx_log_types_Message_sour$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
//# shape: Ppx_log_types:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types = "ppx_log_types",
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_expect_runtime[1][1].call(null, "types/ppx_log_types.ml");
   Ppx_inline_test_lib[6].call(null, cst_ppx_log_types, "ppx_log_types.ml");
   Ppx_inline_test_lib[7].call(null, cst_ppx_log_types);
   Ppx_expect_runtime[1][2].call(null, 0);
   var Ppx_log_types = [0];
   runtime.caml_register_global(7, Ppx_log_types, "Ppx_log_types");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
