// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_module_timer_runtime
//# unitInfo: Requires: Base, Base__Int, Base__Int63, Base__List, Base__Option, Base__Printf, Base__String, CamlinternalLazy, Stdio, Stdlib, Stdlib__Gc, Stdlib__Sys, Time_now
//# shape: Ppx_module_timer_runtime:[N,N,N,F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_PPX_MODULE_TIMER = "PPX_MODULE_TIMER",
    cst_ns$1 = "ns",
    cst_runtime_ppx_module_timer_r = "runtime/ppx_module_timer_runtime.ml",
    caml_gc_quick_stat = runtime.caml_gc_quick_stat,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = "\n",
    cst$1 = " ",
    cst$2 = cst$4,
    cst$0 = cst$4,
    cst = cst$4,
    am_recording_environment_varia = cst_PPX_MODULE_TIMER,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Int63 = global_data.Base__Int63,
    Stdio = global_data.Stdio,
    Base_Option = global_data.Base__Option,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Int = global_data.Base__Int,
    Time_now = global_data.Time_now,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib;
   a:
   {
    var
     cst_ppx_module_timer_overridin =
       "ppx_module_timer: overriding time measurements for testing",
     e = [0, [11, "Line ", [4, 0, 0, 0, 0]], "Line %d"],
     f =
       [0, [11, "Fake__Dependency_", [4, 0, 0, 0, 0]], "Fake__Dependency_%d"],
     d = [0, [2, [1, 1], [12, 32, [2, 0, 0]]], "%*s %s"],
     cst_compactions = "compactions",
     cst_major_collections = "major collections",
     cst_minor_collections = "minor collections",
     c = [0, ", "],
     cst_GC = "; GC: ",
     b = [0, cst_runtime_ppx_module_timer_r, 110, 6],
     a = [0, cst_runtime_ppx_module_timer_r, 94, 6],
     cst_ns$0 = cst_ns$1,
     cst_ns = cst_ns$1;
    try{var value = runtime.caml_sys_getenv(cst_PPX_MODULE_TIMER);}
    catch(exn){var am_recording_value = 0; break a;}
    var am_recording_value = [0, value];
   }
   var am_recording = Base_Option[53].call(null, am_recording_value);
   function to_nanoseconds(t){return t;}
   function of_nanoseconds(t){return t;}
   function of_string(string){
    var a = Base_String[114].call(null, string, cst_ns);
    return Base_Int63[10].call(null, a);
   }
   function to_string(nanos){
    var a = Base_Int63[11].call(null, nanos);
    return Base[241].call(null, a, cst_ns$0);
   }
   function to_string_with_same_unit(list){
    return Base_List[53].call(null, list, to_string);
   }
   var format = [0, [0, of_string, to_string_with_same_unit]];
   function create(nested_timer, param){
    var a = caml_gc_quick_stat(0);
    return [0, cst, Base_Int63[42], a, nested_timer, 0];
   }
   function record_start(t, description){
    if(am_recording){
     if(! Base_String[14].call(null, t[1]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
     t[1] = description;
     t[3] = caml_gc_quick_stat(0);
     t[2] = Time_now[2].call(null, 0);
     var b = 0;
    }
    else
     var b = am_recording;
    return b;
   }
   function record_until(t, description){
    if(! am_recording) return am_recording;
    var
     until = Time_now[2].call(null, 0),
     start = t[2],
     gc_stats_after = caml_gc_quick_stat(0),
     gc_stats_before = t[3],
     runtime = Base_Int63[46].call(null, until, start);
    if(! Base_String[134].call(null, t[1], description))
     throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    var
     gc_events =
       [0,
        gc_stats_after[4] - gc_stats_before[4] | 0,
        gc_stats_after[5] - gc_stats_before[5] | 0,
        gc_stats_after[14] - gc_stats_before[14] | 0],
     match$0 = t[4];
    if(match$0)
     var
      nested$0 = match$0[1],
      nested_timing_events = Base_List[63].call(null, nested$0[5]);
    else
     var nested_timing_events = 0;
    var
     timing_event = [0, description, runtime, gc_events, nested_timing_events];
    t[5] = [0, timing_event, t[5]];
    t[1] = cst$0;
    t[2] = Base_Int63[42];
    var match = t[4];
    if(! match) return 0;
    var nested = match[1];
    nested[5] = 0;
    return 0;
   }
   var
    definition_timer = create(0, 0),
    module_timer = create([0, definition_timer], 0);
   function record_start$0(module_name){
    return record_start(module_timer, module_name);
   }
   function record_until$0(module_name){
    return record_until(module_timer, module_name);
   }
   function record_definition_start(loc){
    return record_start(definition_timer, loc);
   }
   function record_definition_until(loc){
    return record_until(definition_timer, loc);
   }
   function gc_events_suffix_string(param){
    var
     compactions = param[3],
     major_collections = param[2],
     minor_collections = param[1];
    function to_list(description, count){
     if(0 === count) return 0;
     var
      a = Base[241].call(null, cst$1, description),
      b = Base_Int[12].call(null, count);
     return [0, Base[241].call(null, b, a), 0];
    }
    var
     a = to_list(cst_compactions, compactions),
     b = to_list(cst_major_collections, major_collections),
     d = Base[222].call(null, b, a),
     e = to_list(cst_minor_collections, minor_collections),
     strings = Base[222].call(null, e, d);
    if(Base_List[18].call(null, strings)) return cst$2;
    var f = Base_String[68].call(null, c, strings);
    return Base[241].call(null, cst_GC, f);
   }
   function timing_events_to_strings(list, indent){
    var
     string =
       Base_List[53].call
        (null, list, function(timing_event){return timing_event[2];}),
     Format = format[1],
     duration_strings = caml_call1(Format[2], string),
     prefix = Base_String[66].call(null, indent, 32),
     list$0 =
       Base_List[98].call
        (null,
         duration_strings,
         list,
         function(duration_string, param){
          var
           nested_timing_events = param[4],
           gc_events = param[3],
           description = param[1],
           a = timing_events_to_strings(nested_timing_events, indent + 4 | 0),
           b =
             Base_List[53].call
              (null,
               a,
               function(line){return Base[241].call(null, cst$3, line);}),
           c = Base_String[68].call(null, 0, b),
           d = gc_events_suffix_string(gc_events),
           e = Base[241].call(null, d, c);
          return [0, duration_string, Base[241].call(null, description, e)];
         }),
     left_column_width =
       Base_List[20].call
        (null,
         list$0,
         0,
         function(width, param){
          var left = param[1];
          return Base_Int[16].call
                  (null, width, runtime.caml_ml_string_length(left));
         }),
     a =
       Base_List[53].call
        (null,
         list$0,
         function(param){
          var right = param[2], left = param[1];
          return caml_call3
                  (Base_Printf[2].call(null, d),
                   left_column_width,
                   left,
                   right);
         });
    return Base_List[53].call
            (null,
             a,
             function(line){return Base[241].call(null, prefix, line);});
   }
   function gc_events(i){
    var
     a = 7 === caml_call2(Base[227], i, 8) ? 1 : 0,
     b = 3 === caml_call2(Base[227], i, 4) ? 1 : 0,
     c = 1 === caml_call2(Base[227], i, 2) ? 1 : 0;
    return [0, c, b, a];
   }
   var
    fake_timing_events =
      [246,
       function(a){
        return Base_List[40].call
                (null,
                 12,
                 function(i){
                  var
                   a =
                     0 === caml_call2(Base[227], i + 1 | 0, 4)
                      ? Base_List
                         [40].call
                        (null,
                         i + 1 | 0,
                         function(j){
                          var
                           a = gc_events(j),
                           b = Base_Int63[100].call(null, 900 * (j + 1 | 0) | 0);
                          return [0,
                                  caml_call1(Base_Printf[2].call(null, e), j + 1 | 0),
                                  b,
                                  a,
                                  0];
                         })
                      : 0,
                   b = gc_events(i),
                   c = Base_Int63[100].call(null, 900 * (i + 1 | 0) | 0);
                  return [0,
                          caml_call1(Base_Printf[2].call(null, f), i + 1 | 0),
                          c,
                          b,
                          a];
                 });
       }];
   if(am_recording)
    Stdlib[100].call
     (null,
      function(param){
       var timing_events$0 = Base_List[63].call(null, module_timer[5]);
       function notify_of_overriding(param){
        return Stdio[9].call(null, cst_ppx_module_timer_overridin);
       }
       var string = Base_Option[31].call(null, 0, 0, 0, am_recording_value);
       a:
       if(string !== "FAKE_MODULES"){
        try{var Format = format[1], override = caml_call1(Format[1], string);}
        catch(exn){var timing_events = timing_events$0; break a;}
        notify_of_overriding(0);
        var
         timing_events =
           Base_List[41].call
            (null,
             timing_events$0,
             function(index, timing_event){
              var
               a = Base_Int63[100].call(null, index + 1 | 0),
               runtime = Base_Int63[47].call(null, override, a),
               nested_timing_events =
                 Base_List[41].call
                  (null,
                   timing_event[4],
                   function(index, nested_timing_event){
                    var
                     a = Base_Int63[100].call(null, index + 1 | 0),
                     runtime = Base_Int63[47].call(null, override, a);
                    return [0,
                            nested_timing_event[1],
                            runtime,
                            nested_timing_event[3],
                            nested_timing_event[4]];
                   });
              return [0,
                      timing_event[1],
                      runtime,
                      timing_event[3],
                      nested_timing_events];
             });
       }
       else{
        notify_of_overriding(0);
        var a = runtime.caml_obj_tag(fake_timing_events);
        if(250 === a)
         var timing_events = fake_timing_events[1];
        else{
         if(246 !== a && 244 !== a){
          var timing_events = fake_timing_events;
          break a;
         }
         var
          timing_events = CamlinternalLazy[2].call(null, fake_timing_events);
        }
       }
       var b = timing_events_to_strings(timing_events, 0);
       return Base_List[19].call(null, b, Stdio[9]);
      });
   var
    Ppx_module_timer_runtime =
      [0,
       am_recording,
       am_recording_environment_varia,
       [0, to_nanoseconds, of_nanoseconds, format],
       record_start$0,
       record_until$0,
       record_definition_start,
       record_definition_until];
   runtime.caml_register_global
    (32, Ppx_module_timer_runtime, "Ppx_module_timer_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
