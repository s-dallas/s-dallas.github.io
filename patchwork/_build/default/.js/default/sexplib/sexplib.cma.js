// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Sexplib
//# shape: Sexplib:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib = [0];
   runtime.caml_register_global(0, Sexplib, "Sexplib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Type
//# shape: Sexplib__Type:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Type = [0];
   runtime.caml_register_global(0, Sexplib_Type, "Sexplib__Type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Src_pos
//# unitInfo: Requires: Stdlib__Printf
//# shape: Sexplib__Src_pos:[N,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    zero = [0, 0, 0],
    origin = [0, 1, 1],
    Stdlib_Printf = global_data.Stdlib__Printf,
    a = [0, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]], "%d:%d"];
   function sexp_of_t(param){
    var col = param[2], row = param[1];
    return [0, caml_call2(Stdlib_Printf[4].call(null, a), row, col)];
   }
   function add(t1, t2){return [0, t1[1] + t2[1] | 0, t1[2] + t2[2] | 0];}
   function sub(t1, t2){return [0, t1[1] - t2[1] | 0, t1[2] - t2[2] | 0];}
   function geq(t1, t2){
    var
     c2 = t2[2],
     r2 = t2[1],
     c1 = t1[2],
     r1 = t1[1],
     a = r1 === r2 ? c1 - c2 | 0 : r1 - r2 | 0;
    return 0 <= a ? 1 : 0;
   }
   function of_lexing(param){
    var pos_cnum = param[4], pos_bol = param[3], pos_lnum = param[2];
    return [0, pos_lnum, (pos_cnum - pos_bol | 0) + 1 | 0];
   }
   var
    Sexplib_Src_pos =
      [0,
       [0, sexp_of_t, zero, add, sub],
       [0, sexp_of_t, origin, of_lexing, sub, add, sub, geq]];
   runtime.caml_register_global(4, Sexplib_Src_pos, "Sexplib__Src_pos");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Type_with_layout
//# unitInfo: Requires: Sexplib__Src_pos, Stdlib__List
//# shape: Sexplib__Type_with_layout:[F(1)*,N,N,N,N,F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    Stdlib_List = global_data.Stdlib__List,
    a = [1, 0],
    b = [0, "Atom"],
    c = [0, "List"],
    d = [0, "Sexp"],
    e = [0, "Comment"],
    f = [0, "Plain_comment"],
    g = [0, "Sexp_comment"];
   function map(t, f){
    var a = Stdlib_List[22].call(null, f, t);
    return Stdlib_List[10].call(null, a);
   }
   function Make(Pos){
    var of_pos = Pos[1];
    function of_list(of_a, xs){return [1, map(xs, of_a)];}
    function sexp_of_t(param){
     if(0 !== param[0]){
      var
       v3$0 = param[3],
       v2$0 = param[2],
       v1$0 = param[1],
       f = [0, caml_call1(of_pos, v3$0), 0],
       g = [0, of_list(sexp_of_t_or_comment, v2$0), f];
      return [1, [0, c, [0, caml_call1(of_pos, v1$0), g]]];
     }
     var v3 = param[3], v2 = param[2], v1 = param[1], e = 0;
     if(v3) var x = v3[1], d = [1, [0, [0, x], 0]]; else var d = a;
     return [1, [0, b, [0, caml_call1(of_pos, v1), [0, [0, v2], [0, d, e]]]]];
    }
    function sexp_of_t_or_comment(param){
     if(0 === param[0]){
      var t = param[1];
      return [1, [0, d, [0, sexp_of_t(t), 0]]];
     }
     var c = param[1];
     return [1, [0, e, [0, sexp_of_comment(c), 0]]];
    }
    function sexp_of_comment(param){
     if(0 === param[0]){
      var v2 = param[2], v1 = param[1];
      return [1, [0, f, [0, caml_call1(of_pos, v1), [0, [0, v2], 0]]]];
     }
     var
      v3 = param[3],
      v2$0 = param[2],
      v1$0 = param[1],
      a = [0, sexp_of_t(v3), 0],
      b = [0, of_list(sexp_of_comment, v2$0), a];
     return [1, [0, g, [0, caml_call1(of_pos, v1$0), b]]];
    }
    return [0, , , sexp_of_t, sexp_of_comment, sexp_of_t_or_comment];
   }
   var
    include = Make([0, Sexplib_Src_pos[1][1]]),
    sexp_of_t = include[3],
    sexp_of_comment = include[4],
    sexp_of_t_or_comment = include[5],
    Parsed = Make([0, Sexplib_Src_pos[2][1]]);
   function rel(outer_p, p){
    return caml_call2(Sexplib_Src_pos[2][4], p, outer_p);
   }
   function aux_t(outer_p, param){
    if(0 === param[0]){
     var sopt = param[3], s = param[2], pos = param[1];
     return [0, rel(outer_p, pos), s, sopt];
    }
    var
     end_pos = param[3],
     tocs = param[2],
     start_pos = param[1],
     a = rel(outer_p, end_pos),
     b = map(tocs, function(toc){return aux_toc(start_pos, toc);});
    return [1, rel(outer_p, start_pos), b, a];
   }
   function aux_toc(outer_p, param){
    if(0 === param[0]){var t = param[1]; return [0, aux_t(outer_p, t)];}
    var c = param[1];
    return [1, aux_c(outer_p, c)];
   }
   function aux_c(outer_p, param){
    if(0 === param[0]){
     var txt = param[2], pos = param[1];
     return [0, rel(outer_p, pos), txt];
    }
    var
     t = param[3],
     cs = param[2],
     pos$0 = param[1],
     a = aux_t(outer_p, t),
     b = map(cs, function(c){return aux_c(outer_p, c);});
    return [1, rel(outer_p, pos$0), b, a];
   }
   function relativize(toc){return aux_toc(Sexplib_Src_pos[2][2], toc);}
   var
    Sexplib_Type_with_layout =
      [0,
       function(a){return [0];},
       [0, Parsed[3], Parsed[4], Parsed[5]],
       sexp_of_t,
       sexp_of_comment,
       sexp_of_t_or_comment,
       relativize];
   runtime.caml_register_global
    (9, Sexplib_Type_with_layout, "Sexplib__Type_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Parser
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Parsing, Stdlib__Printf
//# shape: Sexplib__Parser:[F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    what = "sexp",
    yylhs =
      "\xff\xff\x01\0\x01\0\x06\0\x06\0\x06\0\x06\0\b\0\b\0\x05\0\x05\0\x02\0\x02\0\x02\0\x02\0\x07\0\x07\0\x07\0\x07\0\x04\0\x04\0\x03\0\x03\0\0\0\0\0\0\0\0\0",
    yylen =
      "\x02\0\x02\0\x01\0\x01\0\x02\0\x03\0\x01\0\x02\0\x03\0\x01\0\x02\0\x01\0\x02\0\x01\0\x02\0\x01\0\x01\0\x02\0\x02\0\x02\0\x01\0\x02\0\x01\0\x02\0\x02\0\x02\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x03\0\0\0\0\0\x17\0\0\0\x02\0\t\0\r\0\x18\0\0\0\v\0\x16\0\x19\0\x0f\0\0\0\x10\0\x14\0\x1a\0\0\0\x04\0\0\0\0\0\x07\0\x01\0\n\0\x0e\0\f\0\x15\0\x11\0\x12\0\x13\0\x05\0\b\0",
    yydgoto = "\x05\0\n\0\x0f\0\x13\0\x18\0\v\0\x14\0\x15\0\r\0",
    yysindex =
      '(\0"\xff\x01\0\x06\0\v\0\0\0\0\0\0\0:\xff"\xff\0\0"\xff\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\x1a\0\0\0?\xff"\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex = "\0\0\0\0\0\0\0\0\0\0\xfe\xff\x03\0\x05\0\x1d\0",
    yytable =
      "\x10\0\x0e\0\0\0\0\0\f\0\x11\0\x12\0\x1c\0\0\0\x19\0\0\0\x17\0\x1d\0\x1b\0\x1e\0\0\0 \0\0\0\0\0!\0\0\0\"\0\0\0\0\0#\0\0\0%\0\0\0#\0\0\0#\0'\0\x16\0\x16\0\x06\0\x07\0\b\0\x16\0\t\0\0\0\x1f\0\x01\0\x02\0\x03\0\x04\0\x1f\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0$\0\0\0$\0\x1f\0\x06\0\x07\0\b\0\x1a\0\t\0\x06\0\x07\0\b\0&\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0",
    yycheck =
      "\x02\0\0\0\xff\xff\xff\xff\x01\0\x02\0\0\0\t\0\xff\xff\x04\0\xff\xff\0\0\t\0\b\0\v\0\xff\xff\0\0\xff\xff\xff\xff\x10\0\xff\xff\0\0\xff\xff\xff\xff\x15\0\xff\xff\0\0\xff\xff\x19\0\xff\xff\x1b\0\x1c\0\x03\0\x04\0\0\x01\x01\x01\x02\x01\b\0\x04\x01\xff\xff\v\0\x01\0\x02\0\x03\0\x04\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\x1b\0\x1c\0\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01",
    yynames_const = "LPAREN\0RPAREN\0EOF\0HASH_SEMI\0",
    yynames_block = "STRING\0",
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    yytransl_const = runtime.caml_obj_dup([0, 258, 259, 0, 260, 0]),
    yytransl_block = [0, 257, 0],
    a =
      [0,
       [11,
        "Sexplib.Parser: failed to parse line ",
        [4, 0, 0, 0, [11, " char ", [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]],
       "Sexplib.Parser: failed to parse line %d char %d: %s"],
    b = [1, 0],
    cst_parser = "parser",
    yyact =
      [0,
       function(param){return Stdlib[2].call(null, cst_parser);},
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        var _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return _2;
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return _1;
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1];
       },
       function(caml_parser_env){return b;},
       function(caml_parser_env){
        var _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return [1, Stdlib_List[10].call(null, _2)];
       },
       function(caml_parser_env){
        var
         pos = Stdlib_Parsing[5].call(null, 0),
         b = pos[4] - pos[3] | 0,
         c = pos[2],
         msg = caml_call3(Stdlib_Printf[4].call(null, a), c, b, what);
        return Stdlib[2].call(null, msg);
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return 0;
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return 0;
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return 0;
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return 0;
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1];
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        var _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _2];
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return 0;
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1, 0];
       },
       function(caml_parser_env){
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return 0;
       },
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _2, _1];
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return _1;
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return _1;
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return Stdlib_List[10].call(null, _1);
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       }],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       286,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
   function sexp(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 1, lexfun, lexbuf);
   }
   function sexp_opt(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 2, lexfun, lexbuf);
   }
   function sexps(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 3, lexfun, lexbuf);
   }
   function rev_sexps(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 4, lexfun, lexbuf);
   }
   var Sexplib_Parser = [0, sexp, sexp_opt, sexps, rev_sexps];
   runtime.caml_register_global(20, Sexplib_Parser, "Sexplib__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Parser_with_layout
//# unitInfo: Requires: Sexplib__Src_pos, Sexplib__Type_with_layout, Stdlib, Stdlib__List, Stdlib__Parsing, Stdlib__Printf
//# shape: Sexplib__Parser_with_layout:[F(2),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    what = "sexp",
    yylhs =
      "\xff\xff\x06\0\x06\0\x06\0\b\0\b\0\t\0\t\0\n\0\n\0\x07\0\x07\0\x01\0\x02\0\x02\0\v\0\v\0\x05\0\x05\0\x03\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0",
    yylen =
      "\x02\0\x01\0\x03\0\x01\0\x01\0\x03\0\0\0\x02\0\x01\0\x01\0\0\0\x02\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0\x01\0\x02\0\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\0\0\n\0\0\0\0\0\x03\0\x01\0\x04\0\n\0\x06\0\x16\0\b\0\t\0\f\0\x0e\0\r\0\x17\0\x14\0\x0f\0\x18\0\0\0\x19\0\0\0\x12\0\x1a\0\0\0\0\0\0\0\x13\0\x10\0\x15\0\v\0\x11\0\x02\0\x05\0\x07\0",
    yydgoto =
      "\x06\0\x14\0\x12\0\x15\0\x17\0\x1a\0\r\0\x18\0\x0e\0\x1d\0\x0f\0\x16\0",
    yysindex =
      "%\0\t\xff\x01\0\x07\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\0\0\x19\0\0\0\0\0\x1f\0 \xff\t\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex =
      "\0\0\x02\0\0\0\0\0\0\0\0\0\xe3\xff\xfb\xff\xeb\xff\0\0\xea\xff\n\0",
    yytable =
      '$\0\x10\0!\0\f\0\x11\0\x1c\0!\0\x13\0%\0\x07\0\b\0\t\0\n\0\x19\0\v\0\x1b\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\0\0\x1f\0 \0\0\0\0\0\0\0\x1f\0\0\0"\0\x07\0\b\0\t\0\n\0#\0\v\0\x01\0\x02\0\x03\0\x04\0\xx07\0\b\0\t\0\n\0\0\0\v\0\x07\0\b\0\t\0\n\0\0\0\v\0\x07\0\b\0\t\0\n\0\0\0\v\0\x07\0\b\0\t\0\n\0\0\0\v\0\x07\0\b\0\t\0\n\0\0\0\v\0\x07\0\b\0\t\0\n\0\0\0\v\0',
    yycheck =
      "\x1d\0\0\0\x18\0\x01\0\x02\0\n\0\x1c\0\0\0\x1d\0\0\x01\x01\x01\x02\x01\x03\x01\0\0\x05\x01\x05\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x16\0\0\0\xff\xff\xff\xff\xff\xff\x1b\0\xff\xff\0\0\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x01\0\x02\0\x03\0\x04\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01",
    yynames_const = "LPAREN\0RPAREN\0EOF\0HASH_SEMI\0",
    yynames_block = "STRING\0COMMENT\0",
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Sexplib_Type_with_layout = global_data.Sexplib__Type_with_layout,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    coerce = Sexplib_Src_pos[2][3];
   function start_pos(param){
    return caml_call1(coerce, Stdlib_Parsing[5].call(null, 0));
   }
   var
    yytransl_const = runtime.caml_obj_dup([0, 259, 260, 0, 261, 0]),
    yytransl_block = [0, 257, 258, 0],
    a =
      [0,
       [11,
        "Sexplib.Parser: failed to parse line ",
        [4, 0, 0, 0, [11, " char ", [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]],
       "Sexplib.Parser: failed to parse line %d char %d: %s"],
    cst_parser = "parser",
    yyact =
      [0,
       function(param){return Stdlib[2].call(null, cst_parser);},
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0),
         y = _1[2],
         x = _1[1];
        if(y)
         var
          match = y[1],
          x$0 = match[2],
          pos = match[1],
          y$0 = [0, x$0],
          y$1 = y$0,
          pos$0 = caml_call1(coerce, pos);
        else
         var y$2 = [0, x], pos$1 = start_pos(0), y$1 = y$2, pos$0 = pos$1;
        return [0, pos$0, x, y$1];
       },
       function(caml_parser_env){
        var
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         ts = Stdlib_List[10].call(null, _2),
         p = Stdlib_Parsing[6].call(null, 0),
         a = caml_call1(coerce, [0, p[1], p[2], p[3], p[4] - 1 | 0]);
        return [1, start_pos(0), ts, a];
       },
       function(caml_parser_env){
        var
         pos = Stdlib_Parsing[5].call(null, 0),
         b = pos[4] - pos[3] | 0,
         c = pos[2],
         msg = caml_call3(Stdlib_Printf[4].call(null, a), c, b, what);
        return Stdlib[2].call(null, msg);
       },
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0),
         pos_opt = _1[2],
         x = _1[1];
        if(pos_opt)
         var pos = pos_opt[1], pos$0 = caml_call1(coerce, pos);
        else
         var pos$0 = start_pos(0);
        return [0, pos$0, x];
       },
       function(caml_parser_env){
        var
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         _3 = Stdlib_Parsing[14].call(null, caml_parser_env, 0),
         cs = Stdlib_List[10].call(null, _2);
        return [1, start_pos(0), cs, _3];
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _2, _1];
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1];
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [1, _1];
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _2, _1];
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return Sexplib_Type_with_layout[6].call(null, _1);
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1];
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _1, 0];
       },
       function(caml_parser_env){
        var
         _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1),
         _2 = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        return [0, _2, _1];
       },
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return _1;
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return Stdlib_List[10].call(null, _1);
       },
       function(caml_parser_env){return 0;},
       function(caml_parser_env){
        var _1 = Stdlib_Parsing[14].call(null, caml_parser_env, 1);
        return Stdlib_List[10].call(null, _1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       },
       function(caml_parser_env){
        var a = Stdlib_Parsing[14].call(null, caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], a], 1);
       }],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       292,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
   function sexp(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 1, lexfun, lexbuf);
   }
   function sexp_opt(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 2, lexfun, lexbuf);
   }
   function sexps(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 3, lexfun, lexbuf);
   }
   function sexps_abs(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 4, lexfun, lexbuf);
   }
   function rev_sexps(lexfun, lexbuf){
    return Stdlib_Parsing[13].call(null, yytables, 5, lexfun, lexbuf);
   }
   var
    Sexplib_Parser_with_layout =
      [0, sexp, sexp_opt, sexps, sexps_abs, rev_sexps];
   runtime.caml_register_global
    (21, Sexplib_Parser_with_layout, "Sexplib__Parser_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Lexer
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Char, Stdlib__Lexing, Stdlib__Printf
//# shape: Sexplib__Lexer:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_char = " char ",
    cst_src_lexer_mll = "src/lexer.mll",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xf4\xff\n\0+\x005\0\xfa\xff\xfb\xff\xfc\xff\x01\0\x06\0\x06\0\xff\xffV\0\xf8\xff\xf9\xff`\0\x81\0\x8b\0\xac\0\xb6\0\xdc\0\xe6\0\x07\x01\xf7\xff\x11\x012\x01<\x01]\x01g\x01\x88\x01\x92\x01\xb5\x01\xbf\x01\xe0\x01\xea\x01\v\x02%\0\xf6\xffP\0\xf8\xff\x17\x02\xff\xff\xf9\xff9\x02!\x02\xfc\xff\x07\0\x10\0\x11\0p\x02\xfb\xff\x90\x02\xfa\xffQ\0\xfa\xff\xfd\xffz\0\xff\xff\xa6\0\x82\x01\xfc\xff\xfb\xff\xad\x01\xfb\x01",
       "\xff\xff\xff\xff\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\x02\0\x01\0\xff\xff\xff\xff\n\0\xff\xff\xff\xff\t\0\n\0\t\0\t\0\t\0\t\0\t\0\n\0\xff\xff\t\0\n\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\t\0\t\0\t\0\xff\xff\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x06\0\xff\xff\x06\0\x01\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       '\x02\0\0\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\b\0\xff\xff\xff\xff\0\0\x02\0\0\0\0\0\x14\0\x02\0\x12\0\x12\0\x12\0\x14\0\x14\0\x02\0\0\0\x1d\0\x02\0\x1b\0\x1b\0\x1b\0\x1d\0\x1d\0\x02\0\x02\0"\0"\0"\0&\0\0\0&\0\0\0*\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\x008\0\0\0\0\x008\0\0\x008\x008\0\0\0\0\x008\x008\0',
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\v\0\xff\xff\t\0\n\0\xff\xff\t\0\v\x000\0\t\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0/\x000\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\x05\0\x04\0\0\0\0\0\t\0\0\0\x07\0\x06\0\xff\xff\0\0\xff\xff \0\0\0'\0/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\b\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0)\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\x17\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\f\0\0\0\xff\xff9\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\x0e\0\0\0\xff\xff7\0;\0\0\0\xff\xff\0\0\xff\xff\x10\0\0\0\0\0\x03\0\0\0\xff\xff\xff\xff\xff\xff(\0\xff\xff\x13\0\xff\xff\0\0\x1f\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff?\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\x10\0\0\0\0\0\x16\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\0\x009\0\r\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\x007\0=\0\0\0\0\0\xff\xff:\0\xff\xff\x13\0\0\0\0\0\x0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x13\0\0\0\0\0\x0f\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0>\0\0\0\0\0\0\0\0\0\0\0\xff\xff\x11\0\xff\xff\x15\0\x01\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x15\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff:\0\0\0\0\0%\0\0\0\xff\xff\x11\0\xff\xff\x18\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x18\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff6\0\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x11\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x19\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff9\0\x1c\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\x007\0;\0\xff\xff\0\0\xff\xff\0\0\xff\xff\x18\0\xff\xff\0\0\x19\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff\xff\xff\x1c\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff#\0\x1c\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff \0\x1c\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0<\0\0\0\xff\xff\0\0\xff\xff#\0\x1e\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff#\0\x1e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff?\0\0\0\0\0/\0\0\0\0\0.\0\xff\xff\0\0\0\0\0\0>\0\0\0\xff\xff\0\0\xff\xff#\0\0\0\0\0\x1f\0\xff\xff\xff\xff\xff\xff\0\0\0\0-\0\0\0-\0\0\0!\0\xff\xff\0\0-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\0\0!\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0!\0\xff\xff\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0-\0\0\0\0\0\0\0\xff\xff\0\0-\x003\x003\x003\x003\x003\x003\0\0\0\0\0\xff\xff\0\0\0\0-\0\0\0!\0\xff\xff-\0\0\0-\0\0\0\0\0\0\0+\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\b\0\0\0\0\0\b\0\t\0\n\0.\0\t\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\t\0\xff\xff\0\0\0\0\x02\0\xff\xff\x02\0\x02\0\xff\xff$\0/\x000\0\x02\0\x02\0\x03\0\x03\0\xff\xff\x03\0\x03\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x04\0\x04\0\xff\xff\x04\0\x04\0\xff\xff\xff\xff\x02\0\xff\xff$\0\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x04\0\xff\xff\x04\0\x04\0\xff\xff&\x005\0\xff\xff\x04\0\x04\0\f\0\f\0\xff\xff\f\0\f\0\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\x0f\0\x0f\0\xff\xff\x0f\0\x0f\0\xff\xff\xff\xff\x04\0\xff\xff&\x005\x005\0\xff\xff\f\0\xff\xff\f\0\f\0\xff\xff\xff\xff\0\0\xff\xff\f\0\f\0\x0f\0$\0\x0f\0\x0f\x008\0\xff\xff\x02\0\xff\xff\x0f\0\x0f\0\x10\0\x10\0\xff\xff\x10\0\x10\0\xff\xff\xff\xff\f\0\xff\xff\xff\xff\x11\0\x11\0\xff\xff\x11\0\x11\0\xff\xff\xff\xff\x0f\x008\x008\0\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x10\0\x10\0\xff\xff\xff\xff\x03\0\xff\xff\x10\0\x10\0\x11\0&\0\x11\0\x11\0\xff\xff:\0\x04\0\xff\xff\x11\0\x11\0\x12\0\x12\0\xff\xff\x12\0\x12\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff\x13\0\x13\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\x11\0\xff\xff:\0:\0\xff\xff\xff\xff\x12\x005\0\x12\0\x12\0\xff\xff\xff\xff\f\0\xff\xff\x12\0\x12\0\x13\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\x0f\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x12\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\x15\0\x13\0\x15\0\x15\0\xff\xff\xff\xff8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x10\0\x14\0\x14\0\0\0\b\0\xff\xff\xff\xff\x14\0\x14\0\x15\0\x11\0\x15\0\x15\0\x02\0\xff\xff\xff\xff\xff\xff\x15\0\x15\0\x16\0\x16\0\xff\xff\x16\0\x16\0\xff\xff\xff\xff\x14\0\xff\xff\xff\xff\x18\0\x18\0\xff\xff\x18\0\x18\0\xff\xff\xff\xff\x15\0:\0\xff\xff\xff\xff$\0\xff\xff\x16\0\x12\0\x16\0\x16\0\x03\0\xff\xff\xff\xff\xff\xff\x16\0\x16\0\x18\0\x13\0\x18\0\x18\0\x04\0\xff\xff\xff\xff\xff\xff\x18\0\x18\0\x19\0\x19\0\xff\xff\x19\0\x19\0\xff\xff\xff\xff\x16\0\xff\xff\xff\xff\x1a\0\x1a\0\xff\xff\x1a\0\x1a\0\xff\xff\xff\xff\x18\0\xff\xff\xff\xff\xff\xff&\x005\0\x19\0\xff\xff\x19\0\x19\0\f\0\xff\xff\x14\0\xff\xff\x19\0\x19\0\x1a\0\xff\xff\x1a\0\x1a\0\x0f\0\xff\xff\x15\0\xff\xff\x1a\0\x1a\0\x1b\0\x1b\0\xff\xff\x1b\0\x1b\0\xff\xff\xff\xff\x19\0\xff\xff\xff\xff\x1c\0\x1c\0\xff\xff\x1c\0\x1c\0\xff\xff\xff\xff\x1a\0\xff\xff\xff\xff8\0\xff\xff\xff\xff\x1b\0\xff\xff\x1b\0\x1b\0\x10\0\xff\xff\x16\0\xff\xff\x1b\0\x1b\0\x1c\0\xff\xff\x1c\0\x1c\0\x11\0;\0\x18\0\xff\xff\x1c\0\x1c\0\x1d\0\x1d\0\xff\xff\x1d\0\x1d\0\xff\xff\xff\xff\x1b\0\xff\xff\xff\xff\x1e\0\x1e\0\xff\xff\x1e\0\x1e\0\xff\xff\xff\xff\x1c\0\xff\xff;\0;\0:\0\xff\xff\x1d\0\xff\xff\x1d\0\x1d\0\x12\0\xff\xff\x19\0\xff\xff\x1d\0\x1d\0\x1e\0\xff\xff\x1e\0\x1e\0\x13\0>\0\x1a\0\xff\xff\x1e\0\x1e\0\xff\xff\xff\xff\x1f\0\x1f\0\xff\xff\x1f\0\x1f\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff \0 \0\xff\xff \0 \0\x1e\0\xff\xff>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1b\0\xff\xff\xff\xff\x14\0\x1f\0\x1f\0 \0\xff\xff \0 \0\x1c\0\xff\xff\xff\xff\x15\0 \0 \0!\0!\0\xff\xff!\0!\0\xff\xff\xff\xff\x1f\0\xff\xff\xff\xff"\0"\0\xff\xff"\0"\0\xff\xff\xff\xff \0\xff\xff\xff\xff\xff\xff;\0\xff\xff!\0\xff\xff!\0!\0\x1d\0?\0\xff\xff\x16\0!\0!\0"\0\xff\xff"\0"\0\x1e\0\xff\xff\xff\xff\x18\0"\0"\0#\0#\0\xff\xff#\0#\0\xff\xff\xff\xff!\0\xff\xff?\0?\0\xff\xff\xff\xff(\0\xff\xff\xff\xff(\0"\0\xff\xff\xff\xff\xff\xff>\0\xff\xff#\0\xff\xff#\0#\0\xff\xff\xff\xff\x1f\0\x19\0#\0#\0\xff\xff\xff\xff(\0\xff\xff(\0\xff\xff \0\x1a\0\xff\xff(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff!\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0\x1c\0\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0(\0\xff\xff\xff\xff\xff\xff?\0\xff\xff(\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff;\0\xff\xff\xff\xff(\0\xff\xff#\0\x1d\0(\0\xff\xff(\0\xff\xff\xff\xff\xff\xff(\0\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff!\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff',
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Char = global_data.Stdlib__Char,
    Assert_failure = global_data.Assert_failure,
    lf = 10,
    a =
      [0,
       [11,
        "Sexplib.Lexer.main: ",
        [2,
         0,
         [11, " at line ", [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]]]],
       "Sexplib.Lexer.main: %s at line %d char %d"],
    cst_illegal_end_of_comment = "illegal end of comment",
    cst_comment_tokens_in_unquoted = "comment tokens in unquoted atom",
    b =
      [0,
       [11,
        "Sexplib.Lexer.scan_string: illegal escape at line ",
        [4,
         0,
         0,
         0,
         [11,
          cst_char,
          [4, 0, 0, 0, [11, ": `\\", [0, [0, [0, [12, 39, 0]]]]]]]]],
       "Sexplib.Lexer.scan_string: illegal escape at line %d char %d: `\\%c%c%c'"],
    c =
      [0,
       [11,
        "Sexplib.Lexer.scan_string: unterminated string at line ",
        [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]],
       "Sexplib.Lexer.scan_string: unterminated string at line %d char %d"],
    d = [0, cst_src_lexer_mll, 235, 16],
    e =
      [0,
       [11,
        "Sexplib.Lexer.scan_block_comment: unterminated block comment at line ",
        [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]],
       "Sexplib.Lexer.scan_block_comment: unterminated block comment at line %d char %d"],
    f = [0, cst_src_lexer_mll, 240, 16];
   function found_newline(lexbuf, diff){
    var lex_curr_p = lexbuf[12];
    lexbuf[12] =
     [0,
      lex_curr_p[1],
      lex_curr_p[2] + 1 | 0,
      lex_curr_p[4] - diff | 0,
      lex_curr_p[4]];
   }
   function lexeme_len(param){
    var lex_start_pos = param[5], lex_curr_pos = param[6];
    return lex_curr_pos - lex_start_pos | 0;
   }
   function main_failure(lexbuf, msg){
    var
     match = Stdlib_Lexing[12].call(null, lexbuf),
     pos_cnum = match[4],
     pos_bol = match[3],
     pos_lnum = match[2],
     msg$0 =
       caml_call3
        (Stdlib_Printf[4].call(null, a),
         msg,
         pos_lnum,
         pos_cnum - pos_bol | 0);
    return Stdlib[2].call(null, msg$0);
   }
   function Make(X){
    function a(buf, lexbuf){
     a:
     for(;;){
      var ocaml_lex_state = 0;
      for(;;){
       var
        ocaml_lex_state$0 =
          Stdlib_Lexing[20].call
           (null, ocaml_lex_tables, ocaml_lex_state, lexbuf);
       if(11 >= ocaml_lex_state$0 >>> 0) break;
       caml_call1(lexbuf[1], lexbuf);
       ocaml_lex_state = ocaml_lex_state$0;
      }
      switch(ocaml_lex_state$0){
        case 1: break;
        case 0:
         found_newline(lexbuf, 0); break;
        case 2:
         var
          text = Stdlib_Lexing[16].call(null, lexbuf, lexbuf[5], lexbuf[6]);
         return caml_call4(X[2][7], text, a, buf, lexbuf);
        case 3:
         return X[2][1];
        case 4:
         return X[2][2];
        case 5:
         var pos = Stdlib_Lexing[12].call(null, lexbuf);
         caml_call2(X[1][4], buf, lexbuf);
         scan_string(buf, pos, lexbuf);
         var tok = caml_call2(X[2][6], pos, buf);
         caml_call1(X[1][5], buf);
         return tok;
        case 6:
         return X[2][5];
        case 7:
         break a;
        case 8:
         return main_failure(lexbuf, cst_illegal_end_of_comment);
        case 9:
         return main_failure(lexbuf, cst_comment_tokens_in_unquoted);
        case 10:
         var str = Stdlib_Lexing[16].call(null, lexbuf, lexbuf[5], lexbuf[6]);
         return caml_call1(X[2][4], str);
        default: return X[2][3];
      }
     }
     var pos$0 = Stdlib_Lexing[12].call(null, lexbuf);
     caml_call2(X[1][4], buf, lexbuf);
     var locs = [0, pos$0, 0], locs$0 = locs;
     for(;;){
      var ocaml_lex_state$1 = 53;
      for(;;){
       var
        ocaml_lex_state$2 =
          Stdlib_Lexing[20].call
           (null, ocaml_lex_tables, ocaml_lex_state$1, lexbuf);
       if(5 >= ocaml_lex_state$2 >>> 0) break;
       caml_call1(lexbuf[1], lexbuf);
       ocaml_lex_state$1 = ocaml_lex_state$2;
      }
      switch(ocaml_lex_state$2){
        case 0:
         caml_call2(X[1][4], buf, lexbuf); found_newline(lexbuf, 0); continue;
        case 1:
         caml_call2(X[1][4], buf, lexbuf); continue;
        case 2:
         caml_call2(X[1][4], buf, lexbuf);
         var
          cur = Stdlib_Lexing[13].call(null, lexbuf),
          start = [0, cur[1], cur[2], cur[3], cur[4] - 1 | 0];
         scan_string(buf, start, lexbuf);
         continue;
        case 3:
         caml_call2(X[1][4], buf, lexbuf);
         var
          cur$0 = Stdlib_Lexing[13].call(null, lexbuf),
          start$0 = [0, cur$0[1], cur$0[2], cur$0[3], cur$0[4] - 2 | 0],
          locs$1 = [0, start$0, locs$0];
         locs$0 = locs$1;
         continue;
        case 4:
         caml_call2(X[1][4], buf, lexbuf);
         if(! locs$0)
          throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
         var locs$2 = locs$0[2];
         if(locs$2){locs$0 = locs$2; continue;}
         break;
        default:
         if(! locs$0)
          throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
         var
          match = locs$0[1],
          pos_cnum = match[4],
          pos_bol = match[3],
          pos_lnum = match[2],
          msg =
            caml_call2
             (Stdlib_Printf[4].call(null, e),
              pos_lnum,
              pos_cnum - pos_bol | 0);
         Stdlib[2].call(null, msg);
      }
      var tok$0 = caml_call4(X[2][8], pos$0, a, buf, lexbuf);
      caml_call1(X[1][5], buf);
      return tok$0;
     }
    }
    function scan_string$0(counter, buf, start, lexbuf){
     var a = 36;
     if(counter >= 50)
      return caml_trampoline_return
              (ocaml_lex_scan_string_rec, [0, buf, start, lexbuf, a]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_scan_string_rec(counter$0, buf, start, lexbuf, a);
    }
    function scan_string(buf, start, lexbuf){
     return caml_trampoline(scan_string$0(0, buf, start, lexbuf));
    }
    function ocaml_lex_scan_string_rec
    (counter, buf, start, lexbuf, ocaml_lex_state$1){
     var ocaml_lex_state = ocaml_lex_state$1;
     for(;;){
      var
       ocaml_lex_state$0 =
         Stdlib_Lexing[20].call
          (null, ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(9 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        caml_call2(X[1][4], buf, lexbuf); return;
       case 1:
        var len = lexeme_len(lexbuf) - 2 | 0;
        found_newline(lexbuf, len);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$0 = counter + 1 | 0;
        return scan_string$0(counter$0, buf, start, lexbuf);
       case 2:
        var len$0 = lexeme_len(lexbuf) - 3 | 0;
        found_newline(lexbuf, len$0);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$1 = counter + 1 | 0;
        return scan_string$0(counter$1, buf, start, lexbuf);
       case 3:
        var c$0 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 1 | 0);
        if(110 <= c$0)
         if(117 <= c$0)
          var a = c$0;
         else
          switch(c$0 - 110 | 0){
            case 0:
             var a = 10; break;
            case 4:
             var a = 13; break;
            case 6:
             var a = 9; break;
            default: var a = c$0;
          }
        else
         var a = 98 === c$0 ? 8 : c$0;
        caml_call2(X[1][2], buf, a);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$7 = counter + 1 | 0;
        return scan_string$0(counter$7, buf, start, lexbuf);
       case 4:
        var
         c1 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 1 | 0),
         c2 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 2 | 0),
         c3 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 3 | 0),
         v =
           ((100 * (c1 - 48 | 0) | 0) + (10 * (c2 - 48 | 0) | 0) | 0)
           + (c3 - 48 | 0)
           | 0;
        if(255 < v){
         var
          match = Stdlib_Lexing[13].call(null, lexbuf),
          pos_cnum = match[4],
          pos_bol = match[3],
          pos_lnum = match[2],
          msg =
            caml_call5
             (Stdlib_Printf[4].call(null, b),
              pos_lnum,
              (pos_cnum - pos_bol | 0) - 3 | 0,
              c1,
              c2,
              c3);
         Stdlib[2].call(null, msg);
        }
        var d = Stdlib_Char[1].call(null, v);
        caml_call2(X[1][2], buf, d);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$2 = counter + 1 | 0;
        return scan_string$0(counter$2, buf, start, lexbuf);
       case 5:
        var
         c1$0 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 2 | 0),
         c2$0 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 3 | 0),
         val1 =
           97 <= c1$0
            ? c1$0 - 87 | 0
            : 65 <= c1$0 ? c1$0 - 55 | 0 : c1$0 - 48 | 0,
         val2 =
           97 <= c2$0
            ? c2$0 - 87 | 0
            : 65 <= c2$0 ? c2$0 - 55 | 0 : c2$0 - 48 | 0,
         v$0 = (val1 * 16 | 0) + val2 | 0,
         e = Stdlib_Char[1].call(null, v$0);
        caml_call2(X[1][2], buf, e);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$6 = counter + 1 | 0;
        return scan_string$0(counter$6, buf, start, lexbuf);
       case 6:
        var c$1 = Stdlib_Lexing[18].call(null, lexbuf, lexbuf[5] + 1 | 0);
        caml_call2(X[1][2], buf, 92);
        caml_call2(X[1][2], buf, c$1);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$3 = counter + 1 | 0;
        return scan_string$0(counter$3, buf, start, lexbuf);
       case 7:
        found_newline(lexbuf, 0);
        caml_call2(X[1][2], buf, lf);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$4 = counter + 1 | 0;
        return scan_string$0(counter$4, buf, start, lexbuf);
       case 8:
        var ofs = lexbuf[5], len$1 = lexbuf[6] - ofs | 0;
        caml_call4(X[1][3], buf, lexbuf[2], ofs, len$1);
        caml_call2(X[1][4], buf, lexbuf);
        if(counter >= 50)
         return caml_trampoline_return(scan_string$0, [0, buf, start, lexbuf]);
        var counter$5 = counter + 1 | 0;
        return scan_string$0(counter$5, buf, start, lexbuf);
       default:
        var
         f = start[4] - start[3] | 0,
         g = start[2],
         msg$0 = caml_call2(Stdlib_Printf[4].call(null, c), g, f);
        return Stdlib[2].call(null, msg$0);
     }
    }
    function main(buf){
     if(buf){
      var buf$0 = buf[1];
      Stdlib_Buffer[8].call(null, buf$0);
      var buf$1 = caml_call1(X[1][6], buf$0);
     }
     else
      var buf$1 = caml_call1(X[1][1], 64);
     return function(b){return a(buf$1, b);};
    }
    return [0, main];
   }
   var
    create = Stdlib_Buffer[1],
    clear = Stdlib_Buffer[8],
    add_char = Stdlib_Buffer[12],
    add_subbytes = Stdlib_Buffer[19];
   function add_lexeme(a, param){return 0;}
   function of_buffer(b){return b;}
   function simple_string(x){return [0, x];}
   function quoted_string(param, buf){
    return [0, Stdlib_Buffer[2].call(null, buf)];
   }
   function block_comment(pos, main, buf, lexbuf){return caml_call2(main, buf, lexbuf);
   }
   function comment(text, main, buf, lexbuf){return caml_call2(main, buf, lexbuf);
   }
   var
    Vanilla =
      Make
       ([0,
         [0, create, add_char, add_subbytes, add_lexeme, clear, of_buffer],
         [0, 0, 1, 2, simple_string, 3, quoted_string, comment, block_comment]]);
   function create$0(n){
    var a = Stdlib_Buffer[1].call(null, n);
    return [0, Stdlib_Buffer[1].call(null, n), a];
   }
   function of_buffer$0(contents){
    return [0, contents, Stdlib_Buffer[1].call(null, 64)];
   }
   function add_char$0(t, ch){return Stdlib_Buffer[12].call(null, t[1], ch);}
   function add_subbytes$0(t, str, ofs, len){
    return Stdlib_Buffer[19].call(null, t[1], str, ofs, len);
   }
   function add_lexeme$0(t, lexbuf){
    var a = Stdlib_Lexing[8].call(null, lexbuf);
    return Stdlib_Buffer[16].call(null, t[2], a);
   }
   function clear$0(t){
    Stdlib_Buffer[8].call(null, t[2]);
    return Stdlib_Buffer[8].call(null, t[1]);
   }
   function simple_string$0(x){return [0, [0, x, 0]];}
   function quoted_string$0(pos, param){
    var
     lexeme = param[2],
     contents = param[1],
     a = [0, [0, pos, Stdlib_Buffer[2].call(null, lexeme)]];
    return [0, [0, Stdlib_Buffer[2].call(null, contents), a]];
   }
   function block_comment$0(pos, a, param, lexbuf){
    var lexeme = param[2];
    return [1, [0, Stdlib_Buffer[2].call(null, lexeme), [0, pos]]];
   }
   function comment$0(text, param, buf, lexbuf){return [1, [0, text, 0]];}
   var
    With_layout =
      Make
       ([0,
         [0,
          create$0,
          add_char$0,
          add_subbytes$0,
          add_lexeme$0,
          clear$0,
          of_buffer$0],
         [0,
          0,
          1,
          2,
          simple_string$0,
          3,
          quoted_string$0,
          comment$0,
          block_comment$0]]),
    main = Vanilla[1],
    main_with_layout = With_layout[1],
    Sexplib_Lexer = [0, main, main_with_layout];
   runtime.caml_register_global(15, Sexplib_Lexer, "Sexplib__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Pre_sexp
//# unitInfo: Requires: Parsexp, Parsexp__Old_parser_cont_state, Parsexp__Parse_error, Parsexp__Positions, Sexplib0__Sexp, Sexplib0__Sexp_conv, Sexplib__Lexer, Sexplib__Parser, Sexplib__Type, Stdlib, Stdlib__Bigarray, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Format, Stdlib__List, Stdlib__Printf, Stdlib__Random, Stdlib__String, Stdlib__Sys
//# shape: Sexplib__Pre_sexp:[F(2),F(2),N,N,F(2),N,F(2),F(3),F(2),F(2),F(2),F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),F(3),F(2),F(2),[N,F(2),F(3)],F(4),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(1),F(4),F(3),F(3),F(5),[N,F(1)*,F(1)*,F(2),N,F(2)],[F(5),F(2)*],N,[N,N,F(2),F(2)],F(1)*,N,N,N,N,N,N,N,N,N,F(2)*->F(3),F(2),F(3),F(2),F(5),F(3),F(3),F(6),F(1),F(1),F(3),N,F(1),F(3),F(2),F(2),N,F(4),F(3),[N,F(1)*,F(1)*,F(2),N,F(2),N,N,F(3),F(2),F(3),F(1),F(1),F(1),F(2),F(2),F(3),F(2),F(3)],F(4),F(2),F(4),F(3),F(3),F(4),F(2),F(2),[N],F(3),F(2),F(2),F(2),N,F(1)*,F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = " ",
    cst$7 = ": ",
    cst_got_multiple_S_expressions =
      ": got multiple S-expressions where only one was expected.",
    cst_Sexplib_Sexp = "Sexplib.Sexp.",
    cst_Sexplib_Sexp_s_got_multipl =
      "Sexplib.Sexp.%s: got multiple S-expressions where only one was expected.",
    cst_src_pre_sexp_ml = "src/pre_sexp.ml",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_sys_remove = runtime.caml_sys_remove,
    caml_sys_rename = runtime.caml_sys_rename,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$6,
    cst$3 = cst$6,
    cst$2 = cst$6,
    cst$1 = cst$6,
    cst$0 = cst$6,
    cst = "\n",
    cst_tmp = "tmp",
    gen_load_sexp_loc = "Sexplib.Sexp.gen_load_sexp",
    unit = [1, 0],
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Parsexp = global_data.Parsexp,
    Parsexp_Positions = global_data.Parsexp__Positions,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Parsexp_Old_parser_cont_state = global_data.Parsexp__Old_parser_cont_state,
    Parsexp_Parse_error = global_data.Parsexp__Parse_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib_Parser = global_data.Sexplib__Parser,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Sexplib_Lexer = global_data.Sexplib__Lexer,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    of_int_style = Sexplib0_Sexp[17],
    of_float_style = Sexplib0_Sexp[16],
    to_string = Sexplib0_Sexp[15],
    to_string_mach = Sexplib0_Sexp[14],
    to_string_hum = Sexplib0_Sexp[13],
    pp = Sexplib0_Sexp[12],
    pp_mach = Sexplib0_Sexp[11],
    pp_hum_indent = Sexplib0_Sexp[10],
    pp_hum = Sexplib0_Sexp[9],
    default_indent = Sexplib0_Sexp[8],
    message = Sexplib0_Sexp[7],
    Of_sexp_error = Sexplib0_Sexp[6],
    Not_found_s = Sexplib0_Sexp[5],
    compare = Sexplib0_Sexp[4],
    equal = Sexplib0_Sexp[3],
    include = Sexplib0_Sexp[18],
    size = include[1],
    buffer = include[2],
    to_buffer = include[3],
    to_buffer_hum = include[4],
    to_buffer_mach = include[5],
    to_buffer_gen = include[6],
    mach_maybe_esc_str = include[7],
    must_escape = include[8],
    esc_str = include[9],
    t_sexp_grammar = Sexplib0_Sexp_conv[61];
   function with_new_buffer(oc, f){
    var buf = caml_call1(buffer, 0);
    caml_call1(f, buf);
    return Stdlib_Buffer[10].call(null, oc, buf);
   }
   function output_hum(oc, sexp){
    var buf = caml_call1(buffer, 0);
    caml_call3(to_buffer_hum, buf, 0, sexp);
    return Stdlib_Buffer[10].call(null, oc, buf);
   }
   function output_hum_indent(indent, oc, sexp){
    var buf = caml_call1(buffer, 0);
    caml_call3(to_buffer_hum, buf, [0, indent], sexp);
    return Stdlib_Buffer[10].call(null, oc, buf);
   }
   function output_mach(oc, sexp){
    var buf = caml_call1(buffer, 0);
    caml_call2(to_buffer_mach, buf, sexp);
    return Stdlib_Buffer[10].call(null, oc, buf);
   }
   var
    prng = [0, 0],
    a = [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
    b = [0, 1, [0, 3, [0, 5, [0, 7, 0]]]];
   function temp_file_name(prefix, suffix){
    var match = prng[1];
    if(match)
     var v = match[1], rand_state = v;
    else{
     var ret = caml_call1(Stdlib_Random[19][2], 0);
     prng[1] = [0, ret];
     var rand_state = ret;
    }
    var rnd = caml_call1(Stdlib_Random[19][4], rand_state) & 16777215;
    return caml_call3(Stdlib_Printf[4].call(null, a), prefix, rnd, suffix);
   }
   function open_temp_file(opt, prefix, suffix){
    var perm = opt ? opt[1] : 438, counter = 0;
    for(;;){
     var name = temp_file_name(prefix, suffix);
     try{
      var oc = Stdlib[62].call(null, b, perm, name), a = [0, name, oc];
      return a;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0), tag = e[1];
      if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(1000 <= counter) throw caml_maybe_attach_backtrace(e, 0);
      var counter$0 = counter + 1 | 0;
      counter = counter$0;
     }
    }
   }
   var
    Tmp_file = [0, prng, temp_file_name, open_temp_file],
    c = [0, "containing_sexp"],
    d = [0, "invalid_sexp"],
    e = [0, [0, "Of_sexp_error"], 0];
   function save_of_output(perm, output_function, file, sexp){
    var
     match = open_temp_file(perm, file, cst_tmp),
     oc = match[2],
     tmp_name = match[1];
    try{caml_call2(output_function, oc, sexp); Stdlib[76].call(null, oc);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     Stdlib[77].call(null, oc);
     try{caml_sys_remove(tmp_name);}catch(exn){}
     throw caml_maybe_attach_backtrace(e, 0);
    }
    return caml_sys_rename(tmp_name, file);
   }
   function output_sexp_nl(do_output, oc, sexp){
    caml_call2(do_output, oc, sexp);
    return Stdlib[66].call(null, oc, cst);
   }
   function save_hum(perm, file, sexp){
    var
     match = open_temp_file(perm, file, cst_tmp),
     oc = match[2],
     tmp_name = match[1];
    try{output_sexp_nl(output_hum, oc, sexp); Stdlib[76].call(null, oc);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     Stdlib[77].call(null, oc);
     try{caml_sys_remove(tmp_name);}catch(exn){}
     throw caml_maybe_attach_backtrace(e, 0);
    }
    return caml_sys_rename(tmp_name, file);
   }
   function save_mach(perm, file, sexp){
    return save_of_output(perm, output_mach, file, sexp);
   }
   function output_sexps_nl(do_output, oc, sexps){
    return Stdlib_List[18].call
            (null,
             function(a){return output_sexp_nl(do_output, oc, a);},
             sexps);
   }
   function save_sexps_hum(perm, file, sexps){
    var
     match = open_temp_file(perm, file, cst_tmp),
     oc = match[2],
     tmp_name = match[1];
    try{output_sexps_nl(output_hum, oc, sexps); Stdlib[76].call(null, oc);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     Stdlib[77].call(null, oc);
     try{caml_sys_remove(tmp_name);}catch(exn){}
     throw caml_maybe_attach_backtrace(e, 0);
    }
    return caml_sys_rename(tmp_name, file);
   }
   function save_sexps_mach(perm, file, sexps){
    var
     match = open_temp_file(perm, file, cst_tmp),
     oc = match[2],
     tmp_name = match[1];
    try{output_sexps_nl(output_mach, oc, sexps); Stdlib[76].call(null, oc);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     Stdlib[77].call(null, oc);
     try{caml_sys_remove(tmp_name);}catch(exn){}
     throw caml_maybe_attach_backtrace(e, 0);
    }
    return caml_sys_rename(tmp_name, file);
   }
   function scan_sexp(buf, lexbuf){
    var a = caml_call1(Sexplib_Lexer[1], buf);
    return Sexplib_Parser[1].call(null, a, lexbuf);
   }
   function scan_sexp_opt(buf, lexbuf){
    var a = caml_call1(Sexplib_Lexer[1], buf);
    return Sexplib_Parser[2].call(null, a, lexbuf);
   }
   function scan_sexps(buf, lexbuf){
    var a = caml_call1(Sexplib_Lexer[1], buf);
    return Sexplib_Parser[3].call(null, a, lexbuf);
   }
   function scan_rev_sexps(buf, lexbuf){
    var a = caml_call1(Sexplib_Lexer[1], buf);
    return Sexplib_Parser[4].call(null, a, lexbuf);
   }
   function get_main_buf(buf){
    if(buf)
     var buf$0 = buf[1], buf$1 = buf$0;
    else
     var buf$1 = Stdlib_Buffer[1].call(null, 128);
    return caml_call1(Sexplib_Lexer[1], [0, buf$1]);
   }
   function scan_fold_sexps(buf, f, init, lexbuf){
    var main = get_main_buf(buf), acc = init;
    for(;;){
     var match = Sexplib_Parser[2].call(null, main, lexbuf);
     if(! match) return acc;
     var sexp = match[1], acc$0 = caml_call2(f, acc, sexp);
     acc = acc$0;
    }
   }
   function scan_iter_sexps(buf, f, lexbuf){
    var main = get_main_buf(buf), acc$0 = 0;
    for(;;){
     var match = Sexplib_Parser[2].call(null, main, lexbuf);
     if(! match) return acc$0;
     var sexp = match[1], acc = caml_call1(f, sexp);
     acc$0 = acc;
    }
   }
   function scan_sexps_conv(buf, f, lexbuf){
    var main = get_main_buf(buf), acc$0 = 0;
    for(;;){
     var match = Sexplib_Parser[2].call(null, main, lexbuf);
     if(! match) return Stdlib_List[10].call(null, acc$0);
     var sexp = match[1], acc = [0, caml_call1(f, sexp), acc$0];
     acc$0 = acc;
    }
   }
   function sexp_conversion_error_message
   (containing_sexp, location, invalid_sexp, param, exn){
    var h = 0;
    if(containing_sexp)
     var x = containing_sexp[1], a = [0, [1, [0, c, [0, x, 0]]], 0];
    else
     var a = 0;
    var i = [0, a, h];
    if(invalid_sexp)
     var x$0 = invalid_sexp[1], b = [0, [1, [0, d, [0, x$0, 0]]], 0];
    else
     var b = 0;
    var tag = exn[1], j = [0, b, i], k = 0;
    if(tag === Stdlib[7])
     var x$1 = exn[2], f = [0, x$1];
    else
     var f = Sexplib0_Sexp_conv[69].call(null, exn);
    var l = [0, [0, f, k], j];
    if(location) var x$2 = location[1], g = [0, [0, x$2], 0]; else var g = 0;
    return [1, Stdlib_List[14].call(null, [0, e, [0, g, l]])];
   }
   var
    Conv_exn = [248, "Sexplib__Pre_sexp.Annot.Conv_exn", caml_fresh_oo_id(0)],
    f = [0, cst_src_pre_sexp_ml, 198, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     [0, 0],
     Conv_exn,
     function(param){
      var tag = param[1];
      if(tag !== Conv_exn)
       throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
      var exn = param[3], location = param[2];
      return sexp_conversion_error_message(0, [0, location], 0, 0, exn);
     });
   var g = [0, "Result"], h = [0, "Error"];
   function get_sexp(param){
    var sexp = 0 === param[0] ? param[2] : param[3];
    return sexp;
   }
   function get_range(param){var range = param[1]; return range;}
   function sexp_of_conv(sexp_of_a, param){
    var variant = param[1];
    if(1025039613 <= variant){
     var a = param[2];
     return [1, [0, g, [0, caml_call1(sexp_of_a, a), 0]]];
    }
    var
     match = param[2],
     t = match[2],
     exn = match[1],
     b = [0, get_sexp(t), 0];
    return [1,
            [0,
             h,
             [0, [1, [0, Sexplib0_Sexp_conv[69].call(null, exn), b]], 0]]];
   }
   var
    Annot_sexp =
      [248, "Sexplib__Pre_sexp.Annot.Annot_sexp", caml_fresh_oo_id(0)];
   function find_sexp(annot_sexp, sexp){
    function loop(annot_sexp){
     var sub_sexp = 0 === annot_sexp[0] ? annot_sexp[2] : annot_sexp[3];
     if(sexp === sub_sexp)
      throw caml_maybe_attach_backtrace([0, Annot_sexp, annot_sexp], 1);
     if(0 === annot_sexp[0]) return 0;
     var annots = annot_sexp[2];
     return Stdlib_List[18].call(null, loop, annots);
    }
    try{loop(annot_sexp); var a = 0; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Annot_sexp) throw caml_maybe_attach_backtrace(exn, 0);
     var res = exn[2];
     return [0, res];
    }
   }
   var
    Annot =
      [0, Conv_exn, get_sexp, get_range, sexp_of_conv, Annot_sexp, find_sexp],
    i = [0, cst_src_pre_sexp_ml, 246, 6];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     [0, 0],
     Of_sexp_error,
     function(param){
      var tag = param[1];
      if(tag !== Of_sexp_error)
       throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
      var exn = param[2], tag$0 = exn[1];
      if(tag$0 === Conv_exn){
       var invalid_sexp = param[3], exn$0 = exn[3], location = exn[2];
       return sexp_conversion_error_message
               (0, [0, location], [0, invalid_sexp], 0, exn$0);
      }
      var invalid_sexp$0 = param[3];
      return sexp_conversion_error_message(0, 0, [0, invalid_sexp$0], 0, exn);
     });
   var
    cst_Sexplib_Sexp_Parse_pos_cre = "Sexplib.Sexp.Parse_pos.create: ",
    cst_buf_pos_0 = "buf_pos < 0",
    cst_global_offset_0 = "global_offset < 0",
    cst_text_char_0 = "text_char < 0",
    cst_text_line_1 = "text_line < 1";
   function create(c, b, a, opt, param){
    var
     text_line = c ? c[1] : 1,
     text_char = b ? b[1] : 0,
     buf_pos = a ? a[1] : 0,
     global_offset = opt ? opt[1] : 0;
    function fail(msg){
     var a = Stdlib[28].call(null, cst_Sexplib_Sexp_Parse_pos_cre, msg);
     return Stdlib[2].call(null, a);
    }
    return 1 <= text_line
            ? 0
              <= text_char
              ? 0
                <= global_offset
                ? 0
                  <= buf_pos
                  ? [0, text_line, text_char, global_offset, buf_pos]
                  : fail(cst_buf_pos_0)
                : fail(cst_global_offset_0)
              : fail(cst_text_char_0)
            : fail(cst_text_line_1);
   }
   function with_buf_pos(t, buf_pos){return [0, t[1], t[2], t[3], buf_pos];}
   var
    Parse_pos = [0, create, with_buf_pos],
    Parse_error = [248, "Sexplib__Pre_sexp.Parse_error", caml_fresh_oo_id(0)],
    j = [0, "buf_pos"],
    k = [0, "global_offset"],
    l = [0, "text_char"],
    m = [0, "text_line"],
    n = [0, "err_msg"],
    o = [0, "Sexplib.Sexp.Parse_error"],
    p = [0, cst_src_pre_sexp_ml, 307, 11];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     [0, 0],
     Parse_error,
     function(param){
      var tag = param[1];
      if(tag !== Parse_error)
       throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
      var
       pe = param[2],
       ppos = pe[2][2][1],
       a =
         [0,
          [1, [0, j, [0, Sexplib0_Sexp_conv[10].call(null, ppos[4]), 0]]],
          0],
       b =
         [0,
          [1, [0, k, [0, Sexplib0_Sexp_conv[10].call(null, ppos[3]), 0]]],
          a],
       c =
         [0,
          [1, [0, l, [0, Sexplib0_Sexp_conv[10].call(null, ppos[2]), 0]]],
          b],
       d =
         [0,
          [1, [0, m, [0, Sexplib0_Sexp_conv[10].call(null, ppos[1]), 0]]],
          c];
      return [1, [0, o, [0, [1, [0, [1, [0, n, [0, [0, pe[1]], 0]]], d]], 0]]];
     });
   function annotate_sexp(sexp, iter){
    if(0 === sexp[0]){
     var
      start_pos = Parsexp_Positions[17][3].call(null, iter, 0),
      end_pos = Parsexp_Positions[17][3].call(null, iter, 0);
     return [0, [0, start_pos, end_pos], sexp];
    }
    var
     l = sexp[1],
     start_pos$0 = Parsexp_Positions[17][3].call(null, iter, 0),
     annot = annotate_sexp_list(l, iter),
     end_pos$0 = Parsexp_Positions[17][3].call(null, iter, 0);
    return [1, [0, start_pos$0, end_pos$0], annot, sexp];
   }
   function annotate_sexp_list(sexps, iter){
    var
     a =
       Stdlib_List[22].call
        (null, function(sexp){return annotate_sexp(sexp, iter);}, sexps);
    return Stdlib_List[10].call(null, a);
   }
   var
    Found =
      [248,
       "Sexplib__Pre_sexp.Parser_output.Bare_sexp.Found",
       caml_fresh_oo_id(0)];
   function raise_found(state, sexp){throw [0, Found, sexp];}
   var
    Found$0 =
      [248,
       "Sexplib__Pre_sexp.Parser_output.Annotated_sexp.Found",
       caml_fresh_oo_id(0)];
   function raise_found$0(state, param){
    var
     positions = param[2],
     sexp = param[1],
     annot =
       annotate_sexp(sexp, Parsexp_Positions[17][1].call(null, positions));
    throw [0, Found$0, annot];
   }
   var
    include$0 = [0, Parsexp[8], Found$0, raise_found$0],
    include$1 = [0, Parsexp[5], Found, raise_found],
    Parser_output =
      [0, include$1, include$0, annotate_sexp, annotate_sexp_list],
    cst_parse_pos_0 = "parse: pos < 0",
    cst_parse_len_0 = "parse: len < 0",
    cst_parse_pos_len_str_len = "parse: pos + len > str_len",
    cst_Sexplib_Sexp_parser_contin =
      "Sexplib.Sexp: parser continuation called twice",
    q = [0, 0],
    r = [0, 1];
   function Make_parser(T){
    function parse_pos_of_state(state, buf_pos){
     var a = caml_call1(T[1][1][2], state), b = caml_call1(T[1][1][4], state);
     return [0, caml_call1(T[1][1][3], state), b, a, buf_pos];
    }
    function run_feed_loop(state, stack, pos, len, str){
     if(pos < 0) Stdlib[1].call(null, cst_parse_pos_0);
     if(len < 0) Stdlib[1].call(null, cst_parse_len_0);
     var str_len = caml_call1(T[4], str), pos_len = pos + len | 0;
     if(str_len < pos_len) Stdlib[1].call(null, cst_parse_pos_len_str_len);
     var
      max_pos = pos_len - 1 | 0,
      previous_offset = caml_call1(T[1][1][2], state);
     try{var stack$0 = caml_call5(T[5], state, stack, str, max_pos, pos);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag === T[2]){
       var
        result = exn[2],
        offset = caml_call1(T[1][1][2], state),
        next_pos = pos + (offset - previous_offset | 0) | 0;
       return [0, result, parse_pos_of_state(state, next_pos)];
      }
      var tag$0 = exn[1];
      if(tag$0 !== Parsexp_Parse_error[5])
       throw caml_maybe_attach_backtrace(exn, 0);
      var
       err = exn[2],
       pos$0 = pos + (caml_call1(T[1][1][2], state) - previous_offset | 0) | 0,
       msg = Parsexp_Parse_error[3].call(null, err);
      if(434889564 > Parsexp_Parse_error[6][1].call(null, err))
       return Stdlib[2].call(null, msg);
      var
       parse_state = [0, parse_pos_of_state(state, pos$0)],
       parse_error = [0, msg, [0, 925483562, parse_state]];
      throw caml_maybe_attach_backtrace([0, Parse_error, parse_error], 1);
     }
     var used_ref = [0, 0];
     function parse_fun(pos, len, str){
      return used_ref[1]
              ? Stdlib[2].call(null, cst_Sexplib_Sexp_parser_contin)
              : (used_ref
                 [1]
                = 1,
                run_feed_loop(state, stack$0, pos, len, str));
     }
     var cont_state = caml_call1(T[1][1][9], state);
     return [1, cont_state, parse_fun];
    }
    function parse(opt, len, str){
     var
      parse_pos = opt ? opt[1] : create(0, 0, 0, 0, 0),
      text_line = parse_pos[1],
      text_char = parse_pos[2],
      global_offset = parse_pos[3],
      buf_pos = parse_pos[4],
      pos = [0, text_line, text_char, global_offset],
      state = caml_call4(T[1][1][8], [0, pos], r, q, T[3]),
      stack = T[1][2][1];
     if(len)
      var x = len[1], len$0 = x;
     else
      var len$0 = caml_call1(T[4], str) - buf_pos | 0;
     return run_feed_loop(state, stack, buf_pos, len$0, str);
    }
    return [0, parse];
   }
   var
    Impl = include$1[1],
    Found$1 = include$1[2],
    raise_found$1 = include$1[3],
    length = caml_ml_string_length;
   function unsafe_feed_loop(state, stack$1, str, max_pos, pos$1){
    var stack = stack$1, pos = pos$1;
    for(;;){
     if(pos > max_pos) return stack;
     var
      stack$0 =
        caml_call3(Impl[3], state, caml_string_unsafe_get(str, pos), stack),
      pos$0 = pos + 1 | 0;
     stack = stack$0;
     pos = pos$0;
    }
   }
   var
    String_single_sexp =
      Make_parser([0, Impl, Found$1, raise_found$1, length, unsafe_feed_loop]),
    parse_str = String_single_sexp[1],
    parse = String_single_sexp[1],
    Impl$0 = include$0[1],
    Found$2 = include$0[2],
    raise_found$2 = include$0[3],
    length$0 = caml_ml_string_length;
   function unsafe_feed_loop$0(state, stack$1, str, max_pos, pos$1){
    var stack = stack$1, pos = pos$1;
    for(;;){
     if(pos > max_pos) return stack;
     var
      stack$0 =
        caml_call3(Impl$0[3], state, caml_string_unsafe_get(str, pos), stack),
      pos$0 = pos + 1 | 0;
     stack = stack$0;
     pos = pos$0;
    }
   }
   var
    String_single_annot =
      Make_parser
       ([0, Impl$0, Found$2, raise_found$2, length$0, unsafe_feed_loop$0]),
    parse_str_annot = String_single_annot[1],
    Impl$1 = include$1[1],
    Found$3 = include$1[2],
    raise_found$3 = include$1[3],
    length$1 = caml_ba_dim_1;
   function unsafe_feed_loop$1(state, stack$1, str, max_pos, pos$1){
    var stack = stack$1, pos = pos$1;
    for(;;){
     if(pos > max_pos) return stack;
     var
      a = caml_ba_get_1(str, pos),
      stack$0 = caml_call3(Impl$1[3], state, a, stack),
      pos$0 = pos + 1 | 0;
     stack = stack$0;
     pos = pos$0;
    }
   }
   var
    Bigstring_single_sexp =
      Make_parser
       ([0, Impl$1, Found$3, raise_found$3, length$1, unsafe_feed_loop$1]),
    parse_bigstring = Bigstring_single_sexp[1],
    Impl$2 = include$0[1],
    Found$4 = include$0[2],
    raise_found$4 = include$0[3],
    length$2 = caml_ba_dim_1;
   function unsafe_feed_loop$2(state, stack$1, str, max_pos, pos$1){
    var stack = stack$1, pos = pos$1;
    for(;;){
     if(pos > max_pos) return stack;
     var
      a = caml_ba_get_1(str, pos),
      stack$0 = caml_call3(Impl$2[3], state, a, stack),
      pos$0 = pos + 1 | 0;
     stack = stack$0;
     pos = pos$0;
    }
   }
   var
    Bigstring_single_annot =
      Make_parser
       ([0, Impl$2, Found$4, raise_found$4, length$2, unsafe_feed_loop$2]),
    parse_bigstring_annot = Bigstring_single_annot[1],
    cst_Sexplib_Sexp_input_rev_sex =
      "Sexplib.Sexp.input_rev_sexps: reached EOF while in state ",
    s =
      [0,
       [11, cst_Sexplib_Sexp, [2, 0, [11, cst_got_multiple_S_expressions, 0]]],
       cst_Sexplib_Sexp_s_got_multipl],
    t =
      [0,
       [11, cst_Sexplib_Sexp, [2, 0, [11, cst_got_multiple_S_expressions, 0]]],
       cst_Sexplib_Sexp_s_got_multipl],
    u =
      [0,
       [11,
        cst_Sexplib_Sexp,
        [2,
         0,
         [11,
          ": S-expression followed by data at position ",
          [4, 0, 0, 0, [11, "...", 0]]]]],
       "Sexplib.Sexp.%s: S-expression followed by data at position %d..."],
    v =
      [0,
       [11,
        cst_Sexplib_Sexp,
        [2,
         0,
         [11,
          ": incomplete S-expression while in state ",
          [2, 0, [11, cst$7, [2, 0, 0]]]]]],
       "Sexplib.Sexp.%s: incomplete S-expression while in state %s: %s"],
    cst_of_string = "of_string";
   function mk_this_parse(parse_pos, my_parse){
    return function(pos, len, str){
     if(parse_pos){
      var parse_pos$0 = parse_pos[1];
      parse_pos$0[4] = pos;
      var parse_pos$1 = parse_pos$0;
     }
     else
      var parse_pos$1 = create(0, 0, [0, pos], 0, 0);
     return caml_call3(my_parse, [0, parse_pos$1], [0, len], str);};
   }
   function feed_end_of_input(this_parse, ws_buf){
    var match = caml_call3(this_parse, 0, 1, ws_buf);
    if(0 === match[0]){var sexp = match[1]; return [0, sexp];}
    var cont_state = match[1];
    return [1, cont_state];
   }
   function gen_input_sexp(my_parse, parse_pos, ic){
    var
     buf = caml_create_bytes(1),
     this_parse$1 = mk_this_parse(parse_pos, my_parse),
     this_parse = this_parse$1;
    for(;;){
     try{var c = Stdlib[82].call(null, ic);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn, 0);
      var match = feed_end_of_input(this_parse, cst$0);
      if(0 !== match[0]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      var sexp = match[1];
      return sexp;
     }
     caml_bytes_set(buf, 0, c);
     var
      match$0 = caml_call3(this_parse, 0, 1, Stdlib_Bytes[44].call(null, buf));
     if(0 === match$0[0]){var sexp$0 = match$0[1]; return sexp$0;}
     var this_parse$0 = match$0[2];
     this_parse = this_parse$0;
    }
   }
   function input_sexp(parse_pos, ic){
    return gen_input_sexp(parse, parse_pos, ic);
   }
   function gen_input_rev_sexps(my_parse, ws_buf, parse_pos, opt, ic){
    var
     buf = opt ? opt[1] : caml_create_bytes(8192),
     rev_sexps_ref = [0, 0],
     buf_len = caml_ml_bytes_length(buf),
     len$2 = Stdlib[84].call(null, ic, buf, 0, buf_len),
     this_parse$2 = mk_this_parse(parse_pos, my_parse),
     this_parse = this_parse$2,
     pos = 0,
     len = len$2;
    for(;;){
     if(0 >= len){
      var match$0 = feed_end_of_input(this_parse, ws_buf);
      if(0 === match$0[0]){
       var sexp$0 = match$0[1];
       return [0, sexp$0, rev_sexps_ref[1]];
      }
      var cont_state = match$0[1];
      if(! cont_state) return rev_sexps_ref[1];
      var
       a = Parsexp_Old_parser_cont_state[2].call(null, cont_state),
       b = Stdlib[28].call(null, cst_Sexplib_Sexp_input_rev_sex, a);
      return Stdlib[2].call(null, b);
     }
     var
      match =
        caml_call3(this_parse, pos, len, Stdlib_Bytes[44].call(null, buf));
     if(0 === match[0]){
      var parse_pos$0 = match[2], sexp = match[1], buf_pos = parse_pos$0[4];
      rev_sexps_ref[1] = [0, sexp, rev_sexps_ref[1]];
      var
       n_parsed = buf_pos - pos | 0,
       this_parse$0 = mk_this_parse([0, parse_pos$0], my_parse);
      if(n_parsed === len){
       var new_len = Stdlib[84].call(null, ic, buf, 0, buf_len);
       this_parse = this_parse$0;
       pos = 0;
       len = new_len;
      }
      else{
       var len$0 = len - n_parsed | 0;
       this_parse = this_parse$0;
       pos = buf_pos;
       len = len$0;
      }
     }
     else{
      var
       this_parse$1 = match[2],
       len$1 = Stdlib[84].call(null, ic, buf, 0, buf_len);
      this_parse = this_parse$1;
      pos = 0;
      len = len$1;
     }
    }
   }
   function input_rev_sexps(parse_pos, buf, ic){
    return gen_input_rev_sexps(parse, cst$1, parse_pos, buf, ic);
   }
   function input_sexps(parse_pos, buf, ic){
    var a = gen_input_rev_sexps(parse, cst$1, parse_pos, buf, ic);
    return Stdlib_List[10].call(null, a);
   }
   function of_string_bigstring(loc, my_parse, ws_buf, get_len, get_sub, str){
    var match = caml_call3(my_parse, 0, 0, str);
    if(0 === match[0]){
     var
      parse_pos = match[2],
      sexp = match[1],
      match$0 = caml_call3(my_parse, [0, parse_pos], 0, str);
     if(0 === match$0[0]){
      var a = caml_call1(Stdlib_Format[142].call(null, s), loc);
      return Stdlib[2].call(null, a);
     }
     var
      this_parse = match$0[2],
      match$1 = feed_end_of_input(this_parse, ws_buf);
     if(0 === match$1[0]){
      var b = caml_call1(Stdlib_Format[142].call(null, t), loc);
      return Stdlib[2].call(null, b);
     }
     if(! match$1[1]) return sexp;
     var
      c = parse_pos[4],
      d = caml_call2(Stdlib_Format[142].call(null, u), loc, c);
     return Stdlib[2].call(null, d);
    }
    var
     this_parse$0 = match[2],
     match$2 = feed_end_of_input(this_parse$0, ws_buf);
    if(0 === match$2[0]){var sexp$0 = match$2[1]; return sexp$0;}
    var
     cont_state = match$2[1],
     cont_state_str = Parsexp_Old_parser_cont_state[2].call(null, cont_state),
     e = caml_call3(get_sub, str, 0, caml_call1(get_len, str)),
     f = caml_call3(Stdlib_Format[142].call(null, v), loc, cont_state_str, e);
    return Stdlib[2].call(null, f);
   }
   function of_string(str){
    return of_string_bigstring
            (cst_of_string,
             parse,
             cst$2,
             caml_ml_string_length,
             Stdlib_String[16],
             str);
   }
   function of_string_many(str){return caml_call1(Parsexp[4][10], str);}
   function get_bstr_sub_str(bstr, pos, len){
    var str = caml_create_bytes(len), a = len - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_set(str, i, caml_ba_get_1(bstr, pos + i | 0));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return Stdlib_Bytes[44].call(null, str);
   }
   var
    bstr_ws_buf =
      caml_call3
       (Stdlib_Bigarray[20][1], Stdlib_Bigarray[14], Stdlib_Bigarray[16], 1);
   runtime.caml_ba_set_1(bstr_ws_buf, 0, 32);
   var
    cst_of_bigstring = "of_bigstring",
    w =
      [0,
       [2, 0, [11, ": EOF in ", [2, 0, [11, " while in state ", [2, 0, 0]]]]],
       "%s: EOF in %s while in state %s"],
    x =
      [0,
       [2, 0, [11, ": more than one S-expression in file ", [2, 0, 0]]],
       "%s: more than one S-expression in file %s"],
    cst_additional_incomplete_data = "additional incomplete data",
    y =
      [0,
       [2,
        0,
        [11,
         cst$7,
         [2, 0, [11, " in state ", [2, 0, [11, " loading file ", [2, 0, 0]]]]]]],
       "%s: %s in state %s loading file %s"],
    cst_Annotated_of_string = "Annotated.of_string",
    cst_Annotated_of_bigstring = "Annotated.of_bigstring",
    z =
      [0,
       [2, 0, [12, 58, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]]]],
       "%s:%d:%d"];
   function of_bigstring(bstr){
    return of_string_bigstring
            (cst_of_bigstring,
             parse_bigstring,
             bstr_ws_buf,
             caml_ba_dim_1,
             get_bstr_sub_str,
             bstr);
   }
   function gen_load_rev_sexps(input_rev_sexps, buf, file){
    var ic = Stdlib[79].call(null, file);
    try{
     var sexps = caml_call3(input_rev_sexps, 0, buf, ic);
     Stdlib[93].call(null, ic);
     return sexps;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     Stdlib[94].call(null, ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_rev_sexps(buf, file){
    var ic = Stdlib[79].call(null, file);
    try{
     var sexps = gen_input_rev_sexps(parse, cst$1, 0, buf, ic);
     Stdlib[93].call(null, ic);
     return sexps;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     Stdlib[94].call(null, ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_sexps(buf, file){
    var a = load_rev_sexps(buf, file);
    return Stdlib_List[10].call(null, a);
   }
   function gen_load_sexp(my_parse, a, opt, file){
    var
     strict = a ? a[1] : 1,
     buf = opt ? opt[1] : caml_create_bytes(8192),
     buf_len = caml_ml_bytes_length(buf),
     ic = Stdlib[79].call(null, file);
    try{
     var this_parse$4 = mk_this_parse(0, my_parse);
     a:
     {
      var this_parse = this_parse$4;
      for(;;){
       var len = Stdlib[84].call(null, ic, buf, 0, buf_len);
       if(0 === len){
        var match = feed_end_of_input(this_parse, cst$3);
        if(0 === match[0]){var sexp = match[1], sexp$1 = sexp; break a;}
        var
         cont_state = match[1],
         b = Parsexp_Old_parser_cont_state[2].call(null, cont_state),
         c =
           caml_call3
            (Stdlib_Format[142].call(null, w), gen_load_sexp_loc, file, b),
         sexp$1 = Stdlib[2].call(null, c);
        break a;
       }
       var
        match$0 =
          caml_call3(this_parse, 0, len, Stdlib_Bytes[44].call(null, buf));
       if(0 === match$0[0]) break;
       var this_parse$3 = match$0[2];
       this_parse = this_parse$3;
      }
      var sexp$0 = match$0[1], parse_pos = match$0[2], buf_pos = parse_pos[4];
      if(strict){
       var
        this_parse$2 = mk_this_parse([0, parse_pos], my_parse),
        len$2 = len - buf_pos | 0,
        this_parse$0 = this_parse$2,
        pos = buf_pos,
        len$0 = len$2;
       for(;;){
        var
         match$1 =
           caml_call3
            (this_parse$0, pos, len$0, Stdlib_Bytes[44].call(null, buf));
        if(0 === match$1[0]){
         var
          d =
            caml_call2
             (Stdlib_Format[142].call(null, x), gen_load_sexp_loc, file),
          sexp$1 = Stdlib[2].call(null, d);
         break;
        }
        var
         this_parse$1 = match$1[2],
         cont_state$0 = match$1[1],
         len$1 = Stdlib[84].call(null, ic, buf, 0, buf_len);
        if(0 >= len$1){
         if(0 === cont_state$0){var sexp$1 = sexp$0; break;}
         var
          e = Parsexp_Old_parser_cont_state[2].call(null, cont_state$0),
          f =
            caml_call4
             (Stdlib_Format[142].call(null, y),
              gen_load_sexp_loc,
              cst_additional_incomplete_data,
              e,
              file),
          sexp$1 = Stdlib[2].call(null, f);
         break;
        }
        this_parse$0 = this_parse$1;
        pos = 0;
        len$0 = len$1;
       }
      }
      else
       var sexp$1 = sexp$0;
     }
     Stdlib[93].call(null, ic);
     return sexp$1;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     Stdlib[94].call(null, ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_sexp(strict, buf, file){
    return gen_load_sexp(parse, strict, buf, file);
   }
   function input_rev_sexps$0(parse_pos, buf, ic){
    return gen_input_rev_sexps(parse_str_annot, cst$4, parse_pos, buf, ic);
   }
   function input_sexp$0(parse_pos, ic){
    return gen_input_sexp(parse_str_annot, parse_pos, ic);
   }
   function input_sexps$0(parse_pos, buf, ic){
    var a = gen_input_rev_sexps(parse_str_annot, cst$4, parse_pos, buf, ic);
    return Stdlib_List[10].call(null, a);
   }
   function of_string$0(str){
    return of_string_bigstring
            (cst_Annotated_of_string,
             parse_str_annot,
             cst$5,
             caml_ml_string_length,
             Stdlib_String[16],
             str);
   }
   function of_string_many$0(str){
    var
     match = caml_call1(Parsexp[7][10], str),
     positions = match[2],
     sexps = match[1];
    return annotate_sexp_list
            (sexps, Parsexp_Positions[17][1].call(null, positions));
   }
   function of_bigstring$0(bstr){
    return of_string_bigstring
            (cst_Annotated_of_bigstring,
             parse_bigstring_annot,
             bstr_ws_buf,
             caml_ba_dim_1,
             get_bstr_sub_str,
             bstr);
   }
   function load_rev_sexps$0(buf, file){
    var ic = Stdlib[79].call(null, file);
    try{
     var sexps = gen_input_rev_sexps(parse_str_annot, cst$4, 0, buf, ic);
     Stdlib[93].call(null, ic);
     return sexps;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     Stdlib[94].call(null, ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_sexps$0(buf, file){
    var a = load_rev_sexps$0(buf, file);
    return Stdlib_List[10].call(null, a);
   }
   function load_sexp$0(strict, buf, file){
    return gen_load_sexp(parse_str_annot, strict, buf, file);
   }
   function conv(f, annot_sexp){
    var sexp = get_sexp(annot_sexp);
    try{var a = [0, 1025039613, caml_call1(f, sexp)]; return a;}
    catch(e$0){
     var e = caml_wrap_exception(e$0), tag = e[1];
     if(tag !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var bad_sexp = e[3], exc = e[2], match = find_sexp(annot_sexp, bad_sexp);
     if(! match) throw caml_maybe_attach_backtrace(e, 0);
     var bad_annot_sexp = match[1];
     return [0, 106380200, [0, exc, bad_annot_sexp]];
    }
   }
   function get_conv_exn(file, exc, annot_sexp){
    var
     range = annot_sexp[1],
     match = range[1],
     col = match[2],
     line = match[1],
     loc = caml_call3(Stdlib_Format[142].call(null, z), file, line, col);
    return [0, Of_sexp_error, [0, Conv_exn, loc, exc], get_sexp(annot_sexp)];
   }
   var
    Annotated =
      [0,
       Conv_exn,
       get_sexp,
       get_range,
       sexp_of_conv,
       Annot_sexp,
       find_sexp,
       parse_str_annot,
       parse_bigstring_annot,
       input_rev_sexps$0,
       input_sexp$0,
       input_sexps$0,
       of_string$0,
       of_string_many$0,
       of_bigstring$0,
       load_rev_sexps$0,
       load_sexps$0,
       load_sexp$0,
       conv,
       get_conv_exn];
   function load_sexp_conv(a, opt, file, f){
    var
     strict = a ? a[1] : 1,
     buf = opt ? opt[1] : caml_create_bytes(8192),
     buf$0 = [0, buf],
     strict$0 = [0, strict],
     sexp = gen_load_sexp(parse, strict$0, buf$0, file);
    try{var b = [0, 1025039613, caml_call1(f, sexp)]; return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Of_sexp_error) throw caml_maybe_attach_backtrace(exn, 0);
     var buf$1 = [0, buf], strict$1 = [0, strict];
     return conv(f, gen_load_sexp(parse_str_annot, strict$1, buf$1, file));
    }
   }
   function raise_conv_exn(file, param){
    var variant = param[1];
    if(1025039613 <= variant){var res = param[2]; return res;}
    var match = param[2], annot_sexp = match[2], exc = match[1];
    throw caml_maybe_attach_backtrace(get_conv_exn(file, exc, annot_sexp), 1);
   }
   function load_sexp_conv_exn(strict, buf, file, f){
    return raise_conv_exn(file, load_sexp_conv(strict, buf, file, f));
   }
   function load_sexps_conv(opt, file, f){
    var
     buf = opt ? opt[1] : caml_create_bytes(8192),
     rev_sexps = load_rev_sexps([0, buf], file);
    try{
     var
      a =
        Stdlib_List[22].call
         (null,
          function(sexp){return [0, 1025039613, caml_call1(f, sexp)];},
          rev_sexps);
     return a;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0), tag = e[1];
     if(tag !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var rev_annot_sexps = load_rev_sexps$0([0, buf], file);
     if(rev_annot_sexps)
      return Stdlib_List[22].call
              (null,
               function(annot_sexp){return conv(f, annot_sexp);},
               rev_annot_sexps);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function load_sexps_conv_exn(opt, file, f){
    var
     buf = opt ? opt[1] : caml_create_bytes(8192),
     rev_sexps = load_rev_sexps([0, buf], file);
    try{var a = Stdlib_List[22].call(null, f, rev_sexps); return a;}
    catch(e$0){
     var e = caml_wrap_exception(e$0), tag = e[1];
     if(tag !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var rev_annot_sexps = load_rev_sexps$0([0, buf], file);
     if(rev_annot_sexps)
      return Stdlib_List[22].call
              (null,
               function(annot_sexp){
                return raise_conv_exn(file, conv(f, annot_sexp));
               },
               rev_annot_sexps);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function gen_of_string_conv(of_string, annot_of_string, str, f){
    var sexp = caml_call1(of_string, str);
    try{var a = [0, 1025039613, caml_call1(f, sexp)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Of_sexp_error)
      return conv(f, caml_call1(annot_of_string, str));
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function of_string_conv(str, f){
    return gen_of_string_conv(of_string, of_string$0, str, f);
   }
   function of_bigstring_conv(bstr, f){
    return gen_of_string_conv(of_bigstring, of_bigstring$0, bstr, f);
   }
   var
    E = [248, "Sexplib__Pre_sexp.Of_string_conv_exn.E", caml_fresh_oo_id(0)],
    A = [0, cst_src_pre_sexp_ml, 889, 13];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     [0, 0],
     E,
     function(param){
      var tag = param[1];
      if(tag !== E)
       throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
      var osce = param[2];
      return sexp_conversion_error_message
              ([0, osce[2]], 0, [0, osce[3]], 0, osce[1]);
     });
   var
    Of_string_conv_exn = [0, E],
    cst_Sexplib_Sexp_subst_found_a =
      "Sexplib.Sexp.subst_found: atom when position requested",
    cst_Sexplib_Sexp_subst_found_s =
      "Sexplib.Sexp.subst_found: short list when position requested";
   function gen_of_string_conv_exn(of_string, str, f){
    var sexp = caml_call1(of_string, str);
    try{var a = caml_call1(f, sexp); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Of_sexp_error) throw caml_maybe_attach_backtrace(exn, 0);
     var sub_sexp = exn[3], exc = exn[2];
     throw caml_maybe_attach_backtrace([0, E, [0, exc, sexp, sub_sexp]], 1);
    }
   }
   function of_string_conv_exn(str, f){
    return gen_of_string_conv_exn(of_string, str, f);
   }
   function of_bigstring_conv_exn(bstr, f){
    return gen_of_string_conv_exn(of_bigstring, bstr, f);
   }
   function of_string_many_conv_exn(str, f){
    var sexps = of_string_many(str);
    return Stdlib_List[20].call
            (null,
             function(sexp){
              try{var a = caml_call1(f, sexp); return a;}
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0), tag = exn[1];
               if(tag !== Of_sexp_error)
                throw caml_maybe_attach_backtrace(exn, 0);
               var sub_sexp = exn[3], exc = exn[2];
               throw caml_maybe_attach_backtrace
                      ([0, E, [0, exc, sexp, sub_sexp]], 1);
              }
             },
             sexps);
   }
   function is_unit(param){
    if(0 !== param[0] && ! param[1]) return 1;
    return 0;
   }
   function search_physical(sexp, contained){
    if(sexp === contained) return 398750242;
    if(0 === sexp[0]) return -358247754;
    var lst = sexp[1], i = 0, param = lst;
    for(;;){
     if(! param) return -358247754;
     var t = param[2], h = param[1], res = search_physical(h, contained);
     if(typeof res === "number" && 398750242 > res){
      var i$0 = i + 1 | 0;
      i = i$0;
      param = t;
      continue;
     }
     return [0, 4003188, [0, i, res]];
    }
   }
   function subst_found(sexp, subst, param){
    if(typeof param === "number") return subst;
    var match = param[2], found = match[2], pos = match[1];
    if(0 === sexp[0])
     return Stdlib[2].call(null, cst_Sexplib_Sexp_subst_found_a);
    var lst = sexp[1], acc = 0, pos$0 = pos, param$0 = lst;
    for(;;){
     if(! param$0)
      return Stdlib[2].call(null, cst_Sexplib_Sexp_subst_found_s);
     var h = param$0[1], t = param$0[2];
     if(0 === pos$0){
      var t$0 = param$0[2], a = [0, subst_found(h, subst, found), t$0];
      return [1, Stdlib_List[13].call(null, acc, a)];
     }
     var pos$1 = pos$0 - 1 | 0, acc$0 = [0, h, acc];
     acc = acc$0;
     pos$0 = pos$1;
     param$0 = t;
    }
   }
   var
    Sexplib_Pre_sexp =
      [0,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       size,
       buffer,
       to_buffer,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer_gen,
       mach_maybe_esc_str,
       must_escape,
       esc_str,
       t_sexp_grammar,
       with_new_buffer,
       output_hum,
       output_hum_indent,
       output_mach,
       output_mach,
       Tmp_file,
       save_of_output,
       output_sexp_nl,
       save_hum,
       save_mach,
       save_mach,
       output_sexps_nl,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps_mach,
       scan_sexp,
       scan_sexp_opt,
       scan_sexps,
       scan_rev_sexps,
       get_main_buf,
       scan_fold_sexps,
       scan_iter_sexps,
       scan_sexps_conv,
       sexp_conversion_error_message,
       Annot,
       Parse_pos,
       Parse_error,
       Parser_output,
       Make_parser,
       String_single_sexp,
       parse_str,
       parse,
       String_single_annot,
       parse_str_annot,
       Bigstring_single_sexp,
       parse_bigstring,
       Bigstring_single_annot,
       parse_bigstring_annot,
       mk_this_parse,
       feed_end_of_input,
       gen_input_sexp,
       input_sexp,
       gen_input_rev_sexps,
       input_rev_sexps,
       input_sexps,
       of_string_bigstring,
       of_string,
       of_string_many,
       get_bstr_sub_str,
       bstr_ws_buf,
       of_bigstring,
       gen_load_rev_sexps,
       load_rev_sexps,
       load_sexps,
       gen_load_sexp_loc,
       gen_load_sexp,
       load_sexp,
       Annotated,
       load_sexp_conv,
       raise_conv_exn,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       gen_of_string_conv,
       of_string_conv,
       of_bigstring_conv,
       Of_string_conv_exn,
       gen_of_string_conv_exn,
       of_string_conv_exn,
       of_bigstring_conv_exn,
       of_string_many_conv_exn,
       unit,
       is_unit,
       search_physical,
       subst_found];
   runtime.caml_register_global(82, Sexplib_Pre_sexp, "Sexplib__Pre_sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_with_layout
//# unitInfo: Requires: Sexplib__Lexer, Sexplib__Pre_sexp, Sexplib__Src_pos, Sexplib__Type_with_layout, Stdlib__List, Stdlib__String
//# shape: Sexplib__Sexp_with_layout:[[F(2),F(2)],F(1)*,N,N,N,N,F(1),N,[N],[F(3)*,F(4),F(2),F(3),F(3),F(4),F(6),F(4),F(4),F(4),F(3),F(3)],[[F(2),F(2),F(2)],F(1),F(1),F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "#;",
    Sexplib_Pre_sexp = global_data.Sexplib__Pre_sexp,
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Sexplib_Type_with_layout = global_data.Sexplib__Type_with_layout,
    Sexplib_Lexer = global_data.Sexplib__Lexer;
   function iter(t, f){return Stdlib_List[18].call(null, f, t);}
   function map(t, f){
    var a = Stdlib_List[22].call(null, f, t);
    return Stdlib_List[10].call(null, a);
   }
   var
    List = [0, iter, map],
    Make = Sexplib_Type_with_layout[1],
    Parsed = Sexplib_Type_with_layout[2],
    sexp_of_t = Sexplib_Type_with_layout[3],
    sexp_of_comment = Sexplib_Type_with_layout[4],
    sexp_of_t_or_comment = Sexplib_Type_with_layout[5],
    relativize = Sexplib_Type_with_layout[6],
    sexp_of_pos = Sexplib_Src_pos[1][1],
    main = Sexplib_Lexer[2],
    Lexer = [0, main],
    a = [0, "src/sexp_with_layout.ml", 109, 4];
   function return$(a, putc, st){return a;}
   function bind(m, f, putc, st){
    return caml_call3(f, caml_call2(m, putc, st), putc, st);
   }
   function run(putc, m){
    return caml_call2
            (m, putc, [0, Sexplib_Src_pos[1][2], Sexplib_Src_pos[2][2], 0, 0]);
   }
   function emit_char(putc, st, c){
    var match = st[2], col = match[2], row = match[1];
    caml_call1(putc, c);
    return 10 === c
            ? (st[2] = [0, 1 + row | 0, 1], 0)
            : (st[2] = [0, row, 1 + col | 0], 0);
   }
   function emit_string(putc, st, str){
    var n = caml_ml_string_length(str), a = n - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      emit_char(putc, st, caml_string_get(str, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function emit_chars(putc, st, c, n){
    return emit_string(putc, st, Stdlib_String[1].call(null, n, c));
   }
   function advance(putc, anchor, st, delta, unescaped_atom, line_comment){
    var
     c = st[1],
     d = caml_call2(Sexplib_Src_pos[2][5], anchor, delta),
     new_pos = caml_call2(Sexplib_Src_pos[2][5], d, c);
    if(unescaped_atom){
     var match = st[3];
     if(match)
      var
       match$0 = match[1],
       prev_unescaped = match$0[2],
       immed_after = match$0[1],
       b = caml_equal(new_pos, immed_after),
       need_to_leave_room_between_two = b ? prev_unescaped : b;
     else
      var need_to_leave_room_between_two = 0;
    }
    else
     var need_to_leave_room_between_two = unescaped_atom;
    var
     need_to_clear_line_comment = new_pos[1] === st[4] ? 1 : 0,
     e = 1 - caml_call2(Sexplib_Src_pos[2][7], new_pos, st[2]),
     need_to_reposition =
       e || need_to_clear_line_comment || need_to_leave_room_between_two;
    if(need_to_reposition)
     var
      new_row = 1 + st[2][1] | 0,
      row_delta = new_row - new_pos[1] | 0,
      new_pos$0 = [0, new_row, new_pos[2]],
      row_delta$0 = row_delta;
    else
     var new_pos$0 = new_pos, row_delta$0 = 0;
    if(st[2][1] < new_pos$0[1]){
     var n = new_pos$0[1] - st[2][1] | 0;
     emit_chars(putc, st, 10, n);
    }
    if(st[2][2] < new_pos$0[2]){
     var n$0 = new_pos$0[2] - st[2][2] | 0;
     emit_chars(putc, st, 32, n$0);
    }
    if(! caml_equal(new_pos$0, st[2]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    if(line_comment) st[4] = st[2][1];
    st[1] = [0, st[1][1] + row_delta$0 | 0, st[1][2]];
    return 0;
   }
   function render_t(putc, anchor, st, t){
    if(0 !== t[0]){
     var end_delta = t[3], tocs = t[2], start_delta = t[1];
     advance(putc, anchor, st, start_delta, 0, 0);
     var child_anchor = caml_call2(Sexplib_Src_pos[2][6], st[2], st[1]);
     emit_char(putc, st, 40);
     iter
      (tocs, function(toc){return render_toc(putc, child_anchor, st, toc);});
     advance(putc, anchor, st, end_delta, 0, 0);
     emit_char(putc, st, 41);
     return 0;
    }
    var fmt_text = t[3], text = t[2], delta = t[1];
    a:
    {
     if(fmt_text){
      var text$0 = fmt_text[1];
      if(text$0 !== ""){var fmt_text$0 = text$0; break a;}
     }
     var fmt_text$0 = caml_call1(Sexplib_Pre_sexp[22], text);
    }
    var unescaped = 34 !== caml_string_get(fmt_text$0, 0) ? 1 : 0;
    advance(putc, anchor, st, delta, unescaped, 0);
    emit_string(putc, st, fmt_text$0);
    st[3] = [0, [0, st[2], unescaped]];
    return 0;
   }
   function render_toc(putc, anchor, st, param){
    if(0 === param[0]){
     var t = param[1];
     return render_t(putc, anchor, st, t);
    }
    var c = param[1];
    return render_c(putc, anchor, st, c);
   }
   function render_c(putc, anchor, st, param){
    if(0 === param[0]){
     var
      text = param[2],
      delta = param[1],
      a = 0 < caml_ml_string_length(text) ? 1 : 0,
      line_comment = a ? 59 === caml_string_get(text, 0) ? 1 : 0 : a;
     advance(putc, anchor, st, delta, 0, line_comment);
     return emit_string(putc, st, text);
    }
    var t = param[3], cs = param[2], delta$0 = param[1];
    advance(putc, anchor, st, delta$0, 0, 0);
    emit_string(putc, st, cst);
    iter(cs, function(a){return render_c(putc, anchor, st, a);});
    return render_t(putc, anchor, st, t);
   }
   function render(asexp, putc, st){
    return render_toc(putc, Sexplib_Src_pos[2][2], st, asexp);
   }
   var
    Render =
      [0,
       return$,
       bind,
       run,
       emit_char,
       emit_string,
       emit_chars,
       advance,
       render_t,
       render_toc,
       render_c,
       render,
       render];
   function forget_t$0(counter, t, k){
    if(0 === t[0]){var x = t[2]; return caml_call1(k, [0, x]);}
    var tocs = t[2];
    function a(xs){return caml_call1(k, [1, xs]);}
    if(counter >= 50)
     return caml_trampoline_return(forget_tocs$0, [0, tocs, a]);
    var counter$0 = counter + 1 | 0;
    return forget_tocs$0(counter$0, tocs, a);
   }
   function forget_t(t, k){return caml_trampoline(forget_t$0(0, t, k));}
   function forget_tocs$0(counter, tocs, k){
    if(! tocs) return caml_call1(k, 0);
    var tocs$0 = tocs[2], toc = tocs[1];
    function a(param){
     if(! param) return forget_tocs(tocs$0, k);
     var x = param[1];
     return forget_tocs
             (tocs$0, function(xs){return caml_call1(k, [0, x, xs]);});
    }
    if(counter >= 50)
     return caml_trampoline_return(forget_toc$0, [0, toc, a]);
    var counter$0 = counter + 1 | 0;
    return forget_toc$0(counter$0, toc, a);
   }
   function forget_tocs(tocs, k){
    return caml_trampoline(forget_tocs$0(0, tocs, k));
   }
   function forget_toc$0(counter, toc, k){
    if(0 !== toc[0]) return caml_call1(k, 0);
    var t = toc[1];
    function a(x){return caml_call1(k, [0, x]);}
    if(counter >= 50) return caml_trampoline_return(forget_t$0, [0, t, a]);
    var counter$0 = counter + 1 | 0;
    return forget_t$0(counter$0, t, a);
   }
   function forget_toc(toc, k){
    return caml_trampoline(forget_toc$0(0, toc, k));
   }
   var Cps = [0, forget_t, forget_toc, forget_tocs];
   function t(x){return forget_t(x, function(y){return y;});}
   function t_or_comment(x){return forget_toc(x, function(y){return y;});}
   function t_or_comments(x){return forget_tocs(x, function(y){return y;});}
   var
    Forget = [0, Cps, t, t_or_comment, t_or_comments],
    Sexplib_Sexp_with_layout =
      [0,
       List,
       Make,
       Parsed,
       sexp_of_t,
       sexp_of_comment,
       sexp_of_t_or_comment,
       relativize,
       sexp_of_pos,
       Lexer,
       Render,
       Forget];
   runtime.caml_register_global
    (10, Sexplib_Sexp_with_layout, "Sexplib__Sexp_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp
//# unitInfo: Requires: Parsexp__Old_parser_cont_state, Sexplib__Parser_with_layout, Sexplib__Pre_sexp, Sexplib__Sexp_with_layout
//# shape: Sexplib__Sexp:[F(2),F(2),N,N,F(2),F(2),F(2),F(2),F(3),F(4),F(3),[F(5),F(2)*],N,N,N,N,N,F(2),F(3),F(3),F(3),F(2),F(2),F(4),F(4),F(3),F(3),F(2),F(3),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(3),F(2),F(3),F(2),F(2),[N],F(1),F(1),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(1),F(1),N,N,N,N,N,F(1)*,F(1)*,F(1)*,N,F(2),F(3),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib_Pre_sexp = global_data.Sexplib__Pre_sexp,
    Sexplib_Sexp_with_layout = global_data.Sexplib__Sexp_with_layout,
    Sexplib_Parser_with_layout = global_data.Sexplib__Parser_with_layout,
    Parsexp_Old_parser_cont_state = global_data.Parsexp__Old_parser_cont_state,
    equal = Sexplib_Pre_sexp[1],
    compare = Sexplib_Pre_sexp[2],
    default_indent = Sexplib_Pre_sexp[6],
    pp_hum = Sexplib_Pre_sexp[7],
    pp_hum_indent = Sexplib_Pre_sexp[8],
    pp_mach = Sexplib_Pre_sexp[9],
    pp = Sexplib_Pre_sexp[10],
    to_string_hum = Sexplib_Pre_sexp[11],
    to_string_mach = Sexplib_Pre_sexp[12],
    to_string = Sexplib_Pre_sexp[13],
    size = Sexplib_Pre_sexp[16],
    to_buffer = Sexplib_Pre_sexp[18],
    to_buffer_hum = Sexplib_Pre_sexp[19],
    to_buffer_mach = Sexplib_Pre_sexp[20],
    to_buffer_gen = Sexplib_Pre_sexp[21],
    t_sexp_grammar = Sexplib_Pre_sexp[25],
    output_hum = Sexplib_Pre_sexp[27],
    output_hum_indent = Sexplib_Pre_sexp[28],
    output_mach = Sexplib_Pre_sexp[29],
    output = Sexplib_Pre_sexp[30],
    save_hum = Sexplib_Pre_sexp[34],
    save_mach = Sexplib_Pre_sexp[35],
    save = Sexplib_Pre_sexp[36],
    save_sexps_hum = Sexplib_Pre_sexp[38],
    save_sexps_mach = Sexplib_Pre_sexp[39],
    save_sexps = Sexplib_Pre_sexp[40],
    scan_sexp = Sexplib_Pre_sexp[41],
    scan_sexp_opt = Sexplib_Pre_sexp[42],
    scan_sexps = Sexplib_Pre_sexp[43],
    scan_rev_sexps = Sexplib_Pre_sexp[44],
    scan_fold_sexps = Sexplib_Pre_sexp[46],
    scan_iter_sexps = Sexplib_Pre_sexp[47],
    scan_sexps_conv = Sexplib_Pre_sexp[48],
    Parse_pos = Sexplib_Pre_sexp[51],
    Parse_error = Sexplib_Pre_sexp[52],
    parse = Sexplib_Pre_sexp[57],
    parse_bigstring = Sexplib_Pre_sexp[61],
    input_sexp = Sexplib_Pre_sexp[67],
    input_rev_sexps = Sexplib_Pre_sexp[69],
    input_sexps = Sexplib_Pre_sexp[70],
    of_string = Sexplib_Pre_sexp[72],
    of_string_many = Sexplib_Pre_sexp[73],
    of_bigstring = Sexplib_Pre_sexp[76],
    load_rev_sexps = Sexplib_Pre_sexp[78],
    load_sexps = Sexplib_Pre_sexp[79],
    load_sexp = Sexplib_Pre_sexp[82],
    Annotated = Sexplib_Pre_sexp[83],
    load_sexp_conv = Sexplib_Pre_sexp[84],
    load_sexp_conv_exn = Sexplib_Pre_sexp[86],
    load_sexps_conv = Sexplib_Pre_sexp[87],
    load_sexps_conv_exn = Sexplib_Pre_sexp[88],
    of_string_conv = Sexplib_Pre_sexp[90],
    of_bigstring_conv = Sexplib_Pre_sexp[91],
    Of_string_conv_exn = Sexplib_Pre_sexp[92],
    of_string_conv_exn = Sexplib_Pre_sexp[94],
    of_bigstring_conv_exn = Sexplib_Pre_sexp[95],
    of_string_many_conv_exn = Sexplib_Pre_sexp[96],
    unit = Sexplib_Pre_sexp[97],
    is_unit = Sexplib_Pre_sexp[98],
    search_physical = Sexplib_Pre_sexp[99],
    subst_found = Sexplib_Pre_sexp[100],
    a = Sexplib_Sexp_with_layout[10],
    b = Sexplib_Sexp_with_layout[11],
    Sexplib_Sexp =
      [0,
       compare,
       equal,
       default_indent,
       size,
       scan_sexp,
       scan_sexps,
       scan_rev_sexps,
       scan_sexp_opt,
       scan_iter_sexps,
       scan_fold_sexps,
       scan_sexps_conv,
       Parse_pos,
       [0, Parsexp_Old_parser_cont_state[2]],
       [0,
        Annotated[4],
        Annotated[1],
        Annotated[2],
        Annotated[3],
        Annotated[6],
        Annotated[7],
        Annotated[8],
        Annotated[10],
        Annotated[11],
        Annotated[9],
        Annotated[17],
        Annotated[16],
        Annotated[15],
        Annotated[12],
        Annotated[13],
        Annotated[14],
        Annotated[18],
        Annotated[19]],
       Parse_error,
       parse,
       parse_bigstring,
       input_sexp,
       input_sexps,
       input_rev_sexps,
       load_sexp,
       load_sexps,
       load_rev_sexps,
       load_sexp_conv,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       output_hum,
       output_hum_indent,
       output_mach,
       output,
       save_hum,
       save_mach,
       save,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       Of_string_conv_exn,
       of_string,
       of_string_many,
       of_string_conv,
       of_string_many_conv_exn,
       of_string_conv_exn,
       of_bigstring,
       of_bigstring_conv,
       of_bigstring_conv_exn,
       to_string_hum,
       to_string_mach,
       to_string,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer,
       to_buffer_gen,
       unit,
       is_unit,
       function(a){return a;},
       function(a){return a;},
       t_sexp_grammar,
       search_physical,
       subst_found,
       [0,
        Sexplib_Sexp_with_layout[8],
        Sexplib_Sexp_with_layout[4],
        Sexplib_Sexp_with_layout[5],
        Sexplib_Sexp_with_layout[6],
        [0, b[2], b[3], b[4]],
        [0, a[1], a[2], a[12], a[3]],
        [0,
         Sexplib_Parser_with_layout[1],
         Sexplib_Parser_with_layout[2],
         Sexplib_Parser_with_layout[3],
         Sexplib_Parser_with_layout[5],
         Sexplib_Parser_with_layout[4]],
        Sexplib_Sexp_with_layout[9]]];
   runtime.caml_register_global(4, Sexplib_Sexp, "Sexplib__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_intf
//# shape: Sexplib__Sexp_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Sexp_intf = [0];
   runtime.caml_register_global(0, Sexplib_Sexp_intf, "Sexplib__Sexp_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Conv
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib__Sexp, Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__List, Stdlib__Printf
//# shape: Sexplib__Conv:[N,N,N,F(2),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1)*,F(1)*,N,N,F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(4),F(2),F(2),F(3),F(1),F(1),F(2),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1),F(1),F(1),N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),N,F(1),N,F(1),N,F(1),N,F(1),N,F(1),N,F(1),N,F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    vec_sexp_grammar = [2, [1, 3]],
    mat_sexp_grammar = [2, [0, 2, [0, 2, [1, 3]]]],
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    default_string_of_float = Sexplib0_Sexp_conv[1],
    write_old_option_format = Sexplib0_Sexp_conv[2],
    read_old_option_format = Sexplib0_Sexp_conv[3],
    list_map = Sexplib0_Sexp_conv[4],
    sexp_of_unit = Sexplib0_Sexp_conv[5],
    sexp_of_bool = Sexplib0_Sexp_conv[6],
    sexp_of_string = Sexplib0_Sexp_conv[7],
    sexp_of_bytes = Sexplib0_Sexp_conv[8],
    sexp_of_char = Sexplib0_Sexp_conv[9],
    sexp_of_int = Sexplib0_Sexp_conv[10],
    sexp_of_float = Sexplib0_Sexp_conv[11],
    sexp_of_int32 = Sexplib0_Sexp_conv[12],
    sexp_of_int64 = Sexplib0_Sexp_conv[13],
    sexp_of_nativeint = Sexplib0_Sexp_conv[14],
    sexp_of_ref = Sexplib0_Sexp_conv[15],
    sexp_of_lazy_t = Sexplib0_Sexp_conv[16],
    sexp_of_option = Sexplib0_Sexp_conv[17],
    sexp_of_pair = Sexplib0_Sexp_conv[18],
    sexp_of_triple = Sexplib0_Sexp_conv[19],
    sexp_of_list = Sexplib0_Sexp_conv[20],
    sexp_of_array = Sexplib0_Sexp_conv[21],
    sexp_of_hashtbl = Sexplib0_Sexp_conv[22],
    sexp_of_opaque = Sexplib0_Sexp_conv[23],
    sexp_of_fun = Sexplib0_Sexp_conv[24],
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    record_check_extra_fields = Sexplib0_Sexp_conv[26],
    of_sexp_error = Sexplib0_Sexp_conv[27],
    of_sexp_error_exn = Sexplib0_Sexp_conv[28],
    unit_of_sexp = Sexplib0_Sexp_conv[29],
    bool_of_sexp = Sexplib0_Sexp_conv[30],
    string_of_sexp = Sexplib0_Sexp_conv[31],
    bytes_of_sexp = Sexplib0_Sexp_conv[32],
    char_of_sexp = Sexplib0_Sexp_conv[33],
    int_of_sexp = Sexplib0_Sexp_conv[34],
    float_of_sexp = Sexplib0_Sexp_conv[35],
    int32_of_sexp = Sexplib0_Sexp_conv[36],
    int64_of_sexp = Sexplib0_Sexp_conv[37],
    nativeint_of_sexp = Sexplib0_Sexp_conv[38],
    ref_of_sexp = Sexplib0_Sexp_conv[39],
    lazy_t_of_sexp = Sexplib0_Sexp_conv[40],
    option_of_sexp = Sexplib0_Sexp_conv[41],
    pair_of_sexp = Sexplib0_Sexp_conv[42],
    triple_of_sexp = Sexplib0_Sexp_conv[43],
    list_of_sexp = Sexplib0_Sexp_conv[44],
    array_of_sexp = Sexplib0_Sexp_conv[45],
    hashtbl_of_sexp = Sexplib0_Sexp_conv[46],
    opaque_of_sexp = Sexplib0_Sexp_conv[47],
    fun_of_sexp = Sexplib0_Sexp_conv[48],
    sexp_grammar_with_tags = Sexplib0_Sexp_conv[49],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv[50],
    unit_sexp_grammar = Sexplib0_Sexp_conv[51],
    bool_sexp_grammar = Sexplib0_Sexp_conv[52],
    string_sexp_grammar = Sexplib0_Sexp_conv[53],
    bytes_sexp_grammar = Sexplib0_Sexp_conv[54],
    char_sexp_grammar = Sexplib0_Sexp_conv[55],
    int_sexp_grammar = Sexplib0_Sexp_conv[56],
    float_sexp_grammar = Sexplib0_Sexp_conv[57],
    int32_sexp_grammar = Sexplib0_Sexp_conv[58],
    int64_sexp_grammar = Sexplib0_Sexp_conv[59],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv[60],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv[61],
    ref_sexp_grammar = Sexplib0_Sexp_conv[62],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv[63],
    option_sexp_grammar = Sexplib0_Sexp_conv[64],
    list_sexp_grammar = Sexplib0_Sexp_conv[65],
    array_sexp_grammar = Sexplib0_Sexp_conv[66],
    opaque_sexp_grammar = Sexplib0_Sexp_conv[67],
    fun_sexp_grammar = Sexplib0_Sexp_conv[68],
    sexp_of_exn = Sexplib0_Sexp_conv[69],
    printexc_prefer_sexp = Sexplib0_Sexp_conv[70],
    sexp_of_exn_opt = Sexplib0_Sexp_conv[71],
    Exn_converter = Sexplib0_Sexp_conv[72];
   function sexp_of_float_vec(vec){
    var lst_ref = [0, 0], a = caml_ba_dim_1(vec);
    if(a >= 1){
     var i = a;
     for(;;){
      var b = lst_ref[1];
      lst_ref[1] = [0, sexp_of_float(caml_ba_get_1(vec, i)), b];
      var c = i - 1 | 0;
      if(1 === i) break;
      i = c;
     }
    }
    return [1, lst_ref[1]];
   }
   function sexp_of_bigstring(bstr){
    var
     n = caml_ba_dim_1(bstr),
     str = runtime.caml_create_bytes(n),
     a = n - 1 | 0,
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      runtime.caml_bytes_set(str, i, caml_ba_get_1(bstr, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return [0, Stdlib_Bytes[44].call(null, str)];
   }
   function sexp_of_float32_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_float64_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_float_mat(mat){
    var
     m = caml_ba_dim_1(mat),
     n = runtime.caml_ba_dim_2(mat),
     lst_ref = [0, 0];
    if(n >= 1){
     var row = n;
     for(;;){
      if(m >= 1){
       var col = m;
       for(;;){
        var d = lst_ref[1];
        lst_ref[1] =
         [0, sexp_of_float(runtime.caml_ba_get_2(mat, col, row)), d];
        var e = col - 1 | 0;
        if(1 === col) break;
        col = e;
       }
      }
      var c = row - 1 | 0;
      if(1 === row) break;
      row = c;
     }
    }
    var a = lst_ref[1], b = [0, sexp_of_int(n), a];
    return [1, [0, sexp_of_int(m), b]];
   }
   function sexp_of_float32_mat(mat){return sexp_of_float_mat(mat);}
   function sexp_of_float64_mat(mat){return sexp_of_float_mat(mat);}
   function sexp_of_mat(mat){return sexp_of_float_mat(mat);}
   var
    cst_bigstring_of_sexp_atom_nee = "bigstring_of_sexp: atom needed",
    cst_float_vec_of_sexp_list_nee = "float_vec_of_sexp: list needed";
   function bigstring_of_sexp(sexp){
    if(0 !== sexp[0])
     return of_sexp_error(cst_bigstring_of_sexp_atom_nee, sexp);
    var
     str = sexp[1],
     len = runtime.caml_ml_string_length(str),
     bstr =
       caml_call3
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[14],
         Stdlib_Bigarray[16],
         len),
     a = len - 1 | 0,
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_ba_set_1(bstr, i, runtime.caml_string_get(str, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return bstr;
   }
   function float_vec_of_sexp(empty_float_vec, create_float_vec, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_float_vec_of_sexp_list_nee, sexp);
    var lst = sexp[1];
    if(! lst) return empty_float_vec;
    var
     len = Stdlib_List[1].call(null, lst),
     res = caml_call1(create_float_vec, len),
     i = 1,
     param = lst;
    for(;;){
     if(! param) return res;
     var t = param[2], h = param[1];
     caml_ba_set_1(res, i, float_of_sexp(h));
     var i$0 = i + 1 | 0;
     i = i$0;
     param = t;
    }
   }
   var
    create_float32_vec =
      caml_call2
       (Stdlib_Bigarray[20][1], Stdlib_Bigarray[2], Stdlib_Bigarray[17]),
    create_float64_vec =
      caml_call2
       (Stdlib_Bigarray[20][1], Stdlib_Bigarray[3], Stdlib_Bigarray[17]),
    empty_float32_vec = caml_call1(create_float32_vec, 0),
    empty_float64_vec = caml_call1(create_float64_vec, 0),
    cst_float_mat_of_sexp_too_much = "float_mat_of_sexp: too much data",
    cst_float_mat_of_sexp_list_nee = "float_mat_of_sexp: list needed",
    cst_float_mat_of_sexp_not_enou = "float_mat_of_sexp: not enough data",
    cst_float_mat_of_sexp_list_too = "float_mat_of_sexp: list too short";
   function float32_vec_of_sexp(a){
    return float_vec_of_sexp(empty_float32_vec, create_float32_vec, a);
   }
   function float64_vec_of_sexp(a){
    return float_vec_of_sexp(empty_float64_vec, create_float64_vec, a);
   }
   function vec_of_sexp(a){
    return float_vec_of_sexp(empty_float64_vec, create_float64_vec, a);
   }
   function check_too_much_data(sexp, data, res){
    return 0 === data
            ? res
            : of_sexp_error(cst_float_mat_of_sexp_too_much, sexp);
   }
   function float_mat_of_sexp(create_float_mat, sexp){
    if(0 === sexp[0])
     return of_sexp_error(cst_float_mat_of_sexp_list_nee, sexp);
    var match = sexp[1];
    if(match){
     var match$0 = match[2];
     if(match$0){
      var
       data = match$0[2],
       sn = match$0[1],
       sm = match[1],
       m = int_of_sexp(sm),
       n = int_of_sexp(sn),
       res = caml_call2(create_float_mat, m, n);
      if(0 !== m && 0 !== n){
       var col = 1, data$0 = data;
       for(;;){
        var
         vec = caml_call2(Stdlib_Bigarray[21][6], res, col),
         row = 1,
         param = data$0;
        for(;;){
         if(! param)
          return of_sexp_error(cst_float_mat_of_sexp_not_enou, sexp);
         var data$1 = param[2], h = param[1];
         caml_ba_set_1(vec, row, float_of_sexp(h));
         if(row === m){
          if(col === n) return check_too_much_data(sexp, data$1, res);
          var col$0 = col + 1 | 0;
          col = col$0;
          data$0 = data$1;
          break;
         }
         var row$0 = row + 1 | 0;
         row = row$0;
         param = data$1;
        }
       }
      }
      return check_too_much_data(sexp, data, res);
     }
    }
    return of_sexp_error(cst_float_mat_of_sexp_list_too, sexp);
   }
   var
    create_float32_mat =
      caml_call2
       (Stdlib_Bigarray[21][1], Stdlib_Bigarray[2], Stdlib_Bigarray[17]),
    create_float64_mat =
      caml_call2
       (Stdlib_Bigarray[21][1], Stdlib_Bigarray[3], Stdlib_Bigarray[17]),
    a =
      [0,
       [11, "of_string failed on ", [2, 0, [11, " with ", [2, 0, 0]]]],
       "of_string failed on %s with %s"];
   function float32_mat_of_sexp(a){
    return float_mat_of_sexp(create_float32_mat, a);
   }
   function float64_mat_of_sexp(a){
    return float_mat_of_sexp(create_float64_mat, a);
   }
   function mat_of_sexp(a){return float_mat_of_sexp(create_float64_mat, a);}
   function string_of_of_sexp_of(to_sexp, x){
    var a = caml_call1(to_sexp, x);
    return Sexplib_Sexp[53].call(null, a);
   }
   function of_string_of_of_sexp(of_sexp, s){
    try{
     var sexp = Sexplib_Sexp[43].call(null, s), f = caml_call1(of_sexp, sexp);
     return f;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      b = sexp_of_exn(e),
      c = Sexplib_Sexp[51].call(null, 0, b),
      d = caml_call2(Stdlib_Printf[4].call(null, a), s, c);
     return Stdlib[2].call(null, d);
    }
   }
   var
    Sexplib_Conv =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       sexp_of_bigstring,
       sexp_of_float32_vec,
       sexp_of_float64_vec,
       sexp_of_vec,
       sexp_of_float32_mat,
       sexp_of_float64_mat,
       sexp_of_mat,
       string_of_of_sexp_of,
       4,
       bigstring_of_sexp,
       vec_sexp_grammar,
       float32_vec_of_sexp,
       vec_sexp_grammar,
       float64_vec_of_sexp,
       vec_sexp_grammar,
       vec_of_sexp,
       mat_sexp_grammar,
       float32_mat_of_sexp,
       mat_sexp_grammar,
       float64_mat_of_sexp,
       mat_sexp_grammar,
       mat_of_sexp,
       of_string_of_of_sexp];
   runtime.caml_register_global(16, Sexplib_Conv, "Sexplib__Conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Std
//# unitInfo: Requires: Sexplib__Conv, Stdlib__Hashtbl, Stdlib__Lazy
//# shape: Sexplib__Std:[[F(2),F(1),F(1),F(1),F(3),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(3),F(1)*,F(1),F(1),F(2),F(1),F(1)*->F(1),F(1)*->F(1),F(1)*->F(1),F(2),F(2),F(1),F(1)*,F(1)*,F(1)*,F(2)*,F(3)*,F(4)*,F(3),F(3)],[N,F(2)*,F(1),F(1),F(2),F(1),F(1),F(2),F(2),F(1)*],F(1)*,F(1),N,F(1)*,F(1),N,F(1)*,F(1),N,F(1),F(1),N,F(1)*,F(1),N,F(1),F(1),N,F(1)*,F(1),N,F(1)*,F(1),N,F(1)*,F(1),N,F(2),F(2),F(1)*,F(2),F(2),F(1)*,F(2),F(2),F(1)*,F(2),F(2),F(1)*,F(2),F(2),F(1)*,F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    create = Stdlib_Hashtbl[1],
    clear = Stdlib_Hashtbl[2],
    reset = Stdlib_Hashtbl[3],
    copy = Stdlib_Hashtbl[4],
    add = Stdlib_Hashtbl[5],
    find = Stdlib_Hashtbl[6],
    find_opt = Stdlib_Hashtbl[7],
    find_all = Stdlib_Hashtbl[8],
    mem = Stdlib_Hashtbl[9],
    remove = Stdlib_Hashtbl[10],
    replace = Stdlib_Hashtbl[11],
    iter = Stdlib_Hashtbl[12],
    filter_map_inplace = Stdlib_Hashtbl[13],
    fold = Stdlib_Hashtbl[14],
    length = Stdlib_Hashtbl[15],
    randomize = Stdlib_Hashtbl[16],
    is_randomized = Stdlib_Hashtbl[17],
    rebuild = Stdlib_Hashtbl[18],
    stats = Stdlib_Hashtbl[19],
    to_seq = Stdlib_Hashtbl[20],
    to_seq_keys = Stdlib_Hashtbl[21],
    to_seq_values = Stdlib_Hashtbl[22],
    add_seq = Stdlib_Hashtbl[23],
    replace_seq = Stdlib_Hashtbl[24],
    of_seq = Stdlib_Hashtbl[25],
    Make = Stdlib_Hashtbl[26],
    MakeSeeded = Stdlib_Hashtbl[27],
    hash = Stdlib_Hashtbl[28],
    seeded_hash = Stdlib_Hashtbl[29],
    hash_param = Stdlib_Hashtbl[30],
    seeded_hash_param = Stdlib_Hashtbl[31],
    sexp_of_t = Sexplib_Conv[22],
    t_of_sexp = Sexplib_Conv[46],
    Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       seeded_hash_param,
       sexp_of_t,
       t_of_sexp],
    Undefined = Stdlib_Lazy[1],
    map = Stdlib_Lazy[2],
    is_val = Stdlib_Lazy[3],
    from_val = Stdlib_Lazy[4],
    map_val = Stdlib_Lazy[5],
    from_fun = Stdlib_Lazy[6],
    force_val = Stdlib_Lazy[7],
    t_of_sexp$0 = Sexplib_Conv[40],
    sexp_of_t$0 = Sexplib_Conv[16],
    t_sexp_grammar = Sexplib_Conv[63],
    Lazy =
      [0,
       Undefined,
       map,
       is_val,
       from_val,
       map_val,
       from_fun,
       force_val,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar],
    sexp_of_unit = Sexplib_Conv[5],
    unit_of_sexp = Sexplib_Conv[29],
    unit_sexp_grammar = Sexplib_Conv[51],
    sexp_of_bool = Sexplib_Conv[6],
    bool_of_sexp = Sexplib_Conv[30],
    bool_sexp_grammar = Sexplib_Conv[52],
    sexp_of_string = Sexplib_Conv[7],
    string_of_sexp = Sexplib_Conv[31],
    string_sexp_grammar = Sexplib_Conv[53],
    sexp_of_char = Sexplib_Conv[9],
    char_of_sexp = Sexplib_Conv[33],
    char_sexp_grammar = Sexplib_Conv[55],
    sexp_of_int = Sexplib_Conv[10],
    int_of_sexp = Sexplib_Conv[34],
    int_sexp_grammar = Sexplib_Conv[56],
    sexp_of_float = Sexplib_Conv[11],
    float_of_sexp = Sexplib_Conv[35],
    float_sexp_grammar = Sexplib_Conv[57],
    sexp_of_int32 = Sexplib_Conv[12],
    int32_of_sexp = Sexplib_Conv[36],
    int32_sexp_grammar = Sexplib_Conv[58],
    sexp_of_int64 = Sexplib_Conv[13],
    int64_of_sexp = Sexplib_Conv[37],
    int64_sexp_grammar = Sexplib_Conv[59],
    sexp_of_nativeint = Sexplib_Conv[14],
    nativeint_of_sexp = Sexplib_Conv[38],
    nativeint_sexp_grammar = Sexplib_Conv[60],
    sexp_of_ref = Sexplib_Conv[15],
    ref_of_sexp = Sexplib_Conv[39],
    ref_sexp_grammar = Sexplib_Conv[62],
    sexp_of_lazy_t = Sexplib_Conv[16],
    lazy_t_of_sexp = Sexplib_Conv[40],
    lazy_t_sexp_grammar = Sexplib_Conv[63],
    sexp_of_option = Sexplib_Conv[17],
    option_of_sexp = Sexplib_Conv[41],
    option_sexp_grammar = Sexplib_Conv[64],
    sexp_of_list = Sexplib_Conv[20],
    list_of_sexp = Sexplib_Conv[44],
    list_sexp_grammar = Sexplib_Conv[65],
    sexp_of_array = Sexplib_Conv[21],
    array_of_sexp = Sexplib_Conv[45],
    array_sexp_grammar = Sexplib_Conv[66],
    sexp_of_exn = Sexplib_Conv[69],
    exn_sexp_grammar = Sexplib_Conv[61],
    Sexplib_Std =
      [0,
       Hashtbl,
       Lazy,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       sexp_of_string,
       string_of_sexp,
       string_sexp_grammar,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       sexp_of_float,
       float_of_sexp,
       float_sexp_grammar,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       sexp_of_exn,
       exn_sexp_grammar];
   runtime.caml_register_global(3, Sexplib_Std, "Sexplib__Std");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_grammar_intf
//# shape: Sexplib__Sexp_grammar_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Sexp_grammar_intf = [0];
   runtime.caml_register_global
    (0, Sexplib_Sexp_grammar_intf, "Sexplib__Sexp_grammar_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_grammar
//# unitInfo: Requires: Sexplib0__Sexp_grammar, Sexplib__Sexp_grammar_intf
//# shape: Sexplib__Sexp_grammar:[F(1)*,F(3)*,N,N,N,N,N,N,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    coerce = Sexplib0_Sexp_grammar[1],
    tag = Sexplib0_Sexp_grammar[2],
    doc_comment_tag = Sexplib0_Sexp_grammar[3],
    type_name_tag = Sexplib0_Sexp_grammar[4],
    assoc_tag = Sexplib0_Sexp_grammar[5],
    assoc_key_tag = Sexplib0_Sexp_grammar[6],
    assoc_value_tag = Sexplib0_Sexp_grammar[7],
    completion_suggested = Sexplib0_Sexp_grammar[8];
   function remember_to_update_these_toget(t_of_sexp, t_sexp_grammar){return [0, t_of_sexp, t_sexp_grammar];
   }
   var
    Sexplib_Sexp_grammar =
      [0,
       coerce,
       tag,
       doc_comment_tag,
       type_name_tag,
       assoc_tag,
       assoc_key_tag,
       assoc_value_tag,
       completion_suggested,
       remember_to_update_these_toget];
   runtime.caml_register_global
    (1, Sexplib_Sexp_grammar, "Sexplib__Sexp_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Path
//# unitInfo: Requires: Sexplib__Sexp, Stdlib, Stdlib__Bytes, Stdlib__Format, Stdlib__List
//# shape: Sexplib__Path:[F(1),F(3),F(4),F(3),F(2),F(2),F(3),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Path = "Path.",
    cst_extract_match$1 = "extract_match",
    cst_extract_pos$1 = "extract_pos",
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    a =
      [0,
       [11, cst_Path, [2, 0, [11, ": illegal atom: ", [2, 0, 0]]]],
       "Path.%s: illegal atom: %s"],
    b =
      [0,
       [11,
        cst_Path,
        [2,
         0,
         [11, ": illegal index ", [4, 0, 0, 0, [11, " in: ", [2, 0, 0]]]]]],
       "Path.%s: illegal index %d in: %s"],
    cst_extract_pos = cst_extract_pos$1,
    cst_extract_pos$0 = cst_extract_pos$1,
    cst_extract_match = cst_extract_match$1,
    cst_extract_match$0 = cst_extract_match$1,
    cst_Path_extract_match_unexpec =
      "Path.extract_match: unexpected nested list in: ",
    cst_extract_rec = "extract_rec",
    c =
      [0,
       [11,
        'Path.extract_rec: key "',
        [2, 0, [11, '" not found in: ', [2, 0, 0]]]],
       'Path.extract_rec: key "%s" not found in: %s'],
    cst_Path_parse = "Path.parse: ",
    cst_path_empty = "path empty",
    cst_double = "double '.'",
    cst_EOF_after_escape = "EOF after escape",
    cst_EOF_reading_index = "EOF reading index",
    cst_empty_index = "empty index",
    d =
      [0,
       [11, "illegal character in index: ", [0, 0]],
       "illegal character in index: %c"],
    e =
      [0,
       [11, "'.' expected; got '", [0, [12, 39, 0]]],
       "'.' expected; got '%c'"];
   function illegal_atom(loc, sexp){
    var
     b = Sexplib_Sexp[53].call(null, sexp),
     c = caml_call2(Stdlib_Format[142].call(null, a), loc, b);
    return Stdlib[2].call(null, c);
   }
   function extract_pos_lst(loc, sexp, ix, lst){
    var acc = 0, n = ix, param = lst;
    for(;;){
     if(! param){
      var
       sexp_str = Sexplib_Sexp[53].call(null, sexp),
       a = caml_call3(Stdlib_Format[142].call(null, b), loc, ix, sexp_str);
      return Stdlib[2].call(null, a);
     }
     var t = param[2], h = param[1];
     if(0 === n) break;
     var n$0 = n - 1 | 0, acc$0 = [0, h, acc];
     acc = acc$0;
     n = n$0;
     param = t;
    }
    function subst(param){
     if(! param) return Stdlib_List[13].call(null, acc, t);
     var x = param[1];
     return Stdlib_List[13].call(null, acc, [0, x, t]);
    }
    return [0, subst, h];
   }
   function extract_pos(n, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_pos, sexp);
    var
     lst = sexp[1],
     match = extract_pos_lst(cst_extract_pos$0, sexp, n, lst),
     el = match[2],
     subst = match[1];
    return [0, function(x){return [1, caml_call1(subst, x)];}, el];
   }
   function extract_match(tag, arg_ix, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_match, sexp);
    var match = sexp[1];
    if(match){
     var sexp$0 = match[1];
     if(0 === sexp$0[0]){
      var args = match[2], str = sexp$0[1];
      if(str === tag){
       var
        match$0 =
          extract_pos_lst(cst_extract_match$0, [1, args], arg_ix, args),
        el = match$0[2],
        subst = match$0[1];
       return [0,
               function(maybe_x){
                return [1, [0, sexp$0, caml_call1(subst, maybe_x)]];
               },
               el];
      }
     }
    }
    var
     sexp_str = Sexplib_Sexp[53].call(null, sexp),
     a = Stdlib[28].call(null, cst_Path_extract_match_unexpec, sexp_str);
    return Stdlib[2].call(null, a);
   }
   function extract_rec(key, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_rec, sexp);
    var lst = sexp[1], acc = 0, param = lst;
    for(;;){
     if(! param){
      var
       sexp_str = Sexplib_Sexp[53].call(null, sexp),
       d = caml_call2(Stdlib_Format[142].call(null, c), key, sexp_str);
      return Stdlib[2].call(null, d);
     }
     var h = param[1];
     if(0 !== h[0]){
      var a = h[1];
      if(a){
       var sexp$0 = a[1];
       if(0 === sexp$0[0]){
        var b = a[2];
        if(b && ! b[2]){
         var rest = param[2], v = b[1], str = sexp$0[1];
         if(str === key) break;
        }
       }
      }
     }
     var t = param[2], acc$0 = [0, h, acc];
     acc = acc$0;
     param = t;
    }
    function subst(x){
     return [1,
             Stdlib_List[13].call
              (null, acc, [0, [1, [0, sexp$0, [0, x, 0]]], rest])];
    }
    return [0, subst, v];
   }
   function id(x){return x;}
   function subst_option(param, rest){
    var
     el = param[2],
     sup_subst = param[1],
     match = subst_path(el, rest),
     sub_el = match[2],
     sub_subst = match[1];
    function subst(x){
     return caml_call1(sup_subst, [0, caml_call1(sub_subst, x)]);
    }
    return [0, subst, sub_el];
   }
   function subst_path(sexp, param){
    if(! param) return [0, id, sexp];
    var match = param[1];
    switch(match[0]){
      case 0:
       var t = param[2], n = match[1];
       return subst_option(extract_pos(n, sexp), t);
      case 1:
       var t$0 = param[2], arg_ix = match[2], tag = match[1];
       return subst_option(extract_match(tag, arg_ix, sexp), t$0);
      default:
       var
        rest = param[2],
        key = match[1],
        match$0 = extract_rec(key, sexp),
        el = match$0[2],
        rec_subst = match$0[1],
        match$1 = subst_path(el, rest),
        sub_el = match$1[2],
        sub_subst = match$1[1],
        subst =
          function(x){return caml_call1(rec_subst, caml_call1(sub_subst, x));};
       return [0, subst, sub_el];
    }
   }
   function implode(lst){
    var
     len = Stdlib_List[1].call(null, lst),
     str = runtime.caml_create_bytes(len),
     ix = 0,
     param = lst;
    for(;;){
     if(! param) return Stdlib_Bytes[44].call(null, str);
     var t = param[2], h = param[1];
     runtime.caml_bytes_set(str, ix, h);
     var ix$0 = ix + 1 | 0;
     ix = ix$0;
     param = t;
    }
   }
   function fail_parse(msg){
    var a = Stdlib[28].call(null, cst_Path_parse, msg);
    return Stdlib[2].call(null, a);
   }
   function parse(str){
    var len = runtime.caml_ml_string_length(str);
    if(0 === len) return fail_parse(cst_path_empty);
    var acc = 0, dot_ix = 0;
    for(;;){
     var c = caml_string_get(str, dot_ix);
     if(46 !== c)
      return fail_parse(caml_call1(Stdlib_Format[142].call(null, e), c));
     var dot_ix1 = dot_ix + 1 | 0;
     if(dot_ix1 === len) return Stdlib_List[10].call(null, acc);
     var acc$0 = acc, str_acc = 0, ix = dot_ix1;
     for(;;){
      if(ix === len){
       var a = [0, [2, implode(Stdlib_List[10].call(null, str_acc))], 0];
       return Stdlib_List[13].call(null, acc$0, a);
      }
      var c$0 = caml_string_get(str, ix), switcher = c$0 - 91 | 0;
      if(1 < switcher >>> 0)
       if(-45 === switcher){
        if(0 === str_acc) fail_parse(cst_double);
        var
         path_el = [2, implode(Stdlib_List[10].call(null, str_acc))],
         ix$0 = ix + 1 | 0,
         acc$1 = [0, path_el, acc$0];
        acc$0 = acc$1;
        str_acc = 0;
        ix = ix$0;
       }
       else{
        var ix$1 = ix + 1 | 0, str_acc$0 = [0, c$0, str_acc];
        str_acc = str_acc$0;
        ix = ix$1;
       }
      else{
       if(! switcher) break;
       var ix1 = ix + 1 | 0;
       if(ix1 === len) return fail_parse(cst_EOF_after_escape);
       var
        ix$2 = ix + 1 | 0,
        str_acc$1 = [0, caml_string_get(str, ix1), str_acc];
       str_acc = str_acc$1;
       ix = ix$2;
      }
     }
     var ix$6 = ix + 1 | 0;
     a:
     {
      var index_acc = 0, ix$3 = ix$6;
      for(;;){
       if(ix$3 === len) return fail_parse(cst_EOF_reading_index);
       var match = caml_string_get(str, ix$3);
       if(58 <= match) break;
       if(48 > match) break a;
       if(index_acc){
        var
         index_acc$1 = index_acc[1],
         new_index_acc = [0, ((10 * index_acc$1 | 0) + match | 0) - 48 | 0],
         ix$4 = ix$3 + 1 | 0;
        index_acc = new_index_acc;
        ix$3 = ix$4;
       }
       else{
        var ix$5 = ix$3 + 1 | 0, index_acc$2 = [0, match - 48 | 0];
        index_acc = index_acc$2;
        ix$3 = ix$5;
       }
      }
      if(93 === match){
       if(! index_acc) return fail_parse(cst_empty_index);
       var
        index_acc$0 = index_acc[1],
        path_el$0 =
          0 === str_acc
           ? [0, index_acc$0]
           : [1, implode(Stdlib_List[10].call(null, str_acc)), index_acc$0],
        dot_ix$0 = ix$3 + 1 | 0;
       if(dot_ix$0 === len)
        return Stdlib_List[13].call(null, acc$0, [0, path_el$0, 0]);
       var acc$2 = [0, path_el$0, acc$0];
       acc = acc$2;
       dot_ix = dot_ix$0;
       continue;
      }
     }
     return fail_parse(caml_call1(Stdlib_Format[142].call(null, d), match));
    }
   }
   function get_subst(path, str, sexp){
    if(path)
     var path$0 = path[1], path$1 = path$0;
    else if(str)
     var str$0 = str[1], path$1 = parse(str$0);
    else
     var path$1 = 0;
    return subst_path(sexp, path$1);
   }
   function get(path, str, sexp){return get_subst(path, str, sexp)[2];}
   function replace(path, str, sexp, subst){
    var subst_fun = get_subst(path, str, sexp)[1];
    return caml_call1(subst_fun, subst);
   }
   function replace_no_path(str, sexp, subst){return replace(0, [0, str], sexp, subst);
   }
   var
    Sexplib_Path =
      [0,
       parse,
       get,
       replace,
       replace_no_path,
       subst_path,
       extract_pos,
       extract_match,
       extract_rec];
   runtime.caml_register_global(22, Sexplib_Path, "Sexplib__Path");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Exn_magic
//# unitInfo: Requires: Sexplib__Conv, Stdlib__Obj
//# shape: Sexplib__Exn_magic:[F(2),F(3),F(4),F(5),F(6),F(7),F(8),F(9),F(10),F(11),F(12)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Sexplib_Conv = global_data.Sexplib__Conv;
   function register(exc, exc_name){
    var a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(exc){return [0, exc_name];});
   }
   function register1(make_exc, exc_name, sexp_of_arg1){
    var exc = caml_call1(make_exc, 0), a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var sexp1 = caml_call1(sexp_of_arg1, repr[2]);
              return [1, [0, [0, exc_name], [0, sexp1, 0]]];
             });
   }
   function register2(make_exc, exc_name, sexp_of_arg1, sexp_of_arg2){
    var
     exc = caml_call2(make_exc, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]);
              return [1, [0, [0, exc_name], [0, sexp1, [0, sexp2, 0]]]];
             });
   }
   function register3
   (make_exc, exc_name, sexp_of_arg1, sexp_of_arg2, sexp_of_arg3){
    var
     exc = caml_call3(make_exc, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]);
              return [1,
                      [0, [0, exc_name], [0, sexp1, [0, sexp2, [0, sexp3, 0]]]]];
             });
   }
   function register4
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4){
    var
     exc = caml_call4(make_exc, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0, sexp1, [0, sexp2, [0, sexp3, [0, sexp4, 0]]]]]];
             });
   }
   function register5
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5){
    var
     exc = caml_call5(make_exc, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0, sexp2, [0, sexp3, [0, sexp4, [0, sexp5, 0]]]]]]];
             });
   }
   function register6
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6){
    var
     exc = caml_call6(make_exc, 0, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]),
               sexp6 = caml_call1(sexp_of_arg6, repr[7]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0,
                         sexp2,
                         [0, sexp3, [0, sexp4, [0, sexp5, [0, sexp6, 0]]]]]]]];
             });
   }
   function register7
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7){
    var
     exc = caml_call7(make_exc, 0, 0, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]),
               sexp6 = caml_call1(sexp_of_arg6, repr[7]),
               sexp7 = caml_call1(sexp_of_arg7, repr[8]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0,
                         sexp2,
                         [0,
                          sexp3,
                          [0, sexp4, [0, sexp5, [0, sexp6, [0, sexp7, 0]]]]]]]]];
             });
   }
   function register8
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8){
    var
     exc = caml_call8(make_exc, 0, 0, 0, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]),
               sexp6 = caml_call1(sexp_of_arg6, repr[7]),
               sexp7 = caml_call1(sexp_of_arg7, repr[8]),
               sexp8 = caml_call1(sexp_of_arg8, repr[9]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0,
                         sexp2,
                         [0,
                          sexp3,
                          [0,
                           sexp4,
                           [0, sexp5, [0, sexp6, [0, sexp7, [0, sexp8, 0]]]]]]]]]];
             });
   }
   function register9
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8,
    sexp_of_arg9){
    var
     exc = caml_call9(make_exc, 0, 0, 0, 0, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]),
               sexp6 = caml_call1(sexp_of_arg6, repr[7]),
               sexp7 = caml_call1(sexp_of_arg7, repr[8]),
               sexp8 = caml_call1(sexp_of_arg8, repr[9]),
               sexp9 = caml_call1(sexp_of_arg9, repr[10]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0,
                         sexp2,
                         [0,
                          sexp3,
                          [0,
                           sexp4,
                           [0,
                            sexp5,
                            [0, sexp6, [0, sexp7, [0, sexp8, [0, sexp9, 0]]]]]]]]]]];
             });
   }
   function register10
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8,
    sexp_of_arg9,
    sexp_of_arg10){
    var
     exc = caml_call10(make_exc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
     a = Stdlib_Obj[22][1].call(null, exc);
    return caml_call4
            (Sexplib_Conv[72][1],
             0,
             0,
             a,
             function(repr){
              var
               sexp1 = caml_call1(sexp_of_arg1, repr[2]),
               sexp2 = caml_call1(sexp_of_arg2, repr[3]),
               sexp3 = caml_call1(sexp_of_arg3, repr[4]),
               sexp4 = caml_call1(sexp_of_arg4, repr[5]),
               sexp5 = caml_call1(sexp_of_arg5, repr[6]),
               sexp6 = caml_call1(sexp_of_arg6, repr[7]),
               sexp7 = caml_call1(sexp_of_arg7, repr[8]),
               sexp8 = caml_call1(sexp_of_arg8, repr[9]),
               sexp9 = caml_call1(sexp_of_arg9, repr[10]),
               sexp10 = caml_call1(sexp_of_arg10, repr[11]);
              return [1,
                      [0,
                       [0, exc_name],
                       [0,
                        sexp1,
                        [0,
                         sexp2,
                         [0,
                          sexp3,
                          [0,
                           sexp4,
                           [0,
                            sexp5,
                            [0,
                             sexp6,
                             [0, sexp7, [0, sexp8, [0, sexp9, [0, sexp10, 0]]]]]]]]]]]];
             });
   }
   var
    Sexplib_Exn_magic =
      [0,
       register,
       register1,
       register2,
       register3,
       register4,
       register5,
       register6,
       register7,
       register8,
       register9,
       register10];
   runtime.caml_register_global(2, Sexplib_Exn_magic, "Sexplib__Exn_magic");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Conv_error
//# unitInfo: Requires: Sexplib0__Sexp_conv_error
//# shape: Sexplib__Conv_error:[N,F(3),F(3),F(3),F(3),F(4),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(4),F(3),F(3),F(2),F(3),F(2),F(2),N,F(1),F(2),F(2),F(3),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Of_sexp_error = Sexplib0_Sexp_conv_error[1],
    error = Sexplib0_Sexp_conv_error[2],
    simple_error = Sexplib0_Sexp_conv_error[3],
    tuple_of_size_n_expected = Sexplib0_Sexp_conv_error[4],
    tuple_pair_expected = Sexplib0_Sexp_conv_error[5],
    tuple_incorrect_label = Sexplib0_Sexp_conv_error[6],
    stag_no_args = Sexplib0_Sexp_conv_error[7],
    stag_incorrect_n_args = Sexplib0_Sexp_conv_error[8],
    stag_takes_args = Sexplib0_Sexp_conv_error[9],
    nested_list_invalid_sum = Sexplib0_Sexp_conv_error[10],
    empty_list_invalid_sum = Sexplib0_Sexp_conv_error[11],
    unexpected_stag = Sexplib0_Sexp_conv_error[12],
    record_sexp_bool_with_payload = Sexplib0_Sexp_conv_error[13],
    record_only_pairs_expected = Sexplib0_Sexp_conv_error[14],
    record_invalid_fields = Sexplib0_Sexp_conv_error[15],
    record_duplicate_fields = Sexplib0_Sexp_conv_error[16],
    record_extra_fields = Sexplib0_Sexp_conv_error[17],
    record_get_undefined_loop = Sexplib0_Sexp_conv_error[18],
    record_undefined_elements = Sexplib0_Sexp_conv_error[19],
    record_list_instead_atom = Sexplib0_Sexp_conv_error[20],
    record_poly_field_value = Sexplib0_Sexp_conv_error[21],
    No_variant_match = Sexplib0_Sexp_conv_error[22],
    no_variant_match = Sexplib0_Sexp_conv_error[23],
    no_matching_variant_found = Sexplib0_Sexp_conv_error[24],
    ptag_no_args = Sexplib0_Sexp_conv_error[25],
    ptag_incorrect_n_args = Sexplib0_Sexp_conv_error[26],
    ptag_takes_args = Sexplib0_Sexp_conv_error[27],
    nested_list_invalid_poly_var = Sexplib0_Sexp_conv_error[28],
    empty_list_invalid_poly_var = Sexplib0_Sexp_conv_error[29],
    empty_type = Sexplib0_Sexp_conv_error[30],
    Sexplib_Conv_error =
      [0,
       Of_sexp_error,
       error,
       simple_error,
       tuple_of_size_n_expected,
       tuple_pair_expected,
       tuple_incorrect_label,
       stag_no_args,
       stag_incorrect_n_args,
       stag_takes_args,
       nested_list_invalid_sum,
       empty_list_invalid_sum,
       unexpected_stag,
       record_sexp_bool_with_payload,
       record_only_pairs_expected,
       record_invalid_fields,
       record_duplicate_fields,
       record_extra_fields,
       record_get_undefined_loop,
       record_undefined_elements,
       record_list_instead_atom,
       record_poly_field_value,
       No_variant_match,
       no_variant_match,
       no_matching_variant_found,
       ptag_no_args,
       ptag_incorrect_n_args,
       ptag_takes_args,
       nested_list_invalid_poly_var,
       empty_list_invalid_poly_var,
       empty_type];
   runtime.caml_register_global(1, Sexplib_Conv_error, "Sexplib__Conv_error");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
