// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Patchwork__
//# shape: Patchwork__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Patchwork = [0],
    Patchwork$0 = [0, Patchwork];
   runtime.caml_register_global(0, Patchwork$0, "Patchwork__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Patchwork
//# unitInfo: Requires: Core, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
//# shape: Patchwork:[[F(1),F(1),F(2)*,F(2)*],N,N,N,N,[F(1),F(1),F(2),F(2),F(4)],N,N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ChunkyLRev = "ChunkyLRev",
    cst_ChunkyZig = "ChunkyZig",
    cst_Corner = "Corner",
    cst_CornerRev = "CornerRev",
    cst_Cross = "Cross",
    cst_D$0 = "D",
    cst_Empty = "Empty",
    cst_H = "H",
    cst_I = "I",
    cst_INub = "INub",
    cst_L$0 = "L",
    cst_LHalfH = "LHalfH",
    cst_LRev = "LRev",
    cst_LongI = "LongI",
    cst_LongL = "LongL",
    cst_MainBoard = "MainBoard",
    cst_NeutralToken = "NeutralToken",
    cst_Patchwork = "Patchwork",
    cst_Plus = "Plus",
    cst_Prong = "Prong",
    cst_QuiltBoard = "QuiltBoard",
    cst_R$0 = "R",
    cst_S = "S",
    cst_SD$0 = "SD",
    cst_SHalfH = "SHalfH",
    cst_SL$0 = "SL",
    cst_SLVert = "SLVert",
    cst_SR$0 = "SR",
    cst_SU$0 = "SU",
    cst_ShortI = "ShortI",
    cst_ShortT = "ShortT",
    cst_SmallI = "SmallI",
    cst_Square = "Square",
    cst_SquareHighFive = "SquareHighFive",
    cst_SquareNub = "SquareNub",
    cst_StubbyT = "StubbyT",
    cst_T = "T",
    cst_TCross = "TCross",
    cst_TimeToken = "TimeToken",
    cst_U$0 = "U",
    cst_Vine = "Vine",
    cst_WidePlus = "WidePlus",
    cst_WideStubbyT = "WideStubbyT",
    cst_Zig = "Zig",
    cst_ZigRev = "ZigRev",
    cst_ZigZag = "ZigZag",
    cst_bc$0 = "bc",
    cst_buttons$0 = "buttons",
    cst_buttons_owned$0 = "buttons_owned",
    cst_chunkyLRev = "chunkyLRev",
    cst_chunkyZig = "chunkyZig",
    cst_color$0 = "color",
    cst_corner = "corner",
    cst_cornerRev = "cornerRev",
    cst_cost$0 = "cost",
    cst_cross = "cross",
    cst_empty = "empty",
    cst_filled_squares$0 = "filled_squares",
    cst_h = "h",
    cst_i = "i",
    cst_iNub = "iNub",
    cst_income$0 = "income",
    cst_l = "l",
    cst_lHalfH = "lHalfH",
    cst_lRev = "lRev",
    cst_longI = "longI",
    cst_longL = "longL",
    cst_mainBoard = "mainBoard",
    cst_main_board$0 = "main_board",
    cst_mb$0 = "mb",
    cst_move_num$0 = "move_num",
    cst_neut$0 = "neut",
    cst_neutralToken = "neutralToken",
    cst_neutral_piece$0 = "neutral_piece",
    cst_owned_by$0 = "owned_by",
    cst_p1qb$0 = "p1qb",
    cst_p2qb$0 = "p2qb",
    cst_patch_pieces$0 = "patch_pieces",
    cst_patches$0 = "patches",
    cst_patches_remaining$1 = "patches_remaining",
    cst_patchwork = "patchwork",
    cst_player1$0 = "player1",
    cst_player2$0 = "player2",
    cst_player_name$0 = "player_name",
    cst_player_num$0 = "player_num",
    cst_plus = "plus",
    cst_pos$0 = "pos",
    cst_pos_around_board$0 = "pos_around_board",
    cst_position$0 = "position",
    cst_prong = "prong",
    cst_quiltBoard = "quiltBoard",
    cst_quilt_board1$0 = "quilt_board1",
    cst_quilt_board2$0 = "quilt_board2",
    cst_rotated$0 = "rotated",
    cst_s = "s",
    cst_sHalfH = "sHalfH",
    cst_sLVert = "sLVert",
    cst_score$0 = "score",
    cst_shape$0 = "shape",
    cst_shortI = "shortI",
    cst_shortT = "shortT",
    cst_smallI = "smallI",
    cst_special_patch_locs$0 = "special_patch_locs",
    cst_square = "square",
    cst_squareHighFive = "squareHighFive",
    cst_squareNub = "squareNub",
    cst_squares$1 = "squares",
    cst_stubbyT = "stubbyT",
    cst_t = "t",
    cst_tCross = "tCross",
    cst_timeToken = "timeToken",
    cst_time_piece1$0 = "time_piece1",
    cst_time_piece2$0 = "time_piece2",
    cst_tk1$0 = "tk1",
    cst_tk2$0 = "tk2",
    cst_turn$0 = "turn",
    cst_unassigned_cache$0 = "unassigned_cache",
    cst_vine = "vine",
    cst_widePlus = "widePlus",
    cst_wideStubbyT = "wideStubbyT",
    cst_zig = "zig",
    cst_zigRev = "zigRev",
    cst_zigZag = "zigZag",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_compare = runtime.caml_int_compare,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    remaining =
      caml_list_of_js_array
       ([1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30]),
    main_board = [0, 64, 0],
    quilt_board_1 = [0, 9, 0],
    quilt_board_2 = [0, 9, 0],
    error_source_002 = "lib/patchwork.ml.Player.t",
    error_source_019 = "lib/patchwork.ml.Patch.patch_shape",
    error_source_026 = "lib/patchwork.ml.Patch.t",
    shapes =
      caml_list_of_js_array
       ([0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32]),
    error_source_046 = "lib/patchwork.ml.Game_board.main_board",
    error_source_062 = "lib/patchwork.ml.Game_board.quilt_board",
    error_source_096 = "lib/patchwork.ml.Game_board.t",
    error_source_125 = "lib/patchwork.ml.Button.t",
    error_source_135 = "lib/patchwork.ml.Token.time_token",
    error_source_149 = "lib/patchwork.ml.Token.neutral_token",
    error_source_160 = "lib/patchwork.ml.Token.t",
    error_source_189 = "lib/patchwork.ml.Game_pieces.t",
    error_source_227 = "lib/patchwork.ml.Game_state.t",
    Core = global_data.Core,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Patchwork);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_patchwork);
   Ppx_expect_runtime[1][1].call(null, "lib/patchwork.ml");
   Ppx_inline_test_lib[6].call(null, cst_patchwork, "patchwork.ml");
   var
    cst_score = cst_score$0,
    cst_buttons_owned = cst_buttons_owned$0,
    cst_player_name = cst_player_name$0,
    cst_player_num = cst_player_num$0,
    a = [0, cst_score$0],
    b = [0, cst_buttons_owned$0],
    c = [0, cst_player_name$0],
    d = [0, cst_player_num$0];
   function t_of_sexp(x_003){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_002,
             [0,
              cst_player_num,
              1,
              Core[390],
              [0,
               cst_player_name,
               1,
               Core[559],
               [0,
                cst_buttons_owned,
                1,
                Core[390],
                [0, cst_score, 1, Core[390], 0]]]],
             function(param){
              return param !== cst_buttons_owned$0
                      ? param
                        !== cst_player_name$0
                        ? param
                          !== cst_player_num$0
                          ? param !== cst_score$0 ? -1 : 3
                          : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               score = b[2][1],
               buttons_owned = b[1],
               player_name = a[1],
               player_num = param[1];
              return [0, player_num, player_name, buttons_owned, score];
             },
             x_003);
   }
   function sexp_of_t(param){
    var
     player_name_007 = param[2],
     player_num_005 = param[1],
     buttons_owned_009 = param[3],
     score_011 = param[4],
     arg_012 = caml_call1(Core[389], score_011),
     bnds_004 = [0, [1, [0, a, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core[389], buttons_owned_009),
     bnds_004$0 = [0, [1, [0, b, [0, arg_010, 0]]], bnds_004],
     arg_008 = caml_call1(Core[558], player_name_007),
     bnds_004$1 = [0, [1, [0, c, [0, arg_008, 0]]], bnds_004$0],
     arg_006 = caml_call1(Core[389], player_num_005),
     bnds_004$2 = [0, [1, [0, d, [0, arg_006, 0]]], bnds_004$1];
    return [1, bnds_004$2];
   }
   function compare(a_013, b_014){
    if(a_013 === b_014) return 0;
    var n = Core[382].call(null, a_013[1], b_014[1]);
    if(0 !== n) return n;
    var n$0 = Core[551].call(null, a_013[2], b_014[2]);
    if(0 !== n$0) return n$0;
    var n$1 = Core[382].call(null, a_013[3], b_014[3]);
    return 0 === n$1 ? Core[382].call(null, a_013[4], b_014[4]) : n$1;
   }
   function equal(a_015, b_016){
    if(a_015 === b_016) return 1;
    var b = Core[384].call(null, a_015[1], b_016[1]);
    if(b){
     var c = Core[553].call(null, a_015[2], b_016[2]);
     if(c){
      var d = Core[384].call(null, a_015[3], b_016[3]);
      if(d) return Core[384].call(null, a_015[4], b_016[4]);
      var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   var
    Player = [0, t_of_sexp, sexp_of_t, compare, equal],
    e = [0, cst_Square],
    f = [0, cst_SquareNub],
    g = [0, cst_SquareHighFive],
    h = [0, cst_TCross],
    i = [0, cst_S],
    j = [0, cst_LongI],
    k = [0, cst_LHalfH],
    l = [0, cst_SHalfH],
    m = [0, cst_H],
    n = [0, cst_Corner],
    o = [0, cst_CornerRev],
    p = [0, cst_SLVert],
    q = [0, cst_ShortI],
    r = [0, cst_LRev],
    s = [0, cst_LongL],
    t = [0, cst_L$0],
    u = [0, cst_ChunkyLRev],
    v = [0, cst_SmallI],
    w = [0, cst_I],
    x = [0, cst_ShortT],
    y = [0, cst_StubbyT],
    z = [0, cst_T],
    A = [0, cst_Plus],
    B = [0, cst_Zig],
    C = [0, cst_ZigZag],
    D = [0, cst_ZigRev],
    E = [0, cst_ChunkyZig],
    F = [0, cst_Cross],
    G = [0, cst_INub],
    H = [0, cst_WideStubbyT],
    I = [0, cst_Prong],
    J = [0, cst_Vine],
    K = [0, cst_WidePlus],
    L = [0, cst_Empty];
   function patch_shape_of_sexp(sexp_020){
    a:
    {
     if(0 === sexp_020[0]){
      var a = sexp_020[1], c = caml_string_compare(a, cst_chunkyLRev);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       if(0 <= c){
                                        if(0 >= c) break i;
                                        var d = caml_string_compare(a, cst_sHalfH);
                                        if(0 > d){
                                         var f = caml_string_compare(a, cst_l);
                                         if(0 <= f){
                                          if(0 >= f) break q;
                                          if(a === cst_lHalfH) break p;
                                          if(a === cst_lRev) break o;
                                          if(a === cst_longI) break n;
                                          if(a === cst_longL) break m;
                                          if(a === cst_plus) break l;
                                          if(a === cst_prong) break k;
                                          if(a !== cst_s) break a;
                                          break j;
                                         }
                                         if(a === cst_chunkyZig) break h;
                                         if(a === cst_corner) break g;
                                         if(a === cst_cornerRev) break f;
                                         if(a === cst_cross) break e;
                                         if(a === cst_empty) break d;
                                         if(a === cst_h) break c;
                                         if(a === cst_i) break b;
                                         if(a !== cst_iNub) break a;
                                         break r;
                                        }
                                        if(0 < d){
                                         var e = caml_string_compare(a, cst_t);
                                         if(0 <= e){
                                          if(0 >= e) break H;
                                          if(a === cst_tCross) break G;
                                          if(a === cst_vine) break F;
                                          if(a === cst_widePlus) break E;
                                          if(a === cst_wideStubbyT) break D;
                                          if(a === cst_zig) break C;
                                          if(a === cst_zigRev) break B;
                                          if(a !== cst_zigZag) break a;
                                          break A;
                                         }
                                         if(a === cst_sLVert) break z;
                                         if(a === cst_shortI) break y;
                                         if(a === cst_shortT) break x;
                                         if(a === cst_smallI) break w;
                                         if(a === cst_square) break v;
                                         if(a === cst_squareHighFive) break u;
                                         if(a === cst_squareNub) break t;
                                         if(a !== cst_stubbyT) break a;
                                         break s;
                                        }
                                       }
                                       else{
                                        var g = caml_string_compare(a, cst_SHalfH);
                                        if(0 > g){
                                         var i = caml_string_compare(a, cst_INub);
                                         if(0 <= i){
                                          if(0 >= i) break r;
                                          if(a === cst_L$0) break q;
                                          if(a === cst_LHalfH) break p;
                                          if(a === cst_LRev) break o;
                                          if(a === cst_LongI) break n;
                                          if(a === cst_LongL) break m;
                                          if(a === cst_Plus) break l;
                                          if(a === cst_Prong) break k;
                                          if(a !== cst_S) break a;
                                          break j;
                                         }
                                         if(a === cst_ChunkyLRev) break i;
                                         if(a === cst_ChunkyZig) break h;
                                         if(a === cst_Corner) break g;
                                         if(a === cst_CornerRev) break f;
                                         if(a === cst_Cross) break e;
                                         if(a === cst_Empty) break d;
                                         if(a === cst_H) break c;
                                         if(a !== cst_I) break a;
                                         break b;
                                        }
                                        if(0 < g){
                                         var h = caml_string_compare(a, cst_T);
                                         if(0 <= h){
                                          if(0 >= h) break H;
                                          if(a === cst_TCross) break G;
                                          if(a === cst_Vine) break F;
                                          if(a === cst_WidePlus) break E;
                                          if(a === cst_WideStubbyT) break D;
                                          if(a === cst_Zig) break C;
                                          if(a === cst_ZigRev) break B;
                                          if(a !== cst_ZigZag) break a;
                                          break A;
                                         }
                                         if(a === cst_SLVert) break z;
                                         if(a === cst_ShortI) break y;
                                         if(a === cst_ShortT) break x;
                                         if(a === cst_SmallI) break w;
                                         if(a === cst_Square) break v;
                                         if(a === cst_SquareHighFive) break u;
                                         if(a === cst_SquareNub) break t;
                                         if(a !== cst_StubbyT) break a;
                                         break s;
                                        }
                                       }
                                       return 7;
                                      }
                                      return 21;
                                     }
                                     return 3;
                                    }
                                    return 31;
                                   }
                                   return 32;
                                  }
                                  return 29;
                                 }
                                 return 23;
                                }
                                return 25;
                               }
                               return 24;
                              }
                              return 11;
                             }
                             return 12;
                            }
                            return 19;
                           }
                           return 17;
                          }
                          return 0;
                         }
                         return 2;
                        }
                        return 1;
                       }
                       return 20;
                      }
                      return 28;
                     }
                     return 15;
                    }
                    return 6;
                   }
                   return 13;
                  }
                  return 5;
                 }
                 return 14;
                }
                return 22;
               }
               return 30;
              }
              return 4;
             }
             return 16;
            }
            return 26;
           }
           return 9;
          }
          return 10;
         }
         return 27;
        }
        return 33;
       }
       return 8;
      }
      return 18;
     }
     var match = sexp_020[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_019, sexp_020);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_019, sexp_020);
     var b = match$0[1], j = caml_string_compare(b, cst_chunkyLRev);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      if(0 <= j){
                                       if(0 >= j) break i;
                                       var k = caml_string_compare(b, cst_sHalfH);
                                       if(0 > k){
                                        var m = caml_string_compare(b, cst_l);
                                        if(0 <= m){
                                         if(0 >= m) break q;
                                         if(b === cst_lHalfH) break p;
                                         if(b === cst_lRev) break o;
                                         if(b === cst_longI) break n;
                                         if(b === cst_longL) break m;
                                         if(b === cst_plus) break l;
                                         if(b === cst_prong) break k;
                                         if(b !== cst_s) break a;
                                         break j;
                                        }
                                        if(b === cst_chunkyZig) break h;
                                        if(b === cst_corner) break g;
                                        if(b === cst_cornerRev) break f;
                                        if(b === cst_cross) break e;
                                        if(b === cst_empty) break d;
                                        if(b === cst_h) break c;
                                        if(b === cst_i) break b;
                                        if(b !== cst_iNub) break a;
                                        break r;
                                       }
                                       if(0 < k){
                                        var l = caml_string_compare(b, cst_t);
                                        if(0 <= l){
                                         if(0 >= l) break H;
                                         if(b === cst_tCross) break G;
                                         if(b === cst_vine) break F;
                                         if(b === cst_widePlus) break E;
                                         if(b === cst_wideStubbyT) break D;
                                         if(b === cst_zig) break C;
                                         if(b === cst_zigRev) break B;
                                         if(b !== cst_zigZag) break a;
                                         break A;
                                        }
                                        if(b === cst_sLVert) break z;
                                        if(b === cst_shortI) break y;
                                        if(b === cst_shortT) break x;
                                        if(b === cst_smallI) break w;
                                        if(b === cst_square) break v;
                                        if(b === cst_squareHighFive) break u;
                                        if(b === cst_squareNub) break t;
                                        if(b !== cst_stubbyT) break a;
                                        break s;
                                       }
                                      }
                                      else{
                                       var n = caml_string_compare(b, cst_SHalfH);
                                       if(0 > n){
                                        var p = caml_string_compare(b, cst_INub);
                                        if(0 <= p){
                                         if(0 >= p) break r;
                                         if(b === cst_L$0) break q;
                                         if(b === cst_LHalfH) break p;
                                         if(b === cst_LRev) break o;
                                         if(b === cst_LongI) break n;
                                         if(b === cst_LongL) break m;
                                         if(b === cst_Plus) break l;
                                         if(b === cst_Prong) break k;
                                         if(b !== cst_S) break a;
                                         break j;
                                        }
                                        if(b === cst_ChunkyLRev) break i;
                                        if(b === cst_ChunkyZig) break h;
                                        if(b === cst_Corner) break g;
                                        if(b === cst_CornerRev) break f;
                                        if(b === cst_Cross) break e;
                                        if(b === cst_Empty) break d;
                                        if(b === cst_H) break c;
                                        if(b !== cst_I) break a;
                                        break b;
                                       }
                                       if(0 < n){
                                        var o = caml_string_compare(b, cst_T);
                                        if(0 <= o){
                                         if(0 >= o) break H;
                                         if(b === cst_TCross) break G;
                                         if(b === cst_Vine) break F;
                                         if(b === cst_WidePlus) break E;
                                         if(b === cst_WideStubbyT) break D;
                                         if(b === cst_Zig) break C;
                                         if(b === cst_ZigRev) break B;
                                         if(b !== cst_ZigZag) break a;
                                         break A;
                                        }
                                        if(b === cst_SLVert) break z;
                                        if(b === cst_ShortI) break y;
                                        if(b === cst_ShortT) break x;
                                        if(b === cst_SmallI) break w;
                                        if(b === cst_Square) break v;
                                        if(b === cst_SquareHighFive) break u;
                                        if(b === cst_SquareNub) break t;
                                        if(b !== cst_StubbyT) break a;
                                        break s;
                                       }
                                      }
                                      return Sexplib0_Sexp_conv_error[7].call
                                              (null, error_source_019, sexp_020);
                                     }
                                     return Sexplib0_Sexp_conv_error[7].call
                                             (null, error_source_019, sexp_020);
                                    }
                                    return Sexplib0_Sexp_conv_error[7].call
                                            (null, error_source_019, sexp_020);
                                   }
                                   return Sexplib0_Sexp_conv_error[7].call
                                           (null, error_source_019, sexp_020);
                                  }
                                  return Sexplib0_Sexp_conv_error[7].call
                                          (null, error_source_019, sexp_020);
                                 }
                                 return Sexplib0_Sexp_conv_error[7].call
                                         (null, error_source_019, sexp_020);
                                }
                                return Sexplib0_Sexp_conv_error[7].call
                                        (null, error_source_019, sexp_020);
                               }
                               return Sexplib0_Sexp_conv_error[7].call
                                       (null, error_source_019, sexp_020);
                              }
                              return Sexplib0_Sexp_conv_error[7].call
                                      (null, error_source_019, sexp_020);
                             }
                             return Sexplib0_Sexp_conv_error[7].call
                                     (null, error_source_019, sexp_020);
                            }
                            return Sexplib0_Sexp_conv_error[7].call
                                    (null, error_source_019, sexp_020);
                           }
                           return Sexplib0_Sexp_conv_error[7].call
                                   (null, error_source_019, sexp_020);
                          }
                          return Sexplib0_Sexp_conv_error[7].call
                                  (null, error_source_019, sexp_020);
                         }
                         return Sexplib0_Sexp_conv_error[7].call
                                 (null, error_source_019, sexp_020);
                        }
                        return Sexplib0_Sexp_conv_error[7].call
                                (null, error_source_019, sexp_020);
                       }
                       return Sexplib0_Sexp_conv_error[7].call
                               (null, error_source_019, sexp_020);
                      }
                      return Sexplib0_Sexp_conv_error[7].call
                              (null, error_source_019, sexp_020);
                     }
                     return Sexplib0_Sexp_conv_error[7].call
                             (null, error_source_019, sexp_020);
                    }
                    return Sexplib0_Sexp_conv_error[7].call
                            (null, error_source_019, sexp_020);
                   }
                   return Sexplib0_Sexp_conv_error[7].call
                           (null, error_source_019, sexp_020);
                  }
                  return Sexplib0_Sexp_conv_error[7].call
                          (null, error_source_019, sexp_020);
                 }
                 return Sexplib0_Sexp_conv_error[7].call
                         (null, error_source_019, sexp_020);
                }
                return Sexplib0_Sexp_conv_error[7].call
                        (null, error_source_019, sexp_020);
               }
               return Sexplib0_Sexp_conv_error[7].call
                       (null, error_source_019, sexp_020);
              }
              return Sexplib0_Sexp_conv_error[7].call
                      (null, error_source_019, sexp_020);
             }
             return Sexplib0_Sexp_conv_error[7].call
                     (null, error_source_019, sexp_020);
            }
            return Sexplib0_Sexp_conv_error[7].call
                    (null, error_source_019, sexp_020);
           }
           return Sexplib0_Sexp_conv_error[7].call
                   (null, error_source_019, sexp_020);
          }
          return Sexplib0_Sexp_conv_error[7].call
                  (null, error_source_019, sexp_020);
         }
         return Sexplib0_Sexp_conv_error[7].call
                 (null, error_source_019, sexp_020);
        }
        return Sexplib0_Sexp_conv_error[7].call
                (null, error_source_019, sexp_020);
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_019, sexp_020);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_019, sexp_020);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_019, sexp_020);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_019, sexp_020);
   }
   function sexp_of_patch_shape(param){
    switch(param){
      case 0:
       return e;
      case 1:
       return f;
      case 2:
       return g;
      case 3:
       return h;
      case 4:
       return i;
      case 5:
       return j;
      case 6:
       return k;
      case 7:
       return l;
      case 8:
       return m;
      case 9:
       return n;
      case 10:
       return o;
      case 11:
       return p;
      case 12:
       return q;
      case 13:
       return r;
      case 14:
       return s;
      case 15:
       return t;
      case 16:
       return u;
      case 17:
       return v;
      case 18:
       return w;
      case 19:
       return x;
      case 20:
       return y;
      case 21:
       return z;
      case 22:
       return A;
      case 23:
       return B;
      case 24:
       return C;
      case 25:
       return D;
      case 26:
       return E;
      case 27:
       return F;
      case 28:
       return G;
      case 29:
       return H;
      case 30:
       return I;
      case 31:
       return J;
      case 32:
       return K;
      default: return L;
    }
   }
   var
    compare_patch_shape = caml_int_compare,
    cst_rotated = cst_rotated$0,
    cst_income = cst_income$0,
    cst_move_num = cst_move_num$0,
    cst_pos_around_board = cst_pos_around_board$0,
    cst_cost = cst_cost$0,
    cst_shape = cst_shape$0,
    M = [0, cst_rotated$0],
    N = [0, cst_income$0],
    O = [0, cst_move_num$0],
    P = [0, cst_pos_around_board$0],
    Q = [0, cst_cost$0],
    R = [0, cst_shape$0],
    S = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    T = [0, [0, 3, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], 0]]],
    U =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_R$0],
        [0, [0, 1, cst_U$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_U$0], 0]]]]],
    V =
      [0,
       [0, 3, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]]]]],
    W = [0, [0, 2, cst_L$0], [0, [0, 2, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    X = [0, [0, 5, cst_D$0], 0],
    Y = [0, [0, 2, cst_D$0], [0, [0, 3, cst_R$0], [0, [0, 1, cst_U$0], 0]]],
    Z = [0, [0, 2, cst_D$0], [0, [0, 2, cst_R$0], [0, [0, 1, cst_U$0], 0]]],
    _ =
      [0,
       [0, 3, cst_D$0],
       [0,
        [0, 1, cst_SU$0],
        [0,
         [0, 2, cst_R$0],
         [0, [0, 1, cst_U$0], [0, [0, 1, cst_SD$0], [0, [0, 1, cst_D$0], 0]]]]]],
    $ = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], 0]],
    aa = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    ab = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 2, cst_D$0], 0]]],
    ac = [0, [0, 3, cst_D$0], 0],
    ad = [0, [0, 3, cst_D$0], [0, [0, 1, cst_L$0], 0]],
    ae = [0, [0, 4, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    af = [0, [0, 3, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    ag = [0, [0, 4, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], 0]]],
    ah = [0, [0, 2, cst_D$0], 0],
    ai = [0, [0, 4, cst_D$0], 0],
    aj =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_SU$0], [0, [0, 1, cst_R$0], 0]]]],
    ak = [0, [0, 3, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]],
    al = [0, [0, 3, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 3, cst_D$0], 0]]],
    am =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]],
    an = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]],
    ao =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]]],
    ap = [0, [0, 2, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_D$0], 0]]],
    aq =
      [0,
       [0, 3, cst_D$0],
       [0, [0, 1, cst_SU$0], [0, [0, 1, cst_L$0], [0, [0, 2, cst_D$0], 0]]]],
    ar =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]]]]],
    as =
      [0,
       [0, 3, cst_D$0],
       [0, [0, 1, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]],
    at =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_SU$0], [0, [0, 1, cst_R$0], 0]]]],
    au =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_D$0],
         [0,
          [0, 1, cst_SU$0],
          [0, [0, 1, cst_SR$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]]]]]],
    av =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0,
          [0, 1, cst_D$0],
          [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]]],
    aw =
      [0,
       [0, 2, cst_R$0],
       [0,
        [0, 1, cst_D$0],
        [0,
         [0, 1, cst_R$0],
         [0,
          [0, 1, cst_SL$0],
          [0,
           [0, 1, cst_D$0],
           [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], [0, [0, 1, cst_L$0], 0]]]]]]]],
    ax = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    ay =
      [0,
       [0, 2, cst_L$0],
       [0, [0, 1, cst_U$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_D$0], 0]]]],
    az =
      [0,
       [0, 2, cst_L$0],
       [0, [0, 2, cst_U$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_D$0], 0]]]],
    aA =
      [0,
       [0, 1, cst_D$0],
       [0,
        [0, 2, cst_L$0],
        [0,
         [0, 2, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]],
    aB = [0, [0, 2, cst_D$0], [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], 0]]],
    aC = [0, [0, 5, cst_R$0], 0],
    aD = [0, [0, 2, cst_L$0], [0, [0, 3, cst_D$0], [0, [0, 1, cst_R$0], 0]]],
    aE = [0, [0, 2, cst_L$0], [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], 0]]],
    aF =
      [0,
       [0, 3, cst_R$0],
       [0,
        [0, 1, cst_SL$0],
        [0,
         [0, 2, cst_D$0],
         [0, [0, 1, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 1, cst_R$0], 0]]]]]],
    aG = [0, [0, 2, cst_R$0], [0, [0, 1, cst_U$0], 0]],
    aH = [0, [0, 2, cst_L$0], [0, [0, 1, cst_D$0], 0]],
    aI = [0, [0, 2, cst_L$0], [0, [0, 1, cst_D$0], [0, [0, 2, cst_L$0], 0]]],
    aJ = [0, [0, 3, cst_R$0], 0],
    aK = [0, [0, 2, cst_D$0], [0, [0, 2, cst_R$0], 0]],
    aL = [0, [0, 4, cst_L$0], [0, [0, 1, cst_D$0], 0]],
    aM = [0, [0, 3, cst_L$0], [0, [0, 1, cst_D$0], 0]],
    aN = [0, [0, 2, cst_L$0], [0, [0, 1, cst_D$0], [0, [0, 3, cst_R$0], 0]]],
    aO = [0, [0, 2, cst_R$0], 0],
    aP = [0, [0, 4, cst_R$0], 0],
    aQ =
      [0,
       [0, 2, cst_D$0],
       [0, [0, 1, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]],
    aR =
      [0,
       [0, 2, cst_D$0],
       [0, [0, 2, cst_L$0], [0, [0, 2, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]],
    aS =
      [0,
       [0, 2, cst_D$0],
       [0, [0, 3, cst_L$0], [0, [0, 3, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]],
    aT =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]],
    aU = [0, [0, 2, cst_L$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    aV =
      [0,
       [0, 2, cst_D$0],
       [0, [0, 1, cst_L$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]]],
    aW = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_R$0], 0]]],
    aX = [0, [0, 3, cst_R$0], [0, [0, 1, cst_D$0], [0, [0, 2, cst_R$0], 0]]],
    aY =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_R$0],
        [0,
         [0, 1, cst_SL$0],
         [0, [0, 2, cst_L$0], [0, [0, 2, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]]]],
    aZ =
      [0,
       [0, 2, cst_D$0],
       [0, [0, 1, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 2, cst_R$0], 0]]]],
    a0 =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_SU$0], [0, [0, 1, cst_R$0], 0]]]],
    a1 =
      [0,
       [0, 2, cst_R$0],
       [0,
        [0, 1, cst_D$0],
        [0,
         [0, 1, cst_R$0],
         [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]]]]],
    a2 =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_R$0],
        [0,
         [0, 1, cst_SL$0],
         [0, [0, 2, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]]]],
    a3 =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_D$0],
         [0,
          [0, 1, cst_R$0],
          [0,
           [0, 1, cst_D$0],
           [0,
            [0, 1, cst_SU$0],
            [0, [0, 1, cst_R$0], [0, [0, 1, cst_U$0], 0]]]]]]]],
    a4 = [0, 6, 5],
    a5 = [0, 2, 2],
    a6 = [0, 8, 6],
    a7 = [0, 1, 4],
    a8 = [0, 1, 2],
    a9 = [0, 7, 1],
    a_ = [0, 1, 5],
    a$ = [0, 1, 2],
    ba = [0, 2, 3],
    bb = [0, 3, 1],
    bc = [0, 1, 3],
    bd = [0, 2, 3],
    be = [0, 2, 2],
    bf = [0, 4, 2],
    bg = [0, 10, 3],
    bh = [0, 4, 6],
    bi = [0, 10, 5],
    bj = [0, 2, 1],
    bk = [0, 3, 3],
    bl = [0, 2, 2],
    bm = [0, 5, 5],
    bn = [0, 7, 2],
    bo = [0, 5, 4],
    bp = [0, 3, 2],
    bq = [0, 10, 4],
    br = [0, 7, 6],
    bs = [0, 4, 2],
    bt = [0, 0, 3],
    bu = [0, 3, 4],
    bv = [0, 7, 4],
    bw = [0, 3, 6],
    bx = [0, 2, 1],
    by = [0, 5, 3],
    bz = [0, 0, 0],
    bA = [0, 2, 2],
    bB = [0, 2, 3],
    bC = [0, 3, 3],
    bD = [0, 3, 5],
    bE = [0, 3, 5],
    bF = [0, 1, 5],
    bG = [0, 4, 2],
    bH = [0, 3, 2],
    bI = [0, 3, 3],
    bJ = [0, 2, 2],
    bK = [0, 2, 2],
    bL = [0, 2, 4],
    bM = [0, 1, 3],
    bN = [0, 2, 3],
    bO = [0, 2, 4],
    bP = [0, 2, 3],
    bQ = [0, 2, 4],
    bR = [0, 1, 2],
    bS = [0, 1, 4],
    bT = [0, 3, 2],
    bU = [0, 3, 3],
    bV = [0, 3, 4],
    bW = [0, 3, 3],
    bX = [0, 2, 3],
    bY = [0, 3, 3],
    bZ = [0, 2, 4],
    b0 = [0, 2, 4],
    b1 = [0, 3, 4],
    b2 = [0, 2, 4],
    b3 = [0, 4, 2],
    b4 = [0, 3, 3],
    b5 = [0, 3, 4],
    b6 = [0, 3, 3],
    b7 = [0, 0, 0],
    b8 = [0, 0, 0],
    b9 = [0, 0, 0],
    b_ = [0, 0, 0, 0],
    b$ = [0, 0, 0, 0],
    cst_special_patch_locs = cst_special_patch_locs$0,
    cst_squares = cst_squares$1,
    ca = [0, cst_special_patch_locs$0],
    cb = [0, cst_squares$1],
    cst_filled_squares = cst_filled_squares$0,
    cst_squares$0 = cst_squares$1,
    cc = [0, cst_filled_squares$0],
    cd = [0, cst_squares$1],
    ce = [0, cst_MainBoard],
    cf = [0, cst_QuiltBoard];
   function equal_patch_shape(b, a){return b === a ? 1 : 0;}
   function t_of_sexp$0(x_027){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_026,
             [0,
              cst_shape,
              1,
              patch_shape_of_sexp,
              [0,
               cst_cost,
               1,
               Core[390],
               [0,
                cst_pos_around_board,
                1,
                Core[390],
                [0,
                 cst_move_num,
                 1,
                 Core[390],
                 [0,
                  cst_income,
                  1,
                  Core[390],
                  [0, cst_rotated, 1, Core[390], 0]]]]]],
             function(param){
              return param !== cst_cost$0
                      ? param
                        !== cst_income$0
                        ? param
                          !== cst_move_num$0
                          ? param
                            !== cst_pos_around_board$0
                            ? param
                              !== cst_rotated$0
                              ? param !== cst_shape$0 ? -1 : 0
                              : 5
                            : 2
                          : 3
                        : 4
                      : 1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               d = c[2],
               rotated = d[2][1],
               income = d[1],
               move_num = c[1],
               pos_around_board = b[1],
               cost = a[1],
               shape = param[1];
              return [0,
                      shape,
                      cost,
                      pos_around_board,
                      move_num,
                      income,
                      rotated];
             },
             x_027);
   }
   function sexp_of_t$0(param){
    var
     income_037 = param[5],
     move_num_035 = param[4],
     pos_around_board_033 = param[3],
     cost_031 = param[2],
     shape_029 = param[1],
     rotated_039 = param[6],
     arg_040 = caml_call1(Core[389], rotated_039),
     bnds_028 = [0, [1, [0, M, [0, arg_040, 0]]], 0],
     arg_038 = caml_call1(Core[389], income_037),
     bnds_028$0 = [0, [1, [0, N, [0, arg_038, 0]]], bnds_028],
     arg_036 = caml_call1(Core[389], move_num_035),
     bnds_028$1 = [0, [1, [0, O, [0, arg_036, 0]]], bnds_028$0],
     arg_034 = caml_call1(Core[389], pos_around_board_033),
     bnds_028$2 = [0, [1, [0, P, [0, arg_034, 0]]], bnds_028$1],
     arg_032 = caml_call1(Core[389], cost_031),
     bnds_028$3 = [0, [1, [0, Q, [0, arg_032, 0]]], bnds_028$2],
     arg_030 = sexp_of_patch_shape(shape_029),
     bnds_028$4 = [0, [1, [0, R, [0, arg_030, 0]]], bnds_028$3];
    return [1, bnds_028$4];
   }
   function compare$0(a_041, b_042){
    if(a_041 === b_042) return 0;
    var n$3 = caml_int_compare(a_041[1], b_042[1]);
    if(0 !== n$3) return n$3;
    var n = Core[382].call(null, a_041[2], b_042[2]);
    if(0 !== n) return n;
    var n$0 = Core[382].call(null, a_041[3], b_042[3]);
    if(0 !== n$0) return n$0;
    var n$1 = Core[382].call(null, a_041[4], b_042[4]);
    if(0 !== n$1) return n$1;
    var n$2 = Core[382].call(null, a_041[5], b_042[5]);
    return 0 === n$2 ? Core[382].call(null, a_041[6], b_042[6]) : n$2;
   }
   function equal$0(a_043, b_044){
    if(a_043 === b_044) return 1;
    var f = a_043[1] === b_044[1] ? 1 : 0;
    if(f){
     var b = Core[384].call(null, a_043[2], b_044[2]);
     if(b){
      var c = Core[384].call(null, a_043[3], b_044[3]);
      if(c){
       var d = Core[384].call(null, a_043[4], b_044[4]);
       if(d){
        var e = Core[384].call(null, a_043[5], b_044[5]);
        if(e) return Core[384].call(null, a_043[6], b_044[6]);
        var a = e;
       }
       else
        var a = d;
      }
      else
       var a = c;
     }
     else
      var a = b;
    }
    else
     var a = f;
    return a;
   }
   function get_patch_dim(p){
    switch(p){
      case 0:
       return S;
      case 1:
       return T;
      case 2:
       return U;
      case 3:
       return V;
      case 4:
       return W;
      case 5:
       return X;
      case 6:
       return Y;
      case 7:
       return Z;
      case 8:
       return _;
      case 9:
       return $;
      case 10:
       return aa;
      case 11:
       return ab;
      case 12:
       return ac;
      case 13:
       return ad;
      case 14:
       return ae;
      case 15:
       return af;
      case 16:
       return ag;
      case 17:
       return ah;
      case 18:
       return ai;
      case 19:
       return aj;
      case 20:
       return ak;
      case 21:
       return al;
      case 22:
       return am;
      case 23:
       return an;
      case 24:
       return ao;
      case 25:
       return ap;
      case 26:
       return aq;
      case 27:
       return ar;
      case 28:
       return as;
      case 29:
       return at;
      case 30:
       return au;
      case 31:
       return av;
      case 32:
       return aw;
      default: return 0;
    }
   }
   function rotate(p){
    if(caml_call2(Core[90], p[6], 0))
     switch(p[1]){
       case 0:
        return ax;
       case 1:
        return ay;
       case 2:
        return az;
       case 3:
        return aA;
       case 4:
        return aB;
       case 5:
        return aC;
       case 6:
        return aD;
       case 7:
        return aE;
       case 8:
        return aF;
       case 9:
        return aG;
       case 10:
        return aH;
       case 11:
        return aI;
       case 12:
        return aJ;
       case 13:
        return aK;
       case 14:
        return aL;
       case 15:
        return aM;
       case 16:
        return aN;
       case 17:
        return aO;
       case 18:
        return aP;
       case 19:
        return aQ;
       case 20:
        return aR;
       case 21:
        return aS;
       case 22:
        return aT;
       case 23:
        return aU;
       case 24:
        return aV;
       case 25:
        return aW;
       case 26:
        return aX;
       case 27:
        return aY;
       case 28:
        return aZ;
       case 29:
        return a0;
       case 30:
        return a1;
       case 31:
        return a2;
       case 32:
        return a3;
       default: return 0;
     }
    return get_patch_dim(p[1]);
   }
   function get_values(p){
    switch(p){
      case 0:
       return a4;
      case 1:
       return a5;
      case 2:
       return a6;
      case 3:
       return a7;
      case 4:
       return a8;
      case 5:
       return a9;
      case 6:
       return a_;
      case 7:
       return a$;
      case 8:
       return ba;
      case 9:
       return bb;
      case 10:
       return bc;
      case 11:
       return bd;
      case 12:
       return be;
      case 13:
       return bf;
      case 14:
       return bg;
      case 15:
       return bh;
      case 16:
       return bi;
      case 17:
       return bj;
      case 18:
       return bk;
      case 19:
       return bl;
      case 20:
       return bm;
      case 21:
       return bn;
      case 22:
       return bo;
      case 23:
       return bp;
      case 24:
       return bq;
      case 25:
       return br;
      case 26:
       return bs;
      case 27:
       return bt;
      case 28:
       return bu;
      case 29:
       return bv;
      case 30:
       return bw;
      case 31:
       return bx;
      case 32:
       return by;
      default: return bz;
    }
   }
   function get_col_row(p){
    switch(p){
      case 0:
       return bA;
      case 1:
       return bB;
      case 2:
       return bC;
      case 3:
       return bD;
      case 4:
       return bE;
      case 5:
       return bF;
      case 6:
       return bG;
      case 7:
       return bH;
      case 8:
       return bI;
      case 9:
       return bJ;
      case 10:
       return bK;
      case 11:
       return bL;
      case 12:
       return bM;
      case 13:
       return bN;
      case 14:
       return bO;
      case 15:
       return bP;
      case 16:
       return bQ;
      case 17:
       return bR;
      case 18:
       return bS;
      case 19:
       return bT;
      case 20:
       return bU;
      case 21:
       return bV;
      case 22:
       return bW;
      case 23:
       return bX;
      case 24:
       return bY;
      case 25:
       return bZ;
      case 26:
       return b0;
      case 27:
       return b1;
      case 28:
       return b2;
      case 29:
       return b3;
      case 30:
       return b4;
      case 31:
       return b5;
      case 32:
       return b6;
      default: return b7;
    }
   }
   function get_three(i, rem_list$1){
    var rem_list = rem_list$1;
    for(;;){
     var
      start_over =
        function(rl, n){
         if(caml_call2(Core[90], n, 1)){
          if(! rl) return b8;
          var a = rl[1];
          return [0, a, 0];
         }
         if(rl){
          var match = rl[2];
          if(match){var b = match[1], a$0 = rl[1]; return [0, a$0, b];}
         }
         return b9;
        };
     if(! rem_list) return b$;
     var rem_list$0 = rem_list[2], hd = rem_list[1];
     if(caml_call2(Core[90], hd, i)){
      if(! rem_list$0) return b_;
      var match = rem_list$0[2], a = rem_list$0[1];
      if(! match){
       var
        match$1 = start_over(rem_list, 2),
        c$1 = match$1[2],
        b$0 = match$1[1];
       return [0, a, b$0, c$1];
      }
      var match$0 = match[2], b = match[1];
      if(match$0){var c = match$0[1]; return [0, a, b, c];}
      var c$0 = start_over(rem_list, 1)[1];
      return [0, a, b, c$0];
     }
     rem_list = rem_list$0;
    }
   }
   function main_board_of_sexp(x_047){
    var a = Core[390], b = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_046,
             [0,
              cst_squares,
              1,
              Core[390],
              [0, cst_special_patch_locs, 1, function(c){return b(a, c);}, 0]],
             function(param){
              return param !== cst_special_patch_locs$0
                      ? param !== cst_squares$1 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var special_patch_locs = param[2][1], squares = param[1];
              return [0, squares, special_patch_locs];
             },
             x_047);
   }
   function sexp_of_main_board(param){
    var
     special_patch_locs_051 = param[2],
     squares_049 = param[1],
     arg_052 = Core[472].call(null, Core[389], special_patch_locs_051),
     bnds_048 = [0, [1, [0, ca, [0, arg_052, 0]]], 0],
     arg_050 = caml_call1(Core[389], squares_049),
     bnds_048$0 = [0, [1, [0, cb, [0, arg_050, 0]]], bnds_048];
    return [1, bnds_048$0];
   }
   function compare_main_board(a_053, b_054){
    if(a_053 === b_054) return 0;
    var n = Core[382].call(null, a_053[1], b_054[1]);
    return 0 === n
            ? Core
               [466].call
              (null,
               function(a_055, b_056){
                return Core[382].call(null, a_055, b_056);
               },
               a_053[2],
               b_054[2])
            : n;
   }
   function equal_main_board(a_057, b_058){
    if(a_057 === b_058) return 1;
    var a = Core[384].call(null, a_057[1], b_058[1]);
    return a
            ? Core
               [468].call
              (null,
               function(a_059, b_060){
                return Core[384].call(null, a_059, b_060);
               },
               a_057[2],
               b_058[2])
            : a;
   }
   function quilt_board_of_sexp(x_068){
    function a(sexp_067){
     if(0 !== sexp_067[0]){
      var a = sexp_067[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         arg1_064 = b[1],
         arg0_063 = a[1],
         res0_065 = Core[390].call(null, arg0_063),
         res1_066 = Core[390].call(null, arg1_064);
        return [0, res0_065, res1_066];
       }
      }
     }
     return Sexplib0_Sexp_conv_error[4].call
             (null, error_source_062, 2, sexp_067);
    }
    var b = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_062,
             [0,
              cst_squares$0,
              1,
              Core[390],
              [0, cst_filled_squares, 1, function(c){return b(a, c);}, 0]],
             function(param){
              return param !== cst_filled_squares$0
                      ? param !== cst_squares$1 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var filled_squares = param[2][1], squares = param[1];
              return [0, squares, filled_squares];
             },
             x_068);
   }
   function sexp_of_quilt_board(param){
    var
     filled_squares_072 = param[2],
     squares_070 = param[1],
     arg_073 =
       Core[472].call
        (null,
         function(param){
          var
           arg1_075 = param[2],
           arg0_074 = param[1],
           res0_076 = caml_call1(Core[389], arg0_074),
           res1_077 = caml_call1(Core[389], arg1_075);
          return [1, [0, res0_076, [0, res1_077, 0]]];
         },
         filled_squares_072),
     bnds_069 = [0, [1, [0, cc, [0, arg_073, 0]]], 0],
     arg_071 = caml_call1(Core[389], squares_070),
     bnds_069$0 = [0, [1, [0, cd, [0, arg_071, 0]]], bnds_069];
    return [1, bnds_069$0];
   }
   function compare_quilt_board(a_078, b_079){
    if(a_078 === b_079) return 0;
    var n = Core[382].call(null, a_078[1], b_079[1]);
    return 0 === n
            ? Core
               [466].call
              (null,
               function(a_080, b_081){
                var
                 t_083 = a_080[2],
                 t_082 = a_080[1],
                 t_085 = b_081[2],
                 t_084 = b_081[1],
                 n = Core[382].call(null, t_082, t_084);
                return 0 === n ? Core[382].call(null, t_083, t_085) : n;
               },
               a_078[2],
               b_079[2])
            : n;
   }
   function equal_quilt_board(a_086, b_087){
    if(a_086 === b_087) return 1;
    var a = Core[384].call(null, a_086[1], b_087[1]);
    return a
            ? Core
               [468].call
              (null,
               function(a_088, b_089){
                var
                 t_091 = a_088[2],
                 t_090 = a_088[1],
                 t_093 = b_089[2],
                 t_092 = b_089[1],
                 a = Core[384].call(null, t_090, t_092);
                return a ? Core[384].call(null, t_091, t_093) : a;
               },
               a_086[2],
               b_087[2])
            : a;
   }
   function t_of_sexp$1(sexp_098){
    a:
    {
     if(0 === sexp_098[0]){
      var a = sexp_098[1];
      b:
      if(a !== cst_MainBoard){
       if(a !== cst_QuiltBoard){
        if(a === cst_mainBoard) break b;
        if(a !== cst_quiltBoard) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_096, sexp_098);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_096, sexp_098);
     }
     var match = sexp_098[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_096, sexp_098);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_096, sexp_098);
     var tag_099 = match$0[1];
     b:
     if(tag_099 !== cst_MainBoard){
      if(tag_099 !== cst_QuiltBoard){
       if(tag_099 === cst_mainBoard) break b;
       if(tag_099 !== cst_quiltBoard) break a;
      }
      var sexp_args_105 = match[2];
      if(sexp_args_105 && ! sexp_args_105[2]){
       var
        arg0_106 = sexp_args_105[1],
        res0_107 = quilt_board_of_sexp(arg0_106);
       return [1, res0_107];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_096, tag_099, sexp_098);
     }
     var sexp_args_100 = match[2];
     if(sexp_args_100 && ! sexp_args_100[2]){
      var
       arg0_101 = sexp_args_100[1],
       res0_102 = main_board_of_sexp(arg0_101);
      return [0, res0_102];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_096, tag_099, sexp_098);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_096, sexp_098);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var arg0_108 = param[1], res0_109 = sexp_of_main_board(arg0_108);
     return [1, [0, ce, [0, res0_109, 0]]];
    }
    var arg0_110 = param[1], res0_111 = sexp_of_quilt_board(arg0_110);
    return [1, [0, cf, [0, res0_111, 0]]];
   }
   function compare$1(a_112, b_113){
    if(a_112 === b_113) return 0;
    if(0 === a_112[0]){
     var a_114 = a_112[1];
     if(0 !== b_113[0]) return -1;
     var b_115 = b_113[1];
     return compare_main_board(a_114, b_115);
    }
    var a_116 = a_112[1];
    if(0 === b_113[0]) return 1;
    var b_117 = b_113[1];
    return compare_quilt_board(a_116, b_117);
   }
   function equal$1(a_118, b_119){
    if(a_118 === b_119) return 1;
    if(0 === a_118[0]){
     var a_120 = a_118[1];
     if(0 !== b_119[0]) return 0;
     var b_121 = b_119[1];
     return equal_main_board(a_120, b_121);
    }
    var a_122 = a_118[1];
    if(0 === b_119[0]) return 0;
    var b_123 = b_119[1];
    return equal_quilt_board(a_122, b_123);
   }
   var
    Out_of_bounds =
      [248, "Patchwork.Game_board.Out_of_bounds", caml_fresh_oo_id(0)],
    Patch_does_not_fit_there =
      [248,
       "Patchwork.Game_board.Patch_does_not_fit_there",
       caml_fresh_oo_id(0)],
    cg = [0, -1, -1],
    ch = [0, -1, -1],
    cst_D = cst_D$0,
    cst_U = cst_U$0,
    cst_L = cst_L$0,
    cst_R = cst_R$0,
    cst_SD = cst_SD$0,
    cst_SU = cst_SU$0,
    cst_SL = cst_SL$0,
    cst_SR = cst_SR$0,
    cst_unassigned_cache = cst_unassigned_cache$0,
    ci = [0, cst_unassigned_cache$0];
   function place_patch_on_quilt_board(board, patch, row$0, col$0){
    var patchDim$0 = get_patch_dim(patch);
    a:
    {
     b:
     {
      var patchDim = patchDim$0, row = row$0, col = col$0;
      for(;;){
       if(! patchDim) break;
       var
        tl$0 = patchDim[2],
        hd = patchDim[1],
        dir = hd[2],
        acc$4 = hd[1],
        filled_squares$0 = board[2],
        sr = row,
        sc = col,
        acc = acc$4;
       for(;;){
        c:
        {
         if(caml_call2(Core[92], acc, 1)){var match$0 = [0, sr, sc]; break c;}
         var filled_squares = filled_squares$0;
         for(;;){
          if(! filled_squares) break;
          var
           tl = filled_squares[2],
           match = filled_squares[1],
           c = match[2],
           r = match[1];
          if(caml_call2(Core[90], r, sr)){
           if(caml_call2(Core[90], c, sc))
            throw caml_maybe_attach_backtrace(Patch_does_not_fit_there, 0);
           filled_squares = tl;
          }
          else
           filled_squares = tl;
         }
         if(dir === cst_D$0){
          if(! caml_call2(Core[92], sr, board[1]))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$3 = acc - 1 | 0, sr$1 = sr + 1 | 0;
          sr = sr$1;
          acc = acc$3;
          continue;
         }
         if(dir === cst_L$0){
          if(! caml_call2(Core[91], sc, 1))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$2 = acc - 1 | 0, sc$1 = sc - 1 | 0;
          sc = sc$1;
          acc = acc$2;
          continue;
         }
         if(dir === cst_R$0){
          if(! caml_call2(Core[92], sc, board[1]))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$1 = acc - 1 | 0, sc$0 = sc + 1 | 0;
          sc = sc$0;
          acc = acc$1;
          continue;
         }
         if(dir !== cst_SD$0)
          if(dir !== cst_SL$0)
           if(dir !== cst_SR$0)
            if(dir !== cst_SU$0){
             if(dir === cst_U$0){
              if(! caml_call2(Core[91], sr, 1))
               throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
              var acc$0 = acc - 1 | 0, sr$0 = sr - 1 | 0;
              sr = sr$0;
              acc = acc$0;
              continue;
             }
             var match$0 = cg;
            }
            else
             var match$0 = [0, sr - 1 | 0, sc];
           else
            var match$0 = [0, sr, sc + 1 | 0];
          else
           var match$0 = [0, sr, sc - 1 | 0];
         else
          var match$0 = [0, sr + 1 | 0, sc];
        }
        var upd_col = match$0[2], upd_row = match$0[1];
        if(! caml_call2(Core[90], upd_row, -1)){
         patchDim = tl$0;
         row = upd_row;
         col = upd_col;
         break;
        }
        if(caml_call2(Core[90], upd_col, -1)) break b;
        patchDim = tl$0;
        row = upd_row;
        col = upd_col;
        break;
       }
      }
      var a = 1;
      break a;
     }
     var a = 0;
    }
    if(! a) throw caml_maybe_attach_backtrace(Patch_does_not_fit_there, 0);
    var
     nf = board[2],
     patch$0 = patchDim$0,
     filled$1 = nf,
     r$3 = row$0,
     c$3 = col$0,
     acc$10 = 1;
    for(;;){
     if(! patch$0){
      var upd_quilt_board = [0, board[1], filled$1];
      return upd_quilt_board;
     }
     var
      patch$1 = patch$0[2],
      hd$1 = patch$0[1],
      dir$0 = hd$1[2],
      acc$11 = hd$1[1];
     if(caml_call2(Core[91], acc$10, 1))
      if(caml_call2(Core_String[145], dir$0, cst_D))
       var r$0 = r$3 + 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_U))
       var r$0 = r$3 - 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_L))
       var r$0 = r$3, c$0 = c$3 - 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_R))
       var r$0 = r$3, c$0 = c$3 + 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SD))
       var r$0 = r$3 + 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SU))
       var r$0 = r$3 - 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SL))
       var r$0 = r$3, c$0 = c$3 - 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SR))
       var r$0 = r$3, c$0 = c$3 + 1 | 0, filled = filled$1, acc$5 = acc$11;
      else
       var r$0 = r$3, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
     else
      var r$0 = r$3, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
     for(;;){
      a:
      {
       if(caml_call2(Core[91], acc$5, 0)){
        if
         (!
          caml_call2(Core[91], r$0, board[1])
          &&
           !
           caml_call2(Core[91], c$0, board[1])
           && ! caml_call2(Core[92], r$0, 1) && ! caml_call2(Core[92], c$0, 1)){
         var filled$0 = [0, [0, r$0, c$0], filled];
         if(dir$0 === cst_D$0){
          var acc$9 = acc$5 - 1 | 0, r$2 = r$0 + 1 | 0;
          r$0 = r$2;
          filled = filled$0;
          acc$5 = acc$9;
          continue;
         }
         if(dir$0 === cst_L$0){
          var acc$8 = acc$5 - 1 | 0, c$2 = c$0 - 1 | 0;
          c$0 = c$2;
          filled = filled$0;
          acc$5 = acc$8;
          continue;
         }
         if(dir$0 === cst_R$0){
          var acc$7 = acc$5 - 1 | 0, c$1 = c$0 + 1 | 0;
          c$0 = c$1;
          filled = filled$0;
          acc$5 = acc$7;
          continue;
         }
         if(dir$0 !== cst_U$0){var new_filled = filled$0; break a;}
         var acc$6 = acc$5 - 1 | 0, r$1 = r$0 - 1 | 0;
         r$0 = r$1;
         filled = filled$0;
         acc$5 = acc$6;
         continue;
        }
        throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
       }
       var new_filled = filled;
      }
      if(new_filled)
       var hd$0 = new_filled[1], head = hd$0;
      else
       var head = ch;
      var nr = head[1], nc = head[2], acc$12 = acc$10 + 1 | 0;
      patch$0 = patch$1;
      filled$1 = new_filled;
      r$3 = nr;
      c$3 = nc;
      acc$10 = acc$12;
      break;
     }
    }
   }
   function t_of_sexp$2(x_126){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_125,
             [0, cst_unassigned_cache, 1, Core[390], 0],
             function(param){
              return param !== cst_unassigned_cache$0 ? -1 : 0;
             },
             0,
             function(param){
              var unassigned_cache = param[1];
              return [0, unassigned_cache];
             },
             x_126);
   }
   function sexp_of_t$2(param){
    var
     unassigned_cache_128 = param[1],
     arg_129 = caml_call1(Core[389], unassigned_cache_128),
     bnds_127 = [0, [1, [0, ci, [0, arg_129, 0]]], 0];
    return [1, bnds_127];
   }
   function compare$2(a_130, b_131){
    return a_130 === b_131 ? 0 : Core[382].call(null, a_130[1], b_131[1]);
   }
   function equal$2(a_132, b_133){
    return a_132 === b_133 ? 1 : Core[384].call(null, a_132[1], b_133[1]);
   }
   var
    Insufficient_cache =
      [248, "Patchwork.Button.Insufficient_cache", caml_fresh_oo_id(0)],
    Insufficient_funds =
      [248, "Patchwork.Button.Insufficient_funds", caml_fresh_oo_id(0)],
    cst_color = cst_color$0,
    cst_owned_by = cst_owned_by$0,
    cst_position = cst_position$0,
    cj = [0, cst_color$0],
    ck = [0, cst_owned_by$0],
    cl = [0, cst_position$0],
    cst_pos = cst_pos$0,
    cm = [0, cst_pos$0],
    cn = [0, cst_TimeToken],
    co = [0, cst_NeutralToken],
    cst_buttons = cst_buttons$0,
    cst_quilt_board2 = cst_quilt_board2$0,
    cst_quilt_board1 = cst_quilt_board1$0,
    cst_main_board = cst_main_board$0,
    cst_patches_remaining = cst_patches_remaining$1,
    cst_patch_pieces = cst_patch_pieces$0,
    cst_neutral_piece = cst_neutral_piece$0,
    cst_time_piece2 = cst_time_piece2$0,
    cst_time_piece1 = cst_time_piece1$0,
    cst_player2 = cst_player2$0,
    cst_player1 = cst_player1$0,
    cp = [0, cst_buttons$0],
    cq = [0, cst_quilt_board2$0],
    cr = [0, cst_quilt_board1$0],
    cs = [0, cst_main_board$0],
    ct = [0, cst_patches_remaining$1],
    cu = [0, cst_patch_pieces$0],
    cv = [0, cst_neutral_piece$0],
    cw = [0, cst_time_piece2$0],
    cx = [0, cst_time_piece1$0],
    cy = [0, cst_player2$0],
    cz = [0, cst_player1$0];
   function time_token_of_sexp(x_136){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_135,
             [0,
              cst_position,
              1,
              Core[390],
              [0, cst_owned_by, 1, t_of_sexp, [0, cst_color, 1, Core[559], 0]]],
             function(param){
              return param !== cst_color$0
                      ? param
                        !== cst_owned_by$0
                        ? param !== cst_position$0 ? -1 : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               color = a[2][1],
               owned_by = a[1],
               position = param[1];
              return [0, position, owned_by, color];
             },
             x_136);
   }
   function sexp_of_time_token(param){
    var
     color_142 = param[3],
     owned_by_140 = param[2],
     position_138 = param[1],
     arg_143 = caml_call1(Core[558], color_142),
     bnds_137 = [0, [1, [0, cj, [0, arg_143, 0]]], 0],
     arg_141 = sexp_of_t(owned_by_140),
     bnds_137$0 = [0, [1, [0, ck, [0, arg_141, 0]]], bnds_137],
     arg_139 = caml_call1(Core[389], position_138),
     bnds_137$1 = [0, [1, [0, cl, [0, arg_139, 0]]], bnds_137$0];
    return [1, bnds_137$1];
   }
   function compare_time_token(a_144, b_145){
    if(a_144 === b_145) return 0;
    var n = Core[382].call(null, a_144[1], b_145[1]);
    if(0 !== n) return n;
    var n$0 = compare(a_144[2], b_145[2]);
    return 0 === n$0 ? Core[551].call(null, a_144[3], b_145[3]) : n$0;
   }
   function equal_time_token(a_146, b_147){
    if(a_146 === b_147) return 1;
    var a = Core[384].call(null, a_146[1], b_147[1]);
    if(a){
     var b = equal(a_146[2], b_147[2]);
     if(b) return Core[553].call(null, a_146[3], b_147[3]);
     var c = b;
    }
    else
     var c = a;
    return c;
   }
   function neutral_token_of_sexp(x_150){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_149,
             [0, cst_pos, 1, Core[390], 0],
             function(param){return param !== cst_pos$0 ? -1 : 0;},
             0,
             function(param){var pos = param[1]; return [0, pos];},
             x_150);
   }
   function sexp_of_neutral_token(param){
    var
     pos_152 = param[1],
     arg_153 = caml_call1(Core[389], pos_152),
     bnds_151 = [0, [1, [0, cm, [0, arg_153, 0]]], 0];
    return [1, bnds_151];
   }
   function compare_neutral_token(a_154, b_155){
    return a_154 === b_155 ? 0 : Core[382].call(null, a_154[1], b_155[1]);
   }
   function equal_neutral_token(a_156, b_157){
    return a_156 === b_157 ? 1 : Core[384].call(null, a_156[1], b_157[1]);
   }
   function t_of_sexp$3(sexp_162){
    a:
    {
     if(0 === sexp_162[0]){
      var a = sexp_162[1];
      b:
      if(a !== cst_NeutralToken){
       if(a !== cst_TimeToken){
        if(a === cst_neutralToken) break b;
        if(a !== cst_timeToken) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_160, sexp_162);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_160, sexp_162);
     }
     var match = sexp_162[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_160, sexp_162);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_160, sexp_162);
     var tag_163 = match$0[1];
     b:
     if(tag_163 !== cst_NeutralToken){
      if(tag_163 !== cst_TimeToken){
       if(tag_163 === cst_neutralToken) break b;
       if(tag_163 !== cst_timeToken) break a;
      }
      var sexp_args_164 = match[2];
      if(sexp_args_164 && ! sexp_args_164[2]){
       var
        arg0_165 = sexp_args_164[1],
        res0_166 = time_token_of_sexp(arg0_165);
       return [0, res0_166];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_160, tag_163, sexp_162);
     }
     var sexp_args_169 = match[2];
     if(sexp_args_169 && ! sexp_args_169[2]){
      var
       arg0_170 = sexp_args_169[1],
       res0_171 = neutral_token_of_sexp(arg0_170);
      return [1, res0_171];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_160, tag_163, sexp_162);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_160, sexp_162);
   }
   function sexp_of_t$3(param){
    if(0 === param[0]){
     var arg0_172 = param[1], res0_173 = sexp_of_time_token(arg0_172);
     return [1, [0, cn, [0, res0_173, 0]]];
    }
    var arg0_174 = param[1], res0_175 = sexp_of_neutral_token(arg0_174);
    return [1, [0, co, [0, res0_175, 0]]];
   }
   function compare$3(a_176, b_177){
    if(a_176 === b_177) return 0;
    if(0 === a_176[0]){
     var a_178 = a_176[1];
     if(0 !== b_177[0]) return -1;
     var b_179 = b_177[1];
     return compare_time_token(a_178, b_179);
    }
    var a_180 = a_176[1];
    if(0 === b_177[0]) return 1;
    var b_181 = b_177[1];
    return compare_neutral_token(a_180, b_181);
   }
   function equal$3(a_182, b_183){
    if(a_182 === b_183) return 1;
    if(0 === a_182[0]){
     var a_184 = a_182[1];
     if(0 !== b_183[0]) return 0;
     var b_185 = b_183[1];
     return equal_time_token(a_184, b_185);
    }
    var a_186 = a_182[1];
    if(0 === b_183[0]) return 0;
    var b_187 = b_183[1];
    return equal_neutral_token(a_186, b_187);
   }
   function t_of_sexp$4(x_190){
    var a = Core[390], b = Core[473], c = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_189,
             [0,
              cst_player1,
              1,
              t_of_sexp,
              [0,
               cst_player2,
               1,
               t_of_sexp,
               [0,
                cst_time_piece1,
                1,
                time_token_of_sexp,
                [0,
                 cst_time_piece2,
                 1,
                 time_token_of_sexp,
                 [0,
                  cst_neutral_piece,
                  1,
                  neutral_token_of_sexp,
                  [0,
                   cst_patch_pieces,
                   1,
                   function(a){return c(t_of_sexp$0, a);},
                   [0,
                    cst_patches_remaining,
                    1,
                    function(c){return b(a, c);},
                    [0,
                     cst_main_board,
                     1,
                     main_board_of_sexp,
                     [0,
                      cst_quilt_board1,
                      1,
                      quilt_board_of_sexp,
                      [0,
                       cst_quilt_board2,
                       1,
                       quilt_board_of_sexp,
                       [0, cst_buttons, 1, t_of_sexp$2, 0]]]]]]]]]]],
             function(param){
              var switch$ = caml_string_compare(param, cst_player1$0);
              if(0 <= switch$){
               if(0 >= switch$) return 0;
               if(param === cst_player2$0) return 1;
               if(param === cst_quilt_board1$0) return 8;
               if(param === cst_quilt_board2$0) return 9;
               if(param === cst_time_piece1$0) return 2;
               if(param === cst_time_piece2$0) return 3;
              }
              else{
               if(param === cst_buttons$0) return 10;
               if(param === cst_main_board$0) return 7;
               if(param === cst_neutral_piece$0) return 4;
               if(param === cst_patch_pieces$0) return 5;
               if(param === cst_patches_remaining$1) return 6;
              }
              return -1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               d = c[2],
               e = d[2],
               f = e[2],
               g = f[2],
               h = g[2],
               i = h[2],
               buttons = i[2][1],
               quilt_board2 = i[1],
               quilt_board1 = h[1],
               main_board = g[1],
               patches_remaining = f[1],
               patch_pieces = e[1],
               neutral_piece = d[1],
               time_piece2 = c[1],
               time_piece1 = b[1],
               player2 = a[1],
               player1 = param[1];
              return [0,
                      player1,
                      player2,
                      time_piece1,
                      time_piece2,
                      neutral_piece,
                      patch_pieces,
                      patches_remaining,
                      main_board,
                      quilt_board1,
                      quilt_board2,
                      buttons];
             },
             x_190);
   }
   function sexp_of_t$4(param){
    var
     buttons_212 = param[11],
     quilt_board2_210 = param[10],
     quilt_board1_208 = param[9],
     main_board_206 = param[8],
     patches_remaining_204 = param[7],
     patch_pieces_202 = param[6],
     neutral_piece_200 = param[5],
     time_piece2_198 = param[4],
     time_piece1_196 = param[3],
     player2_194 = param[2],
     player1_192 = param[1],
     arg_213 = sexp_of_t$2(buttons_212),
     bnds_191 = [0, [1, [0, cp, [0, arg_213, 0]]], 0],
     arg_211 = sexp_of_quilt_board(quilt_board2_210),
     bnds_191$0 = [0, [1, [0, cq, [0, arg_211, 0]]], bnds_191],
     arg_209 = sexp_of_quilt_board(quilt_board1_208),
     bnds_191$1 = [0, [1, [0, cr, [0, arg_209, 0]]], bnds_191$0],
     arg_207 = sexp_of_main_board(main_board_206),
     bnds_191$2 = [0, [1, [0, cs, [0, arg_207, 0]]], bnds_191$1],
     arg_205 = Core[472].call(null, Core[389], patches_remaining_204),
     bnds_191$3 = [0, [1, [0, ct, [0, arg_205, 0]]], bnds_191$2],
     arg_203 = Core[472].call(null, sexp_of_t$0, patch_pieces_202),
     bnds_191$4 = [0, [1, [0, cu, [0, arg_203, 0]]], bnds_191$3],
     arg_201 = sexp_of_neutral_token(neutral_piece_200),
     bnds_191$5 = [0, [1, [0, cv, [0, arg_201, 0]]], bnds_191$4],
     arg_199 = sexp_of_time_token(time_piece2_198),
     bnds_191$6 = [0, [1, [0, cw, [0, arg_199, 0]]], bnds_191$5],
     arg_197 = sexp_of_time_token(time_piece1_196),
     bnds_191$7 = [0, [1, [0, cx, [0, arg_197, 0]]], bnds_191$6],
     arg_195 = sexp_of_t(player2_194),
     bnds_191$8 = [0, [1, [0, cy, [0, arg_195, 0]]], bnds_191$7],
     arg_193 = sexp_of_t(player1_192),
     bnds_191$9 = [0, [1, [0, cz, [0, arg_193, 0]]], bnds_191$8];
    return [1, bnds_191$9];
   }
   function compare$4(a_214, b_215){
    if(a_214 === b_215) return 0;
    var n = compare(a_214[1], b_215[1]);
    if(0 !== n) return n;
    var n$0 = compare(a_214[2], b_215[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare_time_token(a_214[3], b_215[3]);
    if(0 !== n$1) return n$1;
    var n$2 = compare_time_token(a_214[4], b_215[4]);
    if(0 !== n$2) return n$2;
    var n$3 = compare_neutral_token(a_214[5], b_215[5]);
    if(0 !== n$3) return n$3;
    var
     n$4 =
       Core[466].call
        (null,
         function(a_216, b_217){return compare$0(a_216, b_217);},
         a_214[6],
         b_215[6]);
    if(0 !== n$4) return n$4;
    var
     n$5 =
       Core[466].call
        (null,
         function(a_218, b_219){return Core[382].call(null, a_218, b_219);},
         a_214[7],
         b_215[7]);
    if(0 !== n$5) return n$5;
    var n$6 = compare_main_board(a_214[8], b_215[8]);
    if(0 !== n$6) return n$6;
    var n$7 = compare_quilt_board(a_214[9], b_215[9]);
    if(0 !== n$7) return n$7;
    var n$8 = compare_quilt_board(a_214[10], b_215[10]);
    return 0 === n$8 ? compare$2(a_214[11], b_215[11]) : n$8;
   }
   function equal$4(a_220, b_221){
    if(a_220 === b_221) return 1;
    var b = equal(a_220[1], b_221[1]);
    if(b){
     var c = equal(a_220[2], b_221[2]);
     if(c){
      var d = equal_time_token(a_220[3], b_221[3]);
      if(d){
       var e = equal_time_token(a_220[4], b_221[4]);
       if(e){
        var f = equal_neutral_token(a_220[5], b_221[5]);
        if(f){
         var
          g =
            Core[468].call
             (null,
              function(a_222, b_223){return equal$0(a_222, b_223);},
              a_220[6],
              b_221[6]);
         if(g){
          var
           h =
             Core[468].call
              (null,
               function(a_224, b_225){
                return Core[384].call(null, a_224, b_225);
               },
               a_220[7],
               b_221[7]);
          if(h){
           var i = equal_main_board(a_220[8], b_221[8]);
           if(i){
            var j = equal_quilt_board(a_220[9], b_221[9]);
            if(j){
             var k = equal_quilt_board(a_220[10], b_221[10]);
             if(k) return equal$2(a_220[11], b_221[11]);
             var a = k;
            }
            else
             var a = j;
           }
           else
            var a = i;
          }
          else
           var a = h;
         }
         else
          var a = g;
        }
        else
         var a = f;
       }
       else
        var a = e;
      }
      else
       var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function setup_game(p1_name, p2_name, color1, color2){
    var
     player_1 = [0, 1, p1_name, 5, 0],
     player_2 = [0, 2, p2_name, 5, 0],
     time_piece_1 = [0, 1, player_1, color1],
     time_piece_2 = [0, 1, player_2, color2],
     shapes$0 = shapes,
     patches = 0,
     acc = 1;
    for(;;){
     if(! shapes$0){var param = patches; break;}
     var
      shapes$1 = shapes$0[2],
      hd = shapes$0[1],
      patch_attr = get_values(hd);
     switch(hd){
       case 2:
       case 16:
       case 24:
       case 25:
        var patch_inc = 3; break;
       case 0:
       case 14:
       case 15:
       case 20:
       case 21:
       case 22:
       case 29:
       case 30:
        var patch_inc = 2; break;
       case 3:
       case 5:
       case 6:
       case 11:
       case 13:
       case 18:
       case 23:
       case 27:
       case 28:
       case 32:
        var patch_inc = 1; break;
       default: var patch_inc = 0;
     }
     var
      patch = [0, hd, patch_attr[1], acc, patch_attr[2], patch_inc, 0],
      pl_updated = [0, patch, patches],
      acc$0 = acc + 1 | 0;
     shapes$0 = shapes$1;
     patches = pl_updated;
     acc = acc$0;
    }
    for(;;){
     if(param){
      var a = param[1];
      if(9 !== a[1]){var tl = param[2]; param = tl; continue;}
      var pos_around_board = a[3], neut_pos = pos_around_board;
     }
     else
      var neut_pos = 1;
     var
      neutral = [0, neut_pos],
      b = [0, 152],
      game_pieces =
        [0,
         player_1,
         player_2,
         time_piece_1,
         time_piece_2,
         neutral,
         patches,
         remaining,
         main_board,
         quilt_board_1,
         quilt_board_2,
         b];
     return game_pieces;
    }
   }
   var
    Game_pieces =
      [0, t_of_sexp$4, sexp_of_t$4, compare$4, equal$4, setup_game],
    cst_patches_remaining$0 = cst_patches_remaining$1,
    cst_patches = cst_patches$0,
    cst_neut = cst_neut$0,
    cst_tk2 = cst_tk2$0,
    cst_tk1 = cst_tk1$0,
    cst_turn = cst_turn$0,
    cst_bc = cst_bc$0,
    cst_p2qb = cst_p2qb$0,
    cst_p1qb = cst_p1qb$0,
    cst_mb = cst_mb$0,
    cA = [0, cst_patches_remaining$1],
    cB = [0, cst_patches$0],
    cC = [0, cst_neut$0],
    cD = [0, cst_tk2$0],
    cE = [0, cst_tk1$0],
    cF = [0, cst_turn$0],
    cG = [0, cst_bc$0],
    cH = [0, cst_p2qb$0],
    cI = [0, cst_p1qb$0],
    cJ = [0, cst_mb$0];
   function t_of_sexp$5(x_228){
    var a = Core[390], b = Core[473], c = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_227,
             [0,
              cst_mb,
              1,
              main_board_of_sexp,
              [0,
               cst_p1qb,
               1,
               quilt_board_of_sexp,
               [0,
                cst_p2qb,
                1,
                quilt_board_of_sexp,
                [0,
                 cst_bc,
                 1,
                 t_of_sexp$2,
                 [0,
                  cst_turn,
                  1,
                  t_of_sexp,
                  [0,
                   cst_tk1,
                   1,
                   time_token_of_sexp,
                   [0,
                    cst_tk2,
                    1,
                    time_token_of_sexp,
                    [0,
                     cst_neut,
                     1,
                     neutral_token_of_sexp,
                     [0,
                      cst_patches,
                      1,
                      function(a){return c(t_of_sexp$0, a);},
                      [0,
                       cst_patches_remaining$0,
                       1,
                       function(c){return b(a, c);},
                       0]]]]]]]]]],
             function(param){
              var switch$ = caml_string_compare(param, cst_patches$0);
              if(0 <= switch$){
               if(0 >= switch$) return 8;
               if(param === cst_patches_remaining$1) return 9;
               if(param === cst_tk1$0) return 5;
               if(param === cst_tk2$0) return 6;
               if(param === cst_turn$0) return 4;
              }
              else{
               if(param === cst_bc$0) return 3;
               if(param === cst_mb$0) return 0;
               if(param === cst_neut$0) return 7;
               if(param === cst_p1qb$0) return 1;
               if(param === cst_p2qb$0) return 2;
              }
              return -1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               d = c[2],
               e = d[2],
               f = e[2],
               g = f[2],
               h = g[2],
               patches_remaining = h[2][1],
               patches = h[1],
               neut = g[1],
               tk2 = f[1],
               tk1 = e[1],
               turn = d[1],
               bc = c[1],
               p2qb = b[1],
               p1qb = a[1],
               mb = param[1];
              return [0,
                      mb,
                      p1qb,
                      p2qb,
                      bc,
                      turn,
                      tk1,
                      tk2,
                      neut,
                      patches,
                      patches_remaining];
             },
             x_228);
   }
   function sexp_of_t$5(param){
    var
     neut_244 = param[8],
     tk2_242 = param[7],
     tk1_240 = param[6],
     turn_238 = param[5],
     bc_236 = param[4],
     p2qb_234 = param[3],
     p1qb_232 = param[2],
     mb_230 = param[1],
     patches_246 = param[9],
     patches_remaining_248 = param[10],
     arg_249 = Core[472].call(null, Core[389], patches_remaining_248),
     bnds_229 = [0, [1, [0, cA, [0, arg_249, 0]]], 0],
     arg_247 = Core[472].call(null, sexp_of_t$0, patches_246),
     bnds_229$0 = [0, [1, [0, cB, [0, arg_247, 0]]], bnds_229],
     arg_245 = sexp_of_neutral_token(neut_244),
     bnds_229$1 = [0, [1, [0, cC, [0, arg_245, 0]]], bnds_229$0],
     arg_243 = sexp_of_time_token(tk2_242),
     bnds_229$2 = [0, [1, [0, cD, [0, arg_243, 0]]], bnds_229$1],
     arg_241 = sexp_of_time_token(tk1_240),
     bnds_229$3 = [0, [1, [0, cE, [0, arg_241, 0]]], bnds_229$2],
     arg_239 = sexp_of_t(turn_238),
     bnds_229$4 = [0, [1, [0, cF, [0, arg_239, 0]]], bnds_229$3],
     arg_237 = sexp_of_t$2(bc_236),
     bnds_229$5 = [0, [1, [0, cG, [0, arg_237, 0]]], bnds_229$4],
     arg_235 = sexp_of_quilt_board(p2qb_234),
     bnds_229$6 = [0, [1, [0, cH, [0, arg_235, 0]]], bnds_229$5],
     arg_233 = sexp_of_quilt_board(p1qb_232),
     bnds_229$7 = [0, [1, [0, cI, [0, arg_233, 0]]], bnds_229$6],
     arg_231 = sexp_of_main_board(mb_230),
     bnds_229$8 = [0, [1, [0, cJ, [0, arg_231, 0]]], bnds_229$7];
    return [1, bnds_229$8];
   }
   function compare$5(a_250, b_251){
    if(a_250 === b_251) return 0;
    var n = compare_main_board(a_250[1], b_251[1]);
    if(0 !== n) return n;
    var n$0 = compare_quilt_board(a_250[2], b_251[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare_quilt_board(a_250[3], b_251[3]);
    if(0 !== n$1) return n$1;
    var n$2 = compare$2(a_250[4], b_251[4]);
    if(0 !== n$2) return n$2;
    var n$3 = compare(a_250[5], b_251[5]);
    if(0 !== n$3) return n$3;
    var n$4 = compare_time_token(a_250[6], b_251[6]);
    if(0 !== n$4) return n$4;
    var n$5 = compare_time_token(a_250[7], b_251[7]);
    if(0 !== n$5) return n$5;
    var n$6 = compare_neutral_token(a_250[8], b_251[8]);
    if(0 !== n$6) return n$6;
    var
     n$7 =
       Core[466].call
        (null,
         function(a_252, b_253){return compare$0(a_252, b_253);},
         a_250[9],
         b_251[9]);
    return 0 === n$7
            ? Core
               [466].call
              (null,
               function(a_254, b_255){
                return Core[382].call(null, a_254, b_255);
               },
               a_250[10],
               b_251[10])
            : n$7;
   }
   function equal$5(a_256, b_257){
    if(a_256 === b_257) return 1;
    var b = equal_main_board(a_256[1], b_257[1]);
    if(b){
     var c = equal_quilt_board(a_256[2], b_257[2]);
     if(c){
      var d = equal_quilt_board(a_256[3], b_257[3]);
      if(d){
       var e = equal$2(a_256[4], b_257[4]);
       if(e){
        var f = equal(a_256[5], b_257[5]);
        if(f){
         var g = equal_time_token(a_256[6], b_257[6]);
         if(g){
          var h = equal_time_token(a_256[7], b_257[7]);
          if(h){
           var i = equal_neutral_token(a_256[8], b_257[8]);
           if(i){
            var
             j =
               Core[468].call
                (null,
                 function(a_258, b_259){return equal$0(a_258, b_259);},
                 a_256[9],
                 b_257[9]);
            if(j)
             return Core[468].call
                     (null,
                      function(a_260, b_261){
                       return Core[384].call(null, a_260, b_261);
                      },
                      a_256[10],
                      b_257[10]);
            var a = j;
           }
           else
            var a = i;
          }
          else
           var a = h;
         }
         else
          var a = g;
        }
        else
         var a = f;
       }
       else
        var a = e;
      }
      else
       var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function update(st, qb1, qb2, bcache, turn, tt1, tt2, neut, p, rem){return [0, st[1], qb1, qb2, bcache, turn, tt1, tt2, neut, p, rem];
   }
   var
    No_patches_left =
      [248, "Patchwork.Move.No_patches_left", caml_fresh_oo_id(0)],
    Patch_already_taken =
      [248, "Patchwork.Move.Patch_already_taken", caml_fresh_oo_id(0)],
    cst_Blue = "Blue",
    cst_Red = "Red",
    cst_AI = "AI";
   function pl_remove_at(i, pl){
    if(! pl) return 0;
    var h = pl[1], t = pl[2];
    if(caml_call2(Core[90], h[3], i)) return t;
    var t$0 = pl[2];
    return [0, h, pl_remove_at(i, t$0)];
   }
   function reml_remove_at(i, rem_list){
    if(! rem_list) return 0;
    var h = rem_list[1], t = rem_list[2];
    if(caml_call2(Core[90], h, i)) return t;
    var t$0 = rem_list[2];
    return [0, h, reml_remove_at(i, t$0)];
   }
   function choose_move(state, mv, patch_choice, r, c){
    var
     player_moving = state[5],
     player = player_moving[1],
     p1t = state[6],
     p2t = state[7],
     pqb = caml_call2(Core[90], player, 1) ? state[2] : state[3],
     patches = state[9],
     remaining_patches = state[10],
     neut = state[8];
    if(! mv){
     var
      p2t$0 = caml_call2(Core[90], player, 1) ? p2t : p1t,
      p1t$1 = caml_call2(Core[90], player, 1) ? p1t : p2t,
      b$0 = state[4],
      opp_pos = p2t$0[1],
      curr_pos = p1t$1[1],
      distance = Core[8].call(null, opp_pos - curr_pos | 0),
      n = distance + 1 | 0,
      p = p1t$1[2];
     if(caml_call2(Core[92], b$0[1], n))
      throw caml_maybe_attach_backtrace(Insufficient_cache, 0);
     p[3] = p[3] + n | 0;
     b$0[1] = b$0[1] - n | 0;
     var
      new_token = [0, opp_pos + 1 | 0, p1t$1[2], p1t$1[3]],
      next_turn$0 =
        caml_call2(Core[90], player, 1)
         ? caml_call2
            (Core[92], new_token[1], p2t[1])
           ? p1t[2]
           : caml_call2(Core[92], p2t[1], new_token[1]) ? p2t[2] : p1t[2]
         : caml_call2
            (Core[92], new_token[1], p1t[1])
           ? p2t[2]
           : caml_call2(Core[92], p1t[1], new_token[1]) ? p1t[2] : p2t[2];
     if(caml_call2(Core[90], player, 1)){
      var
       upd_st =
         update
          (state,
           state[2],
           state[3],
           state[4],
           next_turn$0,
           new_token,
           p2t,
           neut,
           state[9],
           state[10]);
      return upd_st;
     }
     var
      upd_st$0 =
        update
         (state,
          state[2],
          state[3],
          state[4],
          next_turn$0,
          p1t,
          new_token,
          neut,
          state[9],
          state[10]);
     return upd_st$0;
    }
    var pl = patches;
    for(;;){
     if(! pl) throw caml_maybe_attach_backtrace(No_patches_left, 0);
     var tl = pl[2], hd = pl[1];
     if(caml_call2(Core[90], hd[3], patch_choice)) break;
     pl = tl;
    }
    if(33 <= hd[1]) throw caml_maybe_attach_backtrace(Patch_already_taken, 0);
    var
     pps = pl_remove_at(patch_choice, patches),
     upd_rem_list = reml_remove_at(patch_choice, remaining_patches),
     qb = place_patch_on_quilt_board(pqb, hd[1], r, c),
     n$0 = hd[2],
     b = state[4];
    if(caml_call2(Core[92], player_moving[3], n$0))
     throw caml_maybe_attach_backtrace(Insufficient_funds, 0);
    player_moving[3] = player_moving[3] - n$0 | 0;
    b[1] = b[1] + n$0 | 0;
    var
     n$1 = hd[4],
     p1t$0 = caml_call2(Core[90], player, 1) ? p1t : p2t,
     new_token$0 = [0, p1t$0[1] + n$1 | 0, p1t$0[2], p1t$0[3]],
     next_turn =
       caml_call2(Core[90], player, 1)
        ? caml_call2
           (Core[92], new_token$0[1], p2t[1])
          ? p1t[2]
          : caml_call2(Core[92], p2t[1], new_token$0[1]) ? p2t[2] : p1t[2]
        : caml_call2
           (Core[92], new_token$0[1], p1t[1])
          ? p2t[2]
          : caml_call2(Core[92], p1t[1], new_token$0[1]) ? p1t[2] : p2t[2],
     n$2 = hd[3] + 1 | 0,
     updated_neut = [0, n$2],
     upd_state =
       caml_call2(Core[90], player, 1)
        ? update
          (state,
           qb,
           state[3],
           state[4],
           next_turn,
           new_token$0,
           p2t,
           updated_neut,
           pps,
           upd_rem_list)
        : update
          (state,
           state[2],
           qb,
           state[4],
           next_turn,
           p1t,
           new_token$0,
           updated_neut,
           pps,
           upd_rem_list);
    return upd_state;
   }
   function init(pname){
    var pieces = setup_game(pname, cst_AI, cst_Red, cst_Blue);
    return [0,
            pieces[8],
            pieces[9],
            pieces[10],
            pieces[11],
            pieces[1],
            pieces[3],
            pieces[4],
            pieces[5],
            pieces[6],
            pieces[7]];
   }
   Ppx_inline_test_lib[7].call(null, cst_patchwork);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Patchwork);
   var
    Patchwork =
      [0,
       Player,
       [0,
        sexp_of_patch_shape,
        patch_shape_of_sexp,
        compare_patch_shape,
        equal_patch_shape,
        t_of_sexp$0,
        sexp_of_t$0,
        compare$0,
        equal$0,
        rotate,
        get_three,
        get_col_row,
        get_values],
       [0,
        sexp_of_main_board,
        main_board_of_sexp,
        compare_main_board,
        equal_main_board,
        sexp_of_quilt_board,
        quilt_board_of_sexp,
        compare_quilt_board,
        equal_quilt_board,
        t_of_sexp$1,
        sexp_of_t$1,
        compare$1,
        equal$1,
        Out_of_bounds,
        Patch_does_not_fit_there],
       [0,
        t_of_sexp$2,
        sexp_of_t$2,
        compare$2,
        equal$2,
        Insufficient_funds,
        Insufficient_cache],
       [0,
        sexp_of_time_token,
        time_token_of_sexp,
        compare_time_token,
        equal_time_token,
        sexp_of_neutral_token,
        neutral_token_of_sexp,
        compare_neutral_token,
        equal_neutral_token,
        t_of_sexp$3,
        sexp_of_t$3,
        compare$3,
        equal$3],
       Game_pieces,
       [0, t_of_sexp$5, sexp_of_t$5, compare$5, equal$5],
       [0, No_patches_left, Patch_already_taken, choose_move],
       init];
   runtime.caml_register_global(512, Patchwork, cst_Patchwork);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Patchwork__Hw2_patchwork_logic
//# unitInfo: Requires: Core, Core__Int, Core__Printf, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdio__In_channel, Stdio__Out_channel
//# shape: Patchwork__Hw2_patchwork_logic:[[F(1),F(1),F(2)*,F(2)*],N,N,N,N,N,N,N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ChunkyLRev = "ChunkyLRev",
    cst_ChunkyZig = "ChunkyZig",
    cst_Corner = "Corner",
    cst_CornerRev = "CornerRev",
    cst_Cross = "Cross",
    cst_D$0 = "D",
    cst_Empty = "Empty",
    cst_H = "H",
    cst_I = "I",
    cst_INub = "INub",
    cst_L$0 = "L",
    cst_LHalfH = "LHalfH",
    cst_LRev = "LRev",
    cst_LongI = "LongI",
    cst_LongL = "LongL",
    cst_MainBoard = "MainBoard",
    cst_NeutralToken = "NeutralToken",
    cst_Patchwork_Hw2_patchwork_lo = "Patchwork__Hw2_patchwork_logic",
    cst_Plus = "Plus",
    cst_Prong = "Prong",
    cst_QuiltBoard = "QuiltBoard",
    cst_R$0 = "R",
    cst_S = "S",
    cst_SD$0 = "SD",
    cst_SHalfH = "SHalfH",
    cst_SL$0 = "SL",
    cst_SLVert = "SLVert",
    cst_SR$0 = "SR",
    cst_SU$0 = "SU",
    cst_ShortI = "ShortI",
    cst_ShortT = "ShortT",
    cst_SmallI = "SmallI",
    cst_Square = "Square",
    cst_SquareHighFive = "SquareHighFive",
    cst_SquareNub = "SquareNub",
    cst_StubbyT = "StubbyT",
    cst_T = "T",
    cst_TCross = "TCross",
    cst_TimeToken = "TimeToken",
    cst_U$0 = "U",
    cst_Vine = "Vine",
    cst_WidePlus = "WidePlus",
    cst_WideStubbyT = "WideStubbyT",
    cst_Zig = "Zig",
    cst_ZigRev = "ZigRev",
    cst_ZigZag = "ZigZag",
    cst_bc$0 = "bc",
    cst_buttons$0 = "buttons",
    cst_buttons_owned$0 = "buttons_owned",
    cst_chunkyLRev = "chunkyLRev",
    cst_chunkyZig = "chunkyZig",
    cst_color$0 = "color",
    cst_corner = "corner",
    cst_cornerRev = "cornerRev",
    cst_cost$0 = "cost",
    cst_cross = "cross",
    cst_empty = "empty",
    cst_filled_squares$0 = "filled_squares",
    cst_h = "h",
    cst_i = "i",
    cst_iNub = "iNub",
    cst_income$0 = "income",
    cst_l = "l",
    cst_lHalfH = "lHalfH",
    cst_lRev = "lRev",
    cst_longI = "longI",
    cst_longL = "longL",
    cst_mainBoard = "mainBoard",
    cst_main_board$0 = "main_board",
    cst_mb$0 = "mb",
    cst_move_num$0 = "move_num",
    cst_neut$0 = "neut",
    cst_neutralToken = "neutralToken",
    cst_neutral_piece$0 = "neutral_piece",
    cst_owned_by$0 = "owned_by",
    cst_p1qb$0 = "p1qb",
    cst_p2qb$0 = "p2qb",
    cst_patch_pieces$0 = "patch_pieces",
    cst_patches$0 = "patches",
    cst_patches_remaining$1 = "patches_remaining",
    cst_patchwork = "patchwork",
    cst_player1$0 = "player1",
    cst_player2$0 = "player2",
    cst_player_name$0 = "player_name",
    cst_player_num$0 = "player_num",
    cst_plus = "plus",
    cst_pos$0 = "pos",
    cst_pos_around_board$0 = "pos_around_board",
    cst_position$0 = "position",
    cst_prong = "prong",
    cst_quiltBoard = "quiltBoard",
    cst_quilt_board1$0 = "quilt_board1",
    cst_quilt_board2$0 = "quilt_board2",
    cst_s = "s",
    cst_sHalfH = "sHalfH",
    cst_sLVert = "sLVert",
    cst_score$0 = "score",
    cst_shape$0 = "shape",
    cst_shortI = "shortI",
    cst_shortT = "shortT",
    cst_smallI = "smallI",
    cst_special_patch_locs$0 = "special_patch_locs",
    cst_square = "square",
    cst_squareHighFive = "squareHighFive",
    cst_squareNub = "squareNub",
    cst_squares$1 = "squares",
    cst_stubbyT = "stubbyT",
    cst_t = "t",
    cst_tCross = "tCross",
    cst_timeToken = "timeToken",
    cst_time_piece1$0 = "time_piece1",
    cst_time_piece2$0 = "time_piece2",
    cst_tk1$0 = "tk1",
    cst_tk2$0 = "tk2",
    cst_turn$0 = "turn",
    cst_unassigned_cache$0 = "unassigned_cache",
    cst_vine = "vine",
    cst_widePlus = "widePlus",
    cst_wideStubbyT = "wideStubbyT",
    cst_zig = "zig",
    cst_zigRev = "zigRev",
    cst_zigZag = "zigZag",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_compare = runtime.caml_int_compare,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    remaining =
      caml_list_of_js_array
       ([1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30]),
    main_board = [0, 64, 0],
    quilt_board_1 = [0, 9, 0],
    quilt_board_2 = [0, 9, 0],
    error_source_002 = "lib/hw2_patchwork_logic.ml.Player.t",
    error_source_019 = "lib/hw2_patchwork_logic.ml.Patch.patch_shape",
    error_source_026 = "lib/hw2_patchwork_logic.ml.Patch.t",
    shapes =
      caml_list_of_js_array
       ([0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32]),
    error_source_044 = "lib/hw2_patchwork_logic.ml.Game_board.main_board",
    error_source_060 = "lib/hw2_patchwork_logic.ml.Game_board.quilt_board",
    error_source_094 = "lib/hw2_patchwork_logic.ml.Game_board.t",
    error_source_123 = "lib/hw2_patchwork_logic.ml.Button.t",
    error_source_133 = "lib/hw2_patchwork_logic.ml.Token.time_token",
    error_source_147 = "lib/hw2_patchwork_logic.ml.Token.neutral_token",
    error_source_158 = "lib/hw2_patchwork_logic.ml.Token.t",
    error_source_187 = "lib/hw2_patchwork_logic.ml.Game_pieces.t",
    error_source_225 = "lib/hw2_patchwork_logic.ml.Game_state.t",
    Core = global_data.Core,
    Core_Printf = global_data.Core__Printf,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_String = global_data.Core__String;
   global_data.Core__Int;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   Ppx_module_timer_runtime[4].call(null, cst_Patchwork_Hw2_patchwork_lo);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_patchwork);
   Ppx_expect_runtime[1][1].call(null, "lib/hw2_patchwork_logic.ml");
   Ppx_inline_test_lib[6].call(null, cst_patchwork, "hw2_patchwork_logic.ml");
   var
    cst_score = cst_score$0,
    cst_buttons_owned = cst_buttons_owned$0,
    cst_player_name = cst_player_name$0,
    cst_player_num = cst_player_num$0,
    a = [0, cst_score$0],
    b = [0, cst_buttons_owned$0],
    c = [0, cst_player_name$0],
    d = [0, cst_player_num$0];
   function t_of_sexp(x_003){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_002,
             [0,
              cst_player_num,
              1,
              Core[390],
              [0,
               cst_player_name,
               1,
               Core[559],
               [0,
                cst_buttons_owned,
                1,
                Core[390],
                [0, cst_score, 1, Core[390], 0]]]],
             function(param){
              return param !== cst_buttons_owned$0
                      ? param
                        !== cst_player_name$0
                        ? param
                          !== cst_player_num$0
                          ? param !== cst_score$0 ? -1 : 3
                          : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               score = b[2][1],
               buttons_owned = b[1],
               player_name = a[1],
               player_num = param[1];
              return [0, player_num, player_name, buttons_owned, score];
             },
             x_003);
   }
   function sexp_of_t(param){
    var
     player_name_007 = param[2],
     player_num_005 = param[1],
     buttons_owned_009 = param[3],
     score_011 = param[4],
     arg_012 = caml_call1(Core[389], score_011),
     bnds_004 = [0, [1, [0, a, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core[389], buttons_owned_009),
     bnds_004$0 = [0, [1, [0, b, [0, arg_010, 0]]], bnds_004],
     arg_008 = caml_call1(Core[558], player_name_007),
     bnds_004$1 = [0, [1, [0, c, [0, arg_008, 0]]], bnds_004$0],
     arg_006 = caml_call1(Core[389], player_num_005),
     bnds_004$2 = [0, [1, [0, d, [0, arg_006, 0]]], bnds_004$1];
    return [1, bnds_004$2];
   }
   function compare(a_013, b_014){
    if(a_013 === b_014) return 0;
    var n = Core[382].call(null, a_013[1], b_014[1]);
    if(0 !== n) return n;
    var n$0 = Core[551].call(null, a_013[2], b_014[2]);
    if(0 !== n$0) return n$0;
    var n$1 = Core[382].call(null, a_013[3], b_014[3]);
    return 0 === n$1 ? Core[382].call(null, a_013[4], b_014[4]) : n$1;
   }
   function equal(a_015, b_016){
    if(a_015 === b_016) return 1;
    var b = Core[384].call(null, a_015[1], b_016[1]);
    if(b){
     var c = Core[553].call(null, a_015[2], b_016[2]);
     if(c){
      var d = Core[384].call(null, a_015[3], b_016[3]);
      if(d) return Core[384].call(null, a_015[4], b_016[4]);
      var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   var
    Player = [0, t_of_sexp, sexp_of_t, compare, equal],
    e = [0, cst_Square],
    f = [0, cst_SquareNub],
    g = [0, cst_SquareHighFive],
    h = [0, cst_TCross],
    i = [0, cst_S],
    j = [0, cst_LongI],
    k = [0, cst_LHalfH],
    l = [0, cst_SHalfH],
    m = [0, cst_H],
    n = [0, cst_Corner],
    o = [0, cst_CornerRev],
    p = [0, cst_SLVert],
    q = [0, cst_ShortI],
    r = [0, cst_LRev],
    s = [0, cst_LongL],
    t = [0, cst_L$0],
    u = [0, cst_ChunkyLRev],
    v = [0, cst_SmallI],
    w = [0, cst_I],
    x = [0, cst_ShortT],
    y = [0, cst_StubbyT],
    z = [0, cst_T],
    A = [0, cst_Plus],
    B = [0, cst_Zig],
    C = [0, cst_ZigZag],
    D = [0, cst_ZigRev],
    E = [0, cst_ChunkyZig],
    F = [0, cst_Cross],
    G = [0, cst_INub],
    H = [0, cst_WideStubbyT],
    I = [0, cst_Prong],
    J = [0, cst_Vine],
    K = [0, cst_WidePlus],
    L = [0, cst_Empty];
   function patch_shape_of_sexp(sexp_020){
    a:
    {
     if(0 === sexp_020[0]){
      var a = sexp_020[1], c = caml_string_compare(a, cst_chunkyLRev);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       if(0 <= c){
                                        if(0 >= c) break i;
                                        var d = caml_string_compare(a, cst_sHalfH);
                                        if(0 > d){
                                         var f = caml_string_compare(a, cst_l);
                                         if(0 <= f){
                                          if(0 >= f) break q;
                                          if(a === cst_lHalfH) break p;
                                          if(a === cst_lRev) break o;
                                          if(a === cst_longI) break n;
                                          if(a === cst_longL) break m;
                                          if(a === cst_plus) break l;
                                          if(a === cst_prong) break k;
                                          if(a !== cst_s) break a;
                                          break j;
                                         }
                                         if(a === cst_chunkyZig) break h;
                                         if(a === cst_corner) break g;
                                         if(a === cst_cornerRev) break f;
                                         if(a === cst_cross) break e;
                                         if(a === cst_empty) break d;
                                         if(a === cst_h) break c;
                                         if(a === cst_i) break b;
                                         if(a !== cst_iNub) break a;
                                         break r;
                                        }
                                        if(0 < d){
                                         var e = caml_string_compare(a, cst_t);
                                         if(0 <= e){
                                          if(0 >= e) break H;
                                          if(a === cst_tCross) break G;
                                          if(a === cst_vine) break F;
                                          if(a === cst_widePlus) break E;
                                          if(a === cst_wideStubbyT) break D;
                                          if(a === cst_zig) break C;
                                          if(a === cst_zigRev) break B;
                                          if(a !== cst_zigZag) break a;
                                          break A;
                                         }
                                         if(a === cst_sLVert) break z;
                                         if(a === cst_shortI) break y;
                                         if(a === cst_shortT) break x;
                                         if(a === cst_smallI) break w;
                                         if(a === cst_square) break v;
                                         if(a === cst_squareHighFive) break u;
                                         if(a === cst_squareNub) break t;
                                         if(a !== cst_stubbyT) break a;
                                         break s;
                                        }
                                       }
                                       else{
                                        var g = caml_string_compare(a, cst_SHalfH);
                                        if(0 > g){
                                         var i = caml_string_compare(a, cst_INub);
                                         if(0 <= i){
                                          if(0 >= i) break r;
                                          if(a === cst_L$0) break q;
                                          if(a === cst_LHalfH) break p;
                                          if(a === cst_LRev) break o;
                                          if(a === cst_LongI) break n;
                                          if(a === cst_LongL) break m;
                                          if(a === cst_Plus) break l;
                                          if(a === cst_Prong) break k;
                                          if(a !== cst_S) break a;
                                          break j;
                                         }
                                         if(a === cst_ChunkyLRev) break i;
                                         if(a === cst_ChunkyZig) break h;
                                         if(a === cst_Corner) break g;
                                         if(a === cst_CornerRev) break f;
                                         if(a === cst_Cross) break e;
                                         if(a === cst_Empty) break d;
                                         if(a === cst_H) break c;
                                         if(a !== cst_I) break a;
                                         break b;
                                        }
                                        if(0 < g){
                                         var h = caml_string_compare(a, cst_T);
                                         if(0 <= h){
                                          if(0 >= h) break H;
                                          if(a === cst_TCross) break G;
                                          if(a === cst_Vine) break F;
                                          if(a === cst_WidePlus) break E;
                                          if(a === cst_WideStubbyT) break D;
                                          if(a === cst_Zig) break C;
                                          if(a === cst_ZigRev) break B;
                                          if(a !== cst_ZigZag) break a;
                                          break A;
                                         }
                                         if(a === cst_SLVert) break z;
                                         if(a === cst_ShortI) break y;
                                         if(a === cst_ShortT) break x;
                                         if(a === cst_SmallI) break w;
                                         if(a === cst_Square) break v;
                                         if(a === cst_SquareHighFive) break u;
                                         if(a === cst_SquareNub) break t;
                                         if(a !== cst_StubbyT) break a;
                                         break s;
                                        }
                                       }
                                       return 7;
                                      }
                                      return 21;
                                     }
                                     return 3;
                                    }
                                    return 31;
                                   }
                                   return 32;
                                  }
                                  return 29;
                                 }
                                 return 23;
                                }
                                return 25;
                               }
                               return 24;
                              }
                              return 11;
                             }
                             return 12;
                            }
                            return 19;
                           }
                           return 17;
                          }
                          return 0;
                         }
                         return 2;
                        }
                        return 1;
                       }
                       return 20;
                      }
                      return 28;
                     }
                     return 15;
                    }
                    return 6;
                   }
                   return 13;
                  }
                  return 5;
                 }
                 return 14;
                }
                return 22;
               }
               return 30;
              }
              return 4;
             }
             return 16;
            }
            return 26;
           }
           return 9;
          }
          return 10;
         }
         return 27;
        }
        return 33;
       }
       return 8;
      }
      return 18;
     }
     var match = sexp_020[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_019, sexp_020);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_019, sexp_020);
     var b = match$0[1], j = caml_string_compare(b, cst_chunkyLRev);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      if(0 <= j){
                                       if(0 >= j) break i;
                                       var k = caml_string_compare(b, cst_sHalfH);
                                       if(0 > k){
                                        var m = caml_string_compare(b, cst_l);
                                        if(0 <= m){
                                         if(0 >= m) break q;
                                         if(b === cst_lHalfH) break p;
                                         if(b === cst_lRev) break o;
                                         if(b === cst_longI) break n;
                                         if(b === cst_longL) break m;
                                         if(b === cst_plus) break l;
                                         if(b === cst_prong) break k;
                                         if(b !== cst_s) break a;
                                         break j;
                                        }
                                        if(b === cst_chunkyZig) break h;
                                        if(b === cst_corner) break g;
                                        if(b === cst_cornerRev) break f;
                                        if(b === cst_cross) break e;
                                        if(b === cst_empty) break d;
                                        if(b === cst_h) break c;
                                        if(b === cst_i) break b;
                                        if(b !== cst_iNub) break a;
                                        break r;
                                       }
                                       if(0 < k){
                                        var l = caml_string_compare(b, cst_t);
                                        if(0 <= l){
                                         if(0 >= l) break H;
                                         if(b === cst_tCross) break G;
                                         if(b === cst_vine) break F;
                                         if(b === cst_widePlus) break E;
                                         if(b === cst_wideStubbyT) break D;
                                         if(b === cst_zig) break C;
                                         if(b === cst_zigRev) break B;
                                         if(b !== cst_zigZag) break a;
                                         break A;
                                        }
                                        if(b === cst_sLVert) break z;
                                        if(b === cst_shortI) break y;
                                        if(b === cst_shortT) break x;
                                        if(b === cst_smallI) break w;
                                        if(b === cst_square) break v;
                                        if(b === cst_squareHighFive) break u;
                                        if(b === cst_squareNub) break t;
                                        if(b !== cst_stubbyT) break a;
                                        break s;
                                       }
                                      }
                                      else{
                                       var n = caml_string_compare(b, cst_SHalfH);
                                       if(0 > n){
                                        var p = caml_string_compare(b, cst_INub);
                                        if(0 <= p){
                                         if(0 >= p) break r;
                                         if(b === cst_L$0) break q;
                                         if(b === cst_LHalfH) break p;
                                         if(b === cst_LRev) break o;
                                         if(b === cst_LongI) break n;
                                         if(b === cst_LongL) break m;
                                         if(b === cst_Plus) break l;
                                         if(b === cst_Prong) break k;
                                         if(b !== cst_S) break a;
                                         break j;
                                        }
                                        if(b === cst_ChunkyLRev) break i;
                                        if(b === cst_ChunkyZig) break h;
                                        if(b === cst_Corner) break g;
                                        if(b === cst_CornerRev) break f;
                                        if(b === cst_Cross) break e;
                                        if(b === cst_Empty) break d;
                                        if(b === cst_H) break c;
                                        if(b !== cst_I) break a;
                                        break b;
                                       }
                                       if(0 < n){
                                        var o = caml_string_compare(b, cst_T);
                                        if(0 <= o){
                                         if(0 >= o) break H;
                                         if(b === cst_TCross) break G;
                                         if(b === cst_Vine) break F;
                                         if(b === cst_WidePlus) break E;
                                         if(b === cst_WideStubbyT) break D;
                                         if(b === cst_Zig) break C;
                                         if(b === cst_ZigRev) break B;
                                         if(b !== cst_ZigZag) break a;
                                         break A;
                                        }
                                        if(b === cst_SLVert) break z;
                                        if(b === cst_ShortI) break y;
                                        if(b === cst_ShortT) break x;
                                        if(b === cst_SmallI) break w;
                                        if(b === cst_Square) break v;
                                        if(b === cst_SquareHighFive) break u;
                                        if(b === cst_SquareNub) break t;
                                        if(b !== cst_StubbyT) break a;
                                        break s;
                                       }
                                      }
                                      return Sexplib0_Sexp_conv_error[7].call
                                              (null, error_source_019, sexp_020);
                                     }
                                     return Sexplib0_Sexp_conv_error[7].call
                                             (null, error_source_019, sexp_020);
                                    }
                                    return Sexplib0_Sexp_conv_error[7].call
                                            (null, error_source_019, sexp_020);
                                   }
                                   return Sexplib0_Sexp_conv_error[7].call
                                           (null, error_source_019, sexp_020);
                                  }
                                  return Sexplib0_Sexp_conv_error[7].call
                                          (null, error_source_019, sexp_020);
                                 }
                                 return Sexplib0_Sexp_conv_error[7].call
                                         (null, error_source_019, sexp_020);
                                }
                                return Sexplib0_Sexp_conv_error[7].call
                                        (null, error_source_019, sexp_020);
                               }
                               return Sexplib0_Sexp_conv_error[7].call
                                       (null, error_source_019, sexp_020);
                              }
                              return Sexplib0_Sexp_conv_error[7].call
                                      (null, error_source_019, sexp_020);
                             }
                             return Sexplib0_Sexp_conv_error[7].call
                                     (null, error_source_019, sexp_020);
                            }
                            return Sexplib0_Sexp_conv_error[7].call
                                    (null, error_source_019, sexp_020);
                           }
                           return Sexplib0_Sexp_conv_error[7].call
                                   (null, error_source_019, sexp_020);
                          }
                          return Sexplib0_Sexp_conv_error[7].call
                                  (null, error_source_019, sexp_020);
                         }
                         return Sexplib0_Sexp_conv_error[7].call
                                 (null, error_source_019, sexp_020);
                        }
                        return Sexplib0_Sexp_conv_error[7].call
                                (null, error_source_019, sexp_020);
                       }
                       return Sexplib0_Sexp_conv_error[7].call
                               (null, error_source_019, sexp_020);
                      }
                      return Sexplib0_Sexp_conv_error[7].call
                              (null, error_source_019, sexp_020);
                     }
                     return Sexplib0_Sexp_conv_error[7].call
                             (null, error_source_019, sexp_020);
                    }
                    return Sexplib0_Sexp_conv_error[7].call
                            (null, error_source_019, sexp_020);
                   }
                   return Sexplib0_Sexp_conv_error[7].call
                           (null, error_source_019, sexp_020);
                  }
                  return Sexplib0_Sexp_conv_error[7].call
                          (null, error_source_019, sexp_020);
                 }
                 return Sexplib0_Sexp_conv_error[7].call
                         (null, error_source_019, sexp_020);
                }
                return Sexplib0_Sexp_conv_error[7].call
                        (null, error_source_019, sexp_020);
               }
               return Sexplib0_Sexp_conv_error[7].call
                       (null, error_source_019, sexp_020);
              }
              return Sexplib0_Sexp_conv_error[7].call
                      (null, error_source_019, sexp_020);
             }
             return Sexplib0_Sexp_conv_error[7].call
                     (null, error_source_019, sexp_020);
            }
            return Sexplib0_Sexp_conv_error[7].call
                    (null, error_source_019, sexp_020);
           }
           return Sexplib0_Sexp_conv_error[7].call
                   (null, error_source_019, sexp_020);
          }
          return Sexplib0_Sexp_conv_error[7].call
                  (null, error_source_019, sexp_020);
         }
         return Sexplib0_Sexp_conv_error[7].call
                 (null, error_source_019, sexp_020);
        }
        return Sexplib0_Sexp_conv_error[7].call
                (null, error_source_019, sexp_020);
       }
       return Sexplib0_Sexp_conv_error[7].call
               (null, error_source_019, sexp_020);
      }
      return Sexplib0_Sexp_conv_error[7].call
              (null, error_source_019, sexp_020);
     }
     return Sexplib0_Sexp_conv_error[7].call(null, error_source_019, sexp_020);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_019, sexp_020);
   }
   function sexp_of_patch_shape(param){
    switch(param){
      case 0:
       return e;
      case 1:
       return f;
      case 2:
       return g;
      case 3:
       return h;
      case 4:
       return i;
      case 5:
       return j;
      case 6:
       return k;
      case 7:
       return l;
      case 8:
       return m;
      case 9:
       return n;
      case 10:
       return o;
      case 11:
       return p;
      case 12:
       return q;
      case 13:
       return r;
      case 14:
       return s;
      case 15:
       return t;
      case 16:
       return u;
      case 17:
       return v;
      case 18:
       return w;
      case 19:
       return x;
      case 20:
       return y;
      case 21:
       return z;
      case 22:
       return A;
      case 23:
       return B;
      case 24:
       return C;
      case 25:
       return D;
      case 26:
       return E;
      case 27:
       return F;
      case 28:
       return G;
      case 29:
       return H;
      case 30:
       return I;
      case 31:
       return J;
      case 32:
       return K;
      default: return L;
    }
   }
   var
    compare_patch_shape = caml_int_compare,
    cst_income = cst_income$0,
    cst_move_num = cst_move_num$0,
    cst_pos_around_board = cst_pos_around_board$0,
    cst_cost = cst_cost$0,
    cst_shape = cst_shape$0,
    M = [0, cst_income$0],
    N = [0, cst_move_num$0],
    O = [0, cst_pos_around_board$0],
    P = [0, cst_cost$0],
    Q = [0, cst_shape$0],
    cst_special_patch_locs = cst_special_patch_locs$0,
    cst_squares = cst_squares$1,
    a8 = [0, cst_special_patch_locs$0],
    a9 = [0, cst_squares$1],
    cst_filled_squares = cst_filled_squares$0,
    cst_squares$0 = cst_squares$1,
    a_ = [0, cst_filled_squares$0],
    a$ = [0, cst_squares$1],
    ba = [0, cst_MainBoard],
    bb = [0, cst_QuiltBoard];
   function equal_patch_shape(b, a){return b === a ? 1 : 0;}
   function t_of_sexp$0(x_027){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_026,
             [0,
              cst_shape,
              1,
              patch_shape_of_sexp,
              [0,
               cst_cost,
               1,
               Core[390],
               [0,
                cst_pos_around_board,
                1,
                Core[390],
                [0,
                 cst_move_num,
                 1,
                 Core[390],
                 [0, cst_income, 1, Core[390], 0]]]]],
             function(param){
              return param !== cst_cost$0
                      ? param
                        !== cst_income$0
                        ? param
                          !== cst_move_num$0
                          ? param
                            !== cst_pos_around_board$0
                            ? param !== cst_shape$0 ? -1 : 0
                            : 2
                          : 3
                        : 4
                      : 1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               income = c[2][1],
               move_num = c[1],
               pos_around_board = b[1],
               cost = a[1],
               shape = param[1];
              return [0, shape, cost, pos_around_board, move_num, income];
             },
             x_027);
   }
   function sexp_of_t$0(param){
    var
     income_037 = param[5],
     move_num_035 = param[4],
     pos_around_board_033 = param[3],
     cost_031 = param[2],
     shape_029 = param[1],
     arg_038 = caml_call1(Core[389], income_037),
     bnds_028 = [0, [1, [0, M, [0, arg_038, 0]]], 0],
     arg_036 = caml_call1(Core[389], move_num_035),
     bnds_028$0 = [0, [1, [0, N, [0, arg_036, 0]]], bnds_028],
     arg_034 = caml_call1(Core[389], pos_around_board_033),
     bnds_028$1 = [0, [1, [0, O, [0, arg_034, 0]]], bnds_028$0],
     arg_032 = caml_call1(Core[389], cost_031),
     bnds_028$2 = [0, [1, [0, P, [0, arg_032, 0]]], bnds_028$1],
     arg_030 = sexp_of_patch_shape(shape_029),
     bnds_028$3 = [0, [1, [0, Q, [0, arg_030, 0]]], bnds_028$2];
    return [1, bnds_028$3];
   }
   function compare$0(a_039, b_040){
    if(a_039 === b_040) return 0;
    var n$2 = caml_int_compare(a_039[1], b_040[1]);
    if(0 !== n$2) return n$2;
    var n = Core[382].call(null, a_039[2], b_040[2]);
    if(0 !== n) return n;
    var n$0 = Core[382].call(null, a_039[3], b_040[3]);
    if(0 !== n$0) return n$0;
    var n$1 = Core[382].call(null, a_039[4], b_040[4]);
    return 0 === n$1 ? Core[382].call(null, a_039[5], b_040[5]) : n$1;
   }
   function equal$0(a_041, b_042){
    if(a_041 === b_042) return 1;
    var e = a_041[1] === b_042[1] ? 1 : 0;
    if(e){
     var b = Core[384].call(null, a_041[2], b_042[2]);
     if(b){
      var c = Core[384].call(null, a_041[3], b_042[3]);
      if(c){
       var d = Core[384].call(null, a_041[4], b_042[4]);
       if(d) return Core[384].call(null, a_041[5], b_042[5]);
       var a = d;
      }
      else
       var a = c;
     }
     else
      var a = b;
    }
    else
     var a = e;
    return a;
   }
   function main_board_of_sexp(x_045){
    var a = Core[390], b = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_044,
             [0,
              cst_squares,
              1,
              Core[390],
              [0, cst_special_patch_locs, 1, function(c){return b(a, c);}, 0]],
             function(param){
              return param !== cst_special_patch_locs$0
                      ? param !== cst_squares$1 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var special_patch_locs = param[2][1], squares = param[1];
              return [0, squares, special_patch_locs];
             },
             x_045);
   }
   function sexp_of_main_board(param){
    var
     special_patch_locs_049 = param[2],
     squares_047 = param[1],
     arg_050 = Core[472].call(null, Core[389], special_patch_locs_049),
     bnds_046 = [0, [1, [0, a8, [0, arg_050, 0]]], 0],
     arg_048 = caml_call1(Core[389], squares_047),
     bnds_046$0 = [0, [1, [0, a9, [0, arg_048, 0]]], bnds_046];
    return [1, bnds_046$0];
   }
   function compare_main_board(a_051, b_052){
    if(a_051 === b_052) return 0;
    var n = Core[382].call(null, a_051[1], b_052[1]);
    return 0 === n
            ? Core
               [466].call
              (null,
               function(a_053, b_054){
                return Core[382].call(null, a_053, b_054);
               },
               a_051[2],
               b_052[2])
            : n;
   }
   function equal_main_board(a_055, b_056){
    if(a_055 === b_056) return 1;
    var a = Core[384].call(null, a_055[1], b_056[1]);
    return a
            ? Core
               [468].call
              (null,
               function(a_057, b_058){
                return Core[384].call(null, a_057, b_058);
               },
               a_055[2],
               b_056[2])
            : a;
   }
   function quilt_board_of_sexp(x_066){
    function a(sexp_065){
     if(0 !== sexp_065[0]){
      var a = sexp_065[1];
      if(a){
       var b = a[2];
       if(b && ! b[2]){
        var
         arg1_062 = b[1],
         arg0_061 = a[1],
         res0_063 = Core[390].call(null, arg0_061),
         res1_064 = Core[390].call(null, arg1_062);
        return [0, res0_063, res1_064];
       }
      }
     }
     return Sexplib0_Sexp_conv_error[4].call
             (null, error_source_060, 2, sexp_065);
    }
    var b = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_060,
             [0,
              cst_squares$0,
              1,
              Core[390],
              [0, cst_filled_squares, 1, function(c){return b(a, c);}, 0]],
             function(param){
              return param !== cst_filled_squares$0
                      ? param !== cst_squares$1 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var filled_squares = param[2][1], squares = param[1];
              return [0, squares, filled_squares];
             },
             x_066);
   }
   function sexp_of_quilt_board(param){
    var
     filled_squares_070 = param[2],
     squares_068 = param[1],
     arg_071 =
       Core[472].call
        (null,
         function(param){
          var
           arg1_073 = param[2],
           arg0_072 = param[1],
           res0_074 = caml_call1(Core[389], arg0_072),
           res1_075 = caml_call1(Core[389], arg1_073);
          return [1, [0, res0_074, [0, res1_075, 0]]];
         },
         filled_squares_070),
     bnds_067 = [0, [1, [0, a_, [0, arg_071, 0]]], 0],
     arg_069 = caml_call1(Core[389], squares_068),
     bnds_067$0 = [0, [1, [0, a$, [0, arg_069, 0]]], bnds_067];
    return [1, bnds_067$0];
   }
   function compare_quilt_board(a_076, b_077){
    if(a_076 === b_077) return 0;
    var n = Core[382].call(null, a_076[1], b_077[1]);
    return 0 === n
            ? Core
               [466].call
              (null,
               function(a_078, b_079){
                var
                 t_081 = a_078[2],
                 t_080 = a_078[1],
                 t_083 = b_079[2],
                 t_082 = b_079[1],
                 n = Core[382].call(null, t_080, t_082);
                return 0 === n ? Core[382].call(null, t_081, t_083) : n;
               },
               a_076[2],
               b_077[2])
            : n;
   }
   function equal_quilt_board(a_084, b_085){
    if(a_084 === b_085) return 1;
    var a = Core[384].call(null, a_084[1], b_085[1]);
    return a
            ? Core
               [468].call
              (null,
               function(a_086, b_087){
                var
                 t_089 = a_086[2],
                 t_088 = a_086[1],
                 t_091 = b_087[2],
                 t_090 = b_087[1],
                 a = Core[384].call(null, t_088, t_090);
                return a ? Core[384].call(null, t_089, t_091) : a;
               },
               a_084[2],
               b_085[2])
            : a;
   }
   function t_of_sexp$1(sexp_096){
    a:
    {
     if(0 === sexp_096[0]){
      var a = sexp_096[1];
      b:
      if(a !== cst_MainBoard){
       if(a !== cst_QuiltBoard){
        if(a === cst_mainBoard) break b;
        if(a !== cst_quiltBoard) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_094, sexp_096);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_094, sexp_096);
     }
     var match = sexp_096[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_094, sexp_096);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_094, sexp_096);
     var tag_097 = match$0[1];
     b:
     if(tag_097 !== cst_MainBoard){
      if(tag_097 !== cst_QuiltBoard){
       if(tag_097 === cst_mainBoard) break b;
       if(tag_097 !== cst_quiltBoard) break a;
      }
      var sexp_args_103 = match[2];
      if(sexp_args_103 && ! sexp_args_103[2]){
       var
        arg0_104 = sexp_args_103[1],
        res0_105 = quilt_board_of_sexp(arg0_104);
       return [1, res0_105];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_094, tag_097, sexp_096);
     }
     var sexp_args_098 = match[2];
     if(sexp_args_098 && ! sexp_args_098[2]){
      var
       arg0_099 = sexp_args_098[1],
       res0_100 = main_board_of_sexp(arg0_099);
      return [0, res0_100];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_094, tag_097, sexp_096);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_094, sexp_096);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var arg0_106 = param[1], res0_107 = sexp_of_main_board(arg0_106);
     return [1, [0, ba, [0, res0_107, 0]]];
    }
    var arg0_108 = param[1], res0_109 = sexp_of_quilt_board(arg0_108);
    return [1, [0, bb, [0, res0_109, 0]]];
   }
   function compare$1(a_110, b_111){
    if(a_110 === b_111) return 0;
    if(0 === a_110[0]){
     var a_112 = a_110[1];
     if(0 !== b_111[0]) return -1;
     var b_113 = b_111[1];
     return compare_main_board(a_112, b_113);
    }
    var a_114 = a_110[1];
    if(0 === b_111[0]) return 1;
    var b_115 = b_111[1];
    return compare_quilt_board(a_114, b_115);
   }
   function equal$1(a_116, b_117){
    if(a_116 === b_117) return 1;
    if(0 === a_116[0]){
     var a_118 = a_116[1];
     if(0 !== b_117[0]) return 0;
     var b_119 = b_117[1];
     return equal_main_board(a_118, b_119);
    }
    var a_120 = a_116[1];
    if(0 === b_117[0]) return 0;
    var b_121 = b_117[1];
    return equal_quilt_board(a_120, b_121);
   }
   var
    Out_of_bounds =
      [248,
       "Patchwork__Hw2_patchwork_logic.Game_board.Out_of_bounds",
       caml_fresh_oo_id(0)],
    Patch_does_not_fit_there =
      [248,
       "Patchwork__Hw2_patchwork_logic.Game_board.Patch_does_not_fit_there",
       caml_fresh_oo_id(0)],
    R = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    S = [0, [0, 3, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], 0]]],
    T =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_R$0],
        [0, [0, 1, cst_U$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_U$0], 0]]]]],
    U =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]]]]],
    V = [0, [0, 2, cst_L$0], [0, [0, 2, cst_D$0], [0, [0, 1, cst_L$0], 0]]],
    W = [0, [0, 5, cst_D$0], 0],
    X = [0, [0, 2, cst_D$0], [0, [0, 3, cst_R$0], [0, [0, 1, cst_U$0], 0]]],
    Y = [0, [0, 2, cst_D$0], [0, [0, 2, cst_R$0], [0, [0, 1, cst_U$0], 0]]],
    Z =
      [0,
       [0, 3, cst_D$0],
       [0,
        [0, 1, cst_SU$0],
        [0,
         [0, 2, cst_R$0],
         [0, [0, 1, cst_U$0], [0, [0, 1, cst_SD$0], [0, [0, 1, cst_D$0], 0]]]]]],
    _ = [0, [0, 2, cst_R$0], [0, [0, 1, cst_D$0], 0]],
    $ = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    aa = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 2, cst_D$0], 0]]],
    ab = [0, [0, 3, cst_D$0], 0],
    ac = [0, [0, 3, cst_D$0], [0, [0, 1, cst_L$0], 0]],
    ad = [0, [0, 4, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    ae = [0, [0, 3, cst_D$0], [0, [0, 1, cst_R$0], 0]],
    af = [0, [0, 4, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], 0]]],
    ag = [0, [0, 2, cst_D$0], 0],
    ah = [0, [0, 4, cst_D$0], 0],
    ai =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_SU$0], [0, [0, 1, cst_R$0], 0]]]],
    aj = [0, [0, 3, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]],
    ak = [0, [0, 3, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 3, cst_D$0], 0]]],
    al =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]],
    am = [0, [0, 2, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]],
    an =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]]],
    ao = [0, [0, 2, cst_D$0], [0, [0, 1, cst_L$0], [0, [0, 1, cst_D$0], 0]]],
    ap =
      [0,
       [0, 3, cst_D$0],
       [0, [0, 1, cst_SU$0], [0, [0, 1, cst_L$0], [0, [0, 2, cst_D$0], 0]]]],
    aq =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 2, cst_D$0], 0]]]]]],
    ar =
      [0,
       [0, 3, cst_D$0],
       [0, [0, 1, cst_L$0], [0, [0, 1, cst_SR$0], [0, [0, 1, cst_D$0], 0]]]],
    as =
      [0,
       [0, 2, cst_R$0],
       [0, [0, 1, cst_D$0], [0, [0, 1, cst_U$0], [0, [0, 1, cst_R$0], 0]]]],
    at =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_D$0],
         [0,
          [0, 1, cst_SU$0],
          [0, [0, 1, cst_SR$0], [0, [0, 1, cst_R$0], [0, [0, 1, cst_D$0], 0]]]]]]],
    au =
      [0,
       [0, 2, cst_D$0],
       [0,
        [0, 1, cst_L$0],
        [0,
         [0, 1, cst_SR$0],
         [0,
          [0, 1, cst_D$0],
          [0, [0, 1, cst_R$0], [0, [0, 1, cst_SL$0], [0, [0, 1, cst_D$0], 0]]]]]]],
    av =
      [0,
       [0, 2, cst_R$0],
       [0,
        [0, 1, cst_D$0],
        [0,
         [0, 1, cst_R$0],
         [0,
          [0, 1, cst_SL$0],
          [0,
           [0, 1, cst_D$0],
           [0, [0, 1, cst_L$0], [0, [0, 1, cst_U$0], [0, [0, 1, cst_L$0], 0]]]]]]]],
    bc = [0, -1, -1],
    bd = [0, -1, -1],
    cst_D = cst_D$0,
    cst_U = cst_U$0,
    cst_L = cst_L$0,
    cst_R = cst_R$0,
    cst_SD = cst_SD$0,
    cst_SU = cst_SU$0,
    cst_SL = cst_SL$0,
    cst_SR = cst_SR$0,
    cst_unassigned_cache = cst_unassigned_cache$0,
    be = [0, cst_unassigned_cache$0];
   function place_patch_on_quilt_board(board, patch, row$0, col$0){
    switch(patch){
      case 33:
       var patchDim$0 = 0; break;
      case 0:
       var patchDim$0 = R; break;
      case 1:
       var patchDim$0 = S; break;
      case 2:
       var patchDim$0 = T; break;
      case 3:
       var patchDim$0 = U; break;
      case 4:
       var patchDim$0 = V; break;
      case 5:
       var patchDim$0 = W; break;
      case 6:
       var patchDim$0 = X; break;
      case 7:
       var patchDim$0 = Y; break;
      case 8:
       var patchDim$0 = Z; break;
      case 9:
       var patchDim$0 = _; break;
      case 10:
       var patchDim$0 = $; break;
      case 11:
       var patchDim$0 = aa; break;
      case 12:
       var patchDim$0 = ab; break;
      case 13:
       var patchDim$0 = ac; break;
      case 14:
       var patchDim$0 = ad; break;
      case 15:
       var patchDim$0 = ae; break;
      case 16:
       var patchDim$0 = af; break;
      case 17:
       var patchDim$0 = ag; break;
      case 18:
       var patchDim$0 = ah; break;
      case 19:
       var patchDim$0 = ai; break;
      case 20:
       var patchDim$0 = aj; break;
      case 21:
       var patchDim$0 = ak; break;
      case 22:
       var patchDim$0 = al; break;
      case 23:
       var patchDim$0 = am; break;
      case 24:
       var patchDim$0 = an; break;
      case 25:
       var patchDim$0 = ao; break;
      case 26:
       var patchDim$0 = ap; break;
      case 27:
       var patchDim$0 = aq; break;
      case 28:
       var patchDim$0 = ar; break;
      case 29:
       var patchDim$0 = as; break;
      case 30:
       var patchDim$0 = at; break;
      case 31:
       var patchDim$0 = au; break;
      default: var patchDim$0 = av;
    }
    a:
    {
     b:
     {
      var patchDim = patchDim$0, row = row$0, col = col$0;
      for(;;){
       if(! patchDim) break;
       var
        tl$0 = patchDim[2],
        hd = patchDim[1],
        dir = hd[2],
        acc$4 = hd[1],
        filled_squares$0 = board[2],
        sr = row,
        sc = col,
        acc = acc$4;
       for(;;){
        c:
        {
         if(caml_call2(Core[92], acc, 1)){var match$0 = [0, sr, sc]; break c;}
         var filled_squares = filled_squares$0;
         for(;;){
          if(! filled_squares) break;
          var
           tl = filled_squares[2],
           match = filled_squares[1],
           c = match[2],
           r = match[1];
          if(caml_call2(Core[90], r, sr)){
           if(caml_call2(Core[90], c, sc))
            throw caml_maybe_attach_backtrace(Patch_does_not_fit_there, 0);
           filled_squares = tl;
          }
          else
           filled_squares = tl;
         }
         if(dir === cst_D$0){
          if(! caml_call2(Core[92], sr, board[1]))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$3 = acc - 1 | 0, sr$1 = sr + 1 | 0;
          sr = sr$1;
          acc = acc$3;
          continue;
         }
         if(dir === cst_L$0){
          if(! caml_call2(Core[91], sc, 1))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$2 = acc - 1 | 0, sc$1 = sc - 1 | 0;
          sc = sc$1;
          acc = acc$2;
          continue;
         }
         if(dir === cst_R$0){
          if(! caml_call2(Core[92], sc, board[1]))
           throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
          var acc$1 = acc - 1 | 0, sc$0 = sc + 1 | 0;
          sc = sc$0;
          acc = acc$1;
          continue;
         }
         if(dir !== cst_SD$0)
          if(dir !== cst_SL$0)
           if(dir !== cst_SR$0)
            if(dir !== cst_SU$0){
             if(dir === cst_U$0){
              if(! caml_call2(Core[91], sr, 1))
               throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
              var acc$0 = acc - 1 | 0, sr$0 = sr - 1 | 0;
              sr = sr$0;
              acc = acc$0;
              continue;
             }
             var match$0 = bc;
            }
            else
             var match$0 = [0, sr - 1 | 0, sc];
           else
            var match$0 = [0, sr, sc + 1 | 0];
          else
           var match$0 = [0, sr, sc - 1 | 0];
         else
          var match$0 = [0, sr + 1 | 0, sc];
        }
        var upd_col = match$0[2], upd_row = match$0[1];
        if(! caml_call2(Core[90], upd_row, -1)){
         patchDim = tl$0;
         row = upd_row;
         col = upd_col;
         break;
        }
        if(caml_call2(Core[90], upd_col, -1)) break b;
        patchDim = tl$0;
        row = upd_row;
        col = upd_col;
        break;
       }
      }
      var a = 1;
      break a;
     }
     var a = 0;
    }
    if(! a) throw caml_maybe_attach_backtrace(Patch_does_not_fit_there, 0);
    var
     nf = board[2],
     patch$0 = patchDim$0,
     filled$1 = nf,
     r$3 = row$0,
     c$3 = col$0,
     acc$10 = 1;
    for(;;){
     if(! patch$0){
      var upd_quilt_board = [0, board[1], filled$1];
      return upd_quilt_board;
     }
     var
      patch$1 = patch$0[2],
      hd$1 = patch$0[1],
      dir$0 = hd$1[2],
      acc$11 = hd$1[1];
     if(caml_call2(Core[91], acc$10, 1))
      if(caml_call2(Core_String[145], dir$0, cst_D))
       var r$0 = r$3 + 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_U))
       var r$0 = r$3 - 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_L))
       var r$0 = r$3, c$0 = c$3 - 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_R))
       var r$0 = r$3, c$0 = c$3 + 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SD))
       var r$0 = r$3 + 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SU))
       var r$0 = r$3 - 1 | 0, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SL))
       var r$0 = r$3, c$0 = c$3 - 1 | 0, filled = filled$1, acc$5 = acc$11;
      else if(caml_call2(Core_String[145], dir$0, cst_SR))
       var r$0 = r$3, c$0 = c$3 + 1 | 0, filled = filled$1, acc$5 = acc$11;
      else
       var r$0 = r$3, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
     else
      var r$0 = r$3, c$0 = c$3, filled = filled$1, acc$5 = acc$11;
     for(;;){
      a:
      {
       if(caml_call2(Core[91], acc$5, 0)){
        if
         (!
          caml_call2(Core[91], r$0, board[1])
          &&
           !
           caml_call2(Core[91], c$0, board[1])
           && ! caml_call2(Core[92], r$0, 1) && ! caml_call2(Core[92], c$0, 1)){
         var filled$0 = [0, [0, r$0, c$0], filled];
         if(dir$0 === cst_D$0){
          var acc$9 = acc$5 - 1 | 0, r$2 = r$0 + 1 | 0;
          r$0 = r$2;
          filled = filled$0;
          acc$5 = acc$9;
          continue;
         }
         if(dir$0 === cst_L$0){
          var acc$8 = acc$5 - 1 | 0, c$2 = c$0 - 1 | 0;
          c$0 = c$2;
          filled = filled$0;
          acc$5 = acc$8;
          continue;
         }
         if(dir$0 === cst_R$0){
          var acc$7 = acc$5 - 1 | 0, c$1 = c$0 + 1 | 0;
          c$0 = c$1;
          filled = filled$0;
          acc$5 = acc$7;
          continue;
         }
         if(dir$0 !== cst_U$0){var new_filled = filled$0; break a;}
         var acc$6 = acc$5 - 1 | 0, r$1 = r$0 - 1 | 0;
         r$0 = r$1;
         filled = filled$0;
         acc$5 = acc$6;
         continue;
        }
        throw caml_maybe_attach_backtrace(Out_of_bounds, 0);
       }
       var new_filled = filled;
      }
      if(new_filled)
       var hd$0 = new_filled[1], head = hd$0;
      else
       var head = bd;
      var nr = head[1], nc = head[2], acc$12 = acc$10 + 1 | 0;
      patch$0 = patch$1;
      filled$1 = new_filled;
      r$3 = nr;
      c$3 = nc;
      acc$10 = acc$12;
      break;
     }
    }
   }
   function t_of_sexp$2(x_124){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_123,
             [0, cst_unassigned_cache, 1, Core[390], 0],
             function(param){
              return param !== cst_unassigned_cache$0 ? -1 : 0;
             },
             0,
             function(param){
              var unassigned_cache = param[1];
              return [0, unassigned_cache];
             },
             x_124);
   }
   function sexp_of_t$2(param){
    var
     unassigned_cache_126 = param[1],
     arg_127 = caml_call1(Core[389], unassigned_cache_126),
     bnds_125 = [0, [1, [0, be, [0, arg_127, 0]]], 0];
    return [1, bnds_125];
   }
   function compare$2(a_128, b_129){
    return a_128 === b_129 ? 0 : Core[382].call(null, a_128[1], b_129[1]);
   }
   function equal$2(a_130, b_131){
    return a_130 === b_131 ? 1 : Core[384].call(null, a_130[1], b_131[1]);
   }
   var
    Insufficient_cache =
      [248,
       "Patchwork__Hw2_patchwork_logic.Button.Insufficient_cache",
       caml_fresh_oo_id(0)],
    Insufficient_funds =
      [248,
       "Patchwork__Hw2_patchwork_logic.Button.Insufficient_funds",
       caml_fresh_oo_id(0)],
    aw = [0, 6, 5],
    ax = [0, 2, 2],
    ay = [0, 8, 6],
    az = [0, 1, 4],
    aA = [0, 1, 2],
    aB = [0, 7, 1],
    aC = [0, 1, 5],
    aD = [0, 1, 2],
    aE = [0, 2, 3],
    aF = [0, 3, 1],
    aG = [0, 1, 3],
    aH = [0, 2, 3],
    aI = [0, 2, 2],
    aJ = [0, 4, 2],
    aK = [0, 10, 3],
    aL = [0, 4, 6],
    aM = [0, 10, 5],
    aN = [0, 2, 1],
    aO = [0, 3, 3],
    aP = [0, 2, 2],
    aQ = [0, 5, 5],
    aR = [0, 7, 2],
    aS = [0, 5, 4],
    aT = [0, 3, 2],
    aU = [0, 10, 4],
    aV = [0, 7, 6],
    aW = [0, 4, 2],
    aX = [0, 0, 3],
    aY = [0, 3, 4],
    aZ = [0, 7, 4],
    a0 = [0, 3, 6],
    a1 = [0, 2, 1],
    a2 = [0, 5, 3],
    a3 = [0, 0, 0],
    cst_color = cst_color$0,
    cst_owned_by = cst_owned_by$0,
    cst_position = cst_position$0,
    bf = [0, cst_color$0],
    bg = [0, cst_owned_by$0],
    bh = [0, cst_position$0],
    cst_pos = cst_pos$0,
    bi = [0, cst_pos$0],
    bj = [0, cst_TimeToken],
    bk = [0, cst_NeutralToken],
    cst_buttons = cst_buttons$0,
    cst_quilt_board2 = cst_quilt_board2$0,
    cst_quilt_board1 = cst_quilt_board1$0,
    cst_main_board = cst_main_board$0,
    cst_patches_remaining = cst_patches_remaining$1,
    cst_patch_pieces = cst_patch_pieces$0,
    cst_neutral_piece = cst_neutral_piece$0,
    cst_time_piece2 = cst_time_piece2$0,
    cst_time_piece1 = cst_time_piece1$0,
    cst_player2 = cst_player2$0,
    cst_player1 = cst_player1$0,
    bl = [0, cst_buttons$0],
    bm = [0, cst_quilt_board2$0],
    bn = [0, cst_quilt_board1$0],
    bo = [0, cst_main_board$0],
    bp = [0, cst_patches_remaining$1],
    bq = [0, cst_patch_pieces$0],
    br = [0, cst_neutral_piece$0],
    bs = [0, cst_time_piece2$0],
    bt = [0, cst_time_piece1$0],
    bu = [0, cst_player2$0],
    bv = [0, cst_player1$0],
    cst_patches_remaining$0 = cst_patches_remaining$1,
    cst_patches = cst_patches$0,
    cst_neut = cst_neut$0,
    cst_tk2 = cst_tk2$0,
    cst_tk1 = cst_tk1$0,
    cst_turn = cst_turn$0,
    cst_bc = cst_bc$0,
    cst_p2qb = cst_p2qb$0,
    cst_p1qb = cst_p1qb$0,
    cst_mb = cst_mb$0,
    bw = [0, cst_patches_remaining$1],
    bx = [0, cst_patches$0],
    by = [0, cst_neut$0],
    bz = [0, cst_tk2$0],
    bA = [0, cst_tk1$0],
    bB = [0, cst_turn$0],
    bC = [0, cst_bc$0],
    bD = [0, cst_p2qb$0],
    bE = [0, cst_p1qb$0],
    bF = [0, cst_mb$0];
   function time_token_of_sexp(x_134){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_133,
             [0,
              cst_position,
              1,
              Core[390],
              [0, cst_owned_by, 1, t_of_sexp, [0, cst_color, 1, Core[559], 0]]],
             function(param){
              return param !== cst_color$0
                      ? param
                        !== cst_owned_by$0
                        ? param !== cst_position$0 ? -1 : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               a = param[2],
               color = a[2][1],
               owned_by = a[1],
               position = param[1];
              return [0, position, owned_by, color];
             },
             x_134);
   }
   function sexp_of_time_token(param){
    var
     color_140 = param[3],
     owned_by_138 = param[2],
     position_136 = param[1],
     arg_141 = caml_call1(Core[558], color_140),
     bnds_135 = [0, [1, [0, bf, [0, arg_141, 0]]], 0],
     arg_139 = sexp_of_t(owned_by_138),
     bnds_135$0 = [0, [1, [0, bg, [0, arg_139, 0]]], bnds_135],
     arg_137 = caml_call1(Core[389], position_136),
     bnds_135$1 = [0, [1, [0, bh, [0, arg_137, 0]]], bnds_135$0];
    return [1, bnds_135$1];
   }
   function compare_time_token(a_142, b_143){
    if(a_142 === b_143) return 0;
    var n = Core[382].call(null, a_142[1], b_143[1]);
    if(0 !== n) return n;
    var n$0 = compare(a_142[2], b_143[2]);
    return 0 === n$0 ? Core[551].call(null, a_142[3], b_143[3]) : n$0;
   }
   function equal_time_token(a_144, b_145){
    if(a_144 === b_145) return 1;
    var a = Core[384].call(null, a_144[1], b_145[1]);
    if(a){
     var b = equal(a_144[2], b_145[2]);
     if(b) return Core[553].call(null, a_144[3], b_145[3]);
     var c = b;
    }
    else
     var c = a;
    return c;
   }
   function neutral_token_of_sexp(x_148){
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_147,
             [0, cst_pos, 1, Core[390], 0],
             function(param){return param !== cst_pos$0 ? -1 : 0;},
             0,
             function(param){var pos = param[1]; return [0, pos];},
             x_148);
   }
   function sexp_of_neutral_token(param){
    var
     pos_150 = param[1],
     arg_151 = caml_call1(Core[389], pos_150),
     bnds_149 = [0, [1, [0, bi, [0, arg_151, 0]]], 0];
    return [1, bnds_149];
   }
   function compare_neutral_token(a_152, b_153){
    return a_152 === b_153 ? 0 : Core[382].call(null, a_152[1], b_153[1]);
   }
   function equal_neutral_token(a_154, b_155){
    return a_154 === b_155 ? 1 : Core[384].call(null, a_154[1], b_155[1]);
   }
   function t_of_sexp$3(sexp_160){
    a:
    {
     if(0 === sexp_160[0]){
      var a = sexp_160[1];
      b:
      if(a !== cst_NeutralToken){
       if(a !== cst_TimeToken){
        if(a === cst_neutralToken) break b;
        if(a !== cst_timeToken) break a;
       }
       return Sexplib0_Sexp_conv_error[9].call
               (null, error_source_158, sexp_160);
      }
      return Sexplib0_Sexp_conv_error[9].call
              (null, error_source_158, sexp_160);
     }
     var match = sexp_160[1];
     if(! match)
      return Sexplib0_Sexp_conv_error[11].call
              (null, error_source_158, sexp_160);
     var match$0 = match[1];
     if(0 !== match$0[0])
      return Sexplib0_Sexp_conv_error[10].call
              (null, error_source_158, sexp_160);
     var tag_161 = match$0[1];
     b:
     if(tag_161 !== cst_NeutralToken){
      if(tag_161 !== cst_TimeToken){
       if(tag_161 === cst_neutralToken) break b;
       if(tag_161 !== cst_timeToken) break a;
      }
      var sexp_args_162 = match[2];
      if(sexp_args_162 && ! sexp_args_162[2]){
       var
        arg0_163 = sexp_args_162[1],
        res0_164 = time_token_of_sexp(arg0_163);
       return [0, res0_164];
      }
      return Sexplib0_Sexp_conv_error[8].call
              (null, error_source_158, tag_161, sexp_160);
     }
     var sexp_args_167 = match[2];
     if(sexp_args_167 && ! sexp_args_167[2]){
      var
       arg0_168 = sexp_args_167[1],
       res0_169 = neutral_token_of_sexp(arg0_168);
      return [1, res0_169];
     }
     return Sexplib0_Sexp_conv_error[8].call
             (null, error_source_158, tag_161, sexp_160);
    }
    return Sexplib0_Sexp_conv_error[12].call(null, error_source_158, sexp_160);
   }
   function sexp_of_t$3(param){
    if(0 === param[0]){
     var arg0_170 = param[1], res0_171 = sexp_of_time_token(arg0_170);
     return [1, [0, bj, [0, res0_171, 0]]];
    }
    var arg0_172 = param[1], res0_173 = sexp_of_neutral_token(arg0_172);
    return [1, [0, bk, [0, res0_173, 0]]];
   }
   function compare$3(a_174, b_175){
    if(a_174 === b_175) return 0;
    if(0 === a_174[0]){
     var a_176 = a_174[1];
     if(0 !== b_175[0]) return -1;
     var b_177 = b_175[1];
     return compare_time_token(a_176, b_177);
    }
    var a_178 = a_174[1];
    if(0 === b_175[0]) return 1;
    var b_179 = b_175[1];
    return compare_neutral_token(a_178, b_179);
   }
   function equal$3(a_180, b_181){
    if(a_180 === b_181) return 1;
    if(0 === a_180[0]){
     var a_182 = a_180[1];
     if(0 !== b_181[0]) return 0;
     var b_183 = b_181[1];
     return equal_time_token(a_182, b_183);
    }
    var a_184 = a_180[1];
    if(0 === b_181[0]) return 0;
    var b_185 = b_181[1];
    return equal_neutral_token(a_184, b_185);
   }
   function t_of_sexp$4(x_188){
    var a = Core[390], b = Core[473], c = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_187,
             [0,
              cst_player1,
              1,
              t_of_sexp,
              [0,
               cst_player2,
               1,
               t_of_sexp,
               [0,
                cst_time_piece1,
                1,
                time_token_of_sexp,
                [0,
                 cst_time_piece2,
                 1,
                 time_token_of_sexp,
                 [0,
                  cst_neutral_piece,
                  1,
                  neutral_token_of_sexp,
                  [0,
                   cst_patch_pieces,
                   1,
                   function(a){return c(t_of_sexp$0, a);},
                   [0,
                    cst_patches_remaining,
                    1,
                    function(c){return b(a, c);},
                    [0,
                     cst_main_board,
                     1,
                     main_board_of_sexp,
                     [0,
                      cst_quilt_board1,
                      1,
                      quilt_board_of_sexp,
                      [0,
                       cst_quilt_board2,
                       1,
                       quilt_board_of_sexp,
                       [0, cst_buttons, 1, t_of_sexp$2, 0]]]]]]]]]]],
             function(param){
              var switch$ = caml_string_compare(param, cst_player1$0);
              if(0 <= switch$){
               if(0 >= switch$) return 0;
               if(param === cst_player2$0) return 1;
               if(param === cst_quilt_board1$0) return 8;
               if(param === cst_quilt_board2$0) return 9;
               if(param === cst_time_piece1$0) return 2;
               if(param === cst_time_piece2$0) return 3;
              }
              else{
               if(param === cst_buttons$0) return 10;
               if(param === cst_main_board$0) return 7;
               if(param === cst_neutral_piece$0) return 4;
               if(param === cst_patch_pieces$0) return 5;
               if(param === cst_patches_remaining$1) return 6;
              }
              return -1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               d = c[2],
               e = d[2],
               f = e[2],
               g = f[2],
               h = g[2],
               i = h[2],
               buttons = i[2][1],
               quilt_board2 = i[1],
               quilt_board1 = h[1],
               main_board = g[1],
               patches_remaining = f[1],
               patch_pieces = e[1],
               neutral_piece = d[1],
               time_piece2 = c[1],
               time_piece1 = b[1],
               player2 = a[1],
               player1 = param[1];
              return [0,
                      player1,
                      player2,
                      time_piece1,
                      time_piece2,
                      neutral_piece,
                      patch_pieces,
                      patches_remaining,
                      main_board,
                      quilt_board1,
                      quilt_board2,
                      buttons];
             },
             x_188);
   }
   function sexp_of_t$4(param){
    var
     buttons_210 = param[11],
     quilt_board2_208 = param[10],
     quilt_board1_206 = param[9],
     main_board_204 = param[8],
     patches_remaining_202 = param[7],
     patch_pieces_200 = param[6],
     neutral_piece_198 = param[5],
     time_piece2_196 = param[4],
     time_piece1_194 = param[3],
     player2_192 = param[2],
     player1_190 = param[1],
     arg_211 = sexp_of_t$2(buttons_210),
     bnds_189 = [0, [1, [0, bl, [0, arg_211, 0]]], 0],
     arg_209 = sexp_of_quilt_board(quilt_board2_208),
     bnds_189$0 = [0, [1, [0, bm, [0, arg_209, 0]]], bnds_189],
     arg_207 = sexp_of_quilt_board(quilt_board1_206),
     bnds_189$1 = [0, [1, [0, bn, [0, arg_207, 0]]], bnds_189$0],
     arg_205 = sexp_of_main_board(main_board_204),
     bnds_189$2 = [0, [1, [0, bo, [0, arg_205, 0]]], bnds_189$1],
     arg_203 = Core[472].call(null, Core[389], patches_remaining_202),
     bnds_189$3 = [0, [1, [0, bp, [0, arg_203, 0]]], bnds_189$2],
     arg_201 = Core[472].call(null, sexp_of_t$0, patch_pieces_200),
     bnds_189$4 = [0, [1, [0, bq, [0, arg_201, 0]]], bnds_189$3],
     arg_199 = sexp_of_neutral_token(neutral_piece_198),
     bnds_189$5 = [0, [1, [0, br, [0, arg_199, 0]]], bnds_189$4],
     arg_197 = sexp_of_time_token(time_piece2_196),
     bnds_189$6 = [0, [1, [0, bs, [0, arg_197, 0]]], bnds_189$5],
     arg_195 = sexp_of_time_token(time_piece1_194),
     bnds_189$7 = [0, [1, [0, bt, [0, arg_195, 0]]], bnds_189$6],
     arg_193 = sexp_of_t(player2_192),
     bnds_189$8 = [0, [1, [0, bu, [0, arg_193, 0]]], bnds_189$7],
     arg_191 = sexp_of_t(player1_190),
     bnds_189$9 = [0, [1, [0, bv, [0, arg_191, 0]]], bnds_189$8];
    return [1, bnds_189$9];
   }
   function compare$4(a_212, b_213){
    if(a_212 === b_213) return 0;
    var n = compare(a_212[1], b_213[1]);
    if(0 !== n) return n;
    var n$0 = compare(a_212[2], b_213[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare_time_token(a_212[3], b_213[3]);
    if(0 !== n$1) return n$1;
    var n$2 = compare_time_token(a_212[4], b_213[4]);
    if(0 !== n$2) return n$2;
    var n$3 = compare_neutral_token(a_212[5], b_213[5]);
    if(0 !== n$3) return n$3;
    var
     n$4 =
       Core[466].call
        (null,
         function(a_214, b_215){return compare$0(a_214, b_215);},
         a_212[6],
         b_213[6]);
    if(0 !== n$4) return n$4;
    var
     n$5 =
       Core[466].call
        (null,
         function(a_216, b_217){return Core[382].call(null, a_216, b_217);},
         a_212[7],
         b_213[7]);
    if(0 !== n$5) return n$5;
    var n$6 = compare_main_board(a_212[8], b_213[8]);
    if(0 !== n$6) return n$6;
    var n$7 = compare_quilt_board(a_212[9], b_213[9]);
    if(0 !== n$7) return n$7;
    var n$8 = compare_quilt_board(a_212[10], b_213[10]);
    return 0 === n$8 ? compare$2(a_212[11], b_213[11]) : n$8;
   }
   function equal$4(a_218, b_219){
    if(a_218 === b_219) return 1;
    var b = equal(a_218[1], b_219[1]);
    if(b){
     var c = equal(a_218[2], b_219[2]);
     if(c){
      var d = equal_time_token(a_218[3], b_219[3]);
      if(d){
       var e = equal_time_token(a_218[4], b_219[4]);
       if(e){
        var f = equal_neutral_token(a_218[5], b_219[5]);
        if(f){
         var
          g =
            Core[468].call
             (null,
              function(a_220, b_221){return equal$0(a_220, b_221);},
              a_218[6],
              b_219[6]);
         if(g){
          var
           h =
             Core[468].call
              (null,
               function(a_222, b_223){
                return Core[384].call(null, a_222, b_223);
               },
               a_218[7],
               b_219[7]);
          if(h){
           var i = equal_main_board(a_218[8], b_219[8]);
           if(i){
            var j = equal_quilt_board(a_218[9], b_219[9]);
            if(j){
             var k = equal_quilt_board(a_218[10], b_219[10]);
             if(k) return equal$2(a_218[11], b_219[11]);
             var a = k;
            }
            else
             var a = j;
           }
           else
            var a = i;
          }
          else
           var a = h;
         }
         else
          var a = g;
        }
        else
         var a = f;
       }
       else
        var a = e;
      }
      else
       var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function setup_game(p1_name, p2_name, color1, color2){
    var
     player_1 = [0, 1, p1_name, 5, 0],
     player_2 = [0, 2, p2_name, 5, 0],
     time_piece_1 = [0, 1, player_1, color1],
     time_piece_2 = [0, 1, player_2, color2],
     shapes$0 = shapes,
     patches = 0,
     acc = 1;
    for(;;){
     if(! shapes$0){var param = patches; break;}
     var shapes$1 = shapes$0[2], hd = shapes$0[1];
     switch(hd){
       case 0:
        var patch_attr = aw; break;
       case 1:
        var patch_attr = ax; break;
       case 2:
        var patch_attr = ay; break;
       case 3:
        var patch_attr = az; break;
       case 4:
        var patch_attr = aA; break;
       case 5:
        var patch_attr = aB; break;
       case 6:
        var patch_attr = aC; break;
       case 7:
        var patch_attr = aD; break;
       case 8:
        var patch_attr = aE; break;
       case 9:
        var patch_attr = aF; break;
       case 10:
        var patch_attr = aG; break;
       case 11:
        var patch_attr = aH; break;
       case 12:
        var patch_attr = aI; break;
       case 13:
        var patch_attr = aJ; break;
       case 14:
        var patch_attr = aK; break;
       case 15:
        var patch_attr = aL; break;
       case 16:
        var patch_attr = aM; break;
       case 17:
        var patch_attr = aN; break;
       case 18:
        var patch_attr = aO; break;
       case 19:
        var patch_attr = aP; break;
       case 20:
        var patch_attr = aQ; break;
       case 21:
        var patch_attr = aR; break;
       case 22:
        var patch_attr = aS; break;
       case 23:
        var patch_attr = aT; break;
       case 24:
        var patch_attr = aU; break;
       case 25:
        var patch_attr = aV; break;
       case 26:
        var patch_attr = aW; break;
       case 27:
        var patch_attr = aX; break;
       case 28:
        var patch_attr = aY; break;
       case 29:
        var patch_attr = aZ; break;
       case 30:
        var patch_attr = a0; break;
       case 31:
        var patch_attr = a1; break;
       case 32:
        var patch_attr = a2; break;
       default: var patch_attr = a3;
     }
     switch(hd){
       case 2:
       case 16:
       case 24:
       case 25:
        var patch_inc = 3; break;
       case 0:
       case 14:
       case 15:
       case 20:
       case 21:
       case 22:
       case 29:
       case 30:
        var patch_inc = 2; break;
       case 3:
       case 5:
       case 6:
       case 11:
       case 13:
       case 18:
       case 23:
       case 27:
       case 28:
       case 32:
        var patch_inc = 1; break;
       default: var patch_inc = 0;
     }
     var
      patch = [0, hd, patch_attr[1], acc, patch_attr[2], patch_inc],
      pl_updated = [0, patch, patches],
      acc$0 = acc + 1 | 0;
     shapes$0 = shapes$1;
     patches = pl_updated;
     acc = acc$0;
    }
    for(;;){
     if(param){
      var a = param[1];
      if(9 !== a[1]){var tl = param[2]; param = tl; continue;}
      var pos_around_board = a[3], neut_pos = pos_around_board;
     }
     else
      var neut_pos = 1;
     var
      neutral = [0, neut_pos],
      b = [0, 152],
      game_pieces =
        [0,
         player_1,
         player_2,
         time_piece_1,
         time_piece_2,
         neutral,
         patches,
         remaining,
         main_board,
         quilt_board_1,
         quilt_board_2,
         b];
     return game_pieces;
    }
   }
   function get_input_line(param){
    Stdio_Out_channel[10].call(null, Core[25]);
    return Stdio_In_channel[16].call(null, 0, Stdio_In_channel[2]);
   }
   function t_of_sexp$5(x_226){
    var a = Core[390], b = Core[473], c = Core[473];
    return Sexplib0_Sexp_conv_record[3].call
            (null,
             error_source_225,
             [0,
              cst_mb,
              1,
              main_board_of_sexp,
              [0,
               cst_p1qb,
               1,
               quilt_board_of_sexp,
               [0,
                cst_p2qb,
                1,
                quilt_board_of_sexp,
                [0,
                 cst_bc,
                 1,
                 t_of_sexp$2,
                 [0,
                  cst_turn,
                  1,
                  t_of_sexp,
                  [0,
                   cst_tk1,
                   1,
                   time_token_of_sexp,
                   [0,
                    cst_tk2,
                    1,
                    time_token_of_sexp,
                    [0,
                     cst_neut,
                     1,
                     neutral_token_of_sexp,
                     [0,
                      cst_patches,
                      1,
                      function(a){return c(t_of_sexp$0, a);},
                      [0,
                       cst_patches_remaining$0,
                       1,
                       function(c){return b(a, c);},
                       0]]]]]]]]]],
             function(param){
              var switch$ = caml_string_compare(param, cst_patches$0);
              if(0 <= switch$){
               if(0 >= switch$) return 8;
               if(param === cst_patches_remaining$1) return 9;
               if(param === cst_tk1$0) return 5;
               if(param === cst_tk2$0) return 6;
               if(param === cst_turn$0) return 4;
              }
              else{
               if(param === cst_bc$0) return 3;
               if(param === cst_mb$0) return 0;
               if(param === cst_neut$0) return 7;
               if(param === cst_p1qb$0) return 1;
               if(param === cst_p2qb$0) return 2;
              }
              return -1;
             },
             0,
             function(param){
              var
               a = param[2],
               b = a[2],
               c = b[2],
               d = c[2],
               e = d[2],
               f = e[2],
               g = f[2],
               h = g[2],
               patches_remaining = h[2][1],
               patches = h[1],
               neut = g[1],
               tk2 = f[1],
               tk1 = e[1],
               turn = d[1],
               bc = c[1],
               p2qb = b[1],
               p1qb = a[1],
               mb = param[1];
              return [0,
                      mb,
                      p1qb,
                      p2qb,
                      bc,
                      turn,
                      tk1,
                      tk2,
                      neut,
                      patches,
                      patches_remaining];
             },
             x_226);
   }
   function sexp_of_t$5(param){
    var
     neut_242 = param[8],
     tk2_240 = param[7],
     tk1_238 = param[6],
     turn_236 = param[5],
     bc_234 = param[4],
     p2qb_232 = param[3],
     p1qb_230 = param[2],
     mb_228 = param[1],
     patches_244 = param[9],
     patches_remaining_246 = param[10],
     arg_247 = Core[472].call(null, Core[389], patches_remaining_246),
     bnds_227 = [0, [1, [0, bw, [0, arg_247, 0]]], 0],
     arg_245 = Core[472].call(null, sexp_of_t$0, patches_244),
     bnds_227$0 = [0, [1, [0, bx, [0, arg_245, 0]]], bnds_227],
     arg_243 = sexp_of_neutral_token(neut_242),
     bnds_227$1 = [0, [1, [0, by, [0, arg_243, 0]]], bnds_227$0],
     arg_241 = sexp_of_time_token(tk2_240),
     bnds_227$2 = [0, [1, [0, bz, [0, arg_241, 0]]], bnds_227$1],
     arg_239 = sexp_of_time_token(tk1_238),
     bnds_227$3 = [0, [1, [0, bA, [0, arg_239, 0]]], bnds_227$2],
     arg_237 = sexp_of_t(turn_236),
     bnds_227$4 = [0, [1, [0, bB, [0, arg_237, 0]]], bnds_227$3],
     arg_235 = sexp_of_t$2(bc_234),
     bnds_227$5 = [0, [1, [0, bC, [0, arg_235, 0]]], bnds_227$4],
     arg_233 = sexp_of_quilt_board(p2qb_232),
     bnds_227$6 = [0, [1, [0, bD, [0, arg_233, 0]]], bnds_227$5],
     arg_231 = sexp_of_quilt_board(p1qb_230),
     bnds_227$7 = [0, [1, [0, bE, [0, arg_231, 0]]], bnds_227$6],
     arg_229 = sexp_of_main_board(mb_228),
     bnds_227$8 = [0, [1, [0, bF, [0, arg_229, 0]]], bnds_227$7];
    return [1, bnds_227$8];
   }
   function compare$5(a_248, b_249){
    if(a_248 === b_249) return 0;
    var n = compare_main_board(a_248[1], b_249[1]);
    if(0 !== n) return n;
    var n$0 = compare_quilt_board(a_248[2], b_249[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare_quilt_board(a_248[3], b_249[3]);
    if(0 !== n$1) return n$1;
    var n$2 = compare$2(a_248[4], b_249[4]);
    if(0 !== n$2) return n$2;
    var n$3 = compare(a_248[5], b_249[5]);
    if(0 !== n$3) return n$3;
    var n$4 = compare_time_token(a_248[6], b_249[6]);
    if(0 !== n$4) return n$4;
    var n$5 = compare_time_token(a_248[7], b_249[7]);
    if(0 !== n$5) return n$5;
    var n$6 = compare_neutral_token(a_248[8], b_249[8]);
    if(0 !== n$6) return n$6;
    var
     n$7 =
       Core[466].call
        (null,
         function(a_250, b_251){return compare$0(a_250, b_251);},
         a_248[9],
         b_249[9]);
    return 0 === n$7
            ? Core
               [466].call
              (null,
               function(a_252, b_253){
                return Core[382].call(null, a_252, b_253);
               },
               a_248[10],
               b_249[10])
            : n$7;
   }
   function equal$5(a_254, b_255){
    if(a_254 === b_255) return 1;
    var b = equal_main_board(a_254[1], b_255[1]);
    if(b){
     var c = equal_quilt_board(a_254[2], b_255[2]);
     if(c){
      var d = equal_quilt_board(a_254[3], b_255[3]);
      if(d){
       var e = equal$2(a_254[4], b_255[4]);
       if(e){
        var f = equal(a_254[5], b_255[5]);
        if(f){
         var g = equal_time_token(a_254[6], b_255[6]);
         if(g){
          var h = equal_time_token(a_254[7], b_255[7]);
          if(h){
           var i = equal_neutral_token(a_254[8], b_255[8]);
           if(i){
            var
             j =
               Core[468].call
                (null,
                 function(a_256, b_257){return equal$0(a_256, b_257);},
                 a_254[9],
                 b_255[9]);
            if(j)
             return Core[468].call
                     (null,
                      function(a_258, b_259){
                       return Core[384].call(null, a_258, b_259);
                      },
                      a_254[10],
                      b_255[10]);
            var a = j;
           }
           else
            var a = i;
          }
          else
           var a = h;
         }
         else
          var a = g;
        }
        else
         var a = f;
       }
       else
        var a = e;
      }
      else
       var a = d;
     }
     else
      var a = c;
    }
    else
     var a = b;
    return a;
   }
   function update(st, qb1, qb2, bcache, turn, tt1, tt2, neut, p, rem){return [0, st[1], qb1, qb2, bcache, turn, tt1, tt2, neut, p, rem];
   }
   var
    No_patches_left =
      [248,
       "Patchwork__Hw2_patchwork_logic.Move.No_patches_left",
       caml_fresh_oo_id(0)],
    Patch_already_taken =
      [248,
       "Patchwork__Hw2_patchwork_logic.Move.Patch_already_taken",
       caml_fresh_oo_id(0)];
   function pl_remove_at(i, pl){
    if(! pl) return 0;
    var h = pl[1], t = pl[2];
    if(caml_call2(Core[90], h[3], i)) return t;
    var t$0 = pl[2];
    return [0, h, pl_remove_at(i, t$0)];
   }
   function reml_remove_at(i, rem_list){
    if(! rem_list) return 0;
    var h = rem_list[1], t = rem_list[2];
    if(caml_call2(Core[90], h, i)) return t;
    var t$0 = rem_list[2];
    return [0, h, reml_remove_at(i, t$0)];
   }
   var
    Invalid_patch_choice =
      [248,
       "Patchwork__Hw2_patchwork_logic.Move.Invalid_patch_choice",
       caml_fresh_oo_id(0)],
    a4 = [0, 0, 0],
    a5 = [0, 0, 0],
    a6 = [0, 0, 0, 0],
    a7 = [0, 0, 0, 0],
    cst_Please_enter_player_1_s_na = "Please enter player 1's name: ",
    cst_Please_enter_player_1_s_to = "Please enter player 1's token color: ",
    cst_Please_enter_player_2_s_na = "Please enter player 2's name: ",
    cst_Please_enter_player_2_s_to = "Please enter player 2's token color: ",
    cst_Please_choose_a_patch = "Please choose a patch: \n",
    bG =
      [0,
       [11,
        "\t1: ",
        [4,
         0,
         0,
         0,
         [11, "\n\t2: ", [4, 0, 0, 0, [11, "\n\t3: ", [4, 0, 0, 0, 0]]]]]],
       "\t1: %d\n\t2: %d\n\t3: %d"];
   function choose_move(read_int, pr, state, mv, r, c$2){
    var
     player_moving = state[5],
     player = player_moving[1],
     p1t = state[6],
     p2t = state[7],
     pqb = caml_call2(Core[90], player, 1) ? state[2] : state[3],
     patches = state[9],
     remaining_patches = state[10],
     neut = state[8];
    if(! mv){
     var
      p2t$0 = caml_call2(Core[90], player, 1) ? p2t : p1t,
      p1t$1 = caml_call2(Core[90], player, 1) ? p1t : p2t,
      b$2 = state[4],
      opp_pos = p2t$0[1],
      curr_pos = p1t$1[1],
      distance = Core[8].call(null, opp_pos - curr_pos | 0),
      n = distance + 1 | 0,
      p = p1t$1[2];
     if(caml_call2(Core[92], b$2[1], n))
      throw caml_maybe_attach_backtrace(Insufficient_cache, 0);
     p[3] = p[3] + n | 0;
     b$2[1] = b$2[1] - n | 0;
     var
      new_token = [0, opp_pos + 1 | 0, p1t$1[2], p1t$1[3]],
      next_turn$0 =
        caml_call2(Core[90], player, 1)
         ? caml_call2
            (Core[92], new_token[1], p2t[1])
           ? p1t[2]
           : caml_call2(Core[92], p2t[1], new_token[1]) ? p2t[2] : p1t[2]
         : caml_call2
            (Core[92], new_token[1], p1t[1])
           ? p2t[2]
           : caml_call2(Core[92], p1t[1], new_token[1]) ? p1t[2] : p2t[2];
     if(caml_call2(Core[90], player, 1)){
      var
       upd_st =
         update
          (state,
           state[2],
           state[3],
           state[4],
           next_turn$0,
           new_token,
           p2t,
           neut,
           state[9],
           state[10]);
      return upd_st;
     }
     var
      upd_st$0 =
        update
         (state,
          state[2],
          state[3],
          state[4],
          next_turn$0,
          p1t,
          new_token,
          neut,
          state[9],
          state[10]);
     return upd_st$0;
    }
    var neut_pos = neut[1];
    a:
    {
     var rem_list = remaining_patches;
     for(;;){
      var
       start_over =
         function(rl, n){
          if(caml_call2(Core[90], n, 1)){
           if(! rl) return a4;
           var a = rl[1];
           return [0, a, 0];
          }
          if(rl){
           var match = rl[2];
           if(match){var b = match[1], a$0 = rl[1]; return [0, a$0, b];}
          }
          return a5;
         };
      if(! rem_list){var match$2 = a7; break a;}
      var rem_list$0 = rem_list[2], hd = rem_list[1];
      if(caml_call2(Core[90], hd, neut_pos)) break;
      rem_list = rem_list$0;
     }
     if(rem_list$0){
      var match = rem_list$0[2], a = rem_list$0[1];
      if(match){
       var match$0 = match[2], b = match[1];
       if(match$0)
        var c = match$0[1], match$2 = [0, a, b, c];
       else
        var c$0 = start_over(rem_list, 1)[1], match$2 = [0, a, b, c$0];
      }
      else
       var
        match$1 = start_over(rem_list, 2),
        c$1 = match$1[2],
        b$0 = match$1[1],
        match$2 = [0, a, b$0, c$1];
     }
     else
      var match$2 = a6;
    }
    var o3 = match$2[3], o2 = match$2[2], o1 = match$2[1];
    caml_call1(pr, cst_Please_choose_a_patch);
    caml_call1(pr, caml_call3(Core_Printf[2].call(null, bG), o1, o2, o3));
    var switcher = caml_call1(read_int, 0) - 1 | 0;
    if(2 < switcher >>> 0)
     throw caml_maybe_attach_backtrace(Invalid_patch_choice, 0);
    switch(switcher){
      case 2:
       var choice = o3; break;
      case 1:
       var choice = o2; break;
      default: var choice = o1;
    }
    var pl = patches;
    for(;;){
     if(! pl) throw caml_maybe_attach_backtrace(No_patches_left, 0);
     var tl = pl[2], hd$0 = pl[1];
     if(caml_call2(Core[90], hd$0[3], choice)) break;
     pl = tl;
    }
    if(33 <= hd$0[1])
     throw caml_maybe_attach_backtrace(Patch_already_taken, 0);
    var
     pps = pl_remove_at(choice, patches),
     upd_rem_list = reml_remove_at(choice, remaining_patches),
     qb = place_patch_on_quilt_board(pqb, hd$0[1], r, c$2),
     n$0 = hd$0[2],
     b$1 = state[4];
    if(caml_call2(Core[92], player_moving[3], n$0))
     throw caml_maybe_attach_backtrace(Insufficient_funds, 0);
    player_moving[3] = player_moving[3] - n$0 | 0;
    b$1[1] = b$1[1] + n$0 | 0;
    var
     n$1 = hd$0[4],
     p1t$0 = caml_call2(Core[90], player, 1) ? p1t : p2t,
     new_token$0 = [0, p1t$0[1] + n$1 | 0, p1t$0[2], p1t$0[3]],
     next_turn =
       caml_call2(Core[90], player, 1)
        ? caml_call2
           (Core[92], new_token$0[1], p2t[1])
          ? p1t[2]
          : caml_call2(Core[92], p2t[1], new_token$0[1]) ? p2t[2] : p1t[2]
        : caml_call2
           (Core[92], new_token$0[1], p1t[1])
          ? p2t[2]
          : caml_call2(Core[92], p1t[1], new_token$0[1]) ? p1t[2] : p2t[2],
     n$2 = hd$0[3] + 1 | 0,
     updated_neut = [0, n$2],
     upd_state =
       caml_call2(Core[90], player, 1)
        ? update
          (state,
           qb,
           state[3],
           state[4],
           next_turn,
           new_token$0,
           p2t,
           updated_neut,
           pps,
           upd_rem_list)
        : update
          (state,
           state[2],
           qb,
           state[4],
           next_turn,
           p1t,
           new_token$0,
           updated_neut,
           pps,
           upd_rem_list);
    return upd_state;
   }
   function init(param){
    Core[28].call(null, cst_Please_enter_player_1_s_na);
    var p1_name = get_input_line(0);
    Core[28].call(null, cst_Please_enter_player_1_s_to);
    var p1_color = get_input_line(0);
    Core[28].call(null, cst_Please_enter_player_2_s_na);
    var p2_name = get_input_line(0);
    Core[28].call(null, cst_Please_enter_player_2_s_to);
    var
     p2_color = get_input_line(0),
     pieces = setup_game(p1_name, p1_color, p2_name, p2_color);
    return [0,
            pieces[8],
            pieces[9],
            pieces[10],
            pieces[11],
            pieces[1],
            pieces[3],
            pieces[4],
            pieces[5],
            pieces[6],
            pieces[7]];
   }
   Ppx_inline_test_lib[7].call(null, cst_patchwork);
   Ppx_expect_runtime[1][2].call(null, 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   Ppx_module_timer_runtime[5].call(null, cst_Patchwork_Hw2_patchwork_lo);
   var
    Patchwork_Hw2_patchwork_logic =
      [0,
       Player,
       [0,
        sexp_of_patch_shape,
        patch_shape_of_sexp,
        compare_patch_shape,
        equal_patch_shape,
        t_of_sexp$0,
        sexp_of_t$0,
        compare$0,
        equal$0],
       [0,
        sexp_of_main_board,
        main_board_of_sexp,
        compare_main_board,
        equal_main_board,
        sexp_of_quilt_board,
        quilt_board_of_sexp,
        compare_quilt_board,
        equal_quilt_board,
        t_of_sexp$1,
        sexp_of_t$1,
        compare$1,
        equal$1,
        Out_of_bounds,
        Patch_does_not_fit_there],
       [0,
        t_of_sexp$2,
        sexp_of_t$2,
        compare$2,
        equal$2,
        Insufficient_funds,
        Insufficient_cache],
       [0,
        sexp_of_time_token,
        time_token_of_sexp,
        compare_time_token,
        equal_time_token,
        sexp_of_neutral_token,
        neutral_token_of_sexp,
        compare_neutral_token,
        equal_neutral_token,
        t_of_sexp$3,
        sexp_of_t$3,
        compare$3,
        equal$3],
       [0, t_of_sexp$4, sexp_of_t$4, compare$4, equal$4, setup_game],
       [0, t_of_sexp$5, sexp_of_t$5, compare$5, equal$5],
       [0, No_patches_left, Patch_already_taken, choose_move],
       init];
   runtime.caml_register_global
    (450, Patchwork_Hw2_patchwork_logic, cst_Patchwork_Hw2_patchwork_lo);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLnBhdGNod29yay5vYmpzL2pzb28vZGVmYXVsdC9wYXRjaHdvcmsuY21hLmpzIiwic2VjdGlvbnMiOlt7Im9mZnNldCI6eyJsaW5lIjo5LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6Ii5wYXRjaHdvcmsub2Jqcy9qc29vL2RlZmF1bHQvcGF0Y2h3b3JrLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiXSwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiXSwibmFtZXMiOlsicnVudGltZSIsIlBhdGNod29yayJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUEsY0FBQSIsImlnbm9yZUxpc3QiOlswXX19LHsib2Zmc2V0Ijp7ImxpbmUiOjI0LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6Ii5wYXRjaHdvcmsub2Jqcy9qc29vL2RlZmF1bHQvcGF0Y2h3b3JrLmNtYS5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvd29ya3NwYWNlX3Jvb3QvbGliL3BhdGNod29yay5tbCJdLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4hIENvcmVcblxuKCogUGxheWVycyAqKVxuXG5tb2R1bGUgUGxheWVyID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBwbGF5ZXJfbnVtIDogaW50O1xuICAgIHBsYXllcl9uYW1lIDogc3RyaW5nO1xuICAgIG11dGFibGUgYnV0dG9uc19vd25lZCA6IGludDtcbiAgICBtdXRhYmxlIHNjb3JlIDogaW50O1xuICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuZW5kXG5cbigqIFBhdGNoZXMgKilcblxubW9kdWxlIFBhdGNoID0gc3RydWN0XG4gIHR5cGUgcGF0Y2hfc2hhcGUgPVxuICAgIHwgU3F1YXJlXG4gICAgfCBTcXVhcmVOdWJcbiAgICB8IFNxdWFyZUhpZ2hGaXZlXG4gICAgfCBUQ3Jvc3NcbiAgICB8IFNcbiAgICB8IExvbmdJXG4gICAgfCBMSGFsZkhcbiAgICB8IFNIYWxmSFxuICAgIHwgSFxuICAgIHwgQ29ybmVyXG4gICAgfCBDb3JuZXJSZXZcbiAgICB8IFNMVmVydFxuICAgIHwgU2hvcnRJXG4gICAgfCBMUmV2XG4gICAgfCBMb25nTFxuICAgIHwgTFxuICAgIHwgQ2h1bmt5TFJldlxuICAgIHwgU21hbGxJXG4gICAgfCBJXG4gICAgfCBTaG9ydFRcbiAgICB8IFN0dWJieVRcbiAgICB8IFRcbiAgICB8IFBsdXNcbiAgICB8IFppZ1xuICAgIHwgWmlnWmFnXG4gICAgfCBaaWdSZXZcbiAgICB8IENodW5reVppZ1xuICAgIHwgQ3Jvc3NcbiAgICB8IElOdWJcbiAgICB8IFdpZGVTdHViYnlUXG4gICAgfCBQcm9uZ1xuICAgIHwgVmluZVxuICAgIHwgV2lkZVBsdXNcbiAgICB8IEVtcHR5XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIHR5cGUgdCA9IHtcbiAgICBzaGFwZSA6IHBhdGNoX3NoYXBlO1xuICAgIGNvc3QgOiBpbnQ7XG4gICAgcG9zX2Fyb3VuZF9ib2FyZCA6IGludDtcbiAgICBtb3ZlX251bSA6IGludDtcbiAgICBpbmNvbWUgOiBpbnQ7XG4gICAgbXV0YWJsZSByb3RhdGVkIDogaW50O1xuICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGxldCBnZXRfcGF0Y2hfZGltIHAgPVxuICAgIG1hdGNoIHAgd2l0aFxuICAgIHwgU3F1YXJlIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiTFwiKSBdXG4gICAgfCBTcXVhcmVOdWIgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJVXCIpIF1cbiAgICB8IFNxdWFyZUhpZ2hGaXZlIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiVVwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiVVwiKSBdXG4gICAgfCBUQ3Jvc3MgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgyLCBcIkRcIikgXVxuICAgIHwgUyAtPiBbICgyLCBcIkxcIik7ICgyLCBcIkRcIik7ICgxLCBcIkxcIikgXVxuICAgIHwgTG9uZ0kgLT4gWyAoNSwgXCJEXCIpIF1cbiAgICB8IExIYWxmSCAtPiBbICgyLCBcIkRcIik7ICgzLCBcIlJcIik7ICgxLCBcIlVcIikgXVxuICAgIHwgU0hhbGZIIC0+IFsgKDIsIFwiRFwiKTsgKDIsIFwiUlwiKTsgKDEsIFwiVVwiKSBdXG4gICAgfCBIIC0+IFsgKDMsIFwiRFwiKTsgKDEsIFwiU1VcIik7ICgyLCBcIlJcIik7ICgxLCBcIlVcIik7ICgxLCBcIlNEXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IENvcm5lciAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgQ29ybmVyUmV2IC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiUlwiKSBdXG4gICAgfCBTTFZlcnQgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IFNob3J0SSAtPiBbICgzLCBcIkRcIikgXVxuICAgIHwgSSAtPiBbICg0LCBcIkRcIikgXVxuICAgIHwgTFJldiAtPiBbICgzLCBcIkRcIik7ICgxLCBcIkxcIikgXVxuICAgIHwgTG9uZ0wgLT4gWyAoNCwgXCJEXCIpOyAoMSwgXCJSXCIpIF1cbiAgICB8IEwgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJSXCIpIF1cbiAgICB8IENodW5reUxSZXYgLT4gWyAoNCwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJVXCIpIF1cbiAgICB8IFNtYWxsSSAtPiBbICgyLCBcIkRcIikgXVxuICAgIHwgU2hvcnRUIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiU1VcIik7ICgxLCBcIlJcIikgXVxuICAgIHwgU3R1YmJ5VCAtPiBbICgzLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IFQgLT4gWyAoMywgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDMsIFwiRFwiKSBdXG4gICAgfCBQbHVzIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IFppZyAtPiBbICgyLCBcIkRcIik7ICgxLCBcIlJcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgWmlnWmFnIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgfCBaaWdSZXYgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IENodW5reVppZyAtPiBbICgzLCBcIkRcIik7ICgxLCBcIlNVXCIpOyAoMSwgXCJMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IENyb3NzIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IElOdWIgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgfCBXaWRlU3R1YmJ5VCAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlNVXCIpOyAoMSwgXCJSXCIpIF1cbiAgICB8IFByb25nIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiU1VcIik7ICgxLCBcIlNSXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IFZpbmUgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgV2lkZVBsdXMgLT5cbiAgICAgICAgW1xuICAgICAgICAgICgyLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMSwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJVXCIpOyAoMSwgXCJMXCIpO1xuICAgICAgICBdXG4gICAgfCBFbXB0eSAtPiBbXVxuXG4gIGxldCByb3RhdGUgKHAgOiB0KSA9XG4gICAgaWYgcC5yb3RhdGVkID0gMCB0aGVuXG4gICAgICBtYXRjaCBwLnNoYXBlIHdpdGhcbiAgICAgIHwgU3F1YXJlIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiTFwiKSBdXG4gICAgICB8IFNxdWFyZU51YiAtPiBbICgyLCBcIkxcIik7ICgxLCBcIlVcIik7ICgxLCBcIkxcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBTcXVhcmVIaWdoRml2ZSAtPiBbICgyLCBcIkxcIik7ICgyLCBcIlVcIik7ICgxLCBcIkxcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBUQ3Jvc3MgLT4gWyAoMSwgXCJEXCIpOyAoMiwgXCJMXCIpOyAoMiwgXCJTUlwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBTIC0+IFsgKDIsIFwiRFwiKTsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgICB8IExvbmdJIC0+IFsgKDUsIFwiUlwiKSBdXG4gICAgICB8IExIYWxmSCAtPiBbICgyLCBcIkxcIik7ICgzLCBcIkRcIik7ICgxLCBcIlJcIikgXVxuICAgICAgfCBTSGFsZkggLT4gWyAoMiwgXCJMXCIpOyAoMiwgXCJEXCIpOyAoMSwgXCJSXCIpIF1cbiAgICAgIHwgSCAtPiBbICgzLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiUlwiKSBdXG4gICAgICB8IENvcm5lciAtPiBbICgyLCBcIlJcIik7ICgxLCBcIlVcIikgXVxuICAgICAgfCBDb3JuZXJSZXYgLT4gWyAoMiwgXCJMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICAgIHwgU0xWZXJ0IC0+IFsgKDIsIFwiTFwiKTsgKDEsIFwiRFwiKTsgKDIsIFwiTFwiKSBdXG4gICAgICB8IFNob3J0SSAtPiBbICgzLCBcIlJcIikgXVxuICAgICAgfCBJIC0+IFsgKDQsIFwiUlwiKSBdXG4gICAgICB8IExSZXYgLT4gWyAoMiwgXCJEXCIpOyAoMiwgXCJSXCIpIF1cbiAgICAgIHwgTG9uZ0wgLT4gWyAoNCwgXCJMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICAgIHwgTCAtPiBbICgzLCBcIkxcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBDaHVua3lMUmV2IC0+IFsgKDIsIFwiTFwiKTsgKDEsIFwiRFwiKTsgKDMsIFwiUlwiKSBdXG4gICAgICB8IFNtYWxsSSAtPiBbICgyLCBcIlJcIikgXVxuICAgICAgfCBTaG9ydFQgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgICB8IFN0dWJieVQgLT4gWyAoMiwgXCJEXCIpOyAoMiwgXCJMXCIpOyAoMiwgXCJTUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgICB8IFQgLT4gWyAoMiwgXCJEXCIpOyAoMywgXCJMXCIpOyAoMywgXCJTUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgICB8IFBsdXMgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBaaWcgLT4gWyAoMiwgXCJMXCIpOyAoMSwgXCJEXCIpOyAoMSwgXCJMXCIpIF1cbiAgICAgIHwgWmlnWmFnIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiTFwiKSBdXG4gICAgICB8IFppZ1JldiAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlJcIikgXVxuICAgICAgfCBDaHVua3laaWcgLT4gWyAoMywgXCJSXCIpOyAoMSwgXCJEXCIpOyAoMiwgXCJSXCIpIF1cbiAgICAgIHwgQ3Jvc3MgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDIsIFwiTFwiKTsgKDIsIFwiU1JcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBJTnViIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgyLCBcIlJcIikgXVxuICAgICAgfCBXaWRlU3R1YmJ5VCAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlNVXCIpOyAoMSwgXCJSXCIpIF1cbiAgICAgIHwgUHJvbmcgLT4gWyAoMiwgXCJSXCIpOyAoMSwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiTFwiKSBdXG4gICAgICB8IFZpbmUgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDIsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIkRcIikgXVxuICAgICAgfCBXaWRlUGx1cyAtPlxuICAgICAgICAgIFtcbiAgICAgICAgICAgICgyLCBcIkRcIik7ICgxLCBcIkxcIik7ICgxLCBcIkRcIik7ICgxLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlNVXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJVXCIpO1xuICAgICAgICAgIF1cbiAgICAgIHwgRW1wdHkgLT4gW11cbiAgICBlbHNlIGdldF9wYXRjaF9kaW0gcC5zaGFwZVxuXG4gIGxldCBnZXRfdmFsdWVzIHAgPVxuICAgIG1hdGNoIHAgd2l0aFxuICAgIHwgU3F1YXJlIC0+ICg2LCA1KVxuICAgIHwgU3F1YXJlTnViIC0+ICgyLCAyKVxuICAgIHwgU3F1YXJlSGlnaEZpdmUgLT4gKDgsIDYpXG4gICAgfCBUQ3Jvc3MgLT4gKDEsIDQpXG4gICAgfCBTIC0+ICgxLCAyKVxuICAgIHwgTG9uZ0kgLT4gKDcsIDEpXG4gICAgfCBMSGFsZkggLT4gKDEsIDUpXG4gICAgfCBTSGFsZkggLT4gKDEsIDIpXG4gICAgfCBIIC0+ICgyLCAzKVxuICAgIHwgQ29ybmVyIC0+ICgzLCAxKVxuICAgIHwgQ29ybmVyUmV2IC0+ICgxLCAzKVxuICAgIHwgU0xWZXJ0IC0+ICgyLCAzKVxuICAgIHwgU2hvcnRJIC0+ICgyLCAyKVxuICAgIHwgTFJldiAtPiAoNCwgMilcbiAgICB8IExvbmdMIC0+ICgxMCwgMylcbiAgICB8IEwgLT4gKDQsIDYpXG4gICAgfCBDaHVua3lMUmV2IC0+ICgxMCwgNSlcbiAgICB8IFNtYWxsSSAtPiAoMiwgMSlcbiAgICB8IEkgLT4gKDMsIDMpXG4gICAgfCBTaG9ydFQgLT4gKDIsIDIpXG4gICAgfCBTdHViYnlUIC0+ICg1LCA1KVxuICAgIHwgVCAtPiAoNywgMilcbiAgICB8IFBsdXMgLT4gKDUsIDQpXG4gICAgfCBaaWcgLT4gKDMsIDIpXG4gICAgfCBaaWdaYWcgLT4gKDEwLCA0KVxuICAgIHwgWmlnUmV2IC0+ICg3LCA2KVxuICAgIHwgQ2h1bmt5WmlnIC0+ICg0LCAyKVxuICAgIHwgQ3Jvc3MgLT4gKDAsIDMpXG4gICAgfCBJTnViIC0+ICgzLCA0KVxuICAgIHwgV2lkZVN0dWJieVQgLT4gKDcsIDQpXG4gICAgfCBQcm9uZyAtPiAoMywgNilcbiAgICB8IFZpbmUgLT4gKDIsIDEpXG4gICAgfCBXaWRlUGx1cyAtPiAoNSwgMylcbiAgICB8IEVtcHR5IC0+ICgwLCAwKVxuXG4gIGxldCBnZXRfaW5jb21lIHAgPVxuICAgIG1hdGNoIHAgd2l0aFxuICAgIHwgU3F1YXJlIC0+IDJcbiAgICB8IFNxdWFyZU51YiAtPiAwXG4gICAgfCBTcXVhcmVIaWdoRml2ZSAtPiAzXG4gICAgfCBUQ3Jvc3MgLT4gMVxuICAgIHwgUyAtPiAwXG4gICAgfCBMb25nSSAtPiAxXG4gICAgfCBMSGFsZkggLT4gMVxuICAgIHwgU0hhbGZIIC0+IDBcbiAgICB8IEggLT4gMFxuICAgIHwgQ29ybmVyIC0+IDBcbiAgICB8IENvcm5lclJldiAtPiAwXG4gICAgfCBTTFZlcnQgLT4gMVxuICAgIHwgU2hvcnRJIC0+IDBcbiAgICB8IExSZXYgLT4gMVxuICAgIHwgTG9uZ0wgLT4gMlxuICAgIHwgTCAtPiAyXG4gICAgfCBDaHVua3lMUmV2IC0+IDNcbiAgICB8IFNtYWxsSSAtPiAwXG4gICAgfCBJIC0+IDFcbiAgICB8IFNob3J0VCAtPiAwXG4gICAgfCBTdHViYnlUIC0+IDJcbiAgICB8IFQgLT4gMlxuICAgIHwgUGx1cyAtPiAyXG4gICAgfCBaaWcgLT4gMVxuICAgIHwgWmlnWmFnIC0+IDNcbiAgICB8IFppZ1JldiAtPiAzXG4gICAgfCBDaHVua3laaWcgLT4gMFxuICAgIHwgQ3Jvc3MgLT4gMVxuICAgIHwgSU51YiAtPiAxXG4gICAgfCBXaWRlU3R1YmJ5VCAtPiAyXG4gICAgfCBQcm9uZyAtPiAyXG4gICAgfCBWaW5lIC0+IDBcbiAgICB8IFdpZGVQbHVzIC0+IDFcbiAgICB8IEVtcHR5IC0+IDBcblxuICBsZXQgZ2V0X2NvbF9yb3cgcCA9XG4gICAgbWF0Y2ggcCB3aXRoXG4gICAgfCBTcXVhcmUgLT4gKDIsIDIpXG4gICAgfCBTcXVhcmVOdWIgLT4gKDIsIDMpXG4gICAgfCBTcXVhcmVIaWdoRml2ZSAtPiAoMywgMylcbiAgICB8IFRDcm9zcyAtPiAoMywgNSlcbiAgICB8IFMgLT4gKDMsIDUpXG4gICAgfCBMb25nSSAtPiAoMSwgNSlcbiAgICB8IExIYWxmSCAtPiAoNCwgMilcbiAgICB8IFNIYWxmSCAtPiAoMywgMilcbiAgICB8IEggLT4gKDMsIDMpXG4gICAgfCBDb3JuZXIgLT4gKDIsIDIpXG4gICAgfCBDb3JuZXJSZXYgLT4gKDIsIDIpXG4gICAgfCBTTFZlcnQgLT4gKDIsIDQpXG4gICAgfCBTaG9ydEkgLT4gKDEsIDMpXG4gICAgfCBMUmV2IC0+ICgyLCAzKVxuICAgIHwgTG9uZ0wgLT4gKDIsIDQpXG4gICAgfCBMIC0+ICgyLCAzKVxuICAgIHwgQ2h1bmt5TFJldiAtPiAoMiwgNClcbiAgICB8IFNtYWxsSSAtPiAoMSwgMilcbiAgICB8IEkgLT4gKDEsIDQpXG4gICAgfCBTaG9ydFQgLT4gKDMsIDIpXG4gICAgfCBTdHViYnlUIC0+ICgzLCAzKVxuICAgIHwgVCAtPiAoMywgNClcbiAgICB8IFBsdXMgLT4gKDMsIDMpXG4gICAgfCBaaWcgLT4gKDIsIDMpXG4gICAgfCBaaWdaYWcgLT4gKDMsIDMpXG4gICAgfCBaaWdSZXYgLT4gKDIsIDQpXG4gICAgfCBDaHVua3laaWcgLT4gKDIsIDQpXG4gICAgfCBDcm9zcyAtPiAoMywgNClcbiAgICB8IElOdWIgLT4gKDIsIDQpXG4gICAgfCBXaWRlU3R1YmJ5VCAtPiAoNCwgMilcbiAgICB8IFByb25nIC0+ICgzLCAzKVxuICAgIHwgVmluZSAtPiAoMywgNClcbiAgICB8IFdpZGVQbHVzIC0+ICgzLCAzKVxuICAgIHwgRW1wdHkgLT4gKDAsIDApXG5cbiAgbGV0IHNoYXBlcyA9XG4gICAgW1xuICAgICAgU3F1YXJlO1xuICAgICAgU3F1YXJlTnViO1xuICAgICAgU3F1YXJlSGlnaEZpdmU7XG4gICAgICBUQ3Jvc3M7XG4gICAgICBTO1xuICAgICAgTG9uZ0k7XG4gICAgICBMSGFsZkg7XG4gICAgICBTSGFsZkg7XG4gICAgICBIO1xuICAgICAgQ29ybmVyO1xuICAgICAgQ29ybmVyUmV2O1xuICAgICAgU0xWZXJ0O1xuICAgICAgU2hvcnRJO1xuICAgICAgTFJldjtcbiAgICAgIExvbmdMO1xuICAgICAgTDtcbiAgICAgIENodW5reUxSZXY7XG4gICAgICBTbWFsbEk7XG4gICAgICBJO1xuICAgICAgU2hvcnRUO1xuICAgICAgU3R1YmJ5VDtcbiAgICAgIFQ7XG4gICAgICBQbHVzO1xuICAgICAgWmlnO1xuICAgICAgWmlnWmFnO1xuICAgICAgWmlnUmV2O1xuICAgICAgQ2h1bmt5WmlnO1xuICAgICAgQ3Jvc3M7XG4gICAgICBJTnViO1xuICAgICAgV2lkZVN0dWJieVQ7XG4gICAgICBQcm9uZztcbiAgICAgIFZpbmU7XG4gICAgICBXaWRlUGx1cztcbiAgICBdXG5cbiAgbGV0IHJlYyBnZXRfdGhyZWUgaSByZW1fbGlzdCA9XG4gICAgbGV0IHN0YXJ0X292ZXIgcmwgbiA9XG4gICAgICBpZiBuID0gMSB0aGVuXG4gICAgICAgIG1hdGNoIHJsIHdpdGhcbiAgICAgICAgfCBbXSAtPiAoMCwgMClcbiAgICAgICAgfCBhIDo6IF8gLT4gKGEsIDApXG4gICAgICBlbHNlXG4gICAgICAgIG1hdGNoIHJsIHdpdGhcbiAgICAgICAgfCBhIDo6IGIgOjogXyAtPiAoYSwgYilcbiAgICAgICAgfCBfIC0+ICgwLCAwKVxuICAgIGluXG4gICAgbWF0Y2ggcmVtX2xpc3Qgd2l0aFxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgaWYgaGQgPSBpIHRoZW5cbiAgICAgICAgICBtYXRjaCB0bCB3aXRoXG4gICAgICAgICAgfCBhIDo6IGIgOjogYyA6OiBfIC0+IChhLCBiLCBjKVxuICAgICAgICAgIHwgWyBhOyBiIF0gLT5cbiAgICAgICAgICAgICAgbGV0IGMgPSBmc3QgKHN0YXJ0X292ZXIgcmVtX2xpc3QgMSkgaW5cbiAgICAgICAgICAgICAgKGEsIGIsIGMpXG4gICAgICAgICAgfCBhIDo6IFtdIC0+XG4gICAgICAgICAgICAgIGxldCBiLCBjID0gc3RhcnRfb3ZlciByZW1fbGlzdCAyIGluXG4gICAgICAgICAgICAgIChhLCBiLCBjKVxuICAgICAgICAgIHwgW10gLT4gKDAsIDAsIDApXG4gICAgICAgIGVsc2UgZ2V0X3RocmVlIGkgdGxcbiAgICB8IFtdIC0+ICgwLCAwLCAwKVxuXG4gIGxldCByZWMgYnVpbGRfcGF0Y2hfc2V0IHNoYXBlcyAocGF0Y2hlcyA6IHQgbGlzdCkgYWNjID1cbiAgICBtYXRjaCBzaGFwZXMgd2l0aFxuICAgIHwgW10gLT4gcGF0Y2hlc1xuICAgIHwgaGQgOjogdCAtPlxuICAgICAgICBsZXQgcGF0Y2hfYXR0ciA9IGdldF92YWx1ZXMgaGQgaW5cbiAgICAgICAgbGV0IHBhdGNoX2luYyA9IGdldF9pbmNvbWUgaGQgaW5cbiAgICAgICAgbGV0IHBhdGNoID1cbiAgICAgICAgICB7XG4gICAgICAgICAgICBzaGFwZSA9IGhkO1xuICAgICAgICAgICAgcG9zX2Fyb3VuZF9ib2FyZCA9IGFjYztcbiAgICAgICAgICAgIGNvc3QgPSBmc3QgcGF0Y2hfYXR0cjtcbiAgICAgICAgICAgIG1vdmVfbnVtID0gc25kIHBhdGNoX2F0dHI7XG4gICAgICAgICAgICBpbmNvbWUgPSBwYXRjaF9pbmM7XG4gICAgICAgICAgICByb3RhdGVkID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIGluXG4gICAgICAgIGxldCBwbF91cGRhdGVkID0gcGF0Y2ggOjogcGF0Y2hlcyBpblxuICAgICAgICBidWlsZF9wYXRjaF9zZXQgdCBwbF91cGRhdGVkIChhY2MgKyAxKVxuXG4gIGxldCBpbml0X3BhdGNoZXMgKCkgPSBidWlsZF9wYXRjaF9zZXQgc2hhcGVzIFtdIDFcblxuICBsZXQgZmluZF9pbml0aWFsX25ldXRfcG9zIHBsID1cbiAgICBsZXQgcmVjIGl0ZXJfcGF0Y2hfbGlzdCA9IGZ1bmN0aW9uXG4gICAgICB8IFtdIC0+IDFcbiAgICAgIHwge1xuICAgICAgICAgIHNoYXBlID0gQ29ybmVyO1xuICAgICAgICAgIHBvc19hcm91bmRfYm9hcmQ7XG4gICAgICAgICAgY29zdCA9IF87XG4gICAgICAgICAgbW92ZV9udW0gPSBfO1xuICAgICAgICAgIGluY29tZSA9IF87XG4gICAgICAgICAgcm90YXRlZCA9IF87XG4gICAgICAgIH1cbiAgICAgICAgOjogXyAtPlxuICAgICAgICAgIHBvc19hcm91bmRfYm9hcmRcbiAgICAgIHwgXyA6OiB0bCAtPiBpdGVyX3BhdGNoX2xpc3QgdGxcbiAgICBpblxuICAgIGl0ZXJfcGF0Y2hfbGlzdCBwbFxuZW5kXG5cbigqIEdhbWUgQm9hcmRzICopXG5cbm1vZHVsZSBHYW1lX2JvYXJkID0gc3RydWN0XG4gIHR5cGUgbWFpbl9ib2FyZCA9IHsgc3F1YXJlcyA6IGludDsgc3BlY2lhbF9wYXRjaF9sb2NzIDogaW50IGxpc3QgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIHF1aWx0X2JvYXJkID0geyBzcXVhcmVzIDogaW50OyBmaWxsZWRfc3F1YXJlcyA6IChpbnQgKiBpbnQpIGxpc3QgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIHQgPSBNYWluQm9hcmQgb2YgbWFpbl9ib2FyZCB8IFF1aWx0Qm9hcmQgb2YgcXVpbHRfYm9hcmRcbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgZXhjZXB0aW9uIE91dF9vZl9ib3VuZHNcbiAgZXhjZXB0aW9uIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuXG4gIGxldCByZWMgY2hlY2tfcGF0Y2hfc3F1YXJlcyAoZiA6IChpbnQgKiBpbnQpIGxpc3QpIHFiIHNyIHNjIGRpciBhY2MgPVxuICAgIGlmIGFjYyA8IDEgdGhlbiAoc3IsIHNjKVxuICAgIGVsc2VcbiAgICAgIGxldCByZWMgY2hlY2tfYWxsX2ZpbGxlZCAoZmlsbGVkX3NxdWFyZXMgOiAoaW50ICogaW50KSBsaXN0KSA6IGJvb2wgPVxuICAgICAgICBtYXRjaCBmaWxsZWRfc3F1YXJlcyB3aXRoXG4gICAgICAgIHwgW10gLT4gdHJ1ZVxuICAgICAgICB8IChyLCBjKSA6OiB0bCAtPlxuICAgICAgICAgICAgaWYgciA9IHNyICYmIGMgPSBzYyB0aGVuIHJhaXNlIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuICAgICAgICAgICAgZWxzZSBjaGVja19hbGxfZmlsbGVkIHRsXG4gICAgICBpblxuXG4gICAgICAoKiBjdXJyZW50IHNxdWFyZSBub3QgaW4gZmlsbGVkICopXG4gICAgICBpZiBjaGVja19hbGxfZmlsbGVkIGYgdGhlblxuICAgICAgICBtYXRjaCBkaXIgd2l0aFxuICAgICAgICB8IFwiRFwiIC0+XG4gICAgICAgICAgICBpZiBzciA8IHFiLnNxdWFyZXMgdGhlbiBjaGVja19wYXRjaF9zcXVhcmVzIGYgcWIgKHNyICsgMSkgc2MgZGlyIChhY2MgLSAxKVxuICAgICAgICAgICAgZWxzZSByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgIHwgXCJVXCIgLT5cbiAgICAgICAgICAgIGlmIHNyID4gMSB0aGVuIGNoZWNrX3BhdGNoX3NxdWFyZXMgZiBxYiAoc3IgLSAxKSBzYyBkaXIgKGFjYyAtIDEpXG4gICAgICAgICAgICBlbHNlIHJhaXNlIE91dF9vZl9ib3VuZHNcbiAgICAgICAgfCBcIkxcIiAtPlxuICAgICAgICAgICAgaWYgc2MgPiAxIHRoZW4gY2hlY2tfcGF0Y2hfc3F1YXJlcyBmIHFiIHNyIChzYyAtIDEpIGRpciAoYWNjIC0gMSlcbiAgICAgICAgICAgIGVsc2UgcmFpc2UgT3V0X29mX2JvdW5kc1xuICAgICAgICB8IFwiUlwiIC0+XG4gICAgICAgICAgICBpZiBzYyA8IHFiLnNxdWFyZXMgdGhlbiBjaGVja19wYXRjaF9zcXVhcmVzIGYgcWIgc3IgKHNjICsgMSkgZGlyIChhY2MgLSAxKVxuICAgICAgICAgICAgZWxzZSByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgIHwgXCJTVVwiIC0+IChzciAtIDEsIHNjKVxuICAgICAgICB8IFwiU0RcIiAtPiAoc3IgKyAxLCBzYylcbiAgICAgICAgfCBcIlNMXCIgLT4gKHNyLCBzYyAtIDEpXG4gICAgICAgIHwgXCJTUlwiIC0+IChzciwgc2MgKyAxKVxuICAgICAgICB8IF8gLT4gKC0xLCAtMSlcbiAgICAgIGVsc2UgKC0xLCAtMSlcblxuICBsZXQgcmVjIGNoZWNrX2lmX3BhdGNoX2ZpdHMgcGF0Y2hEaW0gYm9hcmQgcm93IGNvbCA9XG4gICAgbWF0Y2ggcGF0Y2hEaW0gd2l0aFxuICAgIHwgW10gLT4gdHJ1ZVxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgbGV0IHEsIGQgPSBoZCBpblxuICAgICAgICBsZXQgdXBkX3JvdywgdXBkX2NvbCA9XG4gICAgICAgICAgY2hlY2tfcGF0Y2hfc3F1YXJlcyBib2FyZC5maWxsZWRfc3F1YXJlcyBib2FyZCByb3cgY29sIGQgcVxuICAgICAgICBpblxuICAgICAgICBpZiB1cGRfcm93ID0gLTEgJiYgdXBkX2NvbCA9IC0xIHRoZW4gZmFsc2VcbiAgICAgICAgZWxzZSBjaGVja19pZl9wYXRjaF9maXRzIHRsIGJvYXJkIHVwZF9yb3cgdXBkX2NvbFxuXG4gIGxldCBwbGFjZV9wYXRjaF9vbl9xdWlsdF9ib2FyZCBib2FyZCBwYXRjaCByIGMgPVxuICAgIGxldCBkaW0gPSBQYXRjaC5nZXRfcGF0Y2hfZGltIHBhdGNoIGluXG5cbiAgICBpZiBjaGVja19pZl9wYXRjaF9maXRzIGRpbSBib2FyZCByIGMgdGhlblxuICAgICAgbGV0IHJlYyBwcm9jZXNzX2RpciByIGMgZGlyIGZpbGxlZCBhY2MgPVxuICAgICAgICBpZiBhY2MgPiAwIHRoZW5cbiAgICAgICAgICBpZiByID4gYm9hcmQuc3F1YXJlcyB8fCBjID4gYm9hcmQuc3F1YXJlcyB8fCByIDwgMSB8fCBjIDwgMSB0aGVuXG4gICAgICAgICAgICByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGV0IG5mID0gKHIsIGMpIDo6IGZpbGxlZCBpblxuICAgICAgICAgICAgbWF0Y2ggZGlyIHdpdGhcbiAgICAgICAgICAgIHwgXCJEXCIgLT4gcHJvY2Vzc19kaXIgKHIgKyAxKSBjIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJVXCIgLT4gcHJvY2Vzc19kaXIgKHIgLSAxKSBjIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJMXCIgLT4gcHJvY2Vzc19kaXIgciAoYyAtIDEpIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJSXCIgLT4gcHJvY2Vzc19kaXIgciAoYyArIDEpIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXyAtPiBuZlxuICAgICAgICBlbHNlIGZpbGxlZFxuICAgICAgaW5cblxuICAgICAgbGV0IHJlYyBwcm9jZXNzX3BhdGNoIHBhdGNoIHFiIG5mIHIgYyBhY2MgPVxuICAgICAgICBsZXQgZXh0cmFjdF9oZWFkIGwgPVxuICAgICAgICAgIG1hdGNoIGwgd2l0aFxuICAgICAgICAgIHwgW10gLT4gKC0xLCAtMSlcbiAgICAgICAgICB8IGhkIDo6IF8gLT4gaGRcbiAgICAgICAgaW5cbiAgICAgICAgbWF0Y2ggcGF0Y2ggd2l0aFxuICAgICAgICB8IFtdIC0+XG4gICAgICAgICAgICBsZXQgdXBkX3F1aWx0X2JvYXJkID0geyBib2FyZCB3aXRoIGZpbGxlZF9zcXVhcmVzID0gbmYgfSBpblxuICAgICAgICAgICAgdXBkX3F1aWx0X2JvYXJkXG4gICAgICAgIHwgaGQgOjogdCAtPlxuICAgICAgICAgICAgbGV0IG12LCBkaXIgPSBoZCBpblxuICAgICAgICAgICAgbGV0IG5yLCBuYyA9XG4gICAgICAgICAgICAgIGlmIGFjYyA+IDEgdGhlblxuICAgICAgICAgICAgICAgIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJEXCIgdGhlbiAociArIDEsIGMpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiVVwiIHRoZW4gKHIgLSAxLCBjKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgU3RyaW5nLmVxdWFsIGRpciBcIkxcIiB0aGVuIChyLCBjIC0gMSlcbiAgICAgICAgICAgICAgICBlbHNlIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJSXCIgdGhlbiAociwgYyArIDEpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiU0RcIiB0aGVuIChyICsgMSwgYylcbiAgICAgICAgICAgICAgICBlbHNlIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJTVVwiIHRoZW4gKHIgLSAxLCBjKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgU3RyaW5nLmVxdWFsIGRpciBcIlNMXCIgdGhlbiAociwgYyAtIDEpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiU1JcIiB0aGVuIChyLCBjICsgMSlcbiAgICAgICAgICAgICAgICBlbHNlIChyLCBjKVxuICAgICAgICAgICAgICBlbHNlIChyLCBjKVxuICAgICAgICAgICAgaW5cblxuICAgICAgICAgICAgbGV0IG5ld19maWxsZWQgPSBwcm9jZXNzX2RpciBuciBuYyBkaXIgbmYgbXYgaW5cbiAgICAgICAgICAgIGxldCBoZWFkID0gZXh0cmFjdF9oZWFkIG5ld19maWxsZWQgaW5cbiAgICAgICAgICAgIGxldCBuciA9IGZzdCBoZWFkIGluXG4gICAgICAgICAgICBsZXQgbmMgPSBzbmQgaGVhZCBpblxuICAgICAgICAgICAgcHJvY2Vzc19wYXRjaCB0IHFiIG5ld19maWxsZWQgbnIgbmMgKGFjYyArIDEpXG4gICAgICBpblxuICAgICAgcHJvY2Vzc19wYXRjaCBkaW0gYm9hcmQgYm9hcmQuZmlsbGVkX3NxdWFyZXMgciBjIDFcbiAgICBlbHNlIHJhaXNlIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuZW5kXG5cbigqIEJ1dHRvbnMgKilcblxubW9kdWxlIEJ1dHRvbiA9IHN0cnVjdFxuICB0eXBlIHQgPSB7IG11dGFibGUgdW5hc3NpZ25lZF9jYWNoZSA6IGludCB9IFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGV4Y2VwdGlvbiBJbnN1ZmZpY2llbnRfY2FjaGVcbiAgZXhjZXB0aW9uIEluc3VmZmljaWVudF9mdW5kc1xuXG4gIGxldCBnaXZlX2J1dHRvbnMgYiAocCA6IFBsYXllci50KSBuID1cbiAgICBpZiBiLnVuYXNzaWduZWRfY2FjaGUgPCBuIHRoZW4gcmFpc2UgSW5zdWZmaWNpZW50X2NhY2hlXG4gICAgZWxzZSAoXG4gICAgICBwLmJ1dHRvbnNfb3duZWQgPC0gcC5idXR0b25zX293bmVkICsgbjtcbiAgICAgIGIudW5hc3NpZ25lZF9jYWNoZSA8LSBiLnVuYXNzaWduZWRfY2FjaGUgLSBuKVxuXG4gIGxldCB0YWtlX2J1dHRvbnMgYiAocCA6IFBsYXllci50KSBuID1cbiAgICBpZiBwLmJ1dHRvbnNfb3duZWQgPCBuIHRoZW4gcmFpc2UgSW5zdWZmaWNpZW50X2Z1bmRzXG4gICAgZWxzZSBwLmJ1dHRvbnNfb3duZWQgPC0gcC5idXR0b25zX293bmVkIC0gbjtcbiAgICBiLnVuYXNzaWduZWRfY2FjaGUgPC0gYi51bmFzc2lnbmVkX2NhY2hlICsgblxuZW5kXG5cbigqIFRva2VucyAqKVxuXG5tb2R1bGUgVG9rZW4gPSBzdHJ1Y3RcbiAgdHlwZSB0aW1lX3Rva2VuID0geyBwb3NpdGlvbiA6IGludDsgb3duZWRfYnkgOiBQbGF5ZXIudDsgY29sb3IgOiBzdHJpbmcgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIG5ldXRyYWxfdG9rZW4gPSB7IHBvcyA6IGludCB9IFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIHR5cGUgdCA9IFRpbWVUb2tlbiBvZiB0aW1lX3Rva2VuIHwgTmV1dHJhbFRva2VuIG9mIG5ldXRyYWxfdG9rZW5cbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgbGV0IG1vdmVfdG9rZW4gYiAodCA6IHRpbWVfdG9rZW4pIChvcHAgOiB0aW1lX3Rva2VuKSA9XG4gICAgbGV0IG9wcF9wb3MgPSBvcHAucG9zaXRpb24gaW5cbiAgICBsZXQgY3Vycl9wb3MgPSB0LnBvc2l0aW9uIGluXG4gICAgbGV0IGRpc3RhbmNlID0gYWJzIChvcHBfcG9zIC0gY3Vycl9wb3MpIGluXG4gICAgQnV0dG9uLmdpdmVfYnV0dG9ucyBiIHQub3duZWRfYnkgKGRpc3RhbmNlICsgMSk7XG4gICAgbGV0IG5ld190b2tlbiA9IHsgdCB3aXRoIHBvc2l0aW9uID0gb3BwX3BvcyArIDEgfSBpblxuICAgIG5ld190b2tlblxuXG4gIGxldCBtb3ZlX3Rva2VuX2FmdGVyX3BhdGNoIHQgbiA9XG4gICAgbGV0IG5ld190b2tlbiA9IHsgdCB3aXRoIHBvc2l0aW9uID0gdC5wb3NpdGlvbiArIG4gfSBpblxuICAgIG5ld190b2tlblxuXG4gIGxldCBtb3ZlX25ldXRfdG9rZW4gbiA9IHsgcG9zID0gbiB9XG5lbmRcblxuKCogR2FtZSBQaWVjZXMgKilcblxubW9kdWxlIEdhbWVfcGllY2VzID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBwbGF5ZXIxIDogUGxheWVyLnQ7XG4gICAgcGxheWVyMiA6IFBsYXllci50O1xuICAgIHRpbWVfcGllY2UxIDogVG9rZW4udGltZV90b2tlbjtcbiAgICB0aW1lX3BpZWNlMiA6IFRva2VuLnRpbWVfdG9rZW47XG4gICAgbmV1dHJhbF9waWVjZSA6IFRva2VuLm5ldXRyYWxfdG9rZW47XG4gICAgcGF0Y2hfcGllY2VzIDogUGF0Y2gudCBsaXN0O1xuICAgIHBhdGNoZXNfcmVtYWluaW5nIDogaW50IGxpc3Q7XG4gICAgbWFpbl9ib2FyZCA6IEdhbWVfYm9hcmQubWFpbl9ib2FyZDtcbiAgICBxdWlsdF9ib2FyZDEgOiBHYW1lX2JvYXJkLnF1aWx0X2JvYXJkO1xuICAgIHF1aWx0X2JvYXJkMiA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQ7XG4gICAgYnV0dG9ucyA6IEJ1dHRvbi50O1xuICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGxldCBzZXR1cF9nYW1lIHAxX25hbWUgcDJfbmFtZSBjb2xvcjEgY29sb3IyID1cbiAgICBsZXQgcmVtYWluaW5nID1cbiAgICAgIFtcbiAgICAgICAgMTtcbiAgICAgICAgMjtcbiAgICAgICAgMztcbiAgICAgICAgNDtcbiAgICAgICAgNTtcbiAgICAgICAgNjtcbiAgICAgICAgNztcbiAgICAgICAgODtcbiAgICAgICAgOTtcbiAgICAgICAgMTA7XG4gICAgICAgIDExO1xuICAgICAgICAxMjtcbiAgICAgICAgMTM7XG4gICAgICAgIDE0O1xuICAgICAgICAxNTtcbiAgICAgICAgMTY7XG4gICAgICAgIDE3O1xuICAgICAgICAxODtcbiAgICAgICAgMTk7XG4gICAgICAgIDIwO1xuICAgICAgICAyMTtcbiAgICAgICAgMjI7XG4gICAgICAgIDIzO1xuICAgICAgICAyNDtcbiAgICAgICAgMjU7XG4gICAgICAgIDI2O1xuICAgICAgICAyNztcbiAgICAgICAgMjg7XG4gICAgICAgIDI5O1xuICAgICAgICAzMDtcbiAgICAgIF1cbiAgICBpblxuICAgIGxldCBwbGF5ZXJfMSA9XG4gICAgICB7XG4gICAgICAgIFBsYXllci5wbGF5ZXJfbnVtID0gMTtcbiAgICAgICAgUGxheWVyLnBsYXllcl9uYW1lID0gcDFfbmFtZTtcbiAgICAgICAgUGxheWVyLmJ1dHRvbnNfb3duZWQgPSA1O1xuICAgICAgICBQbGF5ZXIuc2NvcmUgPSAwO1xuICAgICAgfVxuICAgIGluXG4gICAgbGV0IHBsYXllcl8yID1cbiAgICAgIHtcbiAgICAgICAgUGxheWVyLnBsYXllcl9udW0gPSAyO1xuICAgICAgICBQbGF5ZXIucGxheWVyX25hbWUgPSBwMl9uYW1lO1xuICAgICAgICBQbGF5ZXIuYnV0dG9uc19vd25lZCA9IDU7XG4gICAgICAgIFBsYXllci5zY29yZSA9IDA7XG4gICAgICB9XG4gICAgaW5cbiAgICBsZXQgdGltZV9waWVjZV8xIDogVG9rZW4udGltZV90b2tlbiA9XG4gICAgICB7IHBvc2l0aW9uID0gMTsgb3duZWRfYnkgPSBwbGF5ZXJfMTsgY29sb3IgPSBjb2xvcjEgfVxuICAgIGluXG4gICAgbGV0IHRpbWVfcGllY2VfMiA6IFRva2VuLnRpbWVfdG9rZW4gPVxuICAgICAgeyBwb3NpdGlvbiA9IDE7IG93bmVkX2J5ID0gcGxheWVyXzI7IGNvbG9yID0gY29sb3IyIH1cbiAgICBpblxuICAgIGxldCBwYXRjaGVzIDogUGF0Y2gudCBsaXN0ID0gUGF0Y2guaW5pdF9wYXRjaGVzICgpIGluXG4gICAgbGV0IG5ldXRfcG9zID0gUGF0Y2guZmluZF9pbml0aWFsX25ldXRfcG9zIHBhdGNoZXMgaW5cbiAgICBsZXQgbmV1dHJhbCA9IHsgVG9rZW4ucG9zID0gbmV1dF9wb3MgfSBpblxuICAgIGxldCBtYWluX2JvYXJkIDogR2FtZV9ib2FyZC5tYWluX2JvYXJkID0geyBzcXVhcmVzID0gNjQ7IHNwZWNpYWxfcGF0Y2hfbG9jcyA9IFtdIH0gaW5cbiAgICBsZXQgcXVpbHRfYm9hcmRfMSA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQgPSB7IHNxdWFyZXMgPSA5OyBmaWxsZWRfc3F1YXJlcyA9IFtdIH0gaW5cbiAgICBsZXQgcXVpbHRfYm9hcmRfMiA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQgPSB7IHNxdWFyZXMgPSA5OyBmaWxsZWRfc3F1YXJlcyA9IFtdIH0gaW5cbiAgICBsZXQgYiA6IEJ1dHRvbi50ID0geyB1bmFzc2lnbmVkX2NhY2hlID0gMTUyIH0gaW5cbiAgICBsZXQgZ2FtZV9waWVjZXMgPVxuICAgICAge1xuICAgICAgICBwbGF5ZXIxID0gcGxheWVyXzE7XG4gICAgICAgIHBsYXllcjIgPSBwbGF5ZXJfMjtcbiAgICAgICAgdGltZV9waWVjZTEgPSB0aW1lX3BpZWNlXzE7XG4gICAgICAgIHRpbWVfcGllY2UyID0gdGltZV9waWVjZV8yO1xuICAgICAgICBuZXV0cmFsX3BpZWNlID0gbmV1dHJhbDtcbiAgICAgICAgcGF0Y2hfcGllY2VzID0gcGF0Y2hlcztcbiAgICAgICAgcGF0Y2hlc19yZW1haW5pbmcgPSByZW1haW5pbmc7XG4gICAgICAgIG1haW5fYm9hcmQ7XG4gICAgICAgIHF1aWx0X2JvYXJkMSA9IHF1aWx0X2JvYXJkXzE7XG4gICAgICAgIHF1aWx0X2JvYXJkMiA9IHF1aWx0X2JvYXJkXzI7XG4gICAgICAgIGJ1dHRvbnMgPSBiO1xuICAgICAgfVxuICAgIGluXG4gICAgZ2FtZV9waWVjZXNcbmVuZFxuXG4oKiBHYW1lIFN0YXRlICopXG5cbm1vZHVsZSBHYW1lX3N0YXRlID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBtYiA6IEdhbWVfYm9hcmQubWFpbl9ib2FyZDtcbiAgICBwMXFiIDogR2FtZV9ib2FyZC5xdWlsdF9ib2FyZDtcbiAgICBwMnFiIDogR2FtZV9ib2FyZC5xdWlsdF9ib2FyZDtcbiAgICBiYyA6IEJ1dHRvbi50O1xuICAgIHR1cm4gOiBQbGF5ZXIudDtcbiAgICB0azEgOiBUb2tlbi50aW1lX3Rva2VuO1xuICAgIHRrMiA6IFRva2VuLnRpbWVfdG9rZW47XG4gICAgbmV1dCA6IFRva2VuLm5ldXRyYWxfdG9rZW47XG4gICAgbXV0YWJsZSBwYXRjaGVzIDogUGF0Y2gudCBsaXN0O1xuICAgIHBhdGNoZXNfcmVtYWluaW5nIDogaW50IGxpc3Q7XG4gIH1cbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgbGV0IHVwZGF0ZSBzdCBxYjEgcWIyIGJjYWNoZSB0dXJuIHR0MSB0dDIgbmV1dCBwIHJlbSA9XG4gICAge1xuICAgICAgc3Qgd2l0aFxuICAgICAgcDFxYiA9IHFiMTtcbiAgICAgIHAycWIgPSBxYjI7XG4gICAgICBiYyA9IGJjYWNoZTtcbiAgICAgIHR1cm47XG4gICAgICB0azEgPSB0dDE7XG4gICAgICB0azIgPSB0dDI7XG4gICAgICBuZXV0O1xuICAgICAgcGF0Y2hlcyA9IHA7XG4gICAgICBwYXRjaGVzX3JlbWFpbmluZyA9IHJlbTtcbiAgICB9XG5lbmRcblxuKCogTW92ZSAqKVxuXG5tb2R1bGUgTW92ZSA9IHN0cnVjdFxuICB0eXBlIHQgPSBBZHZhbmNlIHwgUGxhY2VQYXRjaFxuXG4gIGxldCBhZHZhbmNlX29uX2JvYXJkIGIgcDF0IHAydCA9IFRva2VuLm1vdmVfdG9rZW4gYiBwMXQgcDJ0XG5cbiAgZXhjZXB0aW9uIE5vX3BhdGNoZXNfbGVmdFxuICBleGNlcHRpb24gUGF0Y2hfYWxyZWFkeV90YWtlblxuXG4gIGxldCByZWMgcGxfcmVtb3ZlX2F0IGkgcGwgPVxuICAgIG1hdGNoIHBsIHdpdGhcbiAgICB8IFtdIC0+IFtdXG4gICAgfCAoaCA6IFBhdGNoLnQpIDo6IHQgd2hlbiBoLnBvc19hcm91bmRfYm9hcmQgPSBpIC0+IHRcbiAgICB8IGggOjogdCAtPiBoIDo6IHBsX3JlbW92ZV9hdCBpIHRcblxuICBsZXQgcmVjIHJlbWxfcmVtb3ZlX2F0IGkgcmVtX2xpc3QgPVxuICAgIG1hdGNoIHJlbV9saXN0IHdpdGhcbiAgICB8IFtdIC0+IFtdXG4gICAgfCBoIDo6IHQgd2hlbiBoID0gaSAtPiB0XG4gICAgfCBoIDo6IHQgLT4gaCA6OiByZW1sX3JlbW92ZV9hdCBpIHRcblxuICBsZXQgcmVjIHRha2VfcGF0Y2ggKHBsIDogUGF0Y2gudCBsaXN0KSBjaG9pY2UgPVxuICAgIG1hdGNoIHBsIHdpdGhcbiAgICB8IFtdIC0+IHJhaXNlIE5vX3BhdGNoZXNfbGVmdFxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgaWYgaGQucG9zX2Fyb3VuZF9ib2FyZCA9IGNob2ljZSB0aGVuXG4gICAgICAgICAgbWF0Y2ggaGQuc2hhcGUgd2l0aFxuICAgICAgICAgIHwgRW1wdHkgLT4gcmFpc2UgUGF0Y2hfYWxyZWFkeV90YWtlblxuICAgICAgICAgIHwgXyAtPiBoZFxuICAgICAgICBlbHNlIHRha2VfcGF0Y2ggdGwgY2hvaWNlXG5cbiAgKCpcbiAgICAgICAgICAgICAgZXhjZXB0aW9uIEludmFsaWRfcGF0Y2hfY2hvaWNlXG4gIGxldCBjaG9vc2VfcGF0Y2ggY2hvaWNlIGMxIGMyIGMzID1cbiAgICBtYXRjaCBjaG9pY2Ugd2l0aFxuICAgIHwgMSAtPiBjMVxuICAgIHwgMiAtPiBjMlxuICAgIHwgMyAtPiBjM1xuICAgIHwgXyAtPiByYWlzZSBJbnZhbGlkX3BhdGNoX2Nob2ljZSopXG5cbiAgbGV0IGNob29zZV9tb3ZlIHN0YXRlIG12IHBhdGNoX2Nob2ljZSByIGMgPVxuICAgIGxldCBwbGF5ZXJfbW92aW5nID0gc3RhdGUuR2FtZV9zdGF0ZS50dXJuIGluXG4gICAgbGV0IHBsYXllciA9IHBsYXllcl9tb3ZpbmcucGxheWVyX251bSBpblxuICAgIGxldCBwMXQgPSBzdGF0ZS5HYW1lX3N0YXRlLnRrMSBpblxuICAgIGxldCBwMnQgPSBzdGF0ZS5HYW1lX3N0YXRlLnRrMiBpblxuICAgIGxldCBwcWIgPSBpZiBwbGF5ZXIgPSAxIHRoZW4gc3RhdGUucDFxYiBlbHNlIHN0YXRlLnAycWIgaW5cbiAgICBsZXQgcGF0Y2hlcyA9IHN0YXRlLnBhdGNoZXMgaW5cbiAgICBsZXQgcmVtYWluaW5nX3BhdGNoZXMgPSBzdGF0ZS5wYXRjaGVzX3JlbWFpbmluZyBpblxuICAgIGxldCBuZXV0ID0gc3RhdGUubmV1dCBpblxuICAgIG1hdGNoIG12IHdpdGhcbiAgICB8IEFkdmFuY2UgLT5cbiAgICAgICAgbGV0IG5ld190b2tlbiA9XG4gICAgICAgICAgYWR2YW5jZV9vbl9ib2FyZCBzdGF0ZS5HYW1lX3N0YXRlLmJjXG4gICAgICAgICAgICAoaWYgcGxheWVyID0gMSB0aGVuIHAxdCBlbHNlIHAydClcbiAgICAgICAgICAgIChpZiBwbGF5ZXIgPSAxIHRoZW4gcDJ0IGVsc2UgcDF0KVxuICAgICAgICBpblxuICAgICAgICBsZXQgbmV4dF90dXJuID1cbiAgICAgICAgICBpZiBwbGF5ZXIgPSAxIHRoZW5cbiAgICAgICAgICAgIGlmIG5ld190b2tlbi5wb3NpdGlvbiA8IHAydC5wb3NpdGlvbiB0aGVuIHAxdC5vd25lZF9ieVxuICAgICAgICAgICAgZWxzZSBpZiBwMnQucG9zaXRpb24gPCBuZXdfdG9rZW4ucG9zaXRpb24gdGhlbiBwMnQub3duZWRfYnlcbiAgICAgICAgICAgIGVsc2UgcDF0Lm93bmVkX2J5XG4gICAgICAgICAgZWxzZSBpZiBuZXdfdG9rZW4ucG9zaXRpb24gPCBwMXQucG9zaXRpb24gdGhlbiBwMnQub3duZWRfYnlcbiAgICAgICAgICBlbHNlIGlmIHAxdC5wb3NpdGlvbiA8IG5ld190b2tlbi5wb3NpdGlvbiB0aGVuIHAxdC5vd25lZF9ieVxuICAgICAgICAgIGVsc2UgcDJ0Lm93bmVkX2J5XG4gICAgICAgIGluXG4gICAgICAgIGlmIHBsYXllciA9IDEgdGhlblxuICAgICAgICAgIGxldCB1cGRfc3QgPVxuICAgICAgICAgICAgR2FtZV9zdGF0ZS51cGRhdGUgc3RhdGUgc3RhdGUucDFxYiBzdGF0ZS5wMnFiIHN0YXRlLmJjIG5leHRfdHVybiBuZXdfdG9rZW4gcDJ0XG4gICAgICAgICAgICAgIG5ldXQgc3RhdGUucGF0Y2hlcyBzdGF0ZS5wYXRjaGVzX3JlbWFpbmluZ1xuICAgICAgICAgIGluXG4gICAgICAgICAgdXBkX3N0XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBsZXQgdXBkX3N0ID1cbiAgICAgICAgICAgIEdhbWVfc3RhdGUudXBkYXRlIHN0YXRlIHN0YXRlLnAxcWIgc3RhdGUucDJxYiBzdGF0ZS5iYyBuZXh0X3R1cm4gcDF0IG5ld190b2tlblxuICAgICAgICAgICAgICBuZXV0IHN0YXRlLnBhdGNoZXMgc3RhdGUucGF0Y2hlc19yZW1haW5pbmdcbiAgICAgICAgICBpblxuICAgICAgICAgIHVwZF9zdFxuICAgIHwgUGxhY2VQYXRjaCAtPlxuICAgICAgICBsZXQgcCA9IHRha2VfcGF0Y2ggcGF0Y2hlcyBwYXRjaF9jaG9pY2UgaW5cbiAgICAgICAgbGV0IHBwcyA9IHBsX3JlbW92ZV9hdCBwYXRjaF9jaG9pY2UgcGF0Y2hlcyBpblxuICAgICAgICBsZXQgdXBkX3JlbV9saXN0ID0gcmVtbF9yZW1vdmVfYXQgcGF0Y2hfY2hvaWNlIHJlbWFpbmluZ19wYXRjaGVzIGluXG4gICAgICAgIGxldCBxYiA9IEdhbWVfYm9hcmQucGxhY2VfcGF0Y2hfb25fcXVpbHRfYm9hcmQgcHFiIHAuc2hhcGUgciBjIGluXG4gICAgICAgIEJ1dHRvbi50YWtlX2J1dHRvbnMgc3RhdGUuYmMgcGxheWVyX21vdmluZyBwLmNvc3Q7XG4gICAgICAgIGxldCBuZXdfdG9rZW4gPVxuICAgICAgICAgIFRva2VuLm1vdmVfdG9rZW5fYWZ0ZXJfcGF0Y2ggKGlmIHBsYXllciA9IDEgdGhlbiBwMXQgZWxzZSBwMnQpIHAubW92ZV9udW1cbiAgICAgICAgaW5cbiAgICAgICAgbGV0IG5leHRfdHVybiA9XG4gICAgICAgICAgaWYgcGxheWVyID0gMSB0aGVuXG4gICAgICAgICAgICBpZiBuZXdfdG9rZW4ucG9zaXRpb24gPCBwMnQucG9zaXRpb24gdGhlbiBwMXQub3duZWRfYnlcbiAgICAgICAgICAgIGVsc2UgaWYgcDJ0LnBvc2l0aW9uIDwgbmV3X3Rva2VuLnBvc2l0aW9uIHRoZW4gcDJ0Lm93bmVkX2J5XG4gICAgICAgICAgICBlbHNlIHAxdC5vd25lZF9ieVxuICAgICAgICAgIGVsc2UgaWYgbmV3X3Rva2VuLnBvc2l0aW9uIDwgcDF0LnBvc2l0aW9uIHRoZW4gcDJ0Lm93bmVkX2J5XG4gICAgICAgICAgZWxzZSBpZiBwMXQucG9zaXRpb24gPCBuZXdfdG9rZW4ucG9zaXRpb24gdGhlbiBwMXQub3duZWRfYnlcbiAgICAgICAgICBlbHNlIHAydC5vd25lZF9ieVxuICAgICAgICBpblxuICAgICAgICBsZXQgdXBkYXRlZF9uZXV0ID0gVG9rZW4ubW92ZV9uZXV0X3Rva2VuIChwLnBvc19hcm91bmRfYm9hcmQgKyAxKSBpblxuICAgICAgICBsZXQgdXBkX3N0YXRlID1cbiAgICAgICAgICBpZiBwbGF5ZXIgPSAxIHRoZW5cbiAgICAgICAgICAgIEdhbWVfc3RhdGUudXBkYXRlIHN0YXRlIHFiIHN0YXRlLnAycWIgc3RhdGUuYmMgbmV4dF90dXJuIG5ld190b2tlbiBwMnRcbiAgICAgICAgICAgICAgdXBkYXRlZF9uZXV0IHBwcyB1cGRfcmVtX2xpc3RcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBHYW1lX3N0YXRlLnVwZGF0ZSBzdGF0ZSBzdGF0ZS5wMXFiIHFiIHN0YXRlLmJjIG5leHRfdHVybiBwMXQgbmV3X3Rva2VuXG4gICAgICAgICAgICAgIHVwZGF0ZWRfbmV1dCBwcHMgdXBkX3JlbV9saXN0XG4gICAgICAgIGluXG4gICAgICAgIHVwZF9zdGF0ZVxuZW5kXG5cbmxldCBfaW5pdCBwbmFtZSA9XG4gIGxldCBwaWVjZXMgPSBHYW1lX3BpZWNlcy5zZXR1cF9nYW1lIHBuYW1lIFwiQUlcIiBcIlJlZFwiIFwiQmx1ZVwiIGluXG4gIHtcbiAgICBHYW1lX3N0YXRlLmJjID0gcGllY2VzLmJ1dHRvbnM7XG4gICAgR2FtZV9zdGF0ZS5tYiA9IHBpZWNlcy5tYWluX2JvYXJkO1xuICAgIEdhbWVfc3RhdGUubmV1dCA9IHBpZWNlcy5uZXV0cmFsX3BpZWNlO1xuICAgIEdhbWVfc3RhdGUucDFxYiA9IHBpZWNlcy5xdWlsdF9ib2FyZDE7XG4gICAgR2FtZV9zdGF0ZS5wMnFiID0gcGllY2VzLnF1aWx0X2JvYXJkMjtcbiAgICBHYW1lX3N0YXRlLnBhdGNoZXMgPSBwaWVjZXMucGF0Y2hfcGllY2VzO1xuICAgIEdhbWVfc3RhdGUucGF0Y2hlc19yZW1haW5pbmcgPSBwaWVjZXMucGF0Y2hlc19yZW1haW5pbmc7XG4gICAgR2FtZV9zdGF0ZS50azEgPSBwaWVjZXMudGltZV9waWVjZTE7XG4gICAgR2FtZV9zdGF0ZS50azIgPSBwaWVjZXMudGltZV9waWVjZTI7XG4gICAgR2FtZV9zdGF0ZS50dXJuID0gcGllY2VzLnBsYXllcjE7XG4gIH1cbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X0NodW5reUxSZXYiLCJjc3RfQ2h1bmt5WmlnIiwiY3N0X0Nvcm5lciIsImNzdF9Db3JuZXJSZXYiLCJjc3RfQ3Jvc3MiLCJjc3RfRCIsImNzdF9FbXB0eSIsImNzdF9IIiwiY3N0X0kiLCJjc3RfSU51YiIsImNzdF9MIiwiY3N0X0xIYWxmSCIsImNzdF9MUmV2IiwiY3N0X0xvbmdJIiwiY3N0X0xvbmdMIiwiY3N0X01haW5Cb2FyZCIsImNzdF9OZXV0cmFsVG9rZW4iLCJjc3RfUGF0Y2h3b3JrIiwiY3N0X1BsdXMiLCJjc3RfUHJvbmciLCJjc3RfUXVpbHRCb2FyZCIsImNzdF9SIiwiY3N0X1MiLCJjc3RfU0QiLCJjc3RfU0hhbGZIIiwiY3N0X1NMIiwiY3N0X1NMVmVydCIsImNzdF9TUiIsImNzdF9TVSIsImNzdF9TaG9ydEkiLCJjc3RfU2hvcnRUIiwiY3N0X1NtYWxsSSIsImNzdF9TcXVhcmUiLCJjc3RfU3F1YXJlSGlnaEZpdmUiLCJjc3RfU3F1YXJlTnViIiwiY3N0X1N0dWJieVQiLCJjc3RfVCIsImNzdF9UQ3Jvc3MiLCJjc3RfVGltZVRva2VuIiwiY3N0X1UiLCJjc3RfVmluZSIsImNzdF9XaWRlUGx1cyIsImNzdF9XaWRlU3R1YmJ5VCIsImNzdF9aaWciLCJjc3RfWmlnUmV2IiwiY3N0X1ppZ1phZyIsImNzdF9iYyIsImNzdF9idXR0b25zIiwiY3N0X2J1dHRvbnNfb3duZWQiLCJjc3RfY2h1bmt5TFJldiIsImNzdF9jaHVua3laaWciLCJjc3RfY29sb3IiLCJjc3RfY29ybmVyIiwiY3N0X2Nvcm5lclJldiIsImNzdF9jb3N0IiwiY3N0X2Nyb3NzIiwiY3N0X2VtcHR5IiwiY3N0X2ZpbGxlZF9zcXVhcmVzIiwiY3N0X2giLCJjc3RfaSIsImNzdF9pTnViIiwiY3N0X2luY29tZSIsImNzdF9sIiwiY3N0X2xIYWxmSCIsImNzdF9sUmV2IiwiY3N0X2xvbmdJIiwiY3N0X2xvbmdMIiwiY3N0X21haW5Cb2FyZCIsImNzdF9tYWluX2JvYXJkIiwiY3N0X21iIiwiY3N0X21vdmVfbnVtIiwiY3N0X25ldXQiLCJjc3RfbmV1dHJhbFRva2VuIiwiY3N0X25ldXRyYWxfcGllY2UiLCJjc3Rfb3duZWRfYnkiLCJjc3RfcDFxYiIsImNzdF9wMnFiIiwiY3N0X3BhdGNoX3BpZWNlcyIsImNzdF9wYXRjaGVzIiwiY3N0X3BhdGNoZXNfcmVtYWluaW5nIiwiY3N0X3BhdGNod29yayIsImNzdF9wbGF5ZXIxIiwiY3N0X3BsYXllcjIiLCJjc3RfcGxheWVyX25hbWUiLCJjc3RfcGxheWVyX251bSIsImNzdF9wbHVzIiwiY3N0X3BvcyIsImNzdF9wb3NfYXJvdW5kX2JvYXJkIiwiY3N0X3Bvc2l0aW9uIiwiY3N0X3Byb25nIiwiY3N0X3F1aWx0Qm9hcmQiLCJjc3RfcXVpbHRfYm9hcmQxIiwiY3N0X3F1aWx0X2JvYXJkMiIsImNzdF9yb3RhdGVkIiwiY3N0X3MiLCJjc3Rfc0hhbGZIIiwiY3N0X3NMVmVydCIsImNzdF9zY29yZSIsImNzdF9zaGFwZSIsImNzdF9zaG9ydEkiLCJjc3Rfc2hvcnRUIiwiY3N0X3NtYWxsSSIsImNzdF9zcGVjaWFsX3BhdGNoX2xvY3MiLCJjc3Rfc3F1YXJlIiwiY3N0X3NxdWFyZUhpZ2hGaXZlIiwiY3N0X3NxdWFyZU51YiIsImNzdF9zcXVhcmVzIiwiY3N0X3N0dWJieVQiLCJjc3RfdCIsImNzdF90Q3Jvc3MiLCJjc3RfdGltZVRva2VuIiwiY3N0X3RpbWVfcGllY2UxIiwiY3N0X3RpbWVfcGllY2UyIiwiY3N0X3RrMSIsImNzdF90azIiLCJjc3RfdHVybiIsImNzdF91bmFzc2lnbmVkX2NhY2hlIiwiY3N0X3ZpbmUiLCJjc3Rfd2lkZVBsdXMiLCJjc3Rfd2lkZVN0dWJieVQiLCJjc3RfemlnIiwiY3N0X3ppZ1JldiIsImNzdF96aWdaYWciLCJjYW1sX2ZyZXNoX29vX2lkIiwiY2FtbF9pbnRfY29tcGFyZSIsImNhbWxfbGlzdF9vZl9qc19hcnJheSIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImNhbWxfc3RyaW5nX2NvbXBhcmUiLCJjYW1sX2NhbGwxIiwiZiIsImEwIiwiY2FtbF9jYWxsMiIsImExIiwiZ2xvYmFsX2RhdGEiLCJyZW1haW5pbmciLCJtYWluX2JvYXJkIiwicXVpbHRfYm9hcmRfMSIsInF1aWx0X2JvYXJkXzIiLCJlcnJvcl9zb3VyY2VfMDAyIiwiZXJyb3Jfc291cmNlXzAxOSIsImVycm9yX3NvdXJjZV8wMjYiLCJzaGFwZXMiLCJlcnJvcl9zb3VyY2VfMDQ2IiwiZXJyb3Jfc291cmNlXzA2MiIsImVycm9yX3NvdXJjZV8wOTYiLCJlcnJvcl9zb3VyY2VfMTI1IiwiZXJyb3Jfc291cmNlXzEzNSIsImVycm9yX3NvdXJjZV8xNDkiLCJlcnJvcl9zb3VyY2VfMTYwIiwiZXJyb3Jfc291cmNlXzE4OSIsImVycm9yX3NvdXJjZV8yMjciLCJDb3JlIiwiU2V4cGxpYjBfU2V4cF9jb252X3JlY29yZCIsIlNleHBsaWIwX1NleHBfY29udl9lcnJvciIsIkNvcmVfU3RyaW5nIiwiUHB4X21vZHVsZV90aW1lcl9ydW50aW1lIiwiUHB4X2JlbmNoX2xpYl9CZW5jaG1hcmtfYWNjdW11IiwiUHB4X2V4cGVjdF9ydW50aW1lIiwiUHB4X2lubGluZV90ZXN0X2xpYiIsInRfb2Zfc2V4cCIsInhfMDAzIiwicGFyYW0iLCJzY29yZSIsImJ1dHRvbnNfb3duZWQiLCJwbGF5ZXJfbmFtZSIsInBsYXllcl9udW0iLCJzZXhwX29mX3QiLCJwbGF5ZXJfbmFtZV8wMDciLCJwbGF5ZXJfbnVtXzAwNSIsImJ1dHRvbnNfb3duZWRfMDA5Iiwic2NvcmVfMDExIiwiYXJnXzAxMiIsImJuZHNfMDA0IiwiYXJnXzAxMCIsImFyZ18wMDgiLCJhcmdfMDA2IiwiY29tcGFyZSIsImFfMDEzIiwiYl8wMTQiLCJuIiwiZXF1YWwiLCJhXzAxNSIsImJfMDE2IiwiUGxheWVyIiwicGF0Y2hfc2hhcGVfb2Zfc2V4cCIsInNleHBfMDIwIiwibWF0Y2giLCJzZXhwX29mX3BhdGNoX3NoYXBlIiwiY29tcGFyZV9wYXRjaF9zaGFwZSIsImVxdWFsX3BhdGNoX3NoYXBlIiwieF8wMjciLCJyb3RhdGVkIiwiaW5jb21lIiwibW92ZV9udW0iLCJwb3NfYXJvdW5kX2JvYXJkIiwiY29zdCIsInNoYXBlIiwiaW5jb21lXzAzNyIsIm1vdmVfbnVtXzAzNSIsInBvc19hcm91bmRfYm9hcmRfMDMzIiwiY29zdF8wMzEiLCJzaGFwZV8wMjkiLCJyb3RhdGVkXzAzOSIsImFyZ18wNDAiLCJibmRzXzAyOCIsImFyZ18wMzgiLCJhcmdfMDM2IiwiYXJnXzAzNCIsImFyZ18wMzIiLCJhcmdfMDMwIiwiYV8wNDEiLCJiXzA0MiIsImFfMDQzIiwiYl8wNDQiLCJnZXRfcGF0Y2hfZGltIiwicCIsInJvdGF0ZSIsImdldF92YWx1ZXMiLCJnZXRfY29sX3JvdyIsImdldF90aHJlZSIsImkiLCJyZW1fbGlzdCIsInN0YXJ0X292ZXIiLCJybCIsImEiLCJiIiwiaGQiLCJjIiwibWFpbl9ib2FyZF9vZl9zZXhwIiwieF8wNDciLCJzcGVjaWFsX3BhdGNoX2xvY3MiLCJzcXVhcmVzIiwic2V4cF9vZl9tYWluX2JvYXJkIiwic3BlY2lhbF9wYXRjaF9sb2NzXzA1MSIsInNxdWFyZXNfMDQ5IiwiYXJnXzA1MiIsImJuZHNfMDQ4IiwiYXJnXzA1MCIsImNvbXBhcmVfbWFpbl9ib2FyZCIsImFfMDUzIiwiYl8wNTQiLCJhXzA1NSIsImJfMDU2IiwiZXF1YWxfbWFpbl9ib2FyZCIsImFfMDU3IiwiYl8wNTgiLCJhXzA1OSIsImJfMDYwIiwicXVpbHRfYm9hcmRfb2Zfc2V4cCIsInhfMDY4Iiwic2V4cF8wNjciLCJhcmcxXzA2NCIsImFyZzBfMDYzIiwicmVzMF8wNjUiLCJyZXMxXzA2NiIsImZpbGxlZF9zcXVhcmVzIiwic2V4cF9vZl9xdWlsdF9ib2FyZCIsImZpbGxlZF9zcXVhcmVzXzA3MiIsInNxdWFyZXNfMDcwIiwiYXJnXzA3MyIsImFyZzFfMDc1IiwiYXJnMF8wNzQiLCJyZXMwXzA3NiIsInJlczFfMDc3IiwiYm5kc18wNjkiLCJhcmdfMDcxIiwiY29tcGFyZV9xdWlsdF9ib2FyZCIsImFfMDc4IiwiYl8wNzkiLCJhXzA4MCIsImJfMDgxIiwidF8wODMiLCJ0XzA4MiIsInRfMDg1IiwidF8wODQiLCJlcXVhbF9xdWlsdF9ib2FyZCIsImFfMDg2IiwiYl8wODciLCJhXzA4OCIsImJfMDg5IiwidF8wOTEiLCJ0XzA5MCIsInRfMDkzIiwidF8wOTIiLCJzZXhwXzA5OCIsInRhZ18wOTkiLCJzZXhwX2FyZ3NfMTA1IiwiYXJnMF8xMDYiLCJyZXMwXzEwNyIsInNleHBfYXJnc18xMDAiLCJhcmcwXzEwMSIsInJlczBfMTAyIiwiYXJnMF8xMDgiLCJyZXMwXzEwOSIsImFyZzBfMTEwIiwicmVzMF8xMTEiLCJhXzExMiIsImJfMTEzIiwiYV8xMTQiLCJiXzExNSIsImFfMTE2IiwiYl8xMTciLCJhXzExOCIsImJfMTE5IiwiYV8xMjAiLCJiXzEyMSIsImFfMTIyIiwiYl8xMjMiLCJPdXRfb2ZfYm91bmRzIiwiUGF0Y2hfZG9lc19ub3RfZml0X3RoZXJlIiwicGxhY2VfcGF0Y2hfb25fcXVpbHRfYm9hcmQiLCJib2FyZCIsInBhdGNoIiwicm93IiwiY29sIiwicGF0Y2hEaW0iLCJ0bCIsImRpciIsImFjYyIsInNyIiwic2MiLCJyIiwidXBkX2NvbCIsInVwZF9yb3ciLCJuZiIsImZpbGxlZCIsInVwZF9xdWlsdF9ib2FyZCIsIm5ld19maWxsZWQiLCJoZWFkIiwibnIiLCJuYyIsInhfMTI2IiwidW5hc3NpZ25lZF9jYWNoZSIsInVuYXNzaWduZWRfY2FjaGVfMTI4IiwiYXJnXzEyOSIsImJuZHNfMTI3IiwiYV8xMzAiLCJiXzEzMSIsImFfMTMyIiwiYl8xMzMiLCJJbnN1ZmZpY2llbnRfY2FjaGUiLCJJbnN1ZmZpY2llbnRfZnVuZHMiLCJ0aW1lX3Rva2VuX29mX3NleHAiLCJ4XzEzNiIsImNvbG9yIiwib3duZWRfYnkiLCJwb3NpdGlvbiIsInNleHBfb2ZfdGltZV90b2tlbiIsImNvbG9yXzE0MiIsIm93bmVkX2J5XzE0MCIsInBvc2l0aW9uXzEzOCIsImFyZ18xNDMiLCJibmRzXzEzNyIsImFyZ18xNDEiLCJhcmdfMTM5IiwiY29tcGFyZV90aW1lX3Rva2VuIiwiYV8xNDQiLCJiXzE0NSIsImVxdWFsX3RpbWVfdG9rZW4iLCJhXzE0NiIsImJfMTQ3IiwibmV1dHJhbF90b2tlbl9vZl9zZXhwIiwieF8xNTAiLCJwb3MiLCJzZXhwX29mX25ldXRyYWxfdG9rZW4iLCJwb3NfMTUyIiwiYXJnXzE1MyIsImJuZHNfMTUxIiwiY29tcGFyZV9uZXV0cmFsX3Rva2VuIiwiYV8xNTQiLCJiXzE1NSIsImVxdWFsX25ldXRyYWxfdG9rZW4iLCJhXzE1NiIsImJfMTU3Iiwic2V4cF8xNjIiLCJ0YWdfMTYzIiwic2V4cF9hcmdzXzE2NCIsImFyZzBfMTY1IiwicmVzMF8xNjYiLCJzZXhwX2FyZ3NfMTY5IiwiYXJnMF8xNzAiLCJyZXMwXzE3MSIsImFyZzBfMTcyIiwicmVzMF8xNzMiLCJhcmcwXzE3NCIsInJlczBfMTc1IiwiYV8xNzYiLCJiXzE3NyIsImFfMTc4IiwiYl8xNzkiLCJhXzE4MCIsImJfMTgxIiwiYV8xODIiLCJiXzE4MyIsImFfMTg0IiwiYl8xODUiLCJhXzE4NiIsImJfMTg3IiwieF8xOTAiLCJzd2l0Y2gkIiwiYnV0dG9ucyIsInF1aWx0X2JvYXJkMiIsInF1aWx0X2JvYXJkMSIsInBhdGNoZXNfcmVtYWluaW5nIiwicGF0Y2hfcGllY2VzIiwibmV1dHJhbF9waWVjZSIsInRpbWVfcGllY2UyIiwidGltZV9waWVjZTEiLCJwbGF5ZXIyIiwicGxheWVyMSIsImJ1dHRvbnNfMjEyIiwicXVpbHRfYm9hcmQyXzIxMCIsInF1aWx0X2JvYXJkMV8yMDgiLCJtYWluX2JvYXJkXzIwNiIsInBhdGNoZXNfcmVtYWluaW5nXzIwNCIsInBhdGNoX3BpZWNlc18yMDIiLCJuZXV0cmFsX3BpZWNlXzIwMCIsInRpbWVfcGllY2UyXzE5OCIsInRpbWVfcGllY2UxXzE5NiIsInBsYXllcjJfMTk0IiwicGxheWVyMV8xOTIiLCJhcmdfMjEzIiwiYm5kc18xOTEiLCJhcmdfMjExIiwiYXJnXzIwOSIsImFyZ18yMDciLCJhcmdfMjA1IiwiYXJnXzIwMyIsImFyZ18yMDEiLCJhcmdfMTk5IiwiYXJnXzE5NyIsImFyZ18xOTUiLCJhcmdfMTkzIiwiYV8yMTQiLCJiXzIxNSIsImFfMjE2IiwiYl8yMTciLCJhXzIxOCIsImJfMjE5IiwiYV8yMjAiLCJiXzIyMSIsImFfMjIyIiwiYl8yMjMiLCJhXzIyNCIsImJfMjI1Iiwic2V0dXBfZ2FtZSIsInAxX25hbWUiLCJwMl9uYW1lIiwiY29sb3IxIiwiY29sb3IyIiwicGxheWVyXzEiLCJwbGF5ZXJfMiIsInRpbWVfcGllY2VfMSIsInRpbWVfcGllY2VfMiIsInBhdGNoZXMiLCJwYXRjaF9hdHRyIiwicGF0Y2hfaW5jIiwicGxfdXBkYXRlZCIsIm5ldXRfcG9zIiwibmV1dHJhbCIsImdhbWVfcGllY2VzIiwiR2FtZV9waWVjZXMiLCJ4XzIyOCIsIm5ldXQiLCJ0azIiLCJ0azEiLCJ0dXJuIiwiYmMiLCJwMnFiIiwicDFxYiIsIm1iIiwibmV1dF8yNDQiLCJ0azJfMjQyIiwidGsxXzI0MCIsInR1cm5fMjM4IiwiYmNfMjM2IiwicDJxYl8yMzQiLCJwMXFiXzIzMiIsIm1iXzIzMCIsInBhdGNoZXNfMjQ2IiwicGF0Y2hlc19yZW1haW5pbmdfMjQ4IiwiYXJnXzI0OSIsImJuZHNfMjI5IiwiYXJnXzI0NyIsImFyZ18yNDUiLCJhcmdfMjQzIiwiYXJnXzI0MSIsImFyZ18yMzkiLCJhcmdfMjM3IiwiYXJnXzIzNSIsImFyZ18yMzMiLCJhcmdfMjMxIiwiYV8yNTAiLCJiXzI1MSIsImFfMjUyIiwiYl8yNTMiLCJhXzI1NCIsImJfMjU1IiwiYV8yNTYiLCJiXzI1NyIsImFfMjU4IiwiYl8yNTkiLCJhXzI2MCIsImJfMjYxIiwidXBkYXRlIiwic3QiLCJxYjEiLCJxYjIiLCJiY2FjaGUiLCJ0dDEiLCJ0dDIiLCJyZW0iLCJOb19wYXRjaGVzX2xlZnQiLCJQYXRjaF9hbHJlYWR5X3Rha2VuIiwiY3N0X0JsdWUiLCJjc3RfUmVkIiwiY3N0X0FJIiwicGxfcmVtb3ZlX2F0IiwicGwiLCJoIiwidCIsInJlbWxfcmVtb3ZlX2F0IiwiY2hvb3NlX21vdmUiLCJzdGF0ZSIsIm12IiwicGF0Y2hfY2hvaWNlIiwicGxheWVyX21vdmluZyIsInBsYXllciIsInAxdCIsInAydCIsInBxYiIsInJlbWFpbmluZ19wYXRjaGVzIiwib3BwX3BvcyIsImN1cnJfcG9zIiwiZGlzdGFuY2UiLCJuZXdfdG9rZW4iLCJuZXh0X3R1cm4iLCJ1cGRfc3QiLCJwcHMiLCJ1cGRfcmVtX2xpc3QiLCJxYiIsInVwZGF0ZWRfbmV1dCIsInVwZF9zdGF0ZSIsImluaXQiLCJwbmFtZSIsInBpZWNlcyIsIlBhdGNod29yayJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxlQUFBO0FBQUEsSUFBQUMsa0JBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsdUJBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxlQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLDBCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsb0JBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMseUJBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsMkJBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxvQkFBQTtBQUFBLElBQUFDLG9CQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMseUJBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsZUFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLHdCQUFBO0FBQUEsSUFBQUMsOEJBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLE9BQUE7QUFBQSxJQUFBQyw0QkFBQTtBQUFBLElBQUFDLDJCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLDJCQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxHQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBN0QsWUFLRTtBQUFBLElBQUFqRCxvQkFBQTtBQUFBLElBQUFtQyxrQkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBMkUsVUFBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFBQztBQUFBQSxjQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx5QkFNaUM7QUFBQTtBQUFBO0FBQUEsc0JBQUFBO0FBQUFBO0FBQUFBLGVBQUEsSUFOakM7QUFBQTtBQUFBLGVBQUFDLFFBQUE7QUFBQSxlQUFBQyxnQkFBQTtBQUFBLGVBQUFDLGNBQUE7QUFBQSxlQUFBQyxhQUFBO0FBQUE7QUFBQSxhQU1pQztBQUFBO0FBQUE7QUFBQSxZQUFBQyxVQUFBTDtBQUFBQTtBQUFBQSxLQUFBTSxrQkFOakM7QUFBQSxLQUFBQyxpQkFBQTtBQUFBLEtBQUFDLG9CQUFBO0FBQUEsS0FBQUMsWUFBQTtBQUFBLEtBQUFDLFVBSVU7QUFBQSxLQUFBQyxXQUFBO0FBQUEsS0FBQUMsVUFEQTtBQUFBLEtBQUFELGFBQUE7QUFBQSxLQUFBRSxVQURSO0FBQUEsS0FBQUYsYUFBQTtBQUFBLEtBQUFHLFVBREE7QUFBQSxLQUFBSCxhQUFBO0FBQUEsSUFERjtBQUFBLEdBTWlDO0FBQUEsWUFBQUksUUFBQUMsT0FBQUM7QUFBQUEsSUFMbEI7QUFBQSxRQUFBQyxJQUFBO0FBQUEsSUFBRyxZQUFIO0FBQUEsUUFBQUEsTUFDQztBQUFBLElBQU0sY0FBTjtBQUFBLFFBQUFBLE1BQ1U7QUFBQSxJQUFHLG1CQUNYLDhDQUhBO0FBQUE7QUFBQSxZQUFBQyxNQUFBQyxPQUFBQztBQUFBQSxJQUFIO0FBQUE7QUFBQSxJQUFHO0FBQUEsYUFDRjtBQUFBLEtBQU07QUFBQSxjQUNJO0FBQUEsTUFBRyxxREFGWDtBQUFBLGNBRVc7QUFBQTtBQUFBO0FBQUEsY0FEUDtBQUFBO0FBQUE7QUFBQSxhQURKO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsU0FEbEI7QUFBQSxRQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsb0JBQUFDO0FBQUFBO0FBQUFBO0FBQUFBLEtBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUNBUUU7QUFBQTtBQUFBLHNDQWNBO0FBQUE7QUFBQSxxQ0FsQkE7QUFBQTtBQUFBLG9DQTRCQTtBQUFBO0FBQUEsbUNBQ0E7QUFBQTtBQUFBLGtDQUhBO0FBQUE7QUFBQSxpQ0FOQTtBQUFBO0FBQUEsZ0NBRUE7QUFBQTtBQUFBLCtCQURBO0FBQUE7QUFBQSw4QkFiQTtBQUFBO0FBQUEsNkJBQ0E7QUFBQTtBQUFBLDRCQU9BO0FBQUE7QUFBQSwyQkFGQTtBQUFBO0FBQUEsMEJBakJBO0FBQUE7QUFBQSx5QkFFQTtBQUFBO0FBQUEsd0JBREE7QUFBQTtBQUFBLHVCQW1CQTtBQUFBO0FBQUEsc0JBUUE7QUFBQTtBQUFBLHFCQWJBO0FBQUE7QUFBQSxvQkFUQTtBQUFBO0FBQUEsbUJBT0E7QUFBQTtBQUFBLGtCQVJBO0FBQUE7QUFBQSxpQkFTQTtBQUFBO0FBQUEsZ0JBUUE7QUFBQTtBQUFBLGVBUUE7QUFBQTtBQUFBLGNBMUJBO0FBQUE7QUFBQSxhQVlBO0FBQUE7QUFBQSxZQVVBO0FBQUE7QUFBQSxXQWpCQTtBQUFBO0FBQUEsVUFDQTtBQUFBO0FBQUEsU0FpQkE7QUFBQTtBQUFBLFFBTUE7QUFBQTtBQUFBLE9BekJBO0FBQUE7QUFBQSxNQVVBO0FBQUE7QUFBQSxTQUFBQyxRQW5CRjtBQUFBO0FBQUE7QUFBQSxnREFtQ2lDO0FBQUEsU0FBQUEsVUFuQ2pDO0FBQUE7QUFBQTtBQUFBLGdEQW1DaUM7QUFBQSxhQW5DakM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0ZBbUNpQztBQUFBO0FBQUEscUNBbkNqQztBQUFBLCtFQW1DaUM7QUFBQTtBQUFBLG9DQW5DakM7QUFBQSw4RUFtQ2lDO0FBQUE7QUFB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QUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUkseUJBQUE7QUFBQSxJQUFBSSxjQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFqRCxxQkFBQTtBQUFBLElBQUFpRCxnQkFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQW1GLGtCQUFBLE1EaFhGO0FBQUEsWUFBQTlCLFlBQUErQjtBQUFBQSxJQ3NERTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBQTdCO0FBQUFBLGNBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlCQVFpQztBQUFBO0FBQUE7QUFBQSxzQkFBQUE7QUFBQUE7QUFBQUEsZUFBQSxJQVJqQztBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQUE4QixVQUFBO0FBQUEsZUFBQUMsU0FBQTtBQUFBLGVBQUFDLFdBQUE7QUFBQSxlQUFBQyxtQkFBQTtBQUFBLGVBQUFDLE9BQUE7QUFBQSxlQUFBQyxRQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQVFpQztBQUFBO0FBQUE7QUFBQSxZQUFBOUIsWUFBQUw7QUFBQUE7QUFBQUEsS0FBQW9DLGFBUmpDO0FBQUEsS0FBQUMsZUFBQTtBQUFBLEtBQUFDLHVCQUFBO0FBQUEsS0FBQUMsV0FBQTtBQUFBLEtBQUFDLFlBQUE7QUFBQSxLQUFBQyxjQUFBO0FBQUEsS0FBQUMsVUFNVTtBQUFBLEtBQUFDLFdBQUE7QUFBQSxLQUFBQyxVQURSO0FBQUEsS0FBQUQsYUFBQTtBQUFBLEtBQUFFLFVBREE7QUFBQSxLQUFBRixhQUFBO0FBQUEsS0FBQUcsVUFEQTtBQUFBLEtBQUFILGFBQUE7QUFBQSxLQUFBSSxVQURBO0FBQUEsS0FBQUosYUFBQTtBQUFBLEtBQUFLLFVBREE7QUFBQSxLQUFBTCxhQUFBO0FBQUEsSUFERjtBQUFBLEdBUWlDO0FBQUEsWUFBQTVCLFVBQUFrQyxPQUFBQztBQUFBQSxJQVB2QjtBQUFBLFFBQUFoQyxNQUFBO0FBQUEsSUFBVyxjQUFYO0FBQUEsUUFBQUEsSUFDRDtBQUFBLElBQUcsWUFBSDtBQUFBLFFBQUFBLE1BQ1k7QUFBQSxJQUFHLGNBQUg7QUFBQSxRQUFBQSxNQUNSO0FBQUEsSUFBRyxjQUFIO0FBQUEsUUFBQUEsTUFDRjtBQUFBLElBQUcsbUJBQ00sOENBTEM7QUFBQTtBQUFBLFlBQUFDLFFBQUFnQyxPQUFBQztBQUFBQSxJQUFYO0FBQUE7QUFBQSxJQUFXO0FBQUEsYUFDWjtBQUFBLEtBQUc7QUFBQSxjQUNTO0FBQUEsTUFBRztBQUFBLGVBQ1g7QUFBQSxPQUFHO0FBQUEsZ0JBQ0w7QUFBQSxRQUFHLHFEQUpPO0FBQUEsZ0JBSVA7QUFBQTtBQUFBO0FBQUEsZ0JBREU7QUFBQTtBQUFBO0FBQUEsZUFEUTtBQUFBO0FBQUE7QUFBQSxjQURaO0FBQUE7QUFBQTtBQUFBLGFBRFM7QUFBQTtBQUFBO0FBQUEsWUFBQUMsY0FBQUM7QUFBQUEsSUFVbkI7QUFBQTtBQUFBLE9BQ1k7QUFBQTtBQUFBLE9BQ0c7QUFBQTtBQUFBLE9BQ0s7QUFBQTtBQUFBLE9BQ1I7QUFBQTtBQUFBLE9BQ0w7QUFBQTtBQUFBLE9BQ0k7QUFBQTtBQUFBLE9BQ0M7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0w7QUFBQTtBQUFBLE9BQ0s7QUFBQTtBQUFBLE9BQ0c7QUFBQTtBQUFBLE9BQ0g7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BRUY7QUFBQTtBQUFBLE9BQ0M7QUFBQTtBQUFBLE9BQ0o7QUFBQTtBQUFBLE9BQ1M7QUFBQTtBQUFBLE9BQ0o7QUFBQTtBQUFBLE9BTEw7QUFBQTtBQUFBLE9BTUs7QUFBQTtBQUFBLE9BQ0M7QUFBQTtBQUFBLE9BQ047QUFBQTtBQUFBLE9BQ0c7QUFBQTtBQUFBLE9BQ0Q7QUFBQTtBQUFBLE9BQ0c7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0c7QUFBQTtBQUFBLE9BQ0o7QUFBQTtBQUFBLE9BQ0Q7QUFBQTtBQUFBLE9BQ087QUFBQTtBQUFBLE9BQ047QUFBQTtBQUFBLE9BQ0Q7QUFBQTtBQUFBLE9BRU47QUFBQSxlQUdPO0FBQUE7QUFBQSxHQUFFO0FBQUEsWUFBQUMsT0FBQUQ7QUFBQUEsSUFHVjtBQUFBLEtBQ0Q7QUFBQTtBQUFBLFFBQ1k7QUFBQTtBQUFBLFFBQ0c7QUFBQTtBQUFBLFFBQ0s7QUFBQTtBQUFBLFFBQ1I7QUFBQTtBQUFBLFFBQ0w7QUFBQTtBQUFBLFFBQ0k7QUFBQTtBQUFBLFFBQ0M7QUFBQTtBQUFBLFFBQ0E7QUFBQTtBQUFBLFFBQ0w7QUFBQTtBQUFBLFFBQ0s7QUFBQTtBQUFBLFFBQ0c7QUFBQTtBQUFBLFFBQ0g7QUFBQTtBQUFBLFFBQ0E7QUFBQTtBQUFBLFFBRUY7QUFBQTtBQUFBLFFBQ0M7QUFBQTtBQUFBLFFBQ0o7QUFBQTtBQUFBLFFBQ1M7QUFBQTtBQUFBLFFBQ0o7QUFBQTtBQUFBLFFBTEw7QUFBQTtBQUFBLFFBTUs7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QTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFHSjtBQUFBO0FBQUEsWUFBQUMsS0FBQUM7QUFBQUEsUUFBQUMsU0FJTztBQUFBLElBQ2I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBV0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRURwd0JIIiwiaWdub3JlTGlzdCI6WzBdfX0seyJvZmZzZXQiOnsibGluZSI6MzI1OCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiIucGF0Y2h3b3JrLm9ianMvanNvby9kZWZhdWx0L3BhdGNod29yay5jbWEuanMiLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL3dvcmtzcGFjZV9yb290L2xpYi9odzJfcGF0Y2h3b3JrX2xvZ2ljLm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwib3BlbiEgQ29yZVxuXG5sZXQgZGVmYXVsdF9yZWFkX2ludCAoKSA9XG4gIE91dF9jaGFubmVsLmZsdXNoIHN0ZG91dDtcbiAgSW5fY2hhbm5lbC5pbnB1dF9saW5lX2V4biBJbl9jaGFubmVsLnN0ZGluIHw+IEludC5vZl9zdHJpbmdcblxubGV0IGRlZmF1bHRfcHJpbnQgcyA9IHByaW50X3N0cmluZyBzXG5cbigqIFBsYXllcnMgKilcblxubW9kdWxlIFBsYXllciA9IHN0cnVjdFxuICB0eXBlIHQgPSB7XG4gICAgcGxheWVyX251bSA6IGludDtcbiAgICBwbGF5ZXJfbmFtZSA6IHN0cmluZztcbiAgICBtdXRhYmxlIGJ1dHRvbnNfb3duZWQgOiBpbnQ7XG4gICAgbXV0YWJsZSBzY29yZSA6IGludDtcbiAgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cbmVuZFxuXG4oKiBQYXRjaGVzICopXG5cbm1vZHVsZSBQYXRjaCA9IHN0cnVjdFxuICB0eXBlIHBhdGNoX3NoYXBlID1cbiAgICB8IFNxdWFyZVxuICAgIHwgU3F1YXJlTnViXG4gICAgfCBTcXVhcmVIaWdoRml2ZVxuICAgIHwgVENyb3NzXG4gICAgfCBTXG4gICAgfCBMb25nSVxuICAgIHwgTEhhbGZIXG4gICAgfCBTSGFsZkhcbiAgICB8IEhcbiAgICB8IENvcm5lclxuICAgIHwgQ29ybmVyUmV2XG4gICAgfCBTTFZlcnRcbiAgICB8IFNob3J0SVxuICAgIHwgTFJldlxuICAgIHwgTG9uZ0xcbiAgICB8IExcbiAgICB8IENodW5reUxSZXZcbiAgICB8IFNtYWxsSVxuICAgIHwgSVxuICAgIHwgU2hvcnRUXG4gICAgfCBTdHViYnlUXG4gICAgfCBUXG4gICAgfCBQbHVzXG4gICAgfCBaaWdcbiAgICB8IFppZ1phZ1xuICAgIHwgWmlnUmV2XG4gICAgfCBDaHVua3laaWdcbiAgICB8IENyb3NzXG4gICAgfCBJTnViXG4gICAgfCBXaWRlU3R1YmJ5VFxuICAgIHwgUHJvbmdcbiAgICB8IFZpbmVcbiAgICB8IFdpZGVQbHVzXG4gICAgfCBFbXB0eVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIHQgPSB7XG4gICAgc2hhcGUgOiBwYXRjaF9zaGFwZTtcbiAgICBjb3N0IDogaW50O1xuICAgIHBvc19hcm91bmRfYm9hcmQgOiBpbnQ7XG4gICAgbW92ZV9udW0gOiBpbnQ7XG4gICAgaW5jb21lIDogaW50O1xuICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGxldCBnZXRfcGF0Y2hfZGltIHAgPVxuICAgIG1hdGNoIHAgd2l0aFxuICAgIHwgU3F1YXJlIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiTFwiKSBdXG4gICAgfCBTcXVhcmVOdWIgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJVXCIpIF1cbiAgICB8IFNxdWFyZUhpZ2hGaXZlIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiVVwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiVVwiKSBdXG4gICAgfCBUQ3Jvc3MgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgyLCBcIkRcIikgXVxuICAgIHwgUyAtPiBbICgyLCBcIkxcIik7ICgyLCBcIkRcIik7ICgxLCBcIkxcIikgXVxuICAgIHwgTG9uZ0kgLT4gWyAoNSwgXCJEXCIpIF1cbiAgICB8IExIYWxmSCAtPiBbICgyLCBcIkRcIik7ICgzLCBcIlJcIik7ICgxLCBcIlVcIikgXVxuICAgIHwgU0hhbGZIIC0+IFsgKDIsIFwiRFwiKTsgKDIsIFwiUlwiKTsgKDEsIFwiVVwiKSBdXG4gICAgfCBIIC0+IFsgKDMsIFwiRFwiKTsgKDEsIFwiU1VcIik7ICgyLCBcIlJcIik7ICgxLCBcIlVcIik7ICgxLCBcIlNEXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IENvcm5lciAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgQ29ybmVyUmV2IC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiUlwiKSBdXG4gICAgfCBTTFZlcnQgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IFNob3J0SSAtPiBbICgzLCBcIkRcIikgXVxuICAgIHwgSSAtPiBbICg0LCBcIkRcIikgXVxuICAgIHwgTFJldiAtPiBbICgzLCBcIkRcIik7ICgxLCBcIkxcIikgXVxuICAgIHwgTG9uZ0wgLT4gWyAoNCwgXCJEXCIpOyAoMSwgXCJSXCIpIF1cbiAgICB8IEwgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJSXCIpIF1cbiAgICB8IENodW5reUxSZXYgLT4gWyAoNCwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJVXCIpIF1cbiAgICB8IFNtYWxsSSAtPiBbICgyLCBcIkRcIikgXVxuICAgIHwgU2hvcnRUIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiU1VcIik7ICgxLCBcIlJcIikgXVxuICAgIHwgU3R1YmJ5VCAtPiBbICgzLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IFQgLT4gWyAoMywgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDMsIFwiRFwiKSBdXG4gICAgfCBQbHVzIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IFppZyAtPiBbICgyLCBcIkRcIik7ICgxLCBcIlJcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgWmlnWmFnIC0+IFsgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgfCBaaWdSZXYgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJEXCIpIF1cbiAgICB8IENodW5reVppZyAtPiBbICgzLCBcIkRcIik7ICgxLCBcIlNVXCIpOyAoMSwgXCJMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IENyb3NzIC0+IFsgKDIsIFwiRFwiKTsgKDEsIFwiTFwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIlJcIik7ICgxLCBcIlNMXCIpOyAoMiwgXCJEXCIpIF1cbiAgICB8IElOdWIgLT4gWyAoMywgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJTUlwiKTsgKDEsIFwiRFwiKSBdXG4gICAgfCBXaWRlU3R1YmJ5VCAtPiBbICgyLCBcIlJcIik7ICgxLCBcIkRcIik7ICgxLCBcIlVcIik7ICgxLCBcIlJcIikgXVxuICAgIHwgUHJvbmcgLT4gWyAoMiwgXCJEXCIpOyAoMSwgXCJMXCIpOyAoMSwgXCJEXCIpOyAoMSwgXCJTVVwiKTsgKDEsIFwiU1JcIik7ICgxLCBcIlJcIik7ICgxLCBcIkRcIikgXVxuICAgIHwgVmluZSAtPiBbICgyLCBcIkRcIik7ICgxLCBcIkxcIik7ICgxLCBcIlNSXCIpOyAoMSwgXCJEXCIpOyAoMSwgXCJSXCIpOyAoMSwgXCJTTFwiKTsgKDEsIFwiRFwiKSBdXG4gICAgfCBXaWRlUGx1cyAtPlxuICAgICAgICBbXG4gICAgICAgICAgKDIsIFwiUlwiKTsgKDEsIFwiRFwiKTsgKDEsIFwiUlwiKTsgKDEsIFwiU0xcIik7ICgxLCBcIkRcIik7ICgxLCBcIkxcIik7ICgxLCBcIlVcIik7ICgxLCBcIkxcIik7XG4gICAgICAgIF1cbiAgICB8IEVtcHR5IC0+IFtdXG5cbiAgbGV0IGdldF92YWx1ZXMgcCA9XG4gICAgbWF0Y2ggcCB3aXRoXG4gICAgfCBTcXVhcmUgLT4gKDYsIDUpXG4gICAgfCBTcXVhcmVOdWIgLT4gKDIsIDIpXG4gICAgfCBTcXVhcmVIaWdoRml2ZSAtPiAoOCwgNilcbiAgICB8IFRDcm9zcyAtPiAoMSwgNClcbiAgICB8IFMgLT4gKDEsIDIpXG4gICAgfCBMb25nSSAtPiAoNywgMSlcbiAgICB8IExIYWxmSCAtPiAoMSwgNSlcbiAgICB8IFNIYWxmSCAtPiAoMSwgMilcbiAgICB8IEggLT4gKDIsIDMpXG4gICAgfCBDb3JuZXIgLT4gKDMsIDEpXG4gICAgfCBDb3JuZXJSZXYgLT4gKDEsIDMpXG4gICAgfCBTTFZlcnQgLT4gKDIsIDMpXG4gICAgfCBTaG9ydEkgLT4gKDIsIDIpXG4gICAgfCBMUmV2IC0+ICg0LCAyKVxuICAgIHwgTG9uZ0wgLT4gKDEwLCAzKVxuICAgIHwgTCAtPiAoNCwgNilcbiAgICB8IENodW5reUxSZXYgLT4gKDEwLCA1KVxuICAgIHwgU21hbGxJIC0+ICgyLCAxKVxuICAgIHwgSSAtPiAoMywgMylcbiAgICB8IFNob3J0VCAtPiAoMiwgMilcbiAgICB8IFN0dWJieVQgLT4gKDUsIDUpXG4gICAgfCBUIC0+ICg3LCAyKVxuICAgIHwgUGx1cyAtPiAoNSwgNClcbiAgICB8IFppZyAtPiAoMywgMilcbiAgICB8IFppZ1phZyAtPiAoMTAsIDQpXG4gICAgfCBaaWdSZXYgLT4gKDcsIDYpXG4gICAgfCBDaHVua3laaWcgLT4gKDQsIDIpXG4gICAgfCBDcm9zcyAtPiAoMCwgMylcbiAgICB8IElOdWIgLT4gKDMsIDQpXG4gICAgfCBXaWRlU3R1YmJ5VCAtPiAoNywgNClcbiAgICB8IFByb25nIC0+ICgzLCA2KVxuICAgIHwgVmluZSAtPiAoMiwgMSlcbiAgICB8IFdpZGVQbHVzIC0+ICg1LCAzKVxuICAgIHwgRW1wdHkgLT4gKDAsIDApXG5cbiAgbGV0IGdldF9pbmNvbWUgcCA9XG4gICAgbWF0Y2ggcCB3aXRoXG4gICAgfCBTcXVhcmUgLT4gMlxuICAgIHwgU3F1YXJlTnViIC0+IDBcbiAgICB8IFNxdWFyZUhpZ2hGaXZlIC0+IDNcbiAgICB8IFRDcm9zcyAtPiAxXG4gICAgfCBTIC0+IDBcbiAgICB8IExvbmdJIC0+IDFcbiAgICB8IExIYWxmSCAtPiAxXG4gICAgfCBTSGFsZkggLT4gMFxuICAgIHwgSCAtPiAwXG4gICAgfCBDb3JuZXIgLT4gMFxuICAgIHwgQ29ybmVyUmV2IC0+IDBcbiAgICB8IFNMVmVydCAtPiAxXG4gICAgfCBTaG9ydEkgLT4gMFxuICAgIHwgTFJldiAtPiAxXG4gICAgfCBMb25nTCAtPiAyXG4gICAgfCBMIC0+IDJcbiAgICB8IENodW5reUxSZXYgLT4gM1xuICAgIHwgU21hbGxJIC0+IDBcbiAgICB8IEkgLT4gMVxuICAgIHwgU2hvcnRUIC0+IDBcbiAgICB8IFN0dWJieVQgLT4gMlxuICAgIHwgVCAtPiAyXG4gICAgfCBQbHVzIC0+IDJcbiAgICB8IFppZyAtPiAxXG4gICAgfCBaaWdaYWcgLT4gM1xuICAgIHwgWmlnUmV2IC0+IDNcbiAgICB8IENodW5reVppZyAtPiAwXG4gICAgfCBDcm9zcyAtPiAxXG4gICAgfCBJTnViIC0+IDFcbiAgICB8IFdpZGVTdHViYnlUIC0+IDJcbiAgICB8IFByb25nIC0+IDJcbiAgICB8IFZpbmUgLT4gMFxuICAgIHwgV2lkZVBsdXMgLT4gMVxuICAgIHwgRW1wdHkgLT4gMFxuXG4gIGxldCBzaGFwZXMgPVxuICAgIFtcbiAgICAgIFNxdWFyZTtcbiAgICAgIFNxdWFyZU51YjtcbiAgICAgIFNxdWFyZUhpZ2hGaXZlO1xuICAgICAgVENyb3NzO1xuICAgICAgUztcbiAgICAgIExvbmdJO1xuICAgICAgTEhhbGZIO1xuICAgICAgU0hhbGZIO1xuICAgICAgSDtcbiAgICAgIENvcm5lcjtcbiAgICAgIENvcm5lclJldjtcbiAgICAgIFNMVmVydDtcbiAgICAgIFNob3J0STtcbiAgICAgIExSZXY7XG4gICAgICBMb25nTDtcbiAgICAgIEw7XG4gICAgICBDaHVua3lMUmV2O1xuICAgICAgU21hbGxJO1xuICAgICAgSTtcbiAgICAgIFNob3J0VDtcbiAgICAgIFN0dWJieVQ7XG4gICAgICBUO1xuICAgICAgUGx1cztcbiAgICAgIFppZztcbiAgICAgIFppZ1phZztcbiAgICAgIFppZ1JldjtcbiAgICAgIENodW5reVppZztcbiAgICAgIENyb3NzO1xuICAgICAgSU51YjtcbiAgICAgIFdpZGVTdHViYnlUO1xuICAgICAgUHJvbmc7XG4gICAgICBWaW5lO1xuICAgICAgV2lkZVBsdXM7XG4gICAgXVxuXG4gIGxldCByZWMgZ2V0X3RocmVlIGkgcmVtX2xpc3QgPVxuICAgIGxldCBzdGFydF9vdmVyIHJsIG4gPVxuICAgICAgaWYgbiA9IDEgdGhlblxuICAgICAgICBtYXRjaCBybCB3aXRoXG4gICAgICAgIHwgW10gLT4gKDAsIDApXG4gICAgICAgIHwgYSA6OiBfIC0+IChhLCAwKVxuICAgICAgZWxzZVxuICAgICAgICBtYXRjaCBybCB3aXRoXG4gICAgICAgIHwgYSA6OiBiIDo6IF8gLT4gKGEsIGIpXG4gICAgICAgIHwgXyAtPiAoMCwgMClcbiAgICBpblxuICAgIG1hdGNoIHJlbV9saXN0IHdpdGhcbiAgICB8IGhkIDo6IHRsIC0+XG4gICAgICAgIGlmIGhkID0gaSB0aGVuXG4gICAgICAgICAgbWF0Y2ggdGwgd2l0aFxuICAgICAgICAgIHwgYSA6OiBiIDo6IGMgOjogXyAtPiAoYSwgYiwgYylcbiAgICAgICAgICB8IFsgYTsgYiBdIC0+XG4gICAgICAgICAgICAgIGxldCBjID0gZnN0IChzdGFydF9vdmVyIHJlbV9saXN0IDEpIGluXG4gICAgICAgICAgICAgIChhLCBiLCBjKVxuICAgICAgICAgIHwgYSA6OiBbXSAtPlxuICAgICAgICAgICAgICBsZXQgYiwgYyA9IHN0YXJ0X292ZXIgcmVtX2xpc3QgMiBpblxuICAgICAgICAgICAgICAoYSwgYiwgYylcbiAgICAgICAgICB8IFtdIC0+ICgwLCAwLCAwKVxuICAgICAgICBlbHNlIGdldF90aHJlZSBpIHRsXG4gICAgfCBbXSAtPiAoMCwgMCwgMClcblxuICBsZXQgcmVjIGJ1aWxkX3BhdGNoX3NldCBzaGFwZXMgKHBhdGNoZXMgOiB0IGxpc3QpIGFjYyA9XG4gICAgbWF0Y2ggc2hhcGVzIHdpdGhcbiAgICB8IFtdIC0+IHBhdGNoZXNcbiAgICB8IGhkIDo6IHQgLT5cbiAgICAgICAgbGV0IHBhdGNoX2F0dHIgPSBnZXRfdmFsdWVzIGhkIGluXG4gICAgICAgIGxldCBwYXRjaF9pbmMgPSBnZXRfaW5jb21lIGhkIGluXG4gICAgICAgIGxldCBwYXRjaCA9XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2hhcGUgPSBoZDtcbiAgICAgICAgICAgIHBvc19hcm91bmRfYm9hcmQgPSBhY2M7XG4gICAgICAgICAgICBjb3N0ID0gZnN0IHBhdGNoX2F0dHI7XG4gICAgICAgICAgICBtb3ZlX251bSA9IHNuZCBwYXRjaF9hdHRyO1xuICAgICAgICAgICAgaW5jb21lID0gcGF0Y2hfaW5jO1xuICAgICAgICAgIH1cbiAgICAgICAgaW5cbiAgICAgICAgbGV0IHBsX3VwZGF0ZWQgPSBwYXRjaCA6OiBwYXRjaGVzIGluXG4gICAgICAgIGJ1aWxkX3BhdGNoX3NldCB0IHBsX3VwZGF0ZWQgKGFjYyArIDEpXG5cbiAgbGV0IGluaXRfcGF0Y2hlcyAoKSA9IGJ1aWxkX3BhdGNoX3NldCBzaGFwZXMgW10gMVxuXG4gIGxldCBmaW5kX2luaXRpYWxfbmV1dF9wb3MgcGwgPVxuICAgIGxldCByZWMgaXRlcl9wYXRjaF9saXN0ID0gZnVuY3Rpb25cbiAgICAgIHwgW10gLT4gMVxuICAgICAgfCB7IHNoYXBlID0gQ29ybmVyOyBwb3NfYXJvdW5kX2JvYXJkOyBjb3N0ID0gXzsgbW92ZV9udW0gPSBfOyBpbmNvbWUgPSBfIH0gOjogXyAtPlxuICAgICAgICAgIHBvc19hcm91bmRfYm9hcmRcbiAgICAgIHwgXyA6OiB0bCAtPiBpdGVyX3BhdGNoX2xpc3QgdGxcbiAgICBpblxuICAgIGl0ZXJfcGF0Y2hfbGlzdCBwbFxuZW5kXG5cbigqIEdhbWUgQm9hcmRzICopXG5cbm1vZHVsZSBHYW1lX2JvYXJkID0gc3RydWN0XG4gIHR5cGUgbWFpbl9ib2FyZCA9IHsgc3F1YXJlcyA6IGludDsgc3BlY2lhbF9wYXRjaF9sb2NzIDogaW50IGxpc3QgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIHF1aWx0X2JvYXJkID0geyBzcXVhcmVzIDogaW50OyBmaWxsZWRfc3F1YXJlcyA6IChpbnQgKiBpbnQpIGxpc3QgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIHQgPSBNYWluQm9hcmQgb2YgbWFpbl9ib2FyZCB8IFF1aWx0Qm9hcmQgb2YgcXVpbHRfYm9hcmRcbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgZXhjZXB0aW9uIE91dF9vZl9ib3VuZHNcbiAgZXhjZXB0aW9uIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuXG4gIGxldCByZWMgY2hlY2tfcGF0Y2hfc3F1YXJlcyAoZiA6IChpbnQgKiBpbnQpIGxpc3QpIHFiIHNyIHNjIGRpciBhY2MgPVxuICAgIGlmIGFjYyA8IDEgdGhlbiAoc3IsIHNjKVxuICAgIGVsc2VcbiAgICAgIGxldCByZWMgY2hlY2tfYWxsX2ZpbGxlZCAoZmlsbGVkX3NxdWFyZXMgOiAoaW50ICogaW50KSBsaXN0KSA6IGJvb2wgPVxuICAgICAgICBtYXRjaCBmaWxsZWRfc3F1YXJlcyB3aXRoXG4gICAgICAgIHwgW10gLT4gdHJ1ZVxuICAgICAgICB8IChyLCBjKSA6OiB0bCAtPlxuICAgICAgICAgICAgaWYgciA9IHNyICYmIGMgPSBzYyB0aGVuIHJhaXNlIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuICAgICAgICAgICAgZWxzZSBjaGVja19hbGxfZmlsbGVkIHRsXG4gICAgICBpblxuXG4gICAgICAoKiBjdXJyZW50IHNxdWFyZSBub3QgaW4gZmlsbGVkICopXG4gICAgICBpZiBjaGVja19hbGxfZmlsbGVkIGYgdGhlblxuICAgICAgICBtYXRjaCBkaXIgd2l0aFxuICAgICAgICB8IFwiRFwiIC0+XG4gICAgICAgICAgICBpZiBzciA8IHFiLnNxdWFyZXMgdGhlbiBjaGVja19wYXRjaF9zcXVhcmVzIGYgcWIgKHNyICsgMSkgc2MgZGlyIChhY2MgLSAxKVxuICAgICAgICAgICAgZWxzZSByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgIHwgXCJVXCIgLT5cbiAgICAgICAgICAgIGlmIHNyID4gMSB0aGVuIGNoZWNrX3BhdGNoX3NxdWFyZXMgZiBxYiAoc3IgLSAxKSBzYyBkaXIgKGFjYyAtIDEpXG4gICAgICAgICAgICBlbHNlIHJhaXNlIE91dF9vZl9ib3VuZHNcbiAgICAgICAgfCBcIkxcIiAtPlxuICAgICAgICAgICAgaWYgc2MgPiAxIHRoZW4gY2hlY2tfcGF0Y2hfc3F1YXJlcyBmIHFiIHNyIChzYyAtIDEpIGRpciAoYWNjIC0gMSlcbiAgICAgICAgICAgIGVsc2UgcmFpc2UgT3V0X29mX2JvdW5kc1xuICAgICAgICB8IFwiUlwiIC0+XG4gICAgICAgICAgICBpZiBzYyA8IHFiLnNxdWFyZXMgdGhlbiBjaGVja19wYXRjaF9zcXVhcmVzIGYgcWIgc3IgKHNjICsgMSkgZGlyIChhY2MgLSAxKVxuICAgICAgICAgICAgZWxzZSByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgIHwgXCJTVVwiIC0+IChzciAtIDEsIHNjKVxuICAgICAgICB8IFwiU0RcIiAtPiAoc3IgKyAxLCBzYylcbiAgICAgICAgfCBcIlNMXCIgLT4gKHNyLCBzYyAtIDEpXG4gICAgICAgIHwgXCJTUlwiIC0+IChzciwgc2MgKyAxKVxuICAgICAgICB8IF8gLT4gKC0xLCAtMSlcbiAgICAgIGVsc2UgKC0xLCAtMSlcblxuICBsZXQgcmVjIGNoZWNrX2lmX3BhdGNoX2ZpdHMgcGF0Y2hEaW0gYm9hcmQgcm93IGNvbCA9XG4gICAgbWF0Y2ggcGF0Y2hEaW0gd2l0aFxuICAgIHwgW10gLT4gdHJ1ZVxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgbGV0IHEsIGQgPSBoZCBpblxuICAgICAgICBsZXQgdXBkX3JvdywgdXBkX2NvbCA9XG4gICAgICAgICAgY2hlY2tfcGF0Y2hfc3F1YXJlcyBib2FyZC5maWxsZWRfc3F1YXJlcyBib2FyZCByb3cgY29sIGQgcVxuICAgICAgICBpblxuICAgICAgICBpZiB1cGRfcm93ID0gLTEgJiYgdXBkX2NvbCA9IC0xIHRoZW4gZmFsc2VcbiAgICAgICAgZWxzZSBjaGVja19pZl9wYXRjaF9maXRzIHRsIGJvYXJkIHVwZF9yb3cgdXBkX2NvbFxuXG4gIGxldCBwbGFjZV9wYXRjaF9vbl9xdWlsdF9ib2FyZCBib2FyZCBwYXRjaCByIGMgPVxuICAgIGxldCBkaW0gPSBQYXRjaC5nZXRfcGF0Y2hfZGltIHBhdGNoIGluXG5cbiAgICBpZiBjaGVja19pZl9wYXRjaF9maXRzIGRpbSBib2FyZCByIGMgdGhlblxuICAgICAgbGV0IHJlYyBwcm9jZXNzX2RpciByIGMgZGlyIGZpbGxlZCBhY2MgPVxuICAgICAgICBpZiBhY2MgPiAwIHRoZW5cbiAgICAgICAgICBpZiByID4gYm9hcmQuc3F1YXJlcyB8fCBjID4gYm9hcmQuc3F1YXJlcyB8fCByIDwgMSB8fCBjIDwgMSB0aGVuXG4gICAgICAgICAgICByYWlzZSBPdXRfb2ZfYm91bmRzXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGV0IG5mID0gKHIsIGMpIDo6IGZpbGxlZCBpblxuICAgICAgICAgICAgbWF0Y2ggZGlyIHdpdGhcbiAgICAgICAgICAgIHwgXCJEXCIgLT4gcHJvY2Vzc19kaXIgKHIgKyAxKSBjIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJVXCIgLT4gcHJvY2Vzc19kaXIgKHIgLSAxKSBjIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJMXCIgLT4gcHJvY2Vzc19kaXIgciAoYyAtIDEpIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXCJSXCIgLT4gcHJvY2Vzc19kaXIgciAoYyArIDEpIGRpciBuZiAoYWNjIC0gMSlcbiAgICAgICAgICAgIHwgXyAtPiBuZlxuICAgICAgICBlbHNlIGZpbGxlZFxuICAgICAgaW5cblxuICAgICAgbGV0IHJlYyBwcm9jZXNzX3BhdGNoIHBhdGNoIHFiIG5mIHIgYyBhY2MgPVxuICAgICAgICBsZXQgZXh0cmFjdF9oZWFkIGwgPVxuICAgICAgICAgIG1hdGNoIGwgd2l0aFxuICAgICAgICAgIHwgW10gLT4gKC0xLCAtMSlcbiAgICAgICAgICB8IGhkIDo6IF8gLT4gaGRcbiAgICAgICAgaW5cbiAgICAgICAgbWF0Y2ggcGF0Y2ggd2l0aFxuICAgICAgICB8IFtdIC0+XG4gICAgICAgICAgICBsZXQgdXBkX3F1aWx0X2JvYXJkID0geyBib2FyZCB3aXRoIGZpbGxlZF9zcXVhcmVzID0gbmYgfSBpblxuICAgICAgICAgICAgdXBkX3F1aWx0X2JvYXJkXG4gICAgICAgIHwgaGQgOjogdCAtPlxuICAgICAgICAgICAgbGV0IG12LCBkaXIgPSBoZCBpblxuICAgICAgICAgICAgbGV0IG5yLCBuYyA9XG4gICAgICAgICAgICAgIGlmIGFjYyA+IDEgdGhlblxuICAgICAgICAgICAgICAgIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJEXCIgdGhlbiAociArIDEsIGMpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiVVwiIHRoZW4gKHIgLSAxLCBjKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgU3RyaW5nLmVxdWFsIGRpciBcIkxcIiB0aGVuIChyLCBjIC0gMSlcbiAgICAgICAgICAgICAgICBlbHNlIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJSXCIgdGhlbiAociwgYyArIDEpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiU0RcIiB0aGVuIChyICsgMSwgYylcbiAgICAgICAgICAgICAgICBlbHNlIGlmIFN0cmluZy5lcXVhbCBkaXIgXCJTVVwiIHRoZW4gKHIgLSAxLCBjKVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgU3RyaW5nLmVxdWFsIGRpciBcIlNMXCIgdGhlbiAociwgYyAtIDEpXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBTdHJpbmcuZXF1YWwgZGlyIFwiU1JcIiB0aGVuIChyLCBjICsgMSlcbiAgICAgICAgICAgICAgICBlbHNlIChyLCBjKVxuICAgICAgICAgICAgICBlbHNlIChyLCBjKVxuICAgICAgICAgICAgaW5cblxuICAgICAgICAgICAgbGV0IG5ld19maWxsZWQgPSBwcm9jZXNzX2RpciBuciBuYyBkaXIgbmYgbXYgaW5cbiAgICAgICAgICAgIGxldCBoZWFkID0gZXh0cmFjdF9oZWFkIG5ld19maWxsZWQgaW5cbiAgICAgICAgICAgIGxldCBuciA9IGZzdCBoZWFkIGluXG4gICAgICAgICAgICBsZXQgbmMgPSBzbmQgaGVhZCBpblxuICAgICAgICAgICAgcHJvY2Vzc19wYXRjaCB0IHFiIG5ld19maWxsZWQgbnIgbmMgKGFjYyArIDEpXG4gICAgICBpblxuICAgICAgcHJvY2Vzc19wYXRjaCBkaW0gYm9hcmQgYm9hcmQuZmlsbGVkX3NxdWFyZXMgciBjIDFcbiAgICBlbHNlIHJhaXNlIFBhdGNoX2RvZXNfbm90X2ZpdF90aGVyZVxuZW5kXG5cbigqIEJ1dHRvbnMgKilcblxubW9kdWxlIEJ1dHRvbiA9IHN0cnVjdFxuICB0eXBlIHQgPSB7IG11dGFibGUgdW5hc3NpZ25lZF9jYWNoZSA6IGludCB9IFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGV4Y2VwdGlvbiBJbnN1ZmZpY2llbnRfY2FjaGVcbiAgZXhjZXB0aW9uIEluc3VmZmljaWVudF9mdW5kc1xuXG4gIGxldCBnaXZlX2J1dHRvbnMgYiAocCA6IFBsYXllci50KSBuID1cbiAgICBpZiBiLnVuYXNzaWduZWRfY2FjaGUgPCBuIHRoZW4gcmFpc2UgSW5zdWZmaWNpZW50X2NhY2hlXG4gICAgZWxzZSAoXG4gICAgICBwLmJ1dHRvbnNfb3duZWQgPC0gcC5idXR0b25zX293bmVkICsgbjtcbiAgICAgIGIudW5hc3NpZ25lZF9jYWNoZSA8LSBiLnVuYXNzaWduZWRfY2FjaGUgLSBuKVxuXG4gIGxldCB0YWtlX2J1dHRvbnMgYiAocCA6IFBsYXllci50KSBuID1cbiAgICBpZiBwLmJ1dHRvbnNfb3duZWQgPCBuIHRoZW4gcmFpc2UgSW5zdWZmaWNpZW50X2Z1bmRzXG4gICAgZWxzZSBwLmJ1dHRvbnNfb3duZWQgPC0gcC5idXR0b25zX293bmVkIC0gbjtcbiAgICBiLnVuYXNzaWduZWRfY2FjaGUgPC0gYi51bmFzc2lnbmVkX2NhY2hlICsgblxuZW5kXG5cbigqIFRva2VucyAqKVxuXG5tb2R1bGUgVG9rZW4gPSBzdHJ1Y3RcbiAgdHlwZSB0aW1lX3Rva2VuID0geyBwb3NpdGlvbiA6IGludDsgb3duZWRfYnkgOiBQbGF5ZXIudDsgY29sb3IgOiBzdHJpbmcgfVxuICBbQEBkZXJpdmluZyBzZXhwLCBjb21wYXJlLCBlcXVhbF1cblxuICB0eXBlIG5ldXRyYWxfdG9rZW4gPSB7IHBvcyA6IGludCB9IFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIHR5cGUgdCA9IFRpbWVUb2tlbiBvZiB0aW1lX3Rva2VuIHwgTmV1dHJhbFRva2VuIG9mIG5ldXRyYWxfdG9rZW5cbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgbGV0IG1vdmVfdG9rZW4gYiAodCA6IHRpbWVfdG9rZW4pIChvcHAgOiB0aW1lX3Rva2VuKSA9XG4gICAgbGV0IG9wcF9wb3MgPSBvcHAucG9zaXRpb24gaW5cbiAgICBsZXQgY3Vycl9wb3MgPSB0LnBvc2l0aW9uIGluXG4gICAgbGV0IGRpc3RhbmNlID0gYWJzIChvcHBfcG9zIC0gY3Vycl9wb3MpIGluXG4gICAgQnV0dG9uLmdpdmVfYnV0dG9ucyBiIHQub3duZWRfYnkgKGRpc3RhbmNlICsgMSk7XG4gICAgbGV0IG5ld190b2tlbiA9IHsgdCB3aXRoIHBvc2l0aW9uID0gb3BwX3BvcyArIDEgfSBpblxuICAgIG5ld190b2tlblxuXG4gIGxldCBtb3ZlX3Rva2VuX2FmdGVyX3BhdGNoIHQgbiA9XG4gICAgbGV0IG5ld190b2tlbiA9IHsgdCB3aXRoIHBvc2l0aW9uID0gdC5wb3NpdGlvbiArIG4gfSBpblxuICAgIG5ld190b2tlblxuXG4gIGxldCBtb3ZlX25ldXRfdG9rZW4gbiA9IHsgcG9zID0gbiB9XG5lbmRcblxuKCogR2FtZSBQaWVjZXMgKilcblxubW9kdWxlIEdhbWVfcGllY2VzID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBwbGF5ZXIxIDogUGxheWVyLnQ7XG4gICAgcGxheWVyMiA6IFBsYXllci50O1xuICAgIHRpbWVfcGllY2UxIDogVG9rZW4udGltZV90b2tlbjtcbiAgICB0aW1lX3BpZWNlMiA6IFRva2VuLnRpbWVfdG9rZW47XG4gICAgbmV1dHJhbF9waWVjZSA6IFRva2VuLm5ldXRyYWxfdG9rZW47XG4gICAgcGF0Y2hfcGllY2VzIDogUGF0Y2gudCBsaXN0O1xuICAgIHBhdGNoZXNfcmVtYWluaW5nIDogaW50IGxpc3Q7XG4gICAgbWFpbl9ib2FyZCA6IEdhbWVfYm9hcmQubWFpbl9ib2FyZDtcbiAgICBxdWlsdF9ib2FyZDEgOiBHYW1lX2JvYXJkLnF1aWx0X2JvYXJkO1xuICAgIHF1aWx0X2JvYXJkMiA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQ7XG4gICAgYnV0dG9ucyA6IEJ1dHRvbi50O1xuICB9XG4gIFtAQGRlcml2aW5nIHNleHAsIGNvbXBhcmUsIGVxdWFsXVxuXG4gIGxldCBzZXR1cF9nYW1lIHAxX25hbWUgcDJfbmFtZSBjb2xvcjEgY29sb3IyID1cbiAgICBsZXQgcmVtYWluaW5nID1cbiAgICAgIFtcbiAgICAgICAgMTtcbiAgICAgICAgMjtcbiAgICAgICAgMztcbiAgICAgICAgNDtcbiAgICAgICAgNTtcbiAgICAgICAgNjtcbiAgICAgICAgNztcbiAgICAgICAgODtcbiAgICAgICAgOTtcbiAgICAgICAgMTA7XG4gICAgICAgIDExO1xuICAgICAgICAxMjtcbiAgICAgICAgMTM7XG4gICAgICAgIDE0O1xuICAgICAgICAxNTtcbiAgICAgICAgMTY7XG4gICAgICAgIDE3O1xuICAgICAgICAxODtcbiAgICAgICAgMTk7XG4gICAgICAgIDIwO1xuICAgICAgICAyMTtcbiAgICAgICAgMjI7XG4gICAgICAgIDIzO1xuICAgICAgICAyNDtcbiAgICAgICAgMjU7XG4gICAgICAgIDI2O1xuICAgICAgICAyNztcbiAgICAgICAgMjg7XG4gICAgICAgIDI5O1xuICAgICAgICAzMDtcbiAgICAgIF1cbiAgICBpblxuICAgIGxldCBwbGF5ZXJfMSA9XG4gICAgICB7XG4gICAgICAgIFBsYXllci5wbGF5ZXJfbnVtID0gMTtcbiAgICAgICAgUGxheWVyLnBsYXllcl9uYW1lID0gcDFfbmFtZTtcbiAgICAgICAgUGxheWVyLmJ1dHRvbnNfb3duZWQgPSA1O1xuICAgICAgICBQbGF5ZXIuc2NvcmUgPSAwO1xuICAgICAgfVxuICAgIGluXG4gICAgbGV0IHBsYXllcl8yID1cbiAgICAgIHtcbiAgICAgICAgUGxheWVyLnBsYXllcl9udW0gPSAyO1xuICAgICAgICBQbGF5ZXIucGxheWVyX25hbWUgPSBwMl9uYW1lO1xuICAgICAgICBQbGF5ZXIuYnV0dG9uc19vd25lZCA9IDU7XG4gICAgICAgIFBsYXllci5zY29yZSA9IDA7XG4gICAgICB9XG4gICAgaW5cbiAgICBsZXQgdGltZV9waWVjZV8xIDogVG9rZW4udGltZV90b2tlbiA9XG4gICAgICB7IHBvc2l0aW9uID0gMTsgb3duZWRfYnkgPSBwbGF5ZXJfMTsgY29sb3IgPSBjb2xvcjEgfVxuICAgIGluXG4gICAgbGV0IHRpbWVfcGllY2VfMiA6IFRva2VuLnRpbWVfdG9rZW4gPVxuICAgICAgeyBwb3NpdGlvbiA9IDE7IG93bmVkX2J5ID0gcGxheWVyXzI7IGNvbG9yID0gY29sb3IyIH1cbiAgICBpblxuICAgIGxldCBwYXRjaGVzIDogUGF0Y2gudCBsaXN0ID0gUGF0Y2guaW5pdF9wYXRjaGVzICgpIGluXG4gICAgbGV0IG5ldXRfcG9zID0gUGF0Y2guZmluZF9pbml0aWFsX25ldXRfcG9zIHBhdGNoZXMgaW5cbiAgICBsZXQgbmV1dHJhbCA9IHsgVG9rZW4ucG9zID0gbmV1dF9wb3MgfSBpblxuICAgIGxldCBtYWluX2JvYXJkIDogR2FtZV9ib2FyZC5tYWluX2JvYXJkID0geyBzcXVhcmVzID0gNjQ7IHNwZWNpYWxfcGF0Y2hfbG9jcyA9IFtdIH0gaW5cbiAgICBsZXQgcXVpbHRfYm9hcmRfMSA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQgPSB7IHNxdWFyZXMgPSA5OyBmaWxsZWRfc3F1YXJlcyA9IFtdIH0gaW5cbiAgICBsZXQgcXVpbHRfYm9hcmRfMiA6IEdhbWVfYm9hcmQucXVpbHRfYm9hcmQgPSB7IHNxdWFyZXMgPSA5OyBmaWxsZWRfc3F1YXJlcyA9IFtdIH0gaW5cbiAgICBsZXQgYiA6IEJ1dHRvbi50ID0geyB1bmFzc2lnbmVkX2NhY2hlID0gMTUyIH0gaW5cbiAgICBsZXQgZ2FtZV9waWVjZXMgPVxuICAgICAge1xuICAgICAgICBwbGF5ZXIxID0gcGxheWVyXzE7XG4gICAgICAgIHBsYXllcjIgPSBwbGF5ZXJfMjtcbiAgICAgICAgdGltZV9waWVjZTEgPSB0aW1lX3BpZWNlXzE7XG4gICAgICAgIHRpbWVfcGllY2UyID0gdGltZV9waWVjZV8yO1xuICAgICAgICBuZXV0cmFsX3BpZWNlID0gbmV1dHJhbDtcbiAgICAgICAgcGF0Y2hfcGllY2VzID0gcGF0Y2hlcztcbiAgICAgICAgcGF0Y2hlc19yZW1haW5pbmcgPSByZW1haW5pbmc7XG4gICAgICAgIG1haW5fYm9hcmQ7XG4gICAgICAgIHF1aWx0X2JvYXJkMSA9IHF1aWx0X2JvYXJkXzE7XG4gICAgICAgIHF1aWx0X2JvYXJkMiA9IHF1aWx0X2JvYXJkXzI7XG4gICAgICAgIGJ1dHRvbnMgPSBiO1xuICAgICAgfVxuICAgIGluXG4gICAgZ2FtZV9waWVjZXNcblxuICBsZXQgZ2V0X2lucHV0X2xpbmUgKCkgPVxuICAgIE91dF9jaGFubmVsLmZsdXNoIHN0ZG91dDtcbiAgICBJbl9jaGFubmVsLmlucHV0X2xpbmVfZXhuIEluX2NoYW5uZWwuc3RkaW5cblxuICBsZXQgZ2F0aGVyX2luZm8gKCkgPVxuICAgIHByaW50X3N0cmluZyBcIlBsZWFzZSBlbnRlciBwbGF5ZXIgMSdzIG5hbWU6IFwiO1xuICAgIGxldCBwMV9uYW1lID0gZ2V0X2lucHV0X2xpbmUgKCkgaW5cbiAgICBwcmludF9zdHJpbmcgXCJQbGVhc2UgZW50ZXIgcGxheWVyIDEncyB0b2tlbiBjb2xvcjogXCI7XG4gICAgbGV0IHAxX2NvbG9yID0gZ2V0X2lucHV0X2xpbmUgKCkgaW5cbiAgICBwcmludF9zdHJpbmcgXCJQbGVhc2UgZW50ZXIgcGxheWVyIDIncyBuYW1lOiBcIjtcbiAgICBsZXQgcDJfbmFtZSA9IGdldF9pbnB1dF9saW5lICgpIGluXG4gICAgcHJpbnRfc3RyaW5nIFwiUGxlYXNlIGVudGVyIHBsYXllciAyJ3MgdG9rZW4gY29sb3I6IFwiO1xuICAgIGxldCBwMl9jb2xvciA9IGdldF9pbnB1dF9saW5lICgpIGluXG4gICAgKHAxX25hbWUsIHAxX2NvbG9yLCBwMl9uYW1lLCBwMl9jb2xvcilcbmVuZFxuXG4oKiBHYW1lIFN0YXRlICopXG5cbm1vZHVsZSBHYW1lX3N0YXRlID0gc3RydWN0XG4gIHR5cGUgdCA9IHtcbiAgICBtYiA6IEdhbWVfYm9hcmQubWFpbl9ib2FyZDtcbiAgICBwMXFiIDogR2FtZV9ib2FyZC5xdWlsdF9ib2FyZDtcbiAgICBwMnFiIDogR2FtZV9ib2FyZC5xdWlsdF9ib2FyZDtcbiAgICBiYyA6IEJ1dHRvbi50O1xuICAgIHR1cm4gOiBQbGF5ZXIudDtcbiAgICB0azEgOiBUb2tlbi50aW1lX3Rva2VuO1xuICAgIHRrMiA6IFRva2VuLnRpbWVfdG9rZW47XG4gICAgbmV1dCA6IFRva2VuLm5ldXRyYWxfdG9rZW47XG4gICAgbXV0YWJsZSBwYXRjaGVzIDogUGF0Y2gudCBsaXN0O1xuICAgIHBhdGNoZXNfcmVtYWluaW5nIDogaW50IGxpc3Q7XG4gIH1cbiAgW0BAZGVyaXZpbmcgc2V4cCwgY29tcGFyZSwgZXF1YWxdXG5cbiAgbGV0IHVwZGF0ZSBzdCBxYjEgcWIyIGJjYWNoZSB0dXJuIHR0MSB0dDIgbmV1dCBwIHJlbSA9XG4gICAge1xuICAgICAgc3Qgd2l0aFxuICAgICAgcDFxYiA9IHFiMTtcbiAgICAgIHAycWIgPSBxYjI7XG4gICAgICBiYyA9IGJjYWNoZTtcbiAgICAgIHR1cm47XG4gICAgICB0azEgPSB0dDE7XG4gICAgICB0azIgPSB0dDI7XG4gICAgICBuZXV0O1xuICAgICAgcGF0Y2hlcyA9IHA7XG4gICAgICBwYXRjaGVzX3JlbWFpbmluZyA9IHJlbTtcbiAgICB9XG5lbmRcblxuKCogTW92ZSAqKVxuXG5tb2R1bGUgTW92ZSA9IHN0cnVjdFxuICB0eXBlIHQgPSBBZHZhbmNlIHwgUGxhY2VQYXRjaFxuXG4gIGxldCBhZHZhbmNlX29uX2JvYXJkIGIgcDF0IHAydCA9IFRva2VuLm1vdmVfdG9rZW4gYiBwMXQgcDJ0XG5cbiAgZXhjZXB0aW9uIE5vX3BhdGNoZXNfbGVmdFxuICBleGNlcHRpb24gUGF0Y2hfYWxyZWFkeV90YWtlblxuXG4gIGxldCByZWMgcGxfcmVtb3ZlX2F0IGkgcGwgPVxuICAgIG1hdGNoIHBsIHdpdGhcbiAgICB8IFtdIC0+IFtdXG4gICAgfCAoaCA6IFBhdGNoLnQpIDo6IHQgd2hlbiBoLnBvc19hcm91bmRfYm9hcmQgPSBpIC0+IHRcbiAgICB8IGggOjogdCAtPiBoIDo6IHBsX3JlbW92ZV9hdCBpIHRcblxuICBsZXQgcmVjIHJlbWxfcmVtb3ZlX2F0IGkgcmVtX2xpc3QgPVxuICAgIG1hdGNoIHJlbV9saXN0IHdpdGhcbiAgICB8IFtdIC0+IFtdXG4gICAgfCBoIDo6IHQgd2hlbiBoID0gaSAtPiB0XG4gICAgfCBoIDo6IHQgLT4gaCA6OiByZW1sX3JlbW92ZV9hdCBpIHRcblxuICBsZXQgcmVjIHRha2VfcGF0Y2ggKHBsIDogUGF0Y2gudCBsaXN0KSBjaG9pY2UgPVxuICAgIG1hdGNoIHBsIHdpdGhcbiAgICB8IFtdIC0+IHJhaXNlIE5vX3BhdGNoZXNfbGVmdFxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgaWYgaGQucG9zX2Fyb3VuZF9ib2FyZCA9IGNob2ljZSB0aGVuXG4gICAgICAgICAgbWF0Y2ggaGQuc2hhcGUgd2l0aFxuICAgICAgICAgIHwgRW1wdHkgLT4gcmFpc2UgUGF0Y2hfYWxyZWFkeV90YWtlblxuICAgICAgICAgIHwgXyAtPiBoZFxuICAgICAgICBlbHNlIHRha2VfcGF0Y2ggdGwgY2hvaWNlXG5cbiAgZXhjZXB0aW9uIEludmFsaWRfcGF0Y2hfY2hvaWNlXG5cbiAgbGV0IGNob29zZV9wYXRjaCA/KHJlYWRfaW50ID0gZGVmYXVsdF9yZWFkX2ludCkgPyhwcCA9IGRlZmF1bHRfcHJpbnQpIChjMSwgYzIsIGMzKSA9XG4gICAgcHAgXCJQbGVhc2UgY2hvb3NlIGEgcGF0Y2g6IFxcblwiO1xuICAgIHBwIChQcmludGYuc3ByaW50ZiBcIlxcdDE6ICVkXFxuXFx0MjogJWRcXG5cXHQzOiAlZFwiIGMxIGMyIGMzKTtcbiAgICBtYXRjaCByZWFkX2ludCAoKSB3aXRoXG4gICAgfCAxIC0+IGMxXG4gICAgfCAyIC0+IGMyXG4gICAgfCAzIC0+IGMzXG4gICAgfCBfIC0+IHJhaXNlIEludmFsaWRfcGF0Y2hfY2hvaWNlXG5cbiAgbGV0IGNob29zZV9tb3ZlIHJpbnQgcHIgc3RhdGUgbXYgciBjID1cbiAgICBsZXQgcGxheWVyX21vdmluZyA9IHN0YXRlLkdhbWVfc3RhdGUudHVybiBpblxuICAgIGxldCBwbGF5ZXIgPSBwbGF5ZXJfbW92aW5nLnBsYXllcl9udW0gaW5cbiAgICBsZXQgcDF0ID0gc3RhdGUuR2FtZV9zdGF0ZS50azEgaW5cbiAgICBsZXQgcDJ0ID0gc3RhdGUuR2FtZV9zdGF0ZS50azIgaW5cbiAgICBsZXQgcHFiID0gaWYgcGxheWVyID0gMSB0aGVuIHN0YXRlLnAxcWIgZWxzZSBzdGF0ZS5wMnFiIGluXG4gICAgbGV0IHBhdGNoZXMgPSBzdGF0ZS5wYXRjaGVzIGluXG4gICAgbGV0IHJlbWFpbmluZ19wYXRjaGVzID0gc3RhdGUucGF0Y2hlc19yZW1haW5pbmcgaW5cbiAgICBsZXQgbmV1dCA9IHN0YXRlLm5ldXQgaW5cbiAgICBtYXRjaCBtdiB3aXRoXG4gICAgfCBBZHZhbmNlIC0+XG4gICAgICAgIGxldCBuZXdfdG9rZW4gPVxuICAgICAgICAgIGFkdmFuY2Vfb25fYm9hcmQgc3RhdGUuR2FtZV9zdGF0ZS5iY1xuICAgICAgICAgICAgKGlmIHBsYXllciA9IDEgdGhlbiBwMXQgZWxzZSBwMnQpXG4gICAgICAgICAgICAoaWYgcGxheWVyID0gMSB0aGVuIHAydCBlbHNlIHAxdClcbiAgICAgICAgaW5cbiAgICAgICAgbGV0IG5leHRfdHVybiA9XG4gICAgICAgICAgaWYgcGxheWVyID0gMSB0aGVuXG4gICAgICAgICAgICBpZiBuZXdfdG9rZW4ucG9zaXRpb24gPCBwMnQucG9zaXRpb24gdGhlbiBwMXQub3duZWRfYnlcbiAgICAgICAgICAgIGVsc2UgaWYgcDJ0LnBvc2l0aW9uIDwgbmV3X3Rva2VuLnBvc2l0aW9uIHRoZW4gcDJ0Lm93bmVkX2J5XG4gICAgICAgICAgICBlbHNlIHAxdC5vd25lZF9ieVxuICAgICAgICAgIGVsc2UgaWYgbmV3X3Rva2VuLnBvc2l0aW9uIDwgcDF0LnBvc2l0aW9uIHRoZW4gcDJ0Lm93bmVkX2J5XG4gICAgICAgICAgZWxzZSBpZiBwMXQucG9zaXRpb24gPCBuZXdfdG9rZW4ucG9zaXRpb24gdGhlbiBwMXQub3duZWRfYnlcbiAgICAgICAgICBlbHNlIHAydC5vd25lZF9ieVxuICAgICAgICBpblxuICAgICAgICBpZiBwbGF5ZXIgPSAxIHRoZW5cbiAgICAgICAgICBsZXQgdXBkX3N0ID1cbiAgICAgICAgICAgIEdhbWVfc3RhdGUudXBkYXRlIHN0YXRlIHN0YXRlLnAxcWIgc3RhdGUucDJxYiBzdGF0ZS5iYyBuZXh0X3R1cm4gbmV3X3Rva2VuIHAydFxuICAgICAgICAgICAgICBuZXV0IHN0YXRlLnBhdGNoZXMgc3RhdGUucGF0Y2hlc19yZW1haW5pbmdcbiAgICAgICAgICBpblxuICAgICAgICAgIHVwZF9zdFxuICAgICAgICBlbHNlXG4gICAgICAgICAgbGV0IHVwZF9zdCA9XG4gICAgICAgICAgICBHYW1lX3N0YXRlLnVwZGF0ZSBzdGF0ZSBzdGF0ZS5wMXFiIHN0YXRlLnAycWIgc3RhdGUuYmMgbmV4dF90dXJuIHAxdCBuZXdfdG9rZW5cbiAgICAgICAgICAgICAgbmV1dCBzdGF0ZS5wYXRjaGVzIHN0YXRlLnBhdGNoZXNfcmVtYWluaW5nXG4gICAgICAgICAgaW5cbiAgICAgICAgICB1cGRfc3RcbiAgICB8IFBsYWNlUGF0Y2ggLT5cbiAgICAgICAgbGV0IG5ldXRfcG9zID0gbmV1dC5wb3MgaW5cbiAgICAgICAgbGV0IG8xLCBvMiwgbzMgPSBQYXRjaC5nZXRfdGhyZWUgbmV1dF9wb3MgcmVtYWluaW5nX3BhdGNoZXMgaW5cbiAgICAgICAgbGV0IGNob2ljZSA9IGNob29zZV9wYXRjaCB+cmVhZF9pbnQ6cmludCB+cHA6cHIgKG8xLCBvMiwgbzMpIGluXG4gICAgICAgIGxldCBwID0gdGFrZV9wYXRjaCBwYXRjaGVzIGNob2ljZSBpblxuICAgICAgICBsZXQgcHBzID0gcGxfcmVtb3ZlX2F0IGNob2ljZSBwYXRjaGVzIGluXG4gICAgICAgIGxldCB1cGRfcmVtX2xpc3QgPSByZW1sX3JlbW92ZV9hdCBjaG9pY2UgcmVtYWluaW5nX3BhdGNoZXMgaW5cbiAgICAgICAgbGV0IHFiID0gR2FtZV9ib2FyZC5wbGFjZV9wYXRjaF9vbl9xdWlsdF9ib2FyZCBwcWIgcC5zaGFwZSByIGMgaW5cbiAgICAgICAgQnV0dG9uLnRha2VfYnV0dG9ucyBzdGF0ZS5iYyBwbGF5ZXJfbW92aW5nIHAuY29zdDtcbiAgICAgICAgbGV0IG5ld190b2tlbiA9XG4gICAgICAgICAgVG9rZW4ubW92ZV90b2tlbl9hZnRlcl9wYXRjaCAoaWYgcGxheWVyID0gMSB0aGVuIHAxdCBlbHNlIHAydCkgcC5tb3ZlX251bVxuICAgICAgICBpblxuICAgICAgICBsZXQgbmV4dF90dXJuID1cbiAgICAgICAgICBpZiBwbGF5ZXIgPSAxIHRoZW5cbiAgICAgICAgICAgIGlmIG5ld190b2tlbi5wb3NpdGlvbiA8IHAydC5wb3NpdGlvbiB0aGVuIHAxdC5vd25lZF9ieVxuICAgICAgICAgICAgZWxzZSBpZiBwMnQucG9zaXRpb24gPCBuZXdfdG9rZW4ucG9zaXRpb24gdGhlbiBwMnQub3duZWRfYnlcbiAgICAgICAgICAgIGVsc2UgcDF0Lm93bmVkX2J5XG4gICAgICAgICAgZWxzZSBpZiBuZXdfdG9rZW4ucG9zaXRpb24gPCBwMXQucG9zaXRpb24gdGhlbiBwMnQub3duZWRfYnlcbiAgICAgICAgICBlbHNlIGlmIHAxdC5wb3NpdGlvbiA8IG5ld190b2tlbi5wb3NpdGlvbiB0aGVuIHAxdC5vd25lZF9ieVxuICAgICAgICAgIGVsc2UgcDJ0Lm93bmVkX2J5XG4gICAgICAgIGluXG4gICAgICAgIGxldCB1cGRhdGVkX25ldXQgPSBUb2tlbi5tb3ZlX25ldXRfdG9rZW4gKHAucG9zX2Fyb3VuZF9ib2FyZCArIDEpIGluXG4gICAgICAgIGxldCB1cGRfc3RhdGUgPVxuICAgICAgICAgIGlmIHBsYXllciA9IDEgdGhlblxuICAgICAgICAgICAgR2FtZV9zdGF0ZS51cGRhdGUgc3RhdGUgcWIgc3RhdGUucDJxYiBzdGF0ZS5iYyBuZXh0X3R1cm4gbmV3X3Rva2VuIHAydFxuICAgICAgICAgICAgICB1cGRhdGVkX25ldXQgcHBzIHVwZF9yZW1fbGlzdFxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIEdhbWVfc3RhdGUudXBkYXRlIHN0YXRlIHN0YXRlLnAxcWIgcWIgc3RhdGUuYmMgbmV4dF90dXJuIHAxdCBuZXdfdG9rZW5cbiAgICAgICAgICAgICAgdXBkYXRlZF9uZXV0IHBwcyB1cGRfcmVtX2xpc3RcbiAgICAgICAgaW5cbiAgICAgICAgdXBkX3N0YXRlXG5lbmRcblxubGV0IF9pbml0ICgpID1cbiAgbGV0IG5hbWUxLCBjb2xvcjEsIG5hbWUyLCBjb2xvcjIgPSBHYW1lX3BpZWNlcy5nYXRoZXJfaW5mbyAoKSBpblxuICBsZXQgcGllY2VzID0gR2FtZV9waWVjZXMuc2V0dXBfZ2FtZSBuYW1lMSBjb2xvcjEgbmFtZTIgY29sb3IyIGluXG4gIHtcbiAgICBHYW1lX3N0YXRlLmJjID0gcGllY2VzLmJ1dHRvbnM7XG4gICAgR2FtZV9zdGF0ZS5tYiA9IHBpZWNlcy5tYWluX2JvYXJkO1xuICAgIEdhbWVfc3RhdGUubmV1dCA9IHBpZWNlcy5uZXV0cmFsX3BpZWNlO1xuICAgIEdhbWVfc3RhdGUucDFxYiA9IHBpZWNlcy5xdWlsdF9ib2FyZDE7XG4gICAgR2FtZV9zdGF0ZS5wMnFiID0gcGllY2VzLnF1aWx0X2JvYXJkMjtcbiAgICBHYW1lX3N0YXRlLnBhdGNoZXMgPSBwaWVjZXMucGF0Y2hfcGllY2VzO1xuICAgIEdhbWVfc3RhdGUucGF0Y2hlc19yZW1haW5pbmcgPSBwaWVjZXMucGF0Y2hlc19yZW1haW5pbmc7XG4gICAgR2FtZV9zdGF0ZS50azEgPSBwaWVjZXMudGltZV9waWVjZTE7XG4gICAgR2FtZV9zdGF0ZS50azIgPSBwaWVjZXMudGltZV9waWVjZTI7XG4gICAgR2FtZV9zdGF0ZS50dXJuID0gcGllY2VzLnBsYXllcjE7XG4gIH1cbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X0NodW5reUxSZXYiLCJjc3RfQ2h1bmt5WmlnIiwiY3N0X0Nvcm5lciIsImNzdF9Db3JuZXJSZXYiLCJjc3RfQ3Jvc3MiLCJjc3RfRCIsImNzdF9FbXB0eSIsImNzdF9IIiwiY3N0X0kiLCJjc3RfSU51YiIsImNzdF9MIiwiY3N0X0xIYWxmSCIsImNzdF9MUmV2IiwiY3N0X0xvbmdJIiwiY3N0X0xvbmdMIiwiY3N0X01haW5Cb2FyZCIsImNzdF9OZXV0cmFsVG9rZW4iLCJjc3RfUGF0Y2h3b3JrX0h3Ml9wYXRjaHdvcmtfbG8iLCJjc3RfUGx1cyIsImNzdF9Qcm9uZyIsImNzdF9RdWlsdEJvYXJkIiwiY3N0X1IiLCJjc3RfUyIsImNzdF9TRCIsImNzdF9TSGFsZkgiLCJjc3RfU0wiLCJjc3RfU0xWZXJ0IiwiY3N0X1NSIiwiY3N0X1NVIiwiY3N0X1Nob3J0SSIsImNzdF9TaG9ydFQiLCJjc3RfU21hbGxJIiwiY3N0X1NxdWFyZSIsImNzdF9TcXVhcmVIaWdoRml2ZSIsImNzdF9TcXVhcmVOdWIiLCJjc3RfU3R1YmJ5VCIsImNzdF9UIiwiY3N0X1RDcm9zcyIsImNzdF9UaW1lVG9rZW4iLCJjc3RfVSIsImNzdF9WaW5lIiwiY3N0X1dpZGVQbHVzIiwiY3N0X1dpZGVTdHViYnlUIiwiY3N0X1ppZyIsImNzdF9aaWdSZXYiLCJjc3RfWmlnWmFnIiwiY3N0X2JjIiwiY3N0X2J1dHRvbnMiLCJjc3RfYnV0dG9uc19vd25lZCIsImNzdF9jaHVua3lMUmV2IiwiY3N0X2NodW5reVppZyIsImNzdF9jb2xvciIsImNzdF9jb3JuZXIiLCJjc3RfY29ybmVyUmV2IiwiY3N0X2Nvc3QiLCJjc3RfY3Jvc3MiLCJjc3RfZW1wdHkiLCJjc3RfZmlsbGVkX3NxdWFyZXMiLCJjc3RfaCIsImNzdF9pIiwiY3N0X2lOdWIiLCJjc3RfaW5jb21lIiwiY3N0X2wiLCJjc3RfbEhhbGZIIiwiY3N0X2xSZXYiLCJjc3RfbG9uZ0kiLCJjc3RfbG9uZ0wiLCJjc3RfbWFpbkJvYXJkIiwiY3N0X21haW5fYm9hcmQiLCJjc3RfbWIiLCJjc3RfbW92ZV9udW0iLCJjc3RfbmV1dCIsImNzdF9uZXV0cmFsVG9rZW4iLCJjc3RfbmV1dHJhbF9waWVjZSIsImNzdF9vd25lZF9ieSIsImNzdF9wMXFiIiwiY3N0X3AycWIiLCJjc3RfcGF0Y2hfcGllY2VzIiwiY3N0X3BhdGNoZXMiLCJjc3RfcGF0Y2hlc19yZW1haW5pbmciLCJjc3RfcGF0Y2h3b3JrIiwiY3N0X3BsYXllcjEiLCJjc3RfcGxheWVyMiIsImNzdF9wbGF5ZXJfbmFtZSIsImNzdF9wbGF5ZXJfbnVtIiwiY3N0X3BsdXMiLCJjc3RfcG9zIiwiY3N0X3Bvc19hcm91bmRfYm9hcmQiLCJjc3RfcG9zaXRpb24iLCJjc3RfcHJvbmciLCJjc3RfcXVpbHRCb2FyZCIsImNzdF9xdWlsdF9ib2FyZDEiLCJjc3RfcXVpbHRfYm9hcmQyIiwiY3N0X3MiLCJjc3Rfc0hhbGZIIiwiY3N0X3NMVmVydCIsImNzdF9zY29yZSIsImNzdF9zaGFwZSIsImNzdF9zaG9ydEkiLCJjc3Rfc2hvcnRUIiwiY3N0X3NtYWxsSSIsImNzdF9zcGVjaWFsX3BhdGNoX2xvY3MiLCJjc3Rfc3F1YXJlIiwiY3N0X3NxdWFyZUhpZ2hGaXZlIiwiY3N0X3NxdWFyZU51YiIsImNzdF9zcXVhcmVzIiwiY3N0X3N0dWJieVQiLCJjc3RfdCIsImNzdF90Q3Jvc3MiLCJjc3RfdGltZVRva2VuIiwiY3N0X3RpbWVfcGllY2UxIiwiY3N0X3RpbWVfcGllY2UyIiwiY3N0X3RrMSIsImNzdF90azIiLCJjc3RfdHVybiIsImNzdF91bmFzc2lnbmVkX2NhY2hlIiwiY3N0X3ZpbmUiLCJjc3Rfd2lkZVBsdXMiLCJjc3Rfd2lkZVN0dWJieVQiLCJjc3RfemlnIiwiY3N0X3ppZ1JldiIsImNzdF96aWdaYWciLCJjYW1sX2ZyZXNoX29vX2lkIiwiY2FtbF9pbnRfY29tcGFyZSIsImNhbWxfbGlzdF9vZl9qc19hcnJheSIsImNhbWxfbWF5YmVfYXR0YWNoX2JhY2t0cmFjZSIsImNhbWxfc3RyaW5nX2NvbXBhcmUiLCJjYW1sX2NhbGwxIiwiZiIsImEwIiwiY2FtbF9jYWxsMiIsImExIiwiY2FtbF9jYWxsMyIsImEyIiwiZ2xvYmFsX2RhdGEiLCJyZW1haW5pbmciLCJtYWluX2JvYXJkIiwicXVpbHRfYm9hcmRfMSIsInF1aWx0X2JvYXJkXzIiLCJlcnJvcl9zb3VyY2VfMDAyIiwiZXJyb3Jfc291cmNlXzAxOSIsImVycm9yX3NvdXJjZV8wMjYiLCJzaGFwZXMiLCJlcnJvcl9zb3VyY2VfMDQ0IiwiZXJyb3Jfc291cmNlXzA2MCIsImVycm9yX3NvdXJjZV8wOTQiLCJlcnJvcl9zb3VyY2VfMTIzIiwiZXJyb3Jfc291cmNlXzEzMyIsImVycm9yX3NvdXJjZV8xNDciLCJlcnJvcl9zb3VyY2VfMTU4IiwiZXJyb3Jfc291cmNlXzE4NyIsImVycm9yX3NvdXJjZV8yMjUiLCJDb3JlIiwiQ29yZV9QcmludGYiLCJTZXhwbGliMF9TZXhwX2NvbnZfcmVjb3JkIiwiU3RkaW9fT3V0X2NoYW5uZWwiLCJTdGRpb19Jbl9jaGFubmVsIiwiU2V4cGxpYjBfU2V4cF9jb252X2Vycm9yIiwiQ29yZV9TdHJpbmciLCJQcHhfbW9kdWxlX3RpbWVyX3J1bnRpbWUiLCJQcHhfYmVuY2hfbGliX0JlbmNobWFya19hY2N1bXUiLCJQcHhfZXhwZWN0X3J1bnRpbWUiLCJQcHhfaW5saW5lX3Rlc3RfbGliIiwidF9vZl9zZXhwIiwieF8wMDMiLCJwYXJhbSIsInNjb3JlIiwiYnV0dG9uc19vd25lZCIsInBsYXllcl9uYW1lIiwicGxheWVyX251bSIsInNleHBfb2ZfdCIsInBsYXllcl9uYW1lXzAwNyIsInBsYXllcl9udW1fMDA1IiwiYnV0dG9uc19vd25lZF8wMDkiLCJzY29yZV8wMTEiLCJhcmdfMDEyIiwiYm5kc18wMDQiLCJhcmdfMDEwIiwiYXJnXzAwOCIsImFyZ18wMDYiLCJjb21wYXJlIiwiYV8wMTMiLCJiXzAxNCIsIm4iLCJlcXVhbCIsImFfMDE1IiwiYl8wMTYiLCJQbGF5ZXIiLCJwYXRjaF9zaGFwZV9vZl9zZXhwIiwic2V4cF8wMjAiLCJtYXRjaCIsInNleHBfb2ZfcGF0Y2hfc2hhcGUiLCJjb21wYXJlX3BhdGNoX3NoYXBlIiwiZXF1YWxfcGF0Y2hfc2hhcGUiLCJ4XzAyNyIsImluY29tZSIsIm1vdmVfbnVtIiwicG9zX2Fyb3VuZF9ib2FyZCIsImNvc3QiLCJzaGFwZSIsImluY29tZV8wMzciLCJtb3ZlX251bV8wMzUiLCJwb3NfYXJvdW5kX2JvYXJkXzAzMyIsImNvc3RfMDMxIiwic2hhcGVfMDI5IiwiYXJnXzAzOCIsImJuZHNfMDI4IiwiYXJnXzAzNiIsImFyZ18wMzQiLCJhcmdfMDMyIiwiYXJnXzAzMCIsImFfMDM5IiwiYl8wNDAiLCJhXzA0MSIsImJfMDQyIiwibWFpbl9ib2FyZF9vZl9zZXhwIiwieF8wNDUiLCJzcGVjaWFsX3BhdGNoX2xvY3MiLCJzcXVhcmVzIiwic2V4cF9vZl9tYWluX2JvYXJkIiwic3BlY2lhbF9wYXRjaF9sb2NzXzA0OSIsInNxdWFyZXNfMDQ3IiwiYXJnXzA1MCIsImJuZHNfMDQ2IiwiYXJnXzA0OCIsImNvbXBhcmVfbWFpbl9ib2FyZCIsImFfMDUxIiwiYl8wNTIiLCJhXzA1MyIsImJfMDU0IiwiZXF1YWxfbWFpbl9ib2FyZCIsImFfMDU1IiwiYl8wNTYiLCJhXzA1NyIsImJfMDU4IiwicXVpbHRfYm9hcmRfb2Zfc2V4cCIsInhfMDY2Iiwic2V4cF8wNjUiLCJhcmcxXzA2MiIsImFyZzBfMDYxIiwicmVzMF8wNjMiLCJyZXMxXzA2NCIsImZpbGxlZF9zcXVhcmVzIiwic2V4cF9vZl9xdWlsdF9ib2FyZCIsImZpbGxlZF9zcXVhcmVzXzA3MCIsInNxdWFyZXNfMDY4IiwiYXJnXzA3MSIsImFyZzFfMDczIiwiYXJnMF8wNzIiLCJyZXMwXzA3NCIsInJlczFfMDc1IiwiYm5kc18wNjciLCJhcmdfMDY5IiwiY29tcGFyZV9xdWlsdF9ib2FyZCIsImFfMDc2IiwiYl8wNzciLCJhXzA3OCIsImJfMDc5IiwidF8wODEiLCJ0XzA4MCIsInRfMDgzIiwidF8wODIiLCJlcXVhbF9xdWlsdF9ib2FyZCIsImFfMDg0IiwiYl8wODUiLCJhXzA4NiIsImJfMDg3IiwidF8wODkiLCJ0XzA4OCIsInRfMDkxIiwidF8wOTAiLCJzZXhwXzA5NiIsInRhZ18wOTciLCJzZXhwX2FyZ3NfMTAzIiwiYXJnMF8xMDQiLCJyZXMwXzEwNSIsInNleHBfYXJnc18wOTgiLCJhcmcwXzA5OSIsInJlczBfMTAwIiwiYXJnMF8xMDYiLCJyZXMwXzEwNyIsImFyZzBfMTA4IiwicmVzMF8xMDkiLCJhXzExMCIsImJfMTExIiwiYV8xMTIiLCJiXzExMyIsImFfMTE0IiwiYl8xMTUiLCJhXzExNiIsImJfMTE3IiwiYV8xMTgiLCJiXzExOSIsImFfMTIwIiwiYl8xMjEiLCJPdXRfb2ZfYm91bmRzIiwiUGF0Y2hfZG9lc19ub3RfZml0X3RoZXJlIiwicGxhY2VfcGF0Y2hfb25fcXVpbHRfYm9hcmQiLCJib2FyZCIsInBhdGNoIiwicm93IiwiY29sIiwicGF0Y2hEaW0iLCJ0bCIsImhkIiwiZGlyIiwiYWNjIiwic3IiLCJzYyIsImMiLCJyIiwidXBkX2NvbCIsInVwZF9yb3ciLCJuZiIsImZpbGxlZCIsInVwZF9xdWlsdF9ib2FyZCIsIm5ld19maWxsZWQiLCJoZWFkIiwibnIiLCJuYyIsInhfMTI0IiwidW5hc3NpZ25lZF9jYWNoZSIsInVuYXNzaWduZWRfY2FjaGVfMTI2IiwiYXJnXzEyNyIsImJuZHNfMTI1IiwiYV8xMjgiLCJiXzEyOSIsImFfMTMwIiwiYl8xMzEiLCJJbnN1ZmZpY2llbnRfY2FjaGUiLCJJbnN1ZmZpY2llbnRfZnVuZHMiLCJ0aW1lX3Rva2VuX29mX3NleHAiLCJ4XzEzNCIsImNvbG9yIiwib3duZWRfYnkiLCJwb3NpdGlvbiIsInNleHBfb2ZfdGltZV90b2tlbiIsImNvbG9yXzE0MCIsIm93bmVkX2J5XzEzOCIsInBvc2l0aW9uXzEzNiIsImFyZ18xNDEiLCJibmRzXzEzNSIsImFyZ18xMzkiLCJhcmdfMTM3IiwiY29tcGFyZV90aW1lX3Rva2VuIiwiYV8xNDIiLCJiXzE0MyIsImVxdWFsX3RpbWVfdG9rZW4iLCJhXzE0NCIsImJfMTQ1IiwibmV1dHJhbF90b2tlbl9vZl9zZXhwIiwieF8xNDgiLCJwb3MiLCJzZXhwX29mX25ldXRyYWxfdG9rZW4iLCJwb3NfMTUwIiwiYXJnXzE1MSIsImJuZHNfMTQ5IiwiY29tcGFyZV9uZXV0cmFsX3Rva2VuIiwiYV8xNTIiLCJiXzE1MyIsImVxdWFsX25ldXRyYWxfdG9rZW4iLCJhXzE1NCIsImJfMTU1Iiwic2V4cF8xNjAiLCJ0YWdfMTYxIiwic2V4cF9hcmdzXzE2MiIsImFyZzBfMTYzIiwicmVzMF8xNjQiLCJzZXhwX2FyZ3NfMTY3IiwiYXJnMF8xNjgiLCJyZXMwXzE2OSIsImFyZzBfMTcwIiwicmVzMF8xNzEiLCJhcmcwXzE3MiIsInJlczBfMTczIiwiYV8xNzQiLCJiXzE3NSIsImFfMTc2IiwiYl8xNzciLCJhXzE3OCIsImJfMTc5IiwiYV8xODAiLCJiXzE4MSIsImFfMTgyIiwiYl8xODMiLCJhXzE4NCIsImJfMTg1IiwieF8xODgiLCJzd2l0Y2gkIiwiYnV0dG9ucyIsInF1aWx0X2JvYXJkMiIsInF1aWx0X2JvYXJkMSIsInBhdGNoZXNfcmVtYWluaW5nIiwicGF0Y2hfcGllY2VzIiwibmV1dHJhbF9waWVjZSIsInRpbWVfcGllY2UyIiwidGltZV9waWVjZTEiLCJwbGF5ZXIyIiwicGxheWVyMSIsImJ1dHRvbnNfMjEwIiwicXVpbHRfYm9hcmQyXzIwOCIsInF1aWx0X2JvYXJkMV8yMDYiLCJtYWluX2JvYXJkXzIwNCIsInBhdGNoZXNfcmVtYWluaW5nXzIwMiIsInBhdGNoX3BpZWNlc18yMDAiLCJuZXV0cmFsX3BpZWNlXzE5OCIsInRpbWVfcGllY2UyXzE5NiIsInRpbWVfcGllY2UxXzE5NCIsInBsYXllcjJfMTkyIiwicGxheWVyMV8xOTAiLCJhcmdfMjExIiwiYm5kc18xODkiLCJhcmdfMjA5IiwiYXJnXzIwNyIsImFyZ18yMDUiLCJhcmdfMjAzIiwiYXJnXzIwMSIsImFyZ18xOTkiLCJhcmdfMTk3IiwiYXJnXzE5NSIsImFyZ18xOTMiLCJhcmdfMTkxIiwiYV8yMTIiLCJiXzIxMyIsImFfMjE0IiwiYl8yMTUiLCJhXzIxNiIsImJfMjE3IiwiYV8yMTgiLCJiXzIxOSIsImFfMjIwIiwiYl8yMjEiLCJhXzIyMiIsImJfMjIzIiwic2V0dXBfZ2FtZSIsInAxX25hbWUiLCJwMl9uYW1lIiwiY29sb3IxIiwiY29sb3IyIiwicGxheWVyXzEiLCJwbGF5ZXJfMiIsInRpbWVfcGllY2VfMSIsInRpbWVfcGllY2VfMiIsInBhdGNoZXMiLCJwYXRjaF9hdHRyIiwicGF0Y2hfaW5jIiwicGxfdXBkYXRlZCIsIm5ldXRfcG9zIiwibmV1dHJhbCIsImIiLCJnYW1lX3BpZWNlcyIsImdldF9pbnB1dF9saW5lIiwieF8yMjYiLCJuZXV0IiwidGsyIiwidGsxIiwidHVybiIsImJjIiwicDJxYiIsInAxcWIiLCJtYiIsIm5ldXRfMjQyIiwidGsyXzI0MCIsInRrMV8yMzgiLCJ0dXJuXzIzNiIsImJjXzIzNCIsInAycWJfMjMyIiwicDFxYl8yMzAiLCJtYl8yMjgiLCJwYXRjaGVzXzI0NCIsInBhdGNoZXNfcmVtYWluaW5nXzI0NiIsImFyZ18yNDciLCJibmRzXzIyNyIsImFyZ18yNDUiLCJhcmdfMjQzIiwiYXJnXzI0MSIsImFyZ18yMzkiLCJhcmdfMjM3IiwiYXJnXzIzNSIsImFyZ18yMzMiLCJhcmdfMjMxIiwiYXJnXzIyOSIsImFfMjQ4IiwiYl8yNDkiLCJhXzI1MCIsImJfMjUxIiwiYV8yNTIiLCJiXzI1MyIsImFfMjU0IiwiYl8yNTUiLCJhXzI1NiIsImJfMjU3IiwiYV8yNTgiLCJiXzI1OSIsInVwZGF0ZSIsInN0IiwicWIxIiwicWIyIiwiYmNhY2hlIiwidHQxIiwidHQyIiwicCIsInJlbSIsIk5vX3BhdGNoZXNfbGVmdCIsIlBhdGNoX2FscmVhZHlfdGFrZW4iLCJwbF9yZW1vdmVfYXQiLCJpIiwicGwiLCJoIiwidCIsInJlbWxfcmVtb3ZlX2F0IiwicmVtX2xpc3QiLCJJbnZhbGlkX3BhdGNoX2Nob2ljZSIsImNzdF9QbGVhc2VfZW50ZXJfcGxheWVyXzFfc19uYSIsImNzdF9QbGVhc2VfZW50ZXJfcGxheWVyXzFfc190byIsImNzdF9QbGVhc2VfZW50ZXJfcGxheWVyXzJfc19uYSIsImNzdF9QbGVhc2VfZW50ZXJfcGxheWVyXzJfc190byIsImNzdF9QbGVhc2VfY2hvb3NlX2FfcGF0Y2giLCJjaG9vc2VfbW92ZSIsInJlYWRfaW50IiwicHIiLCJzdGF0ZSIsIm12IiwicGxheWVyX21vdmluZyIsInBsYXllciIsInAxdCIsInAydCIsInBxYiIsInJlbWFpbmluZ19wYXRjaGVzIiwib3BwX3BvcyIsImN1cnJfcG9zIiwiZGlzdGFuY2UiLCJuZXdfdG9rZW4iLCJuZXh0X3R1cm4iLCJ1cGRfc3QiLCJzdGFydF9vdmVyIiwicmwiLCJhIiwibzMiLCJvMiIsIm8xIiwic3dpdGNoZXIiLCJjaG9pY2UiLCJwcHMiLCJ1cGRfcmVtX2xpc3QiLCJxYiIsInVwZGF0ZWRfbmV1dCIsInVwZF9zdGF0ZSIsImluaXQiLCJwMV9jb2xvciIsInAyX2NvbG9yIiwicGllY2VzIiwiUGF0Y2h3b3JrX0h3Ml9wYXRjaHdvcmtfbG9naWMiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLGlDQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsZUFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLHVCQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsZUFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQywwQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLG9CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLHlCQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxxQkFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQywyQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxxQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLG9CQUFBO0FBQUEsSUFBQUMsb0JBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyx5QkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxlQUFBO0FBQUEsSUFBQUMsa0JBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsd0JBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBSixHQUFBQyxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsbUJBQUE7QUFBQSxJQUFBQyxtQkFBQTtBQUFBLElBQUFDLE9BQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsNEJBQUE7QUFBQSxJQUFBQyxvQkFBQTtBQUFBLElBQUFDLG1CQUFBO0FBQUEsSUFBQUMsMkJBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLDJCQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxHQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBbEUsWUFXRTtBQUFBLElBQUFoRCxvQkFBQTtBQUFBLElBQUFtQyxrQkFBQTtBQUFBLElBQUFDLGlCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBK0UsVUFBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFBQztBQUFBQSxjQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx5QkFNaUM7QUFBQTtBQUFBO0FBQUEsc0JBQUFBO0FBQUFBO0FBQUFBLGVBQUEsSUFOakM7QUFBQTtBQUFBLGVBQUFDLFFBQUE7QUFBQSxlQUFBQyxnQkFBQTtBQUFBLGVBQUFDLGNBQUE7QUFBQSxlQUFBQyxhQUFBO0FBQUE7QUFBQSxhQU1pQztBQUFBO0FBQUE7QUFBQSxZQUFBQyxVQUFBTDtBQUFBQTtBQUFBQSxLQUFBTSxrQkFOakM7QUFBQSxLQUFBQyxpQkFBQTtBQUFBLEtBQUFDLG9CQUFBO0FBQUEsS0FBQUMsWUFBQTtBQUFBLEtBQUFDLFVBSVU7QUFBQSxLQUFBQyxXQUFBO0FBQUEsS0FBQUMsVUFEQTtBQUFBLEtBQUFELGFBQUE7QUFBQSxLQUFBRSxVQURSO0FBQUEsS0FBQUYsYUFBQTtBQUFBLEtBQUFHLFVBREE7QUFBQSxLQUFBSCxhQUFBO0FBQUEsSUFERjtBQUFBLEdBTWlDO0FBQUEsWUFBQUksUUFBQUMsT0FBQUM7QUFBQUEsSUFMbEI7QUFBQSxRQUFBQyxJQUFBO0FBQUEsSUFBRyxZQUFIO0FBQUEsUUFBQUEsTUFDQztBQUFBLElBQU0sY0FBTjtBQUFBLFFBQUFBLE1BQ1U7QUFBQSxJQUFHLG1CQUNYLDhDQUhBO0FBQUE7QUFBQSxZQUFBQyxNQUFBQyxPQUFBQztBQUFBQSxJQUFIO0FBQUE7QUFBQSxJQUFHO0FBQUEsYUFDRjtBQUFBLEtBQU07QUFBQSxjQUNJO0FBQUEsTUFBRyxxREFGWDtBQUFBLGNBRVc7QUFBQTtBQUFBO0FBQUEsY0FEUDtBQUFBO0FBQUE7QUFBQSxhQURKO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsU0FEbEI7QUFBQSxRQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsb0JBQUFDO0FBQUFBO0FBQUFBO0FBQUFBLEtBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUNBUUU7QUFBQTtBQUFBLHNDQWNBO0FBQUE7QUFBQSxxQ0FsQkE7QUFBQTtBQUFBLG9DQTRCQTtBQUFBO0FBQUEsbUNBQ0E7QUFBQTtBQUFBLGtDQUhBO0FBQUE7QUFBQSxpQ0FOQTtBQUFBO0FBQUEsZ0NBRUE7QUFBQTtBQUFBLCtCQURBO0FBQUE7QUFBQSw4QkFiQTtBQUFBO0FBQUEsNkJBQ0E7QUFBQTtBQUFBLDRCQU9BO0FBQUE7QUFBQSwyQkFGQTtBQUFBO0FBQUEsMEJBakJBO0FBQUE7QUFBQSx5QkFFQTtBQUFBO0FBQUEsd0JBREE7QUFBQTtBQUFBLHVCQW1CQTtBQUFBO0FBQUEsc0JBUUE7QUFBQTtBQUFBLHFCQWJBO0FBQUE7QUFBQSxvQkFUQTtBQUFBO0FBQUEsbUJBT0E7QUFBQTtBQUFBLGtCQVJBO0FBQUE7QUFBQSxpQkFTQTtBQUFBO0FBQUEsZ0JBUUE7QUFBQTtBQUFBLGVBUUE7QUFBQTtBQUFBLGNBMUJBO0FBQUE7QUFBQSxhQVlBO0FBQUE7QUFBQSxZQVVBO0FBQUE7QUFBQSxXQWpCQTtBQUFBO0FBQUEsVUFDQTtBQUFBO0FBQUEsU0FpQkE7QUFBQTtBQUFBLFFBTUE7QUFBQTtBQUFBLE9BekJBO0FBQUE7QUFBQSxNQVVBO0FBQUE7QUFBQSxTQUFBQyxRQW5CRjtBQUFBO0FBQUE7QUFBQSxnREFtQ2lDO0FBQUEsU0FBQUEsVUFuQ2pDO0FBQUE7QUFBQTtBQUFBLGdEQW1DaUM7QUFBQSxhQW5DakM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0ZBbUNpQztBQUFBO0FBQUEscUNBbkNqQztBQUFBLCtFQW1DaUM7QUFBQTtBQUFBLG9DQW5DakM7QUFBQSw4RUFtQ2lDO0FBQUE7QUFBQSxtQ0FuQ2pDO0FBQUEsNkVBbUNpQztBQUFBO0FBQUEsa0NBbkNqQztBQUFBLDRFQW1DaUM7QUFBQTtBQUFBLGlDQW5DakM7QUFBQSwyRUFtQ2lDO0FBQUE7QUFBQSxnQ0FuQ2pDO0FBQUEsMEVBbUNpQztBQUFBO0FBQUEsK0JBbkNqQztBQUFBLHlFQW1DaUM7QUFBQTtBQUFBLDhCQW5DakM7QUFBQSx3RUFtQ2lDO0FBQUE7QUFBQSw2QkFuQ2pDO0FBQUEsdUVBbUNpQztBQUFBO0FBQUEsNEJBbkNqQztBQUFBLHNFQW1DaUM7QUFBQTtBQUFBLDJCQW5DakM7QUFBQSxxRUFtQ2lDO0FBQUE7QUFBQSwwQkFuQ2pDO0FBQUEsb0VBbUNpQztBQUFBO0FBQUEseUJBbkNqQztBQUFBLG1FQW1DaUM7QUFBQTtBQUFBLHdCQW5DakM7QUFBQSxrRUFtQ2lDO0FBQUE7QUFBQSx1QkFuQ2pDO0FBQUEsaUVBbUNpQztBQUFBO0FBQUEsc0JBbkNqQztBQUFBLGdFQW1DaUM7QUFBQTtBQUFBLHFCQW5DakM7QUFBQSwrREFtQ2lDO0FBQUE7QUFBQSxvQkFuQ2pDO0FBQUEsOERBbUNpQztBQUFBO0FBQUEsbUJBbkNqQztBQUFBLDZEQW1DaUM7QUFBQTtBQUFBLGtCQW5DakM7QUFBQSw0REFtQ2lDO0FBQUE7QUFBQSxpQkFuQ2pDO0FBQUEsMkRBbUNpQztBQUFBO0FBQUEsZ0JBbkNqQztBQUFBLDBEQW1DaUM7QUFBQTtBQUFBLGVBbkNqQztBQUFBLHlEQW1DaUM7QUFBQTtBQUFBLGNBbkNqQztBQUFBLHdEQW1DaUM7QUFBQTtBQUFBLGFBbkNqQztBQUFBLHVEQW1DaUM7QUFBQTtBQUFBLFlBbkNqQztBQUFBLHNEQW1DaUM7QUFBQTtBQUFBLFdBbkNqQztBQUFBLHFEQW1DaUM7QUFBQTtBQUFBLFVBbkNqQztBQUFBLG9EQW1DaUM7QUFBQTtBQUFBLFNBbkNqQztBQUFBLG1EQW1DaUM7QUFBQTtBQUFBLFFBbkNqQztBQUFBLGtEQW1DaUM7QUFBQTtBQUFBLE9BbkNqQztBQUFBLGlEQW1DaUM7QUFBQTtBQUFBLE1BbkNqQztBQUFBLGdEQW1DaUM7QUFBQTtBQUFBLEtBbkNqQyx5RUFtQ2lDO0FBQUE7QUFBQSxJQW5DakMsMEVBbUNpQztBQUFBO0FBQUEsWUFBQUMsb0JBQUExQjtBQUFBQSxJQW5DakM7QUFBQTtBQUFBLE9BQ0U7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQTtBQUFBLE9BQ0E7QUFBQSxlQUNBO0FBQUE7QUFBQSxHQUMrQjtBQUFBO0FBQUEsSUFBQTJCLHNCQW5DakM7QUFBQSxJQUFBbkksYUFzUUE7QUFBQSxJQUFBUyxlQUFBO0FBQUEsSUFBQWlCLHVCQUFBO0FBQUEsSUFBQWpDLFdBQUE7QUFBQSxJQUFBMkMsWUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBSSx5QkFBQTtBQUFBLElBQUFJLGNBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQWhELHFCQUFBO0FBQUEsSUFBQWdELGdCQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBd0Ysa0JBQUEsTUQ3UkY7QUFBQSxZQUFBOUIsWUFBQStCO0FBQUFBLElDNERFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBQTdCO0FBQUFBLGNBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlCQU9pQztBQUFBO0FBQUE7QUFBQSxzQkFBQUE7QUFBQUE7QUFBQUEsZUFBQSxJQVBqQztBQUFBO0FBQUE7QUFBQSxlQUFBOEIsU0FBQTtBQUFBLGVBQUFDLFdBQUE7QUFBQSxlQUFBQyxtQkFBQTtBQUFBLGVBQUFDLE9BQUE7QUFBQSxlQUFBQyxRQUFBO0FBQUE7QUFBQSxhQU9pQztBQUFBO0FBQUE7QUFBQSxZQUFBN0IsWUFBQUw7QUFBQUE7QUFBQUEsS0FBQW1DLGFBUGpDO0FBQUEsS0FBQUMsZUFBQTtBQUFBLEtBQUFDLHVCQUFBO0FBQUEsS0FBQUMsV0FBQTtBQUFBLEtBQUFDLFlBQUE7QUFBQSxLQUFBQyxVQUtFO0FBQUEsS0FBQUMsV0FBQTtBQUFBLEtBQUFDLFVBREE7QUFBQSxLQUFBRCxhQUFBO0FBQUEsS0FBQUUsVUFEQTtBQUFBLEtBQUFGLGFBQUE7QUFBQSxLQUFBRyxVQURBO0FBQUEsS0FBQUgsYUFBQTtBQUFBLEtBQUFJLFVBREE7QUFBQSxLQUFBSixhQUFBO0FBQUEsSUFERjtBQUFBLEdBT2lDO0FBQUEsWUFBQTFCLFVBQUErQixPQUFBQztBQUFBQSxJQU52QjtBQUFBLFFBQUE3QixNQUFBO0FBQUEsSUFBVyxjQUFYO0FBQUEsUUFBQUEsSUFDRDtBQUFBLElBQUcsWUFBSDtBQUFBLFFBQUFBLE1BQ1k7QUFBQSxJQUFHLGNBQUg7QUFBQSxRQUFBQSxNQUNSO0FBQUEsSUFBRyxtQkFDTCw4Q0FKVTtBQUFBO0FBQUEsWUFBQUMsUUFBQTZCLE9BQUFDO0FBQUFBLElBQVg7QUFBQTtBQUFBLElBQVc7QUFBQSxhQUNaO0FBQUEsS0FBRztBQUFBLGNBQ1M7QUFBQSxNQUFHO0FBQUEsZUFDWDtBQUFBLE9BQUcscURBSEs7QUFBQSxlQUdMO0FBQUE7QUFBQTtBQUFBLGVBRFE7QUFBQTtBQUFBO0FBQUEsY0FEWjtBQUFBO0FBQUE7QUFBQSxhQURTO0FBQUE7QUFBQTtBQUFBLFlBQUFDLG1CQUFBQztBQUFBQSxRQUFBLElBME5yQjtBQUFBLElBQ2lDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEseURBRGpDO0FBQUEsc0JBQUFuRDtBQUFBQSxjQUFBO0FBQUE7QUFBQSx5QkFDaUM7QUFBQTtBQUFBO0FBQUEsc0JBQUFBO0FBQUFBLGtCQUFBb0QscUJBRGpDLGFBQUFDLFVBQUE7QUFBQTtBQUFBLGFBQ2lDO0FBQUE7QUFBQTtBQUFBLFlBQUFDLG1CQUFBdEQ7QUFBQUE7QUFBQUEsS0FBQXVELHlCQURqQztBQUFBLEtBQUFDLGNBQUE7QUFBQSxLQUFBQyxVQUFtQztBQUFBLEtBQUFDLFdBQUE7QUFBQSxLQUFBQyxVQUFmO0FBQUEsS0FBQUQsYUFBQTtBQUFBLElBQXBCO0FBQUEsR0FDaUM7QUFBQSxZQUFBRSxtQkFBQUMsT0FBQUM7QUFBQUEsSUFESDtBQUFBLFFBQUE1QyxJQUFBO0FBQUEsSUFBRztBQUFBLGNBQTJCO0FBQUE7QUFBQTtBQUFBLHdCQUFBNkMsT0FBQUM7QUFBQUEsZ0JBQUoseUNBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUExQjtBQUFBO0FBQUEsWUFBQUMsaUJBQUFDLE9BQUFDO0FBQUFBLElBQUg7QUFBQTtBQUFBLElBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQSx3QkFBQUMsT0FBQUM7QUFBQUEsZ0JBQXVCLHlDQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBMUI7QUFBQTtBQUFBLFlBQUFDLG9CQUFBQztBQUFBQSxhQUFBLEVBQUFDO0FBQUFBLEtBR29CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBQUFDLFdBQUE7QUFBQSxTQUFBQyxXQUFBO0FBQUEsU0FBQUMsV0FBQztBQUFBLFNBQUFDLFdBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0RBQWU7QUFBQTtBQUFBLFlBQXJFO0FBQUEsSUFDaUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxREFEakM7QUFBQSxzQkFBQTVFO0FBQUFBLGNBQUE7QUFBQTtBQUFBLHlCQUNpQztBQUFBO0FBQUE7QUFBQSxzQkFBQUE7QUFBQUEsa0JBQUE2RSxpQkFEakMsYUFBQXhCLFVBQUE7QUFBQTtBQUFBLGFBQ2lDO0FBQUE7QUFBQTtBQUFBLFlBQUF5QixvQkFBQTlFO0FBQUFBO0FBQUFBLEtBQUErRSxxQkFEakM7QUFBQSxLQUFBQyxjQUFBO0FBQUEsS0FBQUM7QUFBQUEsT0FBb0M7QUFBQTtBQUFBLGtCQUFBakY7QUFBQUE7QUFBQUEsV0FBQWtGLFdBQWlCO0FBQUEsV0FBQUMsV0FBQTtBQUFBLFdBQUFDLFdBQUM7QUFBQSxXQUFBQyxXQUFBO0FBQUE7QUFBQSxTQUFlO0FBQUE7QUFBQSxLQUFBQyxXQUFqQztBQUFBLEtBQUFDLFVBQWY7QUFBQSxLQUFBRCxhQUFBO0FBQUEsSUFBckI7QUFBQSxHQUNpQztBQUFBLFlBQUFFLG9CQUFBQyxPQUFBQztBQUFBQSxJQURGO0FBQUEsUUFBQXhFLElBQUE7QUFBQSxJQUFHO0FBQUEsY0FBK0I7QUFBQTtBQUFBO0FBQUEsd0JBQUF5RSxPQUFBQztBQUFBQTtBQUFBQSxpQkFBQUMsUUFBWDtBQUFBLGlCQUFBQyxRQUFBO0FBQUEsaUJBQUFDLFFBQUE7QUFBQSxpQkFBQUMsUUFBQTtBQUFBLGlCQUFBOUUsSUFBQTtBQUFBLGdCQUFHLGlCQUFHLHNDQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBN0I7QUFBQTtBQUFBLFlBQUErRSxrQkFBQUMsT0FBQUM7QUFBQUEsSUFBSDtBQUFBO0FBQUEsSUFBRztBQUFBO0FBQUE7QUFBQTtBQUFBLHdCQUFBQyxPQUFBQztBQUFBQTtBQUFBQSxpQkFBQUMsUUFBb0I7QUFBQSxpQkFBQUMsUUFBQTtBQUFBLGlCQUFBQyxRQUFBO0FBQUEsaUJBQUFDLFFBQUE7QUFBQTtBQUFBLGdCQUFHLGlEQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBN0I7QUFBQTtBQUFBLFlBQUEzRyxZQUFBNEc7QUFBQUE7QUFBQUE7QUFBQUEsS0FHbEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaURBQ2lDO0FBQUE7QUFBQSxNQURqQztBQUFBLGdEQUNpQztBQUFBO0FBQUEsU0FBQWpGLFFBRGpDO0FBQUE7QUFBQTtBQUFBLGdEQUNpQztBQUFBLFNBQUFBLFVBRGpDO0FBQUE7QUFBQTtBQUFBLGdEQUNpQztBQUFBLFNBQUFrRixVQURqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQUFDLGdCQUFBO0FBQUEsTUFBaUM7QUFBQTtBQUFBLFFBQUFDLFdBQUE7QUFBQSxRQUFBQyxXQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEseURBQ0E7QUFBQTtBQUFBLFNBQUFDLGdCQURqQztBQUFBLEtBQVM7QUFBQTtBQUFBLE9BQUFDLFdBQUE7QUFBQSxPQUFBQyxXQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0RBQ3dCO0FBQUE7QUFBQSxJQURqQywwRUFDaUM7QUFBQTtBQUFBLFlBQUE1RyxZQUFBTDtBQUFBQSxJQURqQztBQUFBLFNBQUFrSCxXQUFBLFVBQUFDLFdBQVM7QUFBQTtBQUFBO0FBQUEsUUFBQUMsV0FBVCxVQUFBQyxXQUFpQztBQUFBO0FBQUEsR0FDQTtBQUFBLFlBQUF0RyxVQUFBdUcsT0FBQUM7QUFBQUEsSUFEakM7QUFBQTtBQUFBLFNBQUFDLFFBQUE7QUFBQSx3QkFBUztBQUFBLFNBQUFDLFFBQVQ7QUFBQSxLQUFzQix1Q0FDVztBQUFBO0FBQUEsUUFBQUMsUUFEakM7QUFBQSx1QkFBUztBQUFBLFFBQUFDLFFBQVQ7QUFBQSxJQUFpRCx3Q0FDaEI7QUFBQTtBQUFBLFlBQUF4RyxRQUFBeUcsT0FBQUM7QUFBQUEsSUFEakM7QUFBQTtBQUFBLFNBQUFDLFFBQUE7QUFBQSx3QkFBUztBQUFBLFNBQUFDLFFBQVQ7QUFBQSxLQUFzQixxQ0FDVztBQUFBO0FBQUEsUUFBQUMsUUFEakM7QUFBQSx1QkFBUztBQUFBLFFBQUFDLFFBQVQ7QUFBQSxJQUFpRCxzQ0FDaEI7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFEakM7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQSxRQTRHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFuUyxRQUFBO0FBQUEsSUFBQWtDLFFBQUE7QUFBQSxJQUFBN0IsUUFBQTtBQUFBLElBQUFXLFFBQUE7QUFBQSxJQUFBRSxTQUFBO0FBQUEsSUFB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QUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUE7QUFBQSxZQUFBQSxhQUFBO0FBQUEsb0JBQUFBLGFBQUE7QUFBQTtBQUFBLEtBcUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxZQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFBLFlBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFBLFlBQUE7QUFBQSxvQkFBQUEsWUFBQTtBQUFBO0FBQUE7QUFBQSxNQUFBbEosUUF5R0k7QUFBQSxNQUFBbUosYUFTQTtBQUFBLE1BQUE1SSxRQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUVnQjtB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QUEsV0FBQUMsU0FBQTtBQUFBO0FBQUEsV0FBQUEsU0FBQTtBQUFBLG1CQUFBQSxTQUFBO0FBQUE7QUFBQSxRQUFBbkMsS0ErQ0w7QUFBQTtBQUFBLEtBN0RaLFNBQ1E7QUFBQSxTQUFBNU0sS0FEUixPQUFBQyxPQUFBO0FBQUEsS0FHTztBQUFBLEtBQTRCO0FBQUE7QUFBQSxJQUM3QjtBQUFBLEtBQ1c7QUFBQTtBQUFBLEtBQUErTyxNQXlESDtBQUFBLEtBQUFDLGVBQ1M7QUFBQSxLQUFBQyxLQUNWO0FBQUEsS0FBQTFXLE1BQ1Q7QUFBQSxLQUFBMFEsTUFBQTtBQUFBLElBMVFEO0FBQUEsS0FBeUI7QUFBQSxJQUN2QjtBQUFBLElBQ0w7QUFBQTtBQUFBLEtBQUExUSxNQXdRcUQ7QUFBQSxLQUFBc1YsUUFFZDtBQUFBLEtBQUFPLGNBblB2QztBQUFBLEtBQUFDO0FBQUFBLE9Bc1BTO0FBQUEsVUFDRTtBQUFBO0FBQUE7QUFBQSxZQUNLO0FBQUEsVUFFRjtBQUFBO0FBQUE7QUFBQSxZQUNBO0FBQUEsS0FBQTlWLE1BR1Y7QUFBQSxLQUFBMlcsZUEzUGtCO0FBQUEsS0FBQUM7QUFBQUEsT0E2UGI7QUFBQSxVQUNEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUdKO0FBQUE7QUFBQSxZQUFBQyxLQUFBL1g7QUFBQUEsSUF6Sko7QUFBQSxRQUFBOFEsVUFDYztBQUFBLElBQ2Q7QUFBQSxRQUFBa0gsV0FDZTtBQUFBLElBQ2Y7QUFBQSxRQUFBakgsVUFDYztBQUFBLElBQ2Q7QUFBQTtBQUFBLEtBQUFrSCxXQUNlO0FBQUEsS0FBQUMsU0F1Sko7QUFBQSxJQUNiO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQVdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVEdHNCSCIsImlnbm9yZUxpc3QiOlswXX19XX0=
